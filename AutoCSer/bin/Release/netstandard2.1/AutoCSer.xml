<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.Algorithm.QuickSort">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="T:AutoCSer.Algorithm.QuickSort.Sorter`1">
            <summary>
            排序器
            </summary>
            <typeparam name="T">排序数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Algorithm.QuickSort.Sorter`1.Array">
            <summary>
            待排序数组
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.QuickSort.Sorter`1.Comparer">
            <summary>
            排序比较器
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sorter`1.#ctor(`0[],System.Func{`0,`0,System.Int32})">
            <summary>
            排序器
            </summary>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sorter`1.Sort(System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sort``1(``0[],System.Func{``0,``0,System.Int32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="T">排序数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="comparer">排序比较器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sort``1(``0[],System.Func{``0,``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="T">排序数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="comparer">排序比较器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.SortInt(System.Byte*,System.Byte*)">
            <summary>
            快速排序
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-sizeof(int)</param>
        </member>
        <member name="T:AutoCSer.Algorithm.TopologySort">
            <summary>
            拓扑排序
            </summary>
        </member>
        <member name="T:AutoCSer.Algorithm.TopologySort.Sorter`1">
            <summary>
            拓扑排序器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.graph">
            <summary>
            图
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.values">
            <summary>
            排序结果
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.index">
            <summary>
            当前排序位置
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.isDesc">
            <summary>
            是否反向排序
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.#ctor(System.Collections.Generic.Dictionary{`0,AutoCSer.ListArray{`0}},AutoCSer.LeftArray{`0}@,System.Boolean)">
            <summary>
            拓扑排序器
            </summary>
            <param name="graph">图</param>
            <param name="points">单点集合</param>
            <param name="isDesc">是否反向排序</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.Sort">
            <summary>
            拓扑排序
            </summary>
            <returns>排序结果</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.pop(`0)">
            <summary>
            排序子节点
            </summary>
            <param name="point">子节点</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.popDesc(`0)">
            <summary>
            排序子节点
            </summary>
            <param name="point">子节点</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sort``1(System.Collections.Generic.ICollection{AutoCSer.KeyValue{``0,``0}},System.Collections.Generic.HashSet{``0},System.Boolean)">
            <summary>
            拓扑排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="edges">边集合</param>
            <param name="points">无边点集合</param>
            <param name="isDesc">是否反向排序</param>
            <returns>排序结果</returns>
        </member>
        <member name="T:AutoCSer.AOT.Preserve">
            <summary>
            AOT 编译连接
            </summary>
        </member>
        <member name="F:AutoCSer.AOT.Preserve.AllMembers">
            <summary>
            是否编译连接所有成员，作用于类型
            </summary>
        </member>
        <member name="F:AutoCSer.AOT.Preserve.Conditional">
            <summary>
            当类型被引用时才编译连接，作用于成员
            </summary>
        </member>
        <member name="T:AutoCSer.ArrayValue`1">
            <summary>
            数组元素，用于一次性操作数据元素
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ArrayValue`1.Value">
            <summary>
            数组元素
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayValue`1.Pop">
            <summary>
            弹出数组元素
            </summary>
            <returns>数组元素</returns>
        </member>
        <member name="T:AutoCSer.BinaryDeserializer">
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.Config">
            <summary>
            反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.points">
            <summary>
            历史对象指针位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.Buffer">
            <summary>
            数据字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.GlobalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.bufferFixed">
            <summary>
            数据字节数组数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.start">
            <summary>
            序列化数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.End">
            <summary>
            序列化数据结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.Current">
            <summary>
            当前读取数据位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.realTypeCurrent">
            <summary>
            真实类型解析未知
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.objectReference">
            <summary>
            下一个对象引用位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.objectReferencePoint">
            <summary>
            下一个对象引用位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.State">
            <summary>
            反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.jsonState">
            <summary>
            JSON 反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.customError">
            <summary>
            自定义错误
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserialize``1(System.Byte[],System.Byte*,System.Byte*,System.Int32,``0@,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="bufferFixed"></param>
            <param name="start"></param>
            <param name="size"></param>
            <param name="value"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.checkHeaderValue(System.UInt32)">
            <summary>
            检查头部数据
            </summary>
            <param name="headerValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetContext(System.Object,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            设置上下文信息
            </summary>
            <param name="context"></param>
            <param name="config"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.freeThreadStatic">
            <summary>
            释放资源（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.FreeContext">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckNotNull``1(``0@)">
            <summary>
            检查数据类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckTryPush``1(``0@,System.Boolean@)">
            <summary>
            获取历史对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="isRealType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Constructor``1(``0@)">
            <summary>
            构造函数调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckNullPoint``1(``0@)">
            <summary>
            获取历史对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.getPoint``1(``0@)">
            <summary>
            获取历史对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.tryPush(System.Object)">
            <summary>
            添加历史对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.TryPush(System.Object)">
            <summary>
            添加历史对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.push(System.Object)">
            <summary>
            添加历史对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckNullValue">
            <summary>
            对象null值检测
            </summary>
            <returns>返回 0 表示 null</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckMemberCount(System.Int32)">
            <summary>
            检测成员数量
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.GetMemberMap``1">
            <summary>
            检测成员位图
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.realTypeObject``1">
            <summary>
            真实类型反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.RealTypeObject``1(AutoCSer.BinaryDeserializer)">
            <summary>
            真实类型反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.RealType``1(``0@)">
            <summary>
            真实类型反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NotSupport``1(``0@)">
            <summary>
            自定义反序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NotSupport``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            自定义反序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.baseDeserialize``2(``0@)">
            <summary>
            基类反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Base``2(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            基类反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.nullable``1(System.Nullable{``0}@)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Nullable``1(AutoCSer.BinaryDeserializer,System.Nullable{``0}@)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserializeArray``1(``0[]@)">
            <summary>
            数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>数组长度</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.createArray``1(``0[]@,System.Int32)">
            <summary>
            创建数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserializeArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>数组长度</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.createArray``1(AutoCSer.ListArray{``0}@,System.Int32)">
            <summary>
            创建数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.createArray``1(AutoCSer.LeftArray{``0}@,System.Int32)">
            <summary>
            创建数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.array``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Array``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.array``1(AutoCSer.ListArray{``0}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Array``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.array``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Array``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.structArray``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.structArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.structArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.nullableArray``1(System.Nullable{``0}[]@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableArray``1(AutoCSer.BinaryDeserializer,System.Nullable{``0}[]@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.nullableArray``1(AutoCSer.ListArray{System.Nullable{``0}}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Nullable{``0}}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.nullableArray``1(AutoCSer.LeftArray{System.Nullable{``0}}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Nullable{``0}}@)">
            <summary>
            数组转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.collection``2(``0@)">
            <summary>
            集合转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Collection``2(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            集合转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="deserializer"></param>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.dictionary``3(``0@)">
            <summary>
            字典反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Dictionary``3(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            字典反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="deserializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeJsonString``1(``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.checkJsonDeserializeResult(AutoCSer.Json.DeserializeResult)">
            <summary>
            检查 JSON 反序列化状态
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeJson``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeJson``1(``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByte``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByte``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShort``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShort``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Boolean@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Boolean@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Boolean[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Boolean[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Boolean}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Boolean}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Boolean}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Boolean}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Boolean}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Boolean}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Byte@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Byte@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Byte}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Byte}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.SByte@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.SByte@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.SByte}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.SByte}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int16@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int16@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Int16}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int16}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt16@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt16@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.UInt16}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt16}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Char@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Char@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Char}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Char}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize(System.Byte*,System.Byte*,System.Char*,System.Int32,System.Int32)">
            <summary>
            字符串反序列化
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="write">写入位置</param>
            <param name="length">写入长度</param>
            <param name="lengthSize">写入长度字节大小</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize(System.String@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.String@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.String@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.SubString@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.SubString@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Type@)">
            <summary>
            类型信息反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Type@)">
            <summary>
            类型信息反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">设置的自定义序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.GetBeforeMove(System.Int32)">
            <summary>
            移动读取数据位置并返回移动之前的位置
            </summary>
            <param name="size"></param>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CustomDeserialize``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(AutoCSer.SubArray{System.Byte}@,System.Boolean)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="buffer"></param>
            <param name="isBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Byte[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.String@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBufferStart">
            <summary>
            自定义序列化数据缓冲区开始处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBufferEnd(System.Byte*)">
            <summary>
            自定义序列化数据缓冲区结束处理
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.IndependentDeserialize``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            从独立数据缓冲区反序列化独立对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.InternalIndependentDeserializeNotReference``1(``0@)">
            <summary>
            从独立数据缓冲区反序列化内部成员对象（外层无引用检查）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.InternalIndependentDeserializeNotReference``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            从独立数据缓冲区反序列化内部成员对象
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="buffer">数据</param>
            <param name="value">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SimpleDeserialize``1(``0@)">
            <summary>
            从独立数据缓冲区反序列化内部成员对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SimpleDeserialize``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            从独立数据缓冲区反序列化内部成员对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">数据</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetCustomError(System.String)">
            <summary>
            设置反序列化自定义错误状态
            </summary>
            <param name="customError">自定义错误</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetCustomError(AutoCSer.JsonDeserializer)">
            <summary>
            设置反序列化自定义错误状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize``1(System.Byte[],AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="buffer">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize``1(System.Byte[],``0@,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="buffer">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.UnsafeDeserialize``1(System.Byte*,System.Int32,``0@,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="size"></param>
            <param name="value"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.ThreadStaticDeserialize``1(System.Byte[],AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="buffer">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.ThreadStaticDeserialize``1(System.Byte[],``0@,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="buffer">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinaryDeserializer.DeserializeDelegate`1">
            <summary>
            解析委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">二进制反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.DeserializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.UInt16}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt16}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt16[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt16[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.UInt16}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.UInt16}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.UInt16}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.UInt16}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.UInt16}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt16}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.UInt16[]},System.UInt16[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt64[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt64[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.UInt64}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.UInt64}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.UInt64}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.UInt64}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.UInt64}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt64}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.UInt64[]},System.UInt64[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULongMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumULongArray``1(``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULongArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumULongArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULongArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumULongArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULongArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.UInt64@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.UInt64@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt64@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt64@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.UInt64}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt64}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.UInt64@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int64@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int64@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Int64}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int64}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Int64@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt32@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt32@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.UInt32}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt32}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.UInt32@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int32@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int32@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Int32}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int32}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Int32@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Single@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Single@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Single}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Single}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Single@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Double@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Double@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Double}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Double}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Double@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Decimal@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Decimal@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Decimal}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Decimal}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Decimal@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.DateTime@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.DateTime@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.DateTime}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.DateTime}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.DateTime@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.TimeSpan@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.TimeSpan@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.TimeSpan}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.TimeSpan}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.TimeSpan@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Guid@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Guid@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Nullable{System.Guid}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Guid}@)">
            <summary>
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">整数</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Guid@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int64[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int64[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Int64}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Int64}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Int64}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Int64}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Int64}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int64}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Int64[]},System.Int64[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt32[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt32[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.UInt32}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.UInt32}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.UInt32}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.UInt32}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.UInt32}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt32}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.UInt32[]},System.UInt32[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int32[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int32[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Int32}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Int32}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Int32}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Int32}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Int32}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int32}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Int32[]},System.Int32[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Single[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Single[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Single}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Single}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Single}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Single}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Single}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Single}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Single[]},System.Single[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Double[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Double[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Double}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Double}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Double}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Double}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Double}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Double}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Double[]},System.Double[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Decimal[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Decimal[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Decimal}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Decimal}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Decimal}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Decimal}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Decimal}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Decimal}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Decimal[]},System.Decimal[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.DateTime[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.DateTime[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.DateTime}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.DateTime}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.DateTime}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.DateTime}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.DateTime}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.DateTime}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.DateTime[]},System.DateTime[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.TimeSpan[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.TimeSpan[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.TimeSpan}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.TimeSpan}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.TimeSpan}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.TimeSpan}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.TimeSpan}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.TimeSpan}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.TimeSpan[]},System.TimeSpan[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Guid[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Guid[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Guid}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Guid}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Guid}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Guid}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Guid}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Guid}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Guid[]},System.Guid[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLongMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumLongArray``1(``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLongArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumLongArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLongArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumLongArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLongArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUIntMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumUIntArray``1(``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUIntArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumUIntArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUIntArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumUIntArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUIntArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumIntMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumIntArray``1(``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumIntArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumIntArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumIntArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumIntArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumIntArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShortMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumUShortArray``1(``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShortArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumUShortArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShortArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumUShortArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShortArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShortMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumShortArray``1(``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShortArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumShortArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShortArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumShortArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShortArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByteMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumByteArray``1(``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByteArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumByteArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByteArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumByteArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByteArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByteMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumSByteArray``1(``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByteArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumSByteArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByteArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.enumSByteArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByteArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Int16}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int16}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int16[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int16[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Int16}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Int16}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Int16}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Int16}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Int16}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int16}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Int16[]},System.Int16[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.SByte}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.SByte}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.SByte[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.SByte[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.SByte}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.SByte}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.SByte}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.SByte}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.SByte}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.SByte}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.SByte[]},System.SByte[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Byte}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Byte}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Byte[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Byte[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Byte}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Byte}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Byte}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Byte}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Byte}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Byte}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Byte[]},System.Byte[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Char}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Char}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Char[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Char[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.ListArray{System.Char}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Char}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.LeftArray{System.Char}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Char}@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Char}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Char}[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Char[]},System.Char[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Int64@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Int64@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.UInt32@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.UInt32@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Int32@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Int32@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.UInt16@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.UInt16@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Int16@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Int16@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Byte@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Byte@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.SByte@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.SByte@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Boolean@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Boolean@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Single@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Single@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Double@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Double@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Decimal@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Decimal@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Char@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Char@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.DateTime@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.DateTime@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.TimeSpan@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.TimeSpan@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(System.Guid@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Guid@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="T:AutoCSer.BinarySerializeAttribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsBaseType">
            <summary>
            是否作用于未知派生类型，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsReferenceMember">
            <summary>
            是否检查相同对象引用，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsJsonMember">
            <summary>
            当没有 JSON 序列化成员时是否预留 JSON 序列化标记，默认为 false
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerializeAttribute.GetIsJsonMember">
            <summary>
            当没有 JSON 序列化成员时是否预留 JSON 序列化标记，默认为 false
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsMemberMap">
            <summary>
            是否序列化成员位图，默认为 true 在 IsAnonymousFields 为 false 时生效
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsAnonymousFields">
            <summary>
            是否选择匿名字段，默认为 false
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerializeAttribute.GetIsMemberMap">
            <summary>
            是否序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.CustomReferenceTypes">
            <summary>
            自定义序列化需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerializeConfig">
            <summary>
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.DefaultCheckDepth">
            <summary>
            默认最大节点检测深度
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.HeaderMapValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.HeaderMapAndValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.MemberMapValue">
            <summary>
            是否序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.GlobalVersionValue">
            <summary>
            是否检测全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.ObjectReference">
            <summary>
            是否存在对象引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.MemberMap">
            <summary>
            成员位图（仅支持定义字段，不支持匿名字段，也就是不支持指定属性）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.CheckReference">
            <summary>
            是否检查相同对象引用，同一个对象序列化类型将会当成不同的对象引用处理，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.IsRealType">
            <summary>
            不支持类型是否尝试转换为真实类型处理默认为 false，只有在可信任环境中才允许设置为 true，否则将产生 new 任意类型的安全漏洞
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.CheckDepth">
            <summary>
            最大节点检测深度，默认为 64（过大的深度会造成堆栈溢出，所以该序列化组件不适合序列化链表结构，如果存在该类似需求请自定义序列化转换为数组处理）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.GlobalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.StreamSeek">
            <summary>
            序列化输出缓冲区预留字节数，默认为 0 表示不预留
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializeConfig.Clone">
            <summary>
            复制序列化配置参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializeConfig.WriteHeader(AutoCSer.Memory.UnmanagedStream,System.Boolean)">
            <summary>
            写入序列化头部数据
            </summary>
            <param name="stream"></param>
            <param name="notReferenceCount"></param>
        </member>
        <member name="T:AutoCSer.BinarySerializeMemberAttribute">
            <summary>
            二进制数据序列化成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberAttribute.GlobalVersion">
            <summary>
            全局版本编号（添加字段）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberAttribute.RemoveGlobalVersion">
            <summary>
            全局版本编号（删除字段），大于添加字段全局版本编号时有效 ，静态字段不能用 public 修饰
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerializeMemberAttribute.IsRemove">
            <summary>
            字段是否已经被删除
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberAttribute.IsRemovePublic">
            <summary>
            默认为 true 表示字段删除前用 public 修饰
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberAttribute.IsJsonMember">
            <summary>
            是否采用 JSON 混合序列化
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerializeMemberAttribute.GetIsJsonMember">
            <summary>
            是否采用 JSON 混合序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberAttribute.Null">
            <summary>
            默认空配置
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerializeMemberMap">
            <summary>
            自定义序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberMap.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberMap.CurrentMemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberMap.JsonMemberMap">
            <summary>
            JSON 序列化成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializeMemberMap.#ctor(AutoCSer.Metadata.MemberMap,AutoCSer.Metadata.MemberMap,AutoCSer.Metadata.MemberMap)">
            <summary>
            自定义序列化成员位图
            </summary>
            <param name="memberMap"></param>
            <param name="currentMemberMap"></param>
            <param name="jsonMemberMap"></param>
        </member>
        <member name="T:AutoCSer.BinarySerializer">
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.NullValue">
            <summary>
            空对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.NotNullValue">
            <summary>
            非空对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.RealTypeValue">
            <summary>
            真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.arraySerializePushType">
            <summary>
            数组引用执行类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.CustomConfig">
            <summary>
            自定义全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.DefaultAttribute">
            <summary>
            默认二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CloneDefaultConfig">
            <summary>
            复制公共默认配置参数
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerializer.Stream">
            <summary>
            序列化输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.Config">
            <summary>
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.CurrentMemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.JsonMemberMap">
            <summary>
            JSON序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.jsonSerializer">
            <summary>
            JSON序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.points">
            <summary>
            历史对象指针位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.isObjectReference">
            <summary>
            是否存在对象被引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.CurrentDepth">
            <summary>
            节点层级计数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.streamStartIndex">
            <summary>
            数据流起始位置
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerializer.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.rootNotReferenceCount">
            <summary>
            作为根节点时是否需要添加屏蔽引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.notReferenceCount">
            <summary>
            增加非引用计数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.isProcessing">
            <summary>
            是否正在处理序列化操作
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.#ctor(System.Boolean)">
            <summary>
            二进制数据序列化
            </summary>
            <param name="isThreadStatic">是否线程静态实例模式</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serialize``1(``0@,AutoCSer.BinarySerializeConfig,AutoCSer.BinarySerialize.SerializeWarningEnum@)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <param name="warning"></param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serialize``1(AutoCSer.BinarySerializer,``0@)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serializeThreadStatic``1(``0@,AutoCSer.BinarySerializeConfig,AutoCSer.BinarySerialize.SerializeWarningEnum@)">
            <summary>
            对象序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <param name="warning"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serialize``1(``0@)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.writePoints">
            <summary>
            写入历史对象指针
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SetContext(System.Object)">
            <summary>
            设置上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SetDefault">
            <summary>
            设置默认初始化数据
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.freeThreadStatic">
            <summary>
            释放资源（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FreeContext">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CheckDepth(AutoCSer.BinarySerialize.SerializePushTypeEnum)">
            <summary>
            获取序列化引用检查类型
            </summary>
            <param name="pushType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CheckDepthWriteNotNull(AutoCSer.BinarySerialize.SerializePushTypeEnum)">
            <summary>
            获取序列化引用检查类型
            </summary>
            <param name="pushType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ClearNotReferenceCount">
            <summary>
            清除增加非引用计数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CheckTryReference">
            <summary>
            获取序列化引用检查类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CheckPoint``1(``0)">
            <summary>
            添加历史对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>是否继续序列化对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeMemberMap``1">
            <summary>
            序列化成员位图
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetJsonSerializer">
            <summary>
            获取 JSON 序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.JsonSerialize``1(``0@,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            JSON 成员序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetJsonMemberMap``1(AutoCSer.Metadata.MemberMap{``0},AutoCSer.Memory.Pointer@)">
            <summary>
            获取JSON成员位图
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberMap"></param>
            <param name="memberIndexs"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NotSupport``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            自定义序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.realTypeObject``1(``0)">
            <summary>
            真实类型序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.RealTypeObject``1(AutoCSer.BinarySerializer,System.Object)">
            <summary>
            真实类型序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Base``2(AutoCSer.BinarySerializer,``0)">
            <summary>
            基类序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Nullable``1(AutoCSer.BinarySerializer,System.Nullable{``0})">
            <summary>
            对象序列化
            </summary>
            <param name="binarySerializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.arrayOnly``1(``0[],System.Int32)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.array``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Array``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.array``1(AutoCSer.ListArray{``0})">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Array``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Array``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.structArrayOnly``1(``0[],System.Int32)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.structArray``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.StructArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.structArray``1(AutoCSer.ListArray{``0})">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.StructArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.StructArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.nullableArrayOnly``1(System.Nullable{``0}[],System.Int32)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.nullableArray``1(System.Nullable{``0}[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NullableArray``1(AutoCSer.BinarySerializer,System.Nullable{``0}[])">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.nullableArray``1(AutoCSer.ListArray{System.Nullable{``0}})">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NullableArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Nullable{``0}})">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NullableArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Nullable{``0}})">
            <summary>
            数组转换
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.collectionOnly``2(``0)">
            <summary>
            集合转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.collection``2(``0)">
            <summary>
            集合转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Collection``2(AutoCSer.BinarySerializer,``0)">
            <summary>
            集合转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="binarySerializer"></param>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.dictionaryOnly``3(``0)">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.dictionary``3(``0)">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Dictionary``3(AutoCSer.BinarySerializer,``0)">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="binarySerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByte``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByte``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShort``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShort``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumInt``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUInt``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLong``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULong``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Boolean)">
            <summary>
            逻辑值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Boolean})">
            <summary>
            逻辑值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Boolean})">
            <summary>
            逻辑值成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Boolean[],System.Int32)">
            <summary>
            逻辑值数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Boolean}[])">
            <summary>
            逻辑值数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Byte)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Byte})">
            <summary>
            整数值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Byte})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.SByte)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.SByte})">
            <summary>
            整数值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.SByte})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int16)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int16})">
            <summary>
            整数值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int16})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt16)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt16})">
            <summary>
            整数值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt16})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Char)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Char})">
            <summary>
            整数值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Char})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Guid)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Guid)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Guid})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.String)">
            <summary>
            字符串序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.String)">
            <summary>
            字符串序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.SubString@)">
            <summary>
            字符串序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.SubString)">
            <summary>
            字符串序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Type)">
            <summary>
            类型序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Type)">
            <summary>
            类型序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Type)">
            <summary>
            类型序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">设置的自定义序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SetCustomMemberMap(AutoCSer.BinarySerializeMemberMap@)">
            <summary>
            恢复自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CustomSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CustomSerialize``1(``0@)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.String)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="value"></param>
            <returns>不包括补白的字节数，0 表示序列化失败</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBufferStart">
            <summary>
            自定义序列化数据缓冲区开始处理
            </summary>
            <returns>起始位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBufferEnd(System.Int32,System.Int32)">
            <summary>
            自定义序列化数据缓冲区结束处理
            </summary>
            <param name="index"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBufferEnd(System.Int32)">
            <summary>
            自定义序列化数据缓冲区结束处理
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.IndependentSerialize``1(``0@)">
            <summary>
            独立对象序列化为一个可独立反序列化的数据
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.InternalIndependentSerializeNotReference``1(``0@)">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据（外层无引用检查）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SimpleSerialize``1(``0@)">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serialize(System.Void*,System.Int32,System.Int32)">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="data">数据,不能为null</param>
            <param name="arrayLength">数据数量</param>
            <param name="dataSize">复制数据数量</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetSize4(System.Int64)">
            <summary>
            重新计算序列化字节长度（4字节对齐）
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetSize4(System.Int32)">
            <summary>
            重新计算序列化字节长度（4字节对齐）
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetSize(System.Int64)">
            <summary>
            重新计算序列化字节长度（4字节对齐）
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetSize(System.Int32)">
            <summary>
            重新计算序列化字节长度（4字节对齐）
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FillSize(System.Byte*,System.Int32)">
            <summary>
            序列化填充空白字节
            </summary>
            <param name="write"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FillSize2(System.Byte*,System.Int32)">
            <summary>
            序列化填充空白字节 short / ushort（4字节对齐）
            </summary>
            <param name="write"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FillSize4(System.Byte*,System.Int32)">
            <summary>
            序列化填充空白字节 byte / sbyte（4字节对齐）
            </summary>
            <param name="write"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CustomWriteFree(System.Byte[],System.Int32,System.Int32)">
            <summary>
            在序列化输出缓存区尽可能写入多的数据
            </summary>
            <param name="data">输出数据</param>
            <param name="startIndex">输出数据起始位置</param>
            <param name="count">最大写入字节数量</param>
            <returns>写入字节数量，写入失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetBufferMoveSize">
            <summary>
            获取序列化缓冲区移动位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(``0,AutoCSer.BinarySerializeConfig)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(``0@,AutoCSer.BinarySerializeConfig)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(``0,AutoCSer.BinarySerialize.SerializeWarningEnum@,AutoCSer.BinarySerializeConfig)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(``0@,AutoCSer.BinarySerialize.SerializeWarningEnum@,AutoCSer.BinarySerializeConfig)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ThreadStaticSerialize``1(``0,AutoCSer.BinarySerializeConfig)">
            <summary>
            序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ThreadStaticSerialize``1(``0@,AutoCSer.BinarySerializeConfig)">
            <summary>
            序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ThreadStaticSerialize``1(``0,AutoCSer.BinarySerialize.SerializeWarningEnum@,AutoCSer.BinarySerializeConfig)">
            <summary>
            序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ThreadStaticSerialize``1(``0@,AutoCSer.BinarySerialize.SerializeWarningEnum@,AutoCSer.BinarySerializeConfig)">
            <summary>
            序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="F:AutoCSer.BinarySerializer.SerializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.UInt64[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.UInt64}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.UInt64[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt64[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.UInt64})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.UInt64})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.UInt64})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.UInt64}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt64}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt64[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt64[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.UInt16[],System.Int32)">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.UInt16}[])">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt64)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt64})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.UInt64)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULongMember``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumULongArrayOnly``1(``0[],System.Int32)">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumULongArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULongArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumULongArray``1(AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULongArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULongArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int64)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int64})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt32)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt32})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int32)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int32})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Single)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Single})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Double)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Double})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Decimal)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Decimal})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.DateTime)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.DateTime})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.TimeSpan)">
            <summary>
            整数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.TimeSpan})">
            <summary>
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Int64[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Int64}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.UInt32[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.UInt32}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Int32[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Int32}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Single[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Single}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Double[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Double}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Decimal[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Decimal}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.DateTime[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.DateTime}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.TimeSpan[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.TimeSpan}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Guid[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Guid}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Int64[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int64[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Int64})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Int64})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Int64})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Int64}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int64}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int64[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int64[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.UInt32[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt32[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.UInt32})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.UInt32})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.UInt32})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.UInt32}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt32}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt32[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt32[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Int32[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int32[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Int32})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Int32})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Int32})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Int32}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int32}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int32[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int32[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.UInt16[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt16[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.UInt16})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.UInt16})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.UInt16})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.UInt16}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt16}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt16[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt16[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Int16[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int16[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Int16})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Int16})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Int16})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Int16}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int16}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int16[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int16[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Byte[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Byte[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Byte})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Byte})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Byte})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Byte}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Byte}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Byte[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Byte[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.SByte[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.SByte[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.SByte})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.SByte})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.SByte})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.SByte}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.SByte}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.SByte[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.SByte[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Boolean[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Boolean[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Boolean})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Boolean})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Boolean})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Boolean}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Boolean}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Boolean[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Boolean[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Single[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Single[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Single})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Single})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Single})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Single}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Single}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Single[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Single[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Double[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Double[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Double})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Double})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Double})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Double}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Double}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Double[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Double[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Decimal[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Decimal[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Decimal})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Decimal})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Decimal})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Decimal}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Decimal}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Decimal[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Decimal[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Char[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Char[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Char})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Char})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Char})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Char}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Char}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Char[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Char[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.DateTime[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.DateTime[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.DateTime})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.DateTime})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.DateTime})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.DateTime}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.DateTime}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.DateTime[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.DateTime[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.TimeSpan[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.TimeSpan[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.TimeSpan})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.TimeSpan})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.TimeSpan})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.TimeSpan}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.TimeSpan}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.TimeSpan[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.TimeSpan[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Guid[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Guid[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.ListArray{System.Guid})">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Guid})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Guid})">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(System.Nullable{System.Guid}[])">
            <summary>
            数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Guid}[])">
            <summary>
            数组序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Guid[])">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Guid[],System.Int32)">
            <summary>
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLongMember``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumLongArrayOnly``1(``0[],System.Int32)">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumLongArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLongArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumLongArray``1(AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLongArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLongArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUIntMember``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUIntArrayOnly``1(``0[],System.Int32)">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUIntArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUIntArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUIntArray``1(AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUIntArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUIntArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumIntMember``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumIntArrayOnly``1(``0[],System.Int32)">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumIntArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumIntArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumIntArray``1(AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumIntArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumIntArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShortMember``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUShortArrayOnly``1(``0[],System.Int32)">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUShortArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShortArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUShortArray``1(AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShortArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShortArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShortMember``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumShortArrayOnly``1(``0[],System.Int32)">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumShortArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShortArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumShortArray``1(AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShortArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShortArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByteMember``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumByteArrayOnly``1(``0[],System.Int32)">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumByteArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByteArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumByteArray``1(AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByteArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByteArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByteMember``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumSByteArrayOnly``1(``0[],System.Int32)">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumSByteArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByteArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumSByteArray``1(AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByteArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByteArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            枚举数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Int16[],System.Int32)">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Int16}[])">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.SByte[],System.Int32)">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.SByte}[])">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Byte[],System.Int32)">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Byte}[])">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Char[],System.Int32)">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Char}[])">
            <summary>
            整数数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Int64)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.UInt32)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Int32)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.UInt16)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Int16)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Byte)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.SByte)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Boolean)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Single)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Double)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Decimal)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Char)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.DateTime)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.TimeSpan)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.CustomSerializeGenericType">
            <summary>
            自定义二进制序列化泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomSerializeGenericType.SerializeDelegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomSerializeGenericType.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomSerializeGenericType.create``1">
            <summary>
            创建自定义二进制序列化泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.CustomSerializeGenericType.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomSerializeGenericType.Get(System.Type)">
            <summary>
            获取自定义二进制序列化泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.CustomSerializeGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomSerializeGenericType`1.Serialize(AutoCSer.BinarySerializer,`0)">
            <summary>
            自定义序列化
            </summary>
            <param name="serializer"></param>
            <param name="buffer"></param>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomSerializeGenericType`1.SerializeDelegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomSerializeGenericType`1.Deserialize(AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            自定义反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomSerializeGenericType`1.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeResult">
            <summary>
            二进制反序列化状态结果
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeResult.JsonState">
            <summary>
            JSON 解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeResult.CustomError">
            <summary>
            自定义错误
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeResult.#ctor(AutoCSer.Metadata.MemberMap)">
            <summary>
            二进制反序列化状态结果
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeResult.#ctor(AutoCSer.BinarySerialize.DeserializeStateEnum,AutoCSer.Json.DeserializeStateEnum,System.String)">
            <summary>
            二进制反序列化状态结果
            </summary>
            <param name="state"></param>
            <param name="jsonState"></param>
            <param name="customError"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeResult.op_Implicit(AutoCSer.BinarySerialize.DeserializeResult)~System.Boolean">
            <summary>
            隐式转换是否成功
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ICustomSerialize">
            <summary>
            仅用于快速判断是否可能实现接口 ICustomSerialize{T}
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ICustomSerialize`1">
            <summary>
            自定义序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ICustomSerialize`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ICustomSerialize`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.MoveSize">
            <summary>
            序列化缓冲区移动位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.MoveSize.stream">
            <summary>
            序列化输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.MoveSize.StartIndex">
            <summary>
            移动以后的当前位置，失败为 0
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.MoveSize.#ctor(AutoCSer.Memory.UnmanagedStream,System.Int32)">
            <summary>
            序列化缓冲区移动位置
            </summary>
            <param name="stream"></param>
            <param name="moveSize"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.MoveSize.WriteSize">
            <summary>
            写入缓冲区字节数
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeWarningEnum">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.DepthOutOfRange">
            <summary>
            深度超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.BufferSize">
            <summary>
            自定义缓冲序列化返回字节数与写入流字节数不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.ResizeError">
            <summary>
            在不允许扩展缓存区大小的情况下产生了扩展操作
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ThreadStaticDeserializer">
            <summary>
            反序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticDeserializer.Deserializer">
            <summary>
            二进制反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticDeserializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticDeserializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ThreadStaticDeserializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ThreadStaticDeserializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.Common">
            <summary>
            公共调用
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.getTypeSerializeDelegate(System.Type,AutoCSer.Metadata.GenericType@,AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetTypeSerializeDelegate(AutoCSer.Metadata.GenericType,AutoCSer.BinarySerialize.SerializeDelegateReference@,AutoCSer.BinarySerializeAttribute@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetMemberSerializeDelegate(System.Type)">
            <summary>
            获取成员序列化委托
            </summary>
            <param name="type">成员类型</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.getTypeDeserializeDelegate(System.Type,AutoCSer.Metadata.GenericType@,AutoCSer.BinarySerialize.DeserializeDelegate@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="deserializeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetTypeDeserializeDelegate(AutoCSer.Metadata.GenericType,AutoCSer.BinarySerialize.DeserializeDelegate@,AutoCSer.BinarySerializeAttribute@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="deserializeDelegate"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.AppendField(AutoCSer.LeftArray{AutoCSer.BinarySerialize.DeserializeVersionField}@,AutoCSer.Metadata.FieldIndex[],System.Int32)">
            <summary>
            追加字段信息
            </summary>
            <param name="attributeFields"></param>
            <param name="fieldIndexs"></param>
            <param name="anonymousDepth"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetMemberDeserializeDelegate(System.Type)">
            <summary>
            获取成员反序列化委托
            </summary>
            <param name="type">成员类型</param>
            <returns>成员反序列化委托</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.AppendAnonymousField``1(AutoCSer.Metadata.MemberFiltersEnum,AutoCSer.LeftArray{AutoCSer.BinarySerialize.DeserializeVersionField}@,System.Int32@)">
            <summary>
            追加字段信息（包括匿名字段）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberFilter"></param>
            <param name="attributeFields"></param>
            <param name="anonymousDepth"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.CustomConfig">
            <summary>
            自定义全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.CustomConfig.customSerializeDelegate">
            <summary>
            自定义序列化委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.CustomConfig.customSerializeDelegateLock">
            <summary>
            自定义序列化委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.AppendCustomSerializeDelegate(System.Type,AutoCSer.BinarySerialize.SerializeDelegate,AutoCSer.BinarySerialize.DeserializeDelegate)">
            <summary>
            添加自定义序列化委托（应该在该类型的静态构造函数中调用，否则可能无法生效）
            </summary>
            <param name="type"></param>
            <param name="serializeDelegate"></param>
            <param name="deserializeDelegate"></param>
            <returns>如果已经存在该类型的自定义序列化委托则添加失败并返回 false</returns>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomConfig.PrimitiveSerializeDelegates">
            <summary>
            获取自定义类型序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.BinarySerializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.GetCustomSerializeDelegate(System.Type)">
            <summary>
            根据类型获取自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.BinarySerializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.NotSupport``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            自定义序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
            <returns>未写入字节数量</returns>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomConfig.PrimitiveDeserializeDelegates">
            <summary>
            获取自定义类型序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.BinaryDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.GetCustomDeserializeDelegate(System.Type)">
            <summary>
            根据类型获取自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.BinaryDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.NotSupport``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            自定义序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeConfig">
            <summary>
            反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeConfig.MaxArraySize">
            <summary>
            最大数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeConfig.IsRealType">
            <summary>
            不支持类型是否尝试转换为真实类型处理默认为 false，只有在可信任环境中才允许设置为 true，否则将产生 new 任意类型的安全漏洞
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeDelegate.Delegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeDelegate.MemberDelegate">
            <summary>
            成员自定义反序列化委托（需要判断是否为 null）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeDelegate.IsPrimitive">
            <summary>
            是否内部类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.#ctor(System.Delegate)">
            <summary>
            自定义二进制反序列化委托
            </summary>
            <param name="delegateValue">二进制反序列化委托，必须是静态方法，第一个参数类型为 AutoCSer.BinaryDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.#ctor(System.Delegate,System.Boolean)">
            <summary>
            自定义二进制反序列化委托
            </summary>
            <param name="delegateValue">二进制反序列化委托</param>
            <param name="isPrimitive">是否内部类型</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.#ctor(System.Delegate,System.Delegate)">
            <summary>
            自定义二进制反序列化委托
            </summary>
            <param name="delegateValue">二进制序反列化委托</param>
            <param name="memberDelegateValue">二进制反序列化委托</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.op_Implicit(System.Delegate)~AutoCSer.BinarySerialize.DeserializeDelegate">
            <summary>
            隐式转换
            </summary>
            <param name="value">自定义反序列化委托</param>
            <returns>自定义反序列化委托</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.GetMemberDelegate">
            <summary>
            获取成员反序列化委托
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.Set(System.Delegate,System.Delegate,System.Boolean)">
            <summary>
            自定义反序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegate"></param>
            <param name="isPrimitive"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.Check(System.Type)">
            <summary>
            判断自定义反序列化委托数据类型是否与委托匹配
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.Check">
            <summary>
            获取自定义反序列化委托数据类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.#ctor(System.Type,System.String)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.#ctor(AutoCSer.Metadata.GenericType,System.String)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeStateEnum">
            <summary>
            反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.UnknownData">
            <summary>
            数据不可识别
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.HeaderError">
            <summary>
            头部数据不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ObjectReferenceError">
            <summary>
            对象引用数据不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.EndVerify">
            <summary>
            结束验证错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.MemberMap">
            <summary>
            成员位图检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.MemberMapType">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.MemberMapVerify">
            <summary>
            成员位图数量验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.JsonError">
            <summary>
            JSON反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.NoPoint">
            <summary>
            没有命中历史对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.IndexOutOfRange">
            <summary>
            数据长度不足
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ArraySizeOutOfRange">
            <summary>
            数组大小超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ErrorDataType">
            <summary>
            不可识别的数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ErrorType">
            <summary>
            类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.NotSupport">
            <summary>
            不支持的类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.CustomBufferError">
            <summary>
            自定义缓冲区创建失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.CustomError">
            <summary>
            自定义反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ConstructorNull">
            <summary>
            构造函数返回 null 值
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeVersionField">
            <summary>
            二进制数据反序列化版本字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionField.Field">
            <summary>
            字段索引
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionField.Attribute">
            <summary>
            二进制数据序列化成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionField.AnonymousDepth">
            <summary>
            匿名深度
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionField.IsRemove">
            <summary>
            是否删除字段
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.DeserializeVersionField.GlobalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.DeserializeVersionField.sortMemberFilters">
            <summary>
            静态成员转换为实例成员
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeVersionField.#ctor(AutoCSer.Metadata.FieldIndex,AutoCSer.BinarySerializeMemberAttribute,System.Int32)">
            <summary>
            二进制数据反序列化版本字段信息
            </summary>
            <param name="field"></param>
            <param name="attribute"></param>
            <param name="anonymousDepth"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeVersionField.Copy(System.Int32)">
            <summary>
            复制字段索引
            </summary>
            <param name="memberIndex"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionField.GlobalVersionSort">
            <summary>
            全局版本编号排序比较
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeVersionField.globalVersionSort(AutoCSer.BinarySerialize.DeserializeVersionField,AutoCSer.BinarySerialize.DeserializeVersionField)">
            <summary>
            全局版本编号排序比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionField.MemberNameSort">
            <summary>
            成员名称排序比较
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeVersionField.memberNameSort(AutoCSer.BinarySerialize.DeserializeVersionField,AutoCSer.BinarySerialize.DeserializeVersionField)">
            <summary>
            成员名称排序比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeVersionFields`1">
            <summary>
            二进制数据反序列化版本字段信息
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionFields`1.GlobalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionFields`1.removeMemberCount">
            <summary>
            被删除成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionFields`1.noSerializeMemberCount">
            <summary>
            非序列化成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionFields`1.fields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionFields`1.createLock">
            <summary>
            二进制数据反序列化访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeVersionFields`1.Deserializer">
            <summary>
            二进制数据反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeVersionFields`1.#ctor(System.UInt32,AutoCSer.BinarySerialize.DeserializeVersionField[],System.UInt32,System.Int32,System.Object)">
            <summary>
            二进制数据反序列化版本字段信息
            </summary>
            <param name="globalVersion">全局版本编号</param>
            <param name="fields">字段集合</param>
            <param name="removeMemberCount">被删除成员数量</param>
            <param name="noSerializeMemberCount">非序列化成员数量</param>
            <param name="createLock">二进制数据反序列化访问锁</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeVersionFields`1.Create(AutoCSer.BinarySerializeAttribute)">
            <summary>
            创建二进制数据反序列化
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeVersionFields`1.CreateOnly(AutoCSer.BinarySerializeAttribute)">
            <summary>
            创建二进制数据反序列化
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.FieldSize">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.MemberIndex">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.FixedSize">
            <summary>
            固定分组排序字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.#ctor(AutoCSer.Metadata.FieldIndex)">
            <summary>
            字段信息
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.FixedSizeSort(AutoCSer.BinarySerialize.FieldSize,AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            固定分组排序字节数排序比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.fixedSizes">
            <summary>
            固定类型字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.IsFixedSize(System.Type)">
            <summary>
            是否固定字节数类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.FieldSizeArray">
            <summary>
            字段集合信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.FixedFields">
            <summary>
            固定序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.FieldArray">
            <summary>
            非固定序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.JsonFields">
            <summary>
            JSON 混合序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.FixedSize">
            <summary>
            固定序列化字段字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSizeArray.#ctor(AutoCSer.Metadata.FieldIndex[],System.Boolean,System.Int32@,System.Boolean)">
            <summary>
            字段成员集合
            </summary>
            <param name="fieldIndexs"></param>
            <param name="isJson"></param>
            <param name="memberCountVerify"></param>
            <param name="isAnonymousFields"></param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSizeArray.#ctor(AutoCSer.LeftArray{AutoCSer.BinarySerialize.FieldSize}@,AutoCSer.LeftArray{AutoCSer.BinarySerialize.FieldSize}@,AutoCSer.LeftArray{AutoCSer.Metadata.FieldIndex}@,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            字段集合信息
            </summary>
            <param name="fixedFields">固定序列化字段</param>
            <param name="fields">非固定序列化字段</param>
            <param name="jsonFields">JSON 混合序列化字段</param>
            <param name="fixedSize">固定序列化字段字节数</param>
            <param name="isJson"></param>
            <param name="memberCountVerify">序列化成员数量</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.#ctor(System.Type,System.String)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.#ctor(AutoCSer.Metadata.GenericType,System.String)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ThreadStaticSerializer">
            <summary>
            序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticSerializer.Serializer">
            <summary>
            二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticSerializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticSerializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ThreadStaticSerializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ThreadStaticSerializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeserializer`1">
            <summary>
            二进制数据反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeserializer`1.memberMapDeserialize">
            <summary>
            二进制数据反序列化委托
            </summary>
            <param name="memberMap">成员位图</param>
            <param name="deserializer">二进制数据反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.fixedMemberDeserializer">
            <summary>
            固定分组成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.fixedMemberMapDeserializer">
            <summary>
            固定分组成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.memberDeserializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.memberMapDeserializer">
            <summary>
            成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.jsonMemberMap">
            <summary>
            JSON混合序列化位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.jsonMemberIndexs">
            <summary>
            JSON混合序列化成员索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.globalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.fixedFillSize">
            <summary>
            固定分组填充字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.memberCountVerify">
            <summary>
            序列化成员数量
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.#ctor(System.UInt32,AutoCSer.BinarySerialize.FieldSizeArray@,System.Int32)">
            <summary>
            二进制数据反序列化
            </summary>
            <param name="globalVersion"></param>
            <param name="fields"></param>
            <param name="memberCountVerify"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.MemberDeserialize(AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deserializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.nullMember(AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            成员反序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.nullMemberMap(AutoCSer.Metadata.MemberMap{`0},AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            成员位图反序列化
            </summary>
            <param name="memberMap"></param>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.attribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.DefaultDeserializer">
            <summary>
            反序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.defaultDeserializer">
            <summary>
            二进制数据反序列化当前版本
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.versionDeserializers">
            <summary>
            二进制数据反序列化历史版本
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.pushType">
            <summary>
            引用执行类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.isMemberMap">
            <summary>
            是否处理成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.isJson">
            <summary>
            当没有 JSON 序列化成员时是否预留 JSON 序列化标记
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.Deserialize(AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.deserializeVersion(AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            检查版本的反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeArrayMap">
            <summary>
            数组位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeArrayMap.Bit">
            <summary>
            当前位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeArrayMap.Map">
            <summary>
            当前位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeArrayMap.Read">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeArrayMap.#ctor(System.Byte*)">
            <summary>
            数组位图
            </summary>
            <param name="read">当前读取位置</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeArrayMap.#ctor(System.Byte*,System.UInt32)">
            <summary>
            数组位图
            </summary>
            <param name="read">当前读取位置</param>
            <param name="bit">当前位</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeArrayMap.Next">
            <summary>
            获取位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeArrayMap.NextBool">
            <summary>
            获取位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeArrayMap">
            <summary>
            数组位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.stream">
            <summary>
            序列化数据流
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Bit">
            <summary>
            当前位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Map">
            <summary>
            当前位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.WriteIndex">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.#ctor(AutoCSer.Memory.UnmanagedStream,System.Int32)">
            <summary>
            数组位图
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="arrayLength">数组长度</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.#ctor(AutoCSer.Memory.UnmanagedStream,System.Int32,System.Int32)">
            <summary>
            数组位图
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="arrayLength">数组长度</param>
            <param name="prepLength">附加长度</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.Next(System.Boolean)">
            <summary>
            添加数据
            </summary>
            <param name="value">是否写位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.NextFalse">
            <summary>
            移动到下一个二进制位
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.NextTrue">
            <summary>
            添加数据
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.Next(System.Nullable{System.Boolean})">
            <summary>
            添加数据
            </summary>
            <param name="value">是否写位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.End">
            <summary>
            位图写入结束
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeDelegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegate.Delegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegate.MemberDelegate">
            <summary>
            成员自定义序列化委托（需要判断是否为 null）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegate.ReferenceTypes">
            <summary>
            需要检查引用的类型（包含当前类型），数组长度为 0 表示无需检查引用，null 表示未知
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegate.IsCollection">
            <summary>
            是否集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.#ctor(System.Delegate,System.Type[])">
            <summary>
            自定义二进制序列化委托
            </summary>
            <param name="delegateValue">二进制序列化委托必须是静态方法，第一个参数类型为 AutoCSer.BinarySerializer，第二参数类型为具体数据类型，返回值类型为 void</param>
            <param name="referenceTypes">需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.#ctor(System.Delegate,System.Delegate,System.Type[],System.Boolean)">
            <summary>
            自定义二进制序列化委托
            </summary>
            <param name="delegateValue">二进制序列化委托</param>
            <param name="memberDelegateValue">二进制序列化委托</param>
            <param name="referenceTypes">需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知</param>
            <param name="isCollection">是否集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.op_Implicit(System.Delegate)~AutoCSer.BinarySerialize.SerializeDelegate">
            <summary>
            隐式转换
            </summary>
            <param name="value">自定义序列化委托，第一个参数类型为 AutoCSer.BinarySerializer，第二参数类型为具体数据类型，返回值类型为 void</param>
            <returns>自定义序列化委托</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Set(System.Delegate,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Set(System.Delegate,System.Delegate,System.Type[],System.Boolean)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegateValue"></param>
            <param name="referenceTypes"></param>
            <param name="isCollection"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.GetMemberDelegate">
            <summary>
            获取成员自定义序列化委托（需要判断是否为 null）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Check(System.Type,AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            检查自定义二进制序列化委托
            </summary>
            <param name="type"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Check(System.Type@,AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="type"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Check(AutoCSer.BinarySerialize.SerializeDelegateReference@,System.Type@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeDelegateReference">
            <summary>
            序列化委托引用检查信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.PushType">
            <summary>
            引用执行类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.NotReferenceCount">
            <summary>
            作为根节点时是否需要添加屏蔽引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.isReferenceMember">
            <summary>
            子节点存在引用检查需求
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.IsCompleted">
            <summary>
            状态是否计算完成
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.Delegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.ReferenceGenericTypes">
            <summary>
            需要循环引用检查的类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.#ctor(System.Delegate,System.Delegate)">
            <summary>
            JSON 序列化委托循环引用信息
            </summary>
            <param name="delegateValue">JSON 序列化委托</param>
            <param name="memberDelegateValue">JSON 序列化委托</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.#ctor(System.Delegate,AutoCSer.Metadata.GenericType)">
            <summary>
            JSON 序列化委托循环引用信息
            </summary>
            <param name="delegateValue">JSON 序列化委托</param>
            <param name="referenceGenericType">需要循环引用检查的类型</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetPrimitive(System.Delegate,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetPrimitive(System.Delegate,AutoCSer.Metadata.GenericType)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="referenceGenericType"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetNotReference(System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetTryReference(System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetUnknown(System.Type,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="type"></param>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetMember(AutoCSer.BinarySerialize.SerializeDelegate@)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetMember(System.Delegate,System.Type[],AutoCSer.BinarySerialize.SerializePushTypeEnum,System.Boolean)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="referenceTypes"></param>
            <param name="pushType"></param>
            <param name="isCollection"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.setReferenceMember(System.Type)">
            <summary>
            子节点存在引用检查需求
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.CheckCompleted(AutoCSer.Metadata.GenericType)">
            <summary>
            计算状态完成检查
            </summary>
            <param name="genericType"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.checkCompleted(AutoCSer.Metadata.GenericType,System.Boolean)">
            <summary>
            计算状态完成检查
            </summary>
            <param name="genericType"></param>
            <param name="notReferenceCount"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.completed(System.Boolean)">
            <summary>
            计算状态完成
            </summary>
            <param name="notReferenceCount"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializePushTypeEnum">
            <summary>
            序列化循环引用检查类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.Primitive">
            <summary>
            内部类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.DepthCount">
            <summary>
            仅做层级计数操作
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.NotReferenceCount">
            <summary>
            增加非引用计数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.TryReference">
            <summary>
            尝试添加引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.DepthOutOfRange">
            <summary>
            深度超出范围
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeSerializer`1">
            <summary>
            二进制数据序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.DefaultSerializer">
            <summary>
            序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedMemberSerializer">
            <summary>
            固定分组成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedMemberMapSerializer">
            <summary>
            固定分组成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberSerializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.SerializeDelegateReference">
            <summary>
            序列化委托引用检查信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.jsonMemberMap">
            <summary>
            JSON混合序列化位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.jsonMemberIndexs">
            <summary>
            JSON混合序列化成员索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberCountVerify">
            <summary>
            序列化成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedSize">
            <summary>
            固定分组字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedFillSize">
            <summary>
            固定分组填充字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.isMemberMap">
            <summary>
            是否处理成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.isJson">
            <summary>
            当没有 JSON 序列化成员时是否预留 JSON 序列化标记
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.Serialize(AutoCSer.BinarySerializer,`0@)">
            <summary>
            序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.Serialize(AutoCSer.BinarySerializer,`0)">
            <summary>
            序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.SerializeNullable(AutoCSer.BinarySerializer,`0)">
            <summary>
            序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.MemberSerialize(AutoCSer.BinarySerializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.SerializeCommandServer(AutoCSer.BinarySerializer,`0@)">
            <summary>
            命令服务序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.nullMember(AutoCSer.BinarySerializer,`0)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.nullMemberMap(AutoCSer.Metadata.MemberMap{`0},AutoCSer.BinarySerializer,`0)">
            <summary>
            成员位图序列化
            </summary>
            <param name="memberMap"></param>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.AwaitResultTypeAttribute">
            <summary>
            代码生成模板支持 await 泛型申明
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CombinationTemplateConfig">
            <summary>
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CombinationTemplateConfig.DefaultTemplatePath">
            <summary>
            默认自定义模板相对项目路径
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.CombinationTemplateConfig.TemplatePath">
            <summary>
            自定义模板相对项目路径
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CombinationTemplateConfig.GetCodeFileName(System.String)">
            <summary>
            获取目标代码文件名称（默认为项目命名空间）
            </summary>
            <param name="defaultNamespace"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Common">
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.UInt64[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="F:AutoCSer.Common.NamePrefix">
            <summary>
            名称前缀
            </summary>
        </member>
        <member name="F:AutoCSer.Common.Config">
            <summary>
            公共配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Common.DefaultConstructor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Common.ProcessorCount">
            <summary>
            CPU 逻辑处理器数量（线程数量）
            </summary>
        </member>
        <member name="M:AutoCSer.Common.SetCurrentProcessAffinity(System.Byte)">
            <summary>
            设置当前进程的 CPU 亲缘性
            </summary>
            <param name="processorIndex">逻辑处理器编号，从 0 开始</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:AutoCSer.Common.SetCurrentProcessAffinity(System.Byte[])">
            <summary>
            设置当前进程的 CPU 亲缘性
            </summary>
            <param name="processorIndexs">逻辑处理器编号集合，从 0 开始</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="F:AutoCSer.Common.CpuCacheBlockSize">
            <summary>
            CPU 高速缓存块字节大小，影响 AutoCSer.Threading.BlockPool 硬编码填充大小
            </summary>
        </member>
        <member name="F:AutoCSer.Common.CpuCacheBlockObjectCount">
            <summary>
            每个 CPU 高速缓存块容纳对象引用数量
            </summary>
        </member>
        <member name="F:AutoCSer.Common.UnicodeCodePage">
            <summary>
            Encoding.Unicode.CodePage
            </summary>
        </member>
        <member name="F:AutoCSer.Common.ApplicationDirectory">
            <summary>
            程序执行主目录
            </summary>
        </member>
        <member name="F:AutoCSer.Common.IsCodeGenerator">
            <summary>
            是否代码生成环境
            </summary>
        </member>
        <member name="M:AutoCSer.Common.CheckDeserializeType(System.Type,System.Delegate)">
            <summary>
            获取自定义反序列化委托数据类型
            </summary>
            <param name="deserializerType"></param>
            <param name="deserializeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.Wait(System.Threading.Tasks.ValueTask)">
            <summary>
            等待任务完成
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Common.GetAsyncEnumerable``1(AutoCSer.IEnumeratorTask{``0})">
            <summary>
            获取 IAsyncEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeratorTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDefault``1">
            <summary>
            获取默认值，消除警告
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Common.EmptyObject">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:AutoCSer.Common.EmptyFunction">
            <summary>
            空函数，用于消除空语句警告
            </summary>
        </member>
        <member name="F:AutoCSer.Common.EmptyAction">
            <summary>
            空委托
            </summary>
        </member>
        <member name="F:AutoCSer.Common.NullMethodInfo">
            <summary>
            空方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Common.TrueCompletedTask">
            <summary>
            已完成任务返回 true
            </summary>
        </member>
        <member name="M:AutoCSer.Common.GetCompletedTask(System.Boolean)">
            <summary>
            根据逻辑值获取已完成任务
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetCompletedTask``1(``0[])">
            <summary>
            获取已完成任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="value">任务返回值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetCompletedTask``1(``0)">
            <summary>
            获取已完成任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="value">任务返回值</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Common.CompletedTask">
            <summary>
            已完成任务
            </summary>
        </member>
        <member name="M:AutoCSer.Common.GetUninitializedArray``1(System.Int32)">
            <summary>
            获取数组，允许存在未初始化数组项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetUninitializedArray``1(``0[])">
            <summary>
            复制数组，允许存在未初始化数组项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetUninitializedArray``1(``0[],System.Int32)">
            <summary>
            复制数组，允许存在未初始化数组项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetUninitializedArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            复制数组，允许存在未初始化数组项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="capacity"></param>
            <param name="copyCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetCopyArray``1(``0[],System.Int32)">
            <summary>
            复制数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.CopyTo``1(``0[],``0[])">
            <summary>
            数组复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo``1(``0[],``0[],System.Int32,System.Int32)">
            <summary>
            数组复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Common.Clear(System.UInt64*,System.Int32)">
            <summary>
            填充整数
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="count">ulong 整数数量</param>
        </member>
        <member name="M:AutoCSer.Common.Clear(System.Void*,System.Int32)">
            <summary>
            数据全部设置为 0
            </summary>
            <param name="src">串起始地址，不能为 null</param>
            <param name="size">字节数量</param>
        </member>
        <member name="M:AutoCSer.Common.Fill(System.Void*,System.Int32,System.UInt64)">
            <summary>
            填充数据
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="count">ulong 整数数量</param>
            <param name="value">填充整数</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Void*,System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="size">字节长度</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Void*,System.Int64)">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="size">字节长度</param>
        </member>
        <member name="M:AutoCSer.Common.GetArray(System.Void*,System.Int32)">
            <summary>
            内存数据转换成字节数组
            </summary>
            <param name="source">串起始地址，不能为 null</param>
            <param name="size">字节长度,必须大于0</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Byte[],System.Int32,System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址</param>
            <param name="destination">目标数据</param>
            <param name="destinationIndex">目标数据起始位置</param>
            <param name="size">字节长度</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Byte[],System.Int32,System.Void*,System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="source">原数据</param>
            <param name="sourceIndex">原数据起始位置</param>
            <param name="destination">目标串起始地址</param>
            <param name="size">字节长度</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.String,System.Void*)">
            <summary>
            复制数据
            </summary>
            <param name="source">字符串，长度必须大于0</param>
            <param name="destination">目标串起始地址,不能为null</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.String,System.Int32,System.Void*,System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="source">字符串，长度必须大于0</param>
            <param name="index">字符串起始位置</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="size">字符长度</param>
        </member>
        <member name="M:AutoCSer.Common.Fill``1(``0[],``0)">
            <summary>
            用数据填充整个数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value">填充数据</param>
        </member>
        <member name="M:AutoCSer.Common.Fill``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            用数据填充数组指定位置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value">填充数据</param>
            <param name="startIndex">起始位置</param>
            <param name="count">填充数据数量</param>
        </member>
        <member name="M:AutoCSer.Common.SequenceEqual(System.Void*,System.Void*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="size">比较字节数</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Common.SequenceEqual(AutoCSer.SubArray{System.Byte}@,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            字节数组比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileExists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileExists(System.IO.FileInfo,System.Boolean)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="file"></param>
            <param name="isRefresh">是否刷新文件信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DeleteFile(System.IO.FileInfo)">
            <summary>
            删除文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryDeleteFile(System.IO.FileInfo)">
            <summary>
            如果文件存在则删除文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.RefreshFileInfo(System.IO.FileInfo)">
            <summary>
            刷新文件状态数据
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileMove(System.IO.FileInfo,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="sourceFile"></param>
            <param name="destFileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.CreateFileStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            创建文件流
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="bufferSize"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.Seek(System.IO.FileStream,System.Int64,System.IO.SeekOrigin)">
            <summary>
            移动文件流位置
            </summary>
            <param name="fileStream"></param>
            <param name="seekIndex"></param>
            <param name="seekOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.SetLength(System.IO.FileStream,System.Int64)">
            <summary>
            设置文件流长度
            </summary>
            <param name="fileStream"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryDeleteFile(System.String)">
            <summary>
            如果文件存在则删除文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetMoveBakFileName(System.String)">
            <summary>
            获取备份文件名称（不允许返回重复文件名称，否则相关调用可能陷入死循环）
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.ReadFileAllBytes(System.String)">
            <summary>
            读取文件所有字节并返回文件数据
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.ReadFileAllText(System.String,System.Text.Encoding)">
            <summary>
            读取文件并返回文件文本内容
            </summary>
            <param name="fileName"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.WriteFileAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            将文本写入文件，文件不存在则创建文件
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileCopyTo(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            复制文件
            </summary>
            <param name="file"></param>
            <param name="destFileName"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileCopyTo(System.String,System.String,System.Boolean)">
            <summary>
            复制文件
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.SetFileAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
            <summary>
            设置文件属性
            </summary>
            <param name="file"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryExists(System.String)">
            <summary>
            判断目录是否存在
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryExists(System.IO.DirectoryInfo)">
            <summary>
            判断目录是否存在
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryMove(System.IO.DirectoryInfo,System.String)">
            <summary>
             移动目录
            </summary>
            <param name="sourceDirectory"></param>
            <param name="destDirectoryName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.IO.DirectoryInfo)">
            <summary>
            搜索文件
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.IO.DirectoryInfo,System.String)">
            <summary>
            搜索文件
            </summary>
            <param name="directory"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
            搜索文件
            </summary>
            <param name="directory"></param>
            <param name="searchPattern"></param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            搜索文件名称
            </summary>
            <param name="path"></param>
            <param name="searchPattern"></param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.String)">
            <summary>
            搜索文件名称
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDirectories(System.IO.DirectoryInfo)">
            <summary>
            搜索目录
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDirectories(System.IO.DirectoryInfo,System.String)">
            <summary>
            搜索目录
            </summary>
            <param name="directory"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDirectories(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
            搜索目录
            </summary>
            <param name="directory"></param>
            <param name="searchPattern"></param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDirectories(System.String)">
            <summary>
            搜索目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryCreateDirectory(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryCreateDirectory(System.IO.DirectoryInfo)">
            <summary>
            创建目录
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryDeleteDirectory(System.String,System.Boolean)">
            <summary>
            删除目录
            </summary>
            <param name="path"></param>
            <param name="recursive">是否删除子目录与文件夹中的文件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryDeleteDirectory(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            删除目录
            </summary>
            <param name="directory"></param>
            <param name="recursive">是否删除子目录与文件夹中的文件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.allocateString(System.Int32)">
            <summary>
            申请字符串空间
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Common.AllocateString">
            <summary>
            申请字符串空间
            </summary>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Int64[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.UInt32[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Int32[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.UInt16[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Int16[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Byte[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.SByte[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Boolean[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Single[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Double[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Decimal[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Char[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.DateTime[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.TimeSpan[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Guid[])">
            <summary>
            复制数据
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="T:AutoCSer.CompletedTask`1">
            <summary>
            默认值已完成任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.CompletedTask`1.Default">
            <summary>
            默认值已完成任务
            </summary>
        </member>
        <member name="F:AutoCSer.CompletedTask`1.EmptyArray">
            <summary>
            0 长度空数组已完成任务
            </summary>
        </member>
        <member name="T:AutoCSer.ConsoleWriteQueue">
            <summary>
            控制台输出队列
            </summary>
        </member>
        <member name="T:AutoCSer.ConsoleWriteQueue.Message">
            <summary>
            控制台输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.Message.message">
            <summary>
            输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.Message.foregroundColor">
            <summary>
            文字颜色
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.Message.backgroundColor">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.Message.restoreColor">
            <summary>
            输出信息以后是否恢复文字与背景颜色
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.Message.isWriteLine">
            <summary>
            是否换行
            </summary>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Message.#ctor(System.String,System.ConsoleColor,System.ConsoleColor,System.Boolean,System.Boolean)">
            <summary>
            控制台输出信息
            </summary>
            <param name="message">输出信息</param>
            <param name="foregroundColor">文字颜色</param>
            <param name="backgroundColor">背景颜色</param>
            <param name="restoreColor">输出信息以后是否恢复文字与背景颜色</param>
            <param name="isWriteLine">是否换行</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Message.Write">
            <summary>
            控制台输出
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.outputQueue">
            <summary>
            当前输出队列
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.appendQueue">
            <summary>
            当前添加队列
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.writeLock">
            <summary>
            队列访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.isThread">
            <summary>
            是否已经启动输出线程
            </summary>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.write">
            <summary>
            输出线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.append(AutoCSer.ConsoleWriteQueue.Message)">
            <summary>
            添加到输出队列
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Write(System.String,System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            添加到输出队列
            </summary>
            <param name="message">输出信息</param>
            <param name="foregroundColor">文字颜色</param>
            <param name="backgroundColor">背景颜色</param>
            <param name="restoreColor">输出信息以后是否恢复文字与背景颜色</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.WriteLine(System.String,System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            添加到输出队列（最后增加换行输出）
            </summary>
            <param name="message">输出信息</param>
            <param name="foregroundColor">文字颜色</param>
            <param name="backgroundColor">背景颜色</param>
            <param name="restoreColor">输出信息以后是否恢复文字与背景颜色</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Breakpoint(System.String,System.String,System.String,System.Int32)">
            <summary>
            测试断点信息添加到输出队列
            </summary>
            <param name="message">断点信息</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.BreakpointLog(System.String,System.String,System.String,System.Int32)">
            <summary>
            测试断点信息添加到输出队列
            </summary>
            <param name="message">断点信息</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Breakpoint(AutoCSer.Net.CommandClientReturnValue,System.String,System.String,System.Int32)">
            <summary>
            返回值状态非成功则添加测试断点信息
            </summary>
            <param name="returnValue">返回值</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>返回值状态是否成功</returns>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Breakpoint``1(AutoCSer.Net.CommandClientReturnValue{``0},System.String,System.String,System.Int32)">
            <summary>
            返回值状态非成功则添加测试断点信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnValue">返回值</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>返回值状态是否成功</returns>
        </member>
        <member name="T:AutoCSer.Extensions.CommandServerKeepCallbackExtension">
            <summary>
            TCP 服务器端异步保持回调扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.CommandServerKeepCallbackExtension.Callback``1(AutoCSer.Net.CommandServerKeepCallback{``0},``0,System.Int32,``0@,System.Int32@,System.Boolean)">
            <summary>
            返回数据链表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <param name="head">开始节点</param>
            <param name="getCount">获取数量</param>
            <param name="end">结束节点</param>
            <param name="endCount">实际结束数量</param>
            <param name="isCancel">回调完成之后是否关闭</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.DirectoryInfoExtension">
            <summary>
            目录相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.DirectoryInfoExtension.Separator">
            <summary>
            目录分隔符
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.DirectoryInfoExtension.fullName(System.IO.DirectoryInfo)">
            <summary>
            取以\结尾的路径全名
            </summary>
            <param name="path">目录</param>
            <returns>\结尾的路径全名</returns>
        </member>
        <member name="T:AutoCSer.Extensions.LogExtension">
            <summary>
            日志扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Info(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加普通日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">普通日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.InfoIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加普通日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">普通日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.DebugIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.ExceptionIgnoreException(AutoCSer.ILog,System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Error(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加一般错误日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.ErrorIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加一般错误日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Warn(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.WarnIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Fatal(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加致命错误日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.FatalIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加致命错误日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Breakpoint(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加测试断点日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.BreakpointIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加测试断点日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.FlushIgnoreException(AutoCSer.ILog)">
            <summary>
            等待写入完成
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.FieldInfoExtension">
            <summary>
            字段扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.FieldInfoExtension.getAnonymousName(System.Reflection.FieldInfo,System.String@)">
            <summary>
            获取匿名字段名称（如果是属性生成则转换为属性名称）
            </summary>
            <param name="field"></param>
            <param name="name">字段名称或者属性名称</param>
            <returns>是否属性</returns>
        </member>
        <member name="M:AutoCSer.Extensions.FieldInfoExtension.getPropertyMemberInfo(System.Reflection.FieldInfo)">
            <summary>
            根据匿名字段获取对应属性
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.IDisposableExtension">
            <summary>
            资源释放操作
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.TaskExtension">
            <summary>
            任务扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.NotWait(System.Threading.Tasks.Task)">
            <summary>
            不等待任务执行的情况下，用于清除 async 内部提示 await 的警告
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.ToValueTask(System.Threading.Tasks.Task)">
            <summary>
            ValueTask 兼容
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.NullableReferenceExtension">
            <summary>
            可空引用类型扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castClass``1(System.Object)">
            <summary>
            object 转换为指定可空引用类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castType``1(System.Object)">
            <summary>
            object 转换为指定可空类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castValue``1(System.Object)">
            <summary>
            object 转换为值类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.notNullCastType``1(System.Object)">
            <summary>
            非空对象转换类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.notNull``1(``0)">
            <summary>
            非空对象类型转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castArray``1(``0)">
            <summary>
            可空引用类型转数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castObject``1(``0)">
            <summary>
            泛型转 object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.setDefault``1(``0[],System.Int32)">
            <summary>
            设置数组原始值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="T:AutoCSer.Extensions.ParameterInfoExtension">
            <summary>
            方法参数相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ParameterInfoExtension.elementType(System.Reflection.ParameterInfo)">
            <summary>
            获取参数真实类型
            </summary>
            <param name="parameter">参数信息</param>
            <returns>参数真实类型</returns>
        </member>
        <member name="T:AutoCSer.Extensions.SubArrayExtension">
            <summary>
            数组子串扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.SubArrayExtension.createMemoryStream(AutoCSer.SubArray{System.Byte})">
            <summary>
            创建内存字节流
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.TypeBuilderExtension">
            <summary>
            Emit 类型创建器扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.TypeBuilderExtension.CreateType(System.Reflection.Emit.TypeBuilder)">
            <summary>
            创建类型
            </summary>
            <param name="typeBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.ArrayExtension">
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.isEmpty``1(``0[])">
            <summary>
            数组是否为空或者长度为0
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">数组数据</param>
            <returns>数组是否为空或者长度为0</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.copy``1(``0[])">
            <summary>
            复制数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">待复制数组</param>
            <returns>复制后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.getArray``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.getConcatArray``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.concat``1(``0[],``0[])">
            <summary>
            连接数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">数组集合</param>
            <param name="addArray">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.concat``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.getFind``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.sort``1(``0[],System.Func{``0,``0,System.Int32})">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="comparer">比较器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.joinString``1(``0[],System.Char,System.Func{``0,System.String})">
            <summary>
            连接字符串
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">数据集合</param>
            <param name="toString">字符串转换器</param>
            <param name="join">连接字符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.JoinString(System.String[],System.Char)">
            <summary>
            连接字符串集合
            </summary>
            <param name="array">字符串集合，长度必须大于 0</param>
            <param name="join">字符连接</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="T:AutoCSer.Extensions.CollectionExtension">
            <summary>
            集合相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.toGeneric``1(System.Collections.ICollection)">
            <summary>
            ICollection泛型转换
            </summary>
            <param name="value">数据集合</param>
            <returns>泛型数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.count``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            获取数据数量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据集合</param>
            <returns>null为0</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="values">数据集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getLeftArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="T">枚举值类型</typeparam>
            <typeparam name="VT">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="T">枚举值类型</typeparam>
            <typeparam name="VT">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getListArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            根据集合内容返回单向动态数组
            </summary>
            <typeparam name="T">枚举值类型</typeparam>
            <typeparam name="VT">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>单向动态数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getFindArrayNotNull``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            获取匹配数组
            </summary>
            <typeparam name="T">枚举值类型</typeparam>
            <typeparam name="VT">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getDictionary``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            转换成字典
            </summary>
            <typeparam name="VT">枚举值类型</typeparam>
            <typeparam name="KT">哈希键值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">键值获取器</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.Extensions.EmitGenerator">
            <summary>
            MSIL生成
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.int32(System.Reflection.Emit.ILGenerator,System.Boolean)">
            <summary>
            加载 1/0
            </summary>
            <param name="generator"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.int32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载Int32数据
            </summary>
            <param name="generator"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.ldstr(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            加载字符串
            </summary>
            <param name="generator"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.ldarg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载参数
            </summary>
            <param name="generator"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            函数调用
            </summary>
            <param name="generator"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.initobjShort(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            对象初始化
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
            <param name="local"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.initobj(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            对象初始化
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
            <param name="local"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.memberMapObjectIsMember(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32,AutoCSer.Metadata.GenericType)">
            <summary>
            判断成员位图是否匹配成员索引
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
            <param name="genericType"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.memberMapObjectSetMember(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32,AutoCSer.Metadata.GenericType)">
            <summary>
            设置成员索引
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
            <param name="genericType"></param>
        </member>
        <member name="T:AutoCSer.Extensions.NumberExtension">
            <summary>
            数值相关扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div10_16Shift">
            <summary>
            16位除以10转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div10_16Mul">
            <summary>
            16位除以10转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div10000Mul">
            <summary>
            32位除以10000转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div10000Shift">
            <summary>
            32位除以10000转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div100000000Mul">
            <summary>
            32位除以100000000转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div100000000Shift">
            <summary>
            32位除以100000000转乘法的位移
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Byte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.Byte,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.SByte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.SByte,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.UInt16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.UInt16,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Int16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.Int16,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.UInt32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.UInt32,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString99999999U(System.UInt32,System.Char*)">
            <summary>
            小于100000000的正整数转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Int32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.Int32,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString99999999S(System.UInt32,System.Char*)">
            <summary>
            绝对值小于100000000的负整数转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString4(System.UInt32,System.Char*)">
            <summary>
            4位十进制数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString8(System.UInt32,System.Char*)">
            <summary>
            8位十进制数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.UInt64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.UInt64,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Int64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.Int64,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString16(System.UInt64,System.Char*)">
            <summary>
            16位十进制数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toHex(System.UInt64)">
            <summary>
            转换16位十六进制字符串（大写字母）
            </summary>
            <param name="value">数字值</param>
            <returns>16位十六进制字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toHex(System.UInt64,System.Char*)">
            <summary>
            转换16位十六进制字符串（大写字母）
            </summary>
            <param name="value">数字值</param>
            <param name="hexs">16位十六进制字符串</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toHex(System.UInt32)">
            <summary>
            转换8位十六进制字符串（大写字母）
            </summary>
            <param name="value">数字值</param>
            <returns>8位十六进制字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toHex(System.UInt32,System.Char*)">
            <summary>
            数字值转换为十六进制字符串（大写字母）
            </summary>
            <param name="value">数字值</param>
            <param name="hexs">十六进制字符串</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToHex(System.UInt32)">
            <summary>
            半字节转十六进制字符（大写字母）
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToHex4(System.UInt32,System.Char*)">
            <summary>
            16b 数字转换成4个16进制字符串（大写字母）
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.GetToHex(System.UInt32,System.Char*)">
            <summary>
            数字转换成16进制字符串（大写字母）
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.fromHex(System.Char)">
            <summary>
            十六进制字符串转数字
            </summary>
            <param name="hex"></param>
            <returns>是否返回 uint.MaxValue</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.fromHex4(System.Char*)">
            <summary>
            十六进制字符串转数字
            </summary>
            <param name="chars"></param>
            <returns>失败则高16b不为0</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.FromHex(System.Char*,System.UInt32@)">
            <summary>
            十六进制字符串转数字
            </summary>
            <param name="chars"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.fromHex6(System.Char*)">
            <summary>
            十六进制字符串转数字
            </summary>
            <param name="chars"></param>
            <returns>失败则高8b不为0</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.FromHex(System.Char*,System.UInt64@)">
            <summary>
            十六进制字符串转数字
            </summary>
            <param name="chars"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.bitCount(System.UInt64)">
            <summary>
            获取二进制1位的个数
            </summary>
            <param name="value">数据</param>
            <returns>二进制1位的个数</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.fullBit(System.UInt32)">
            <summary>
            填充第一个有效二进制位后面的空位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.upToPower2(System.UInt32)">
            <summary>
            向上去 2 的幂次方
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.DeBruijn32">
            <summary>
            2^n相关32位deBruijn序列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.DeBruijn32Number">
            <summary>
            2^n相关32位deBruijn序列
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.deBruijnLog2(System.UInt32)">
            <summary>
            求 2 的 x 次方
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.StringExtension">
            <summary>
            字符串相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.toLower(System.String)">
            <summary>
            大写转小写
            </summary>
            <param name="value">大写字符串</param>
            <returns>小写字符串(原引用)</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.toLowerNotEmpty(System.String)">
            <summary>
            大写转小写
            </summary>
            <param name="value">大写字符串</param>
            <returns>小写字符串(原引用)</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.ToLower(System.Char*,System.Char*)">
            <summary>
            大写转小写
            </summary>
            <param name="start"></param>
            <param name="end">长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.FindNotNull(System.Char*,System.Char*,System.Char)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null,长度必须大于0</param>
            <param name="value">查找值</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.TrimStartNotEmpty(System.Char*,System.Char*)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.TrimEndNotEmpty(System.Char*,System.Char*)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.replaceNotNull(System.String,System.Char,System.Char)">
            <summary>
            字符替换
            </summary>
            <param name="value">字符串</param>
            <param name="oldChar">原字符</param>
            <param name="newChar">目标字符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.WriteBytes(System.Char*,System.Int32,System.Byte*)">
            <summary>
            获取Ascii字符串原始字节流
            </summary>
            <param name="start">字符串,不能为null</param>
            <param name="length">字符串长度</param>
            <param name="write">写入位置,不能为null</param>
        </member>
        <member name="T:AutoCSer.Extensions.TypeExtension">
            <summary>
            类型扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.fullName(System.Type,AutoCSer.Reflection.TypeNameBuildEnum,System.Boolean)">
            <summary>
            根据类型获取代码名称
            </summary>
            <param name="type">类型</param>
            <param name="buildEnum">类型名称输出类型</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
            <returns>代码名称</returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isSerializeNotSupport(System.Type)">
            <summary>
            类型是否不支持序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isSerializeNotSupportOrArrayRank(System.Type)">
            <summary>
            类型是否不支持序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isIgnoreSerialize(System.Type)">
            <summary>
            成员类型是否忽略序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isValueTypeNullable(System.Type)">
            <summary>
            判断是否可空类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isNullable(System.Type)">
            <summary>
            判断是否可空值类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.getNullableType(System.Type)">
            <summary>
            获取可空类型的值类型
            </summary>
            <param name="type">可空类型</param>
            <returns>值类型,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.getGenericInterface(System.Type)">
            <summary>
            获取所有泛型接口类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.getGenericInterfaceType(System.Type,System.Type)">
            <summary>
            根据指定泛型定义接口类型获取泛型接口类型
            </summary>
            <param name="type"></param>
            <param name="genericDefinitionInterfaceType">泛型定义接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isGenericInterfaceType(System.Type,System.Type)">
            <summary>
            判断是否指定泛型定义接口
            </summary>
            <param name="type"></param>
            <param name="genericDefinitionInterfaceType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FifoPriorityQueue`2">
            <summary>
            先进先出优先队列
            </summary>
            <typeparam name="KT">键值类型</typeparam>
            <typeparam name="VT">数据类型</typeparam>
        </member>
        <member name="T:AutoCSer.FifoPriorityQueue`2.Node">
            <summary>
            数据节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Previous">
            <summary>
            前一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Next">
            <summary>
            后一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Node.#ctor(`0,`1,AutoCSer.FifoPriorityQueue{`0,`1}.Node)">
            <summary>
            数据节点
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="previous"></param>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.dictionary">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Keys">
            <summary>
            获取所有关键字
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Values">
            <summary>
            获取所有数据
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.KeyValues">
            <summary>
            获取所有数据
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.header">
            <summary>
            头节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.end">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Item(`0)">
            <summary>
            数据对象
            </summary>
            <param name="key">查询键值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            先进先出优先队列
            </summary>
            <param name="dictionaryCapacity">字典初始化容器尺寸</param>
            <param name="isClear">是否需要清除数据</param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Empty">
            <summary>
            长度设为0（注意：对于引用类型没有置 0 可能导致内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Get(`0@,`1)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <param name="nullValue">失败空值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryGetValue(`0@,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <param name="value">目标数据对象</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.GetNode(`0@)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.CheckNode(`0@)">
            <summary>
            检查关键字以调整访问节点
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryGetOnly(`0,`1@)">
            <summary>
            获取数据(不调整位置)
            </summary>
            <param name="key">键值</param>
            <param name="value"></param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Set(`0@,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key">键值</param>
            <param name="value">数据对象</param>
            <returns>被替换的数据对象,没有返回default(VT)</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.SetOnly(`0,`1)">
            <summary>
            设置数据(不调整位置)
            </summary>
            <param name="key">键值</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafeAdd(`0@,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafePopNode">
            <summary>
            弹出一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Pop">
            <summary>
            弹出一个值
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryPopValue(`1@)">
            <summary>
            弹出一个值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryPopNode(AutoCSer.FifoPriorityQueue{`0,`1}.Node@)">
            <summary>
            弹出一个节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafePopValue">
            <summary>
            弹出一个值
            </summary>
            <returns>值</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Remove(`0@,`1@)">
            <summary>
            删除一个数据
            </summary>
            <param name="key">键值</param>
            <param name="value">被删除数据对象</param>
            <returns>是否删除了数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryGetHeader(`1@)">
            <summary>
            尝试获取第一个节点数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FragmentDictionary256`2">
            <summary>
            256 基分片 字典
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.FragmentDictionary256`2.dictionarys">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.Item(`0)">
            <summary>
            获取或者设置数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.KeyValues">
            <summary>
            键值对集合
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.Keys">
            <summary>
            关键字集合
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Clear">
            <summary>
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.ClearArray">
            <summary>
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Add(`0,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.GetIndex(`0)">
            <summary>
            获取分片索引
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.GetOrCreateDictionary(`0)">
            <summary>
            根据关键字获取字典，不存在时创建字典
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.TryAdd(`0,`1)">
            <summary>
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Set(`0,`1,`1@)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="removeValue">被删除数据</param>
            <returns>是否存在替换的被删除数据</returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.ContainsKey(`0)">
            <summary>
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Remove(`0)">
            <summary>
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Remove(`0,`1@)">
            <summary>
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.TryGetValue(`0,`1@)">
            <summary>
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.TryGetValue(`0,`1@,System.Collections.Generic.Dictionary{`0,`1}@)">
            <summary>
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.GetKeyValueArray">
            <summary>
            获取数据集合
            </summary>
            <returns>数据集合</returns>
        </member>
        <member name="T:AutoCSer.HeadLeftArray`1">
            <summary>
            带头节点的数组子串
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.HeadLeftArray`1.head">
            <summary>
            头节点
            </summary>
        </member>
        <member name="P:AutoCSer.HeadLeftArray`1.Head">
            <summary>
            头节点
            </summary>
        </member>
        <member name="F:AutoCSer.HeadLeftArray`1.Array">
            <summary>
            其它节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.HeadLeftArray`1.Values">
            <summary>
            返回所有数据
            </summary>
        </member>
        <member name="P:AutoCSer.HeadLeftArray`1.Count">
            <summary>
            节点总数
            </summary>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.#ctor(`0,System.Int32)">
            <summary>
            带头节点的数组子串
            </summary>
            <param name="head">头节点</param>
            <param name="capacity">初始化容器大小</param>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.#ctor(`0,AutoCSer.LeftArray{`0}@)">
            <summary>
            带头节点的数组子串
            </summary>
            <param name="head">头节点</param>
            <param name="array">其它节点集合</param>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.Add(`0)">
            <summary>
            添加其它节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.AddHead(`0)">
            <summary>
            设置头节点，并将原头节点添加为其它节点
            </summary>
            <param name="value">新的头节点</param>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.ArrayToHead(System.Int32)">
            <summary>
            将数组指定位置元素设置为头节点
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:AutoCSer.IEnumeratorTask">
            <summary>
            异步任务枚举
            </summary>
        </member>
        <member name="M:AutoCSer.IEnumeratorTask.MoveNextAsync">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.IEnumeratorTask`1">
            <summary>
            异步任务枚举
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.IEnumeratorTask`1.Current">
            <summary>
            获取当前数据
            </summary>
        </member>
        <member name="T:AutoCSer.Log.IgnoreException">
            <summary>
            日志忽略异常，不输出日志，用于测试
            </summary>
        </member>
        <member name="M:AutoCSer.Log.IgnoreException.#ctor">
            <summary>
            日志忽略异常，不输出日志，用于测试
            </summary>
        </member>
        <member name="M:AutoCSer.Log.IgnoreException.#ctor(System.String)">
            <summary>
            日志忽略异常，不输出日志，用于测试
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:AutoCSer.Log.File">
            <summary>
            文件日志
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.fileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.encoding">
            <summary>
            文件字符编码
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.fileStream">
            <summary>
            日志文件流
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.fileStreamName">
            <summary>
            日志文件流文件名称
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.streamWriter">
            <summary>
            日志文件流
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.logLock">
            <summary>
            日志队列访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.Level">
            <summary>
            允许日志级别
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.isCheckFlush">
            <summary>
            是否需要检查文件写入状态
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.#ctor(AutoCSer.LogLevelEnum,System.String,System.Text.Encoding)">
            <summary>
            日志处理
            </summary>
            <param name="level">允许日志级别</param>
            <param name="fileName">日志文件</param>
            <param name="encoding">默认为 UTF-8</param>
        </member>
        <member name="M:AutoCSer.Log.File.open">
            <summary>
            打开日志文件
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.DisposeAsync">
            <summary>
            释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Log.File.IsAnyLevel(AutoCSer.LogLevelEnum)">
            <summary>
            判断是否支持任意级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Log.File.write(System.String,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            写日志文件
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="callerMemberName"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Log.File.checkFlush">
            <summary>
            检查文件写入状态
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.Debug(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Log.File.Exception(System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Log.File.Flush">
            <summary>
            等待写入完成
            </summary>
            <returns>写盘是否成功</returns>
        </member>
        <member name="M:AutoCSer.Log.File.MoveBak">
            <summary>
            移动日志文件
            </summary>
            <returns>新的日志文件名称</returns>
        </member>
        <member name="T:AutoCSer.Json.CustomSerializeGenericType">
            <summary>
            自定义 JSON 序列化泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Json.CustomSerializeGenericType.SerializeDelegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Json.CustomSerializeGenericType.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Json.CustomSerializeGenericType.create``1">
            <summary>
            创建自定义 JSON 序列化泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Json.CustomSerializeGenericType.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.CustomSerializeGenericType.Get(System.Type)">
            <summary>
            获取自定义 JSON 序列化泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.CustomSerializeGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Json.CustomSerializeGenericType`1.Serialize(AutoCSer.JsonSerializer,`0)">
            <summary>
            自定义序列化
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="P:AutoCSer.Json.CustomSerializeGenericType`1.SerializeDelegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Json.CustomSerializeGenericType`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            自定义反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="P:AutoCSer.Json.CustomSerializeGenericType`1.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ICustomSerialize">
            <summary>
            仅用于快速判断是否可能实现接口 ICustomSerialize{T}
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ICustomSerialize`1">
            <summary>
            自定义序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Json.ICustomSerialize`1.Serialize(AutoCSer.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Json.ICustomSerialize`1.Deserialize(AutoCSer.JsonDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.Json.DeserializeDynamicMethod">
            <summary>
            反序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.pointerRefType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.returnLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.index">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.isMemberMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.#ctor(AutoCSer.Metadata.GenericType,System.Boolean)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
            <param name="isMemberMap"></param>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.isNameMethod">
            <summary>
            是否匹配默认顺序名称
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.isName">
            <summary>
            是否匹配默认顺序名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.nextNameIndexMethod">
            <summary>
            移动到下一个名称
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.nextIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.CreateDynamicMethod(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.CreateDynamicMethod(System.Type,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <param name="propertyMethod"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="T:AutoCSer.Json.DeserializeInt">
            <summary>
            整数反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeInt.Number">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeInt.Sign">
            <summary>
            正负符号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeInt.IsNull">
            <summary>
            是否 null
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.#ctor(System.UInt32)">
            <summary>
            整数反序列化
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetByteNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetSByte(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetSByteNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetUShortNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetShort(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetShortNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetUIntNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetInt(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetIntNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.DeserializeResult">
            <summary>
            JSON 反序列化状态结果
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.Index">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.Json">
            <summary>
            JSON 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.CustomError">
            <summary>
            自定义错误
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeResult.#ctor(AutoCSer.Metadata.MemberMap)">
            <summary>
            JSON 反序列化状态结果
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeResult.#ctor(AutoCSer.Json.DeserializeStateEnum,System.Int32,System.String,System.String)">
            <summary>
            JSON 反序列化状态结果
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="json"></param>
            <param name="customError"></param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeResult.#ctor(AutoCSer.Json.DeserializeStateEnum,AutoCSer.SubString@,System.Int32,System.String)">
            <summary>
            JSON 反序列化状态结果
            </summary>
            <param name="state"></param>
            <param name="json"></param>
            <param name="index"></param>
            <param name="customError"></param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeResult.op_Implicit(AutoCSer.Json.DeserializeResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.DeserializeStateEnum">
            <summary>
            JSON 解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NullJson">
            <summary>
            JSON 字符串参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.CrashEnd">
            <summary>
            非正常意外结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.UnknownNote">
            <summary>
            未能识别的注释
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NoteNotRound">
            <summary>
            /**/ 注释缺少回合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotNull">
            <summary>
            null 值解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotBool">
            <summary>
            逻辑值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotNumber">
            <summary>
            非数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NumberOutOfRange">
            <summary>
            数字解析超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotHex">
            <summary>
            16 进制数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotDateTime">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotTimeSpan">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotChar">
            <summary>
            字符解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotGuid">
            <summary>
            Guid解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotString">
            <summary>
            字符串解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.StringEnter">
            <summary>
            字符串被换行截断
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.ErrorType">
            <summary>
            类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotArrayValue">
            <summary>
            数组数据解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotEnumChar">
            <summary>
            非枚举字符
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NoFoundEnumValue">
            <summary>
            没有找到匹配的枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotFoundName">
            <summary>
            没有找到成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotFoundColon">
            <summary>
            没有找到冒号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotObject">
            <summary>
            对象解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.UnknownValue">
            <summary>
            忽略值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotSupport">
            <summary>
            不支持的类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.ConstructorNull">
            <summary>
            构造函数返回 null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.MemberMap">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.CustomError">
            <summary>
            自定义反序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.Json.EnumULongDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.EnumULongDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumULongDeserialize`1.tryDeserializeNumber(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.EnumULongDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumULongDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.EnumDeserialize`1">
            <summary>
            枚举值解析
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Json.EnumDeserialize`1.enumSearcher">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumDeserialize`1.deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumDeserialize`1.getIndex(AutoCSer.JsonDeserializer,`0@,System.Int32@,System.Int32@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
            <param name="index">第一个枚举索引</param>
            <param name="nextIndex">第二个枚举索引</param>
        </member>
        <member name="T:AutoCSer.Json.MemberNameSearcher">
            <summary>
            成员名称搜索数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.type">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.Names">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.Searcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.MemberNameSearcher.#ctor">
            <summary>
            空成员名称搜索数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.MemberNameSearcher.#ctor(System.Type,System.String[])">
            <summary>
            成员名称搜索数据
            </summary>
            <param name="type"></param>
            <param name="names"></param>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.Null">
            <summary>
            空成员名称搜索数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.cache">
            <summary>
            成员名称查找数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.cacheLock">
            <summary>
            成员名称查找数据缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.lastSearcher">
            <summary>
            最后一次访问的搜索数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.MemberNameSearcher.Get(System.Type,System.String[])">
            <summary>
            获取成员名称查找数据
            </summary>
            <param name="type">类型</param>
            <param name="names"></param>
            <returns>成员名称查找数据</returns>
        </member>
        <member name="T:AutoCSer.Json.NumberTypeEnum">
            <summary>
            数字类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.NaN">
            <summary>
            NaN
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.Null">
            <summary>
            null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberDynamicMethod">
            <summary>
            序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.getCharStreamMethod">
            <summary>
            获取字符串输出缓冲区属性方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.isFirstMember">
            <summary>
            是否第一个字段
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.push(System.String)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,System.Reflection.MethodInfo)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.checkNull(System.Type,System.Reflection.MethodInfo)">
            <summary>
            null 值检查
            </summary>
            <param name="memberType"></param>
            <param name="serializeMethod"></param>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.writeJsonNullMethod">
            <summary>
            输出 null 值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.WriteName(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.String,System.Boolean)">
            <summary>
            写入名称
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="name"></param>
            <param name="isNext"></param>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.#ctor(AutoCSer.Metadata.GenericType)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.push(System.String,System.Int32,System.Reflection.Emit.Label)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
            <param name="memberIndex"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,System.Reflection.MethodInfo)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.checkNull(System.Type,System.Reflection.Emit.Label,System.Reflection.MethodInfo)">
            <summary>
            null 值检查
            </summary>
            <param name="memberType"></param>
            <param name="endLabel"></param>
            <param name="serializeMethod"></param>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.writeJsonNullMethod">
            <summary>
            输出 null 值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Json.Common">
            <summary>
            公共调用
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Common.getTypeSerializeDelegate(System.Type,AutoCSer.Metadata.GenericType@,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.GetTypeSerializeDelegate(AutoCSer.Metadata.GenericType,AutoCSer.TextSerialize.DelegateReference@,AutoCSer.JsonSerializeAttribute@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.GetMemberSerializeDelegate(System.Type)">
            <summary>
            获取成员序列化委托
            </summary>
            <param name="type">成员类型</param>
        </member>
        <member name="M:AutoCSer.Json.Common.CheckCompleted(System.Type,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            计算状态完成检查
            </summary>
            <param name="type"></param>
            <param name="reference"></param>
        </member>
        <member name="M:AutoCSer.Json.Common.Check(AutoCSer.TextSerialize.LoopTypeArray@,System.Type,System.Collections.Generic.HashSet{AutoCSer.HashObject{System.Type}})">
            <summary>
            循环引用检查
            </summary>
            <param name="array"></param>
            <param name="type"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.getTypeDeserializeDelegate(System.Type,AutoCSer.Metadata.GenericType@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.GetTypeDeserializeDelegate(AutoCSer.Metadata.GenericType,AutoCSer.JsonSerializeAttribute@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.GetMemberDeserializeDelegate(System.Type)">
            <summary>
            获取成员反序列化委托
            </summary>
            <param name="type">成员类型</param>
            <returns>成员反序列化委托</returns>
        </member>
        <member name="T:AutoCSer.Json.CustomConfig">
            <summary>
            自定义全局配置
            </summary>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.GetCustomSerializeDelegate(System.Type)">
            <summary>
            根据类型获取 JSON 自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.JsonSerializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Write(AutoCSer.JsonSerializer,System.DateTime)">
            <summary>
            写入时间值
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Write(AutoCSer.JsonSerializer,System.TimeSpan)">
            <summary>
            写入时间值
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.NotSupport``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            自定义序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.GeteCustomDeserializDelegate(System.Type)">
            <summary>
            根据类型获取 JSON 自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.JsonDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.Single@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.Double@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.Decimal@)">
            <summary>
            自定义反序列化小数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,System.DateTime@)">
            <summary>
            自定义反序列化时间值
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,System.TimeSpan@)">
            <summary>
            自定义反序列化时间值
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.NotSupport``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            自定义反序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">JSON 反序列化</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.DateTimeTypeEnum">
            <summary>
            时间序列化输出类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DateTimeTypeEnum.Default">
            <summary>
            yyyy-MM-ddTHH:mm:ss...
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DateTimeTypeEnum.ThirdParty">
            <summary>
            第三方格式 /Date(xxx)/
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DateTimeTypeEnum.JavaScript">
            <summary>
            JS格式 new Date(xxx)
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DateTimeTypeEnum.CustomFormat">
            <summary>
            自定义 ToString("xxx") 格式
            </summary>
        </member>
        <member name="T:AutoCSer.Json.StateSearcher">
            <summary>
            名称状态查找器
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.#ctor(AutoCSer.Memory.Pointer)">
            <summary>
            名称查找器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchName(AutoCSer.JsonDeserializer,System.Boolean@)">
            <summary>
            获取名称索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="isQuote">名称是否带引号</param>
            <returns>名称索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchString(AutoCSer.JsonDeserializer)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.searchString(AutoCSer.JsonDeserializer,System.Char)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">第一个字符</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchFlagEnum(AutoCSer.JsonDeserializer)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.flagEnum(AutoCSer.JsonDeserializer,System.Char)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">当前字符</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.NextFlagEnum(AutoCSer.JsonDeserializer)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="T:AutoCSer.Json.ThreadStaticDeserializer">
            <summary>
            反序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticDeserializer.Deserializer">
            <summary>
            JSON 反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticDeserializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticDeserializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ThreadStaticDeserializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.ThreadStaticDeserializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.ThreadStaticSerializer">
            <summary>
            序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticSerializer.Serializer">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticSerializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticSerializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ThreadStaticSerializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.ThreadStaticSerializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.TypeDeserializer`1">
            <summary>
            类型反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="T:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter">
            <summary>
            成员解析器过滤
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.Deserialize">
            <summary>
            成员解析器
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.memberMapIndex">
            <summary>
            成员位图索引
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.Set(System.Reflection.Emit.DynamicMethod,AutoCSer.Metadata.MemberIndexInfo)">
            <summary>
            设置数据
            </summary>
            <param name="dynamicMethod"></param>
            <param name="member"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.Call(AutoCSer.JsonDeserializer,AutoCSer.Metadata.MemberMap{`0},`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="memberMap">成员位图</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeDeserializer`1.DeserializeMember">
            <summary>
            默认名称解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <param name="names"></param>
        </member>
        <member name="T:AutoCSer.Json.TypeDeserializer`1.DeserializeMemberMap">
            <summary>
            默认名称解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <param name="names"></param>
            <param name="memberMap"></param>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.DefaultDeserializer">
            <summary>
            解析委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberDeserializer">
            <summary>
            默认名称解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberMapDeserializer">
            <summary>
            默认名称解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberDeserializers">
            <summary>
            成员解析器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberSearcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberNames">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.deserializeValue(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.deserializeClass(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.DeserializeMembers(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数据成员解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.nullMember(AutoCSer.JsonDeserializer,`0@,AutoCSer.Memory.Pointer@)">
            <summary>
            JSON 反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <param name="names"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.nullMemberMap(AutoCSer.JsonDeserializer,`0@,AutoCSer.Memory.Pointer@,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            JSON 反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <param name="names"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.noMemberValue(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            无成员对象解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.noMember(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            无成员对象解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeSerializer`1">
            <summary>
            类型序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.DefaultSerializer">
            <summary>
            转换委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.memberSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.SerializeDelegateReference">
            <summary>
            JSON 序列化委托循环引用信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.SerializeNull(AutoCSer.JsonSerializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Serialize(AutoCSer.JsonSerializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.SerializeNull(AutoCSer.JsonSerializer,`0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Serialize(AutoCSer.JsonSerializer,`0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.MemberSerialize(AutoCSer.JsonSerializer,`0)">
            <summary>
            对象成员序列化
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.SerializeCommandServer(AutoCSer.JsonSerializer,`0@)">
            <summary>
            命令服务对象成员序列化
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Array(AutoCSer.JsonSerializer,`0[],System.Int32)">
            <summary>
            数组序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组对象</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Collection(AutoCSer.JsonSerializer,System.Collections.Generic.ICollection{`0})">
            <summary>
            集合序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StringDictionary(AutoCSer.JsonSerializer,System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            字典序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StringDictionaryToArray(AutoCSer.JsonSerializer,System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            字典序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Dictionary``1(AutoCSer.JsonSerializer,System.Collections.Generic.IDictionary{``0,`0})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.DictionaryToArray``1(AutoCSer.JsonSerializer,System.Collections.Generic.IDictionary{``0,`0})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.nullMember(AutoCSer.JsonSerializer,`0)">
            <summary>
            JSON 序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.nullMemberMap(AutoCSer.Metadata.MemberMap{`0},AutoCSer.JsonSerializer,`0,AutoCSer.Memory.CharStream)">
            <summary>
            JSON 序列化
            </summary>
            <param name="memberMap"></param>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.noMemberValue(AutoCSer.JsonSerializer,`0)">
            <summary>
            输出无成员对象
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.noMember(AutoCSer.JsonSerializer,`0)">
            <summary>
            输出无成员对象
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Json.EnumLongDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.EnumLongDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumLongDeserialize`1.tryDeserializeNumber(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.EnumLongDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumLongDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.EnumUIntDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.EnumUIntDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumUIntDeserialize`1.tryDeserializeNumber(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.EnumUIntDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumUIntDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.EnumIntDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.EnumIntDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumIntDeserialize`1.tryDeserializeNumber(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.EnumIntDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumIntDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.EnumUShortDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.EnumUShortDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumUShortDeserialize`1.tryDeserializeNumber(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.EnumUShortDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumUShortDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.EnumShortDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.EnumShortDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumShortDeserialize`1.tryDeserializeNumber(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.EnumShortDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumShortDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.EnumByteDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.EnumByteDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumByteDeserialize`1.tryDeserializeNumber(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.EnumByteDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumByteDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.EnumSByteDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.EnumSByteDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumSByteDeserialize`1.tryDeserializeNumber(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.EnumSByteDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.EnumSByteDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Memory.ByteArray">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.Buffer">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.Pool">
            <summary>
            字节数组缓冲区池
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.ByteArray.BufferSize">
            <summary>
            缓存区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.Indexs">
            <summary>
            缓存区指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.IsRemove">
            <summary>
            是否已经从缓存区池中移除
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.#ctor(System.Int32)">
            <summary>
            字节数组缓冲区池
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.#ctor(AutoCSer.Memory.ByteArrayPool)">
            <summary>
            字节数组缓冲区池
            </summary>
            <param name="pool"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.FreeIndex">
            <summary>
            释放缓存区指针
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.TryFree(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            尝试释放字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.Free(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            释放字节数组缓冲区
            </summary>
            <param name="buffer"></param>
            <returns>是否需要重新添加到 空闲缓冲区集合</returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.Remove(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            移除需要清除的字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.TryRemoveGet(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            尝试移除需要清除的字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.sortComparer(AutoCSer.Memory.ByteArray,AutoCSer.Memory.ByteArray)">
            <summary>
            未使用缓存区数量排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.SortComparer">
            <summary>
            未使用缓存区数量排序
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.ByteArrayBuffer">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayBuffer.Buffer">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayBuffer.StartIndex">
            <summary>
            缓冲区起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayBuffer.CurrentIndex">
            <summary>
            当前相对位置，保留字段
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.ByteArrayBuffer.BufferCurrentIndex">
            <summary>
            当前绝对位置
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            复制数据
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetClearBuffer">
            <summary>
            清除数据并返回字节数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.Set(AutoCSer.Memory.ByteArray)">
            <summary>
            设置字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.Set(AutoCSer.Memory.ByteArray,System.Int32)">
            <summary>
            设置字节数组缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.TryRemoveGet">
            <summary>
            尝试移除需要清除的字节数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.Free">
            <summary>
            释放字节数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.FreeCopy(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            释放复制缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.ReSize(System.Int32,System.Int32)">
            <summary>
            当字节大小不满足时，重新获取字节数组缓冲区
            </summary>
            <param name="size"></param>
            <param name="currentIndex"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            设置套接字缓存区
            </summary>
            <param name="receiveAsyncEventArgs"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.SetCurrent(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            设置套接字缓存区
            </summary>
            <param name="receiveAsyncEventArgs"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.CopyFromFree(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            释放当前缓存区并复制字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.CopyFromSetSize(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            复制数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetSubArray(System.Int32,System.Int32)">
            <summary>
            获取数组字串
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetSeekSubArray(System.Int32)">
            <summary>
            获取数组字串
            </summary>
            <param name="seek"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.Set(AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            设置数组字串
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetSubArray(System.Int32)">
            <summary>
            获取数组字串
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetFixedBuffer">
            <summary>
            获取 fixed 缓冲区，DEBUG 模式对数据范围进行检测
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Memory.BufferSizeBitsEnum">
            <summary>
            缓冲区字节大小二进制位数
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Byte256">
            <summary>
            256B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Byte512">
            <summary>
            512B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte">
            <summary>
            1KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte2">
            <summary>
            2KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte4">
            <summary>
            4KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte8">
            <summary>
            8KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte16">
            <summary>
            16KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte32">
            <summary>
            32KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte64">
            <summary>
            64KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte128">
            <summary>
            128KB
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.ByteArrayPool">
            <summary>
            字节数组缓冲区池
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.FixedBufferSize">
            <summary>
            128KB 避免 GC 压缩
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.Size">
            <summary>
            缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.bufferCount">
            <summary>
            已经创建的缓存区数量
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.buffers">
            <summary>
            空闲缓冲区集合
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.#ctor(System.Int32,System.Int32)">
            <summary>
            字节数组缓冲区池
            </summary>
            <param name="size"></param>
            <param name="bufferCount"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.Get(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            获取字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.get(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            获取字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.Free(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            释放字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.TryRemoveGet(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            尝试移除需要清除的字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.free">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.minSizeBits">
            <summary>
            字节数组缓冲区池最小缓冲区二进制位数 4 为 16B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.maxSizeBits">
            <summary>
            字节数组缓冲区池最大缓冲区二进制位数 30 为 1GB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.pools">
            <summary>
            缓冲区池集合
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.poolLock">
            <summary>
            缓冲区池集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.getPoolByIndex(System.Int32)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.GetPool(AutoCSer.Memory.BufferSizeBitsEnum)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="bits">缓冲区字节大小二进制位数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.getPool(System.Int32)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.GetBuffer(AutoCSer.Memory.ByteArrayBuffer@,System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.GetBuffer(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.GetSingleBuffer(AutoCSer.Memory.ByteArrayBuffer@,System.Int32)">
            <summary>
            获取独立缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.clearCache">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedStream">
            <summary>
            非托管内存数据流
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStream.#ctor(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="unmanagedPool">非托管内存池</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStream.#ctor(AutoCSer.Memory.UnmanagedPoolPointer,System.Boolean)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStream.Null">
            <summary>
            默认空非托管内存数据流
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.CharStream">
            <summary>
            内存字符流
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.CharStream.Char">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.CharStream.CurrentChar">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.CharStream.Length">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.#ctor(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            内存字符流
            </summary>
            <param name="unmanagedPool">非托管内存池</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.#ctor(AutoCSer.Memory.UnmanagedPoolPointer@,System.Boolean)">
            <summary>
            内存字符流
            </summary>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.#ctor(AutoCSer.Memory.UnmanagedPoolPointer,System.Boolean)">
            <summary>
            内存字符流
            </summary>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.GetPrepCharSizeCurrent(System.Int32)">
            <summary>
            预增数据流字符长度
            </summary>
            <param name="size">增加字符长度</param>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.PrepCharSize(System.Int32)">
            <summary>
            预增数据流字符长度
            </summary>
            <param name="size">增加字符长度</param>
            <returns>是否增加成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.SimpleWrite(System.String)">
            <summary>
            写字符串，适合零碎短小数据(不足8字节按8字节算)
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteNotNull(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(System.String,System.Int32,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
            <param name="index">起始位置</param>
            <param name="size">长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(AutoCSer.SubString)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(AutoCSer.SubString@)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Byte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.SByte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.UInt16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Int16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.UInt32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Int32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.UInt64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.UnsafeToString(System.UInt64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Int64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.UnsafeToString(System.Int64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonNull">
            <summary>
            输出 null 值
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonNull(AutoCSer.Memory.CharStream)">
            <summary>
            输出 null 值
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonObject">
            <summary>
            输出空对象
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonArray">
            <summary>
            输出空数组
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonEmptyString">
            <summary>
            写入空字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonObjectString">
            <summary>
            输出对象字符串 [object Object]
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonArrayStart(System.Int32)">
            <summary>
            预申请数组长度并写入数组开始符号 [
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonBool(System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.Byte)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeJsonHex(System.UInt32,System.Int32)">
            <summary>
            数字转换成十六进制字符串 0x..
            </summary>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.SByte)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeJsonHex2(System.UInt32)">
            <summary>
            数字转换成十六进制字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.UInt16)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeJsonHex4(System.UInt32)">
            <summary>
            数字转换成十六进制字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.UInt32)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeJsonHex8(System.UInt32)">
            <summary>
            数字转换成十六进制字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.UInt64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteNegative(System.Int32)">
            <summary>
            预增数据流字符长度并写入负号
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonString(System.Int64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonString(System.UInt64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Single)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonInfinity(System.Single)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Double)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonInfinity(System.Double)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeDoubleMaxValue(System.Double)">
            <summary>
            输出 double 最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeDoubleMinValue(System.Double)">
            <summary>
            输出 double 最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonNaN">
            <summary>
            输出非数字值
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WritePositiveInfinity">
            <summary>
            输出正无穷
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteNegativeInfinity">
            <summary>
            输出负无穷
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeInfinity">
            <summary>
            输出无穷
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Guid)">
            <summary>
            Guid转换成字符串（单引号）
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Guid@)">
            <summary>
            Guid转换成字符串（双引号）
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Char)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Char*,System.Int32)">
            <summary>
            写入 JSON 字符串
            </summary>
            <param name="stringStart">起始位置</param>
            <param name="stringLength">字符串长度，必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonString(System.DateTime)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonString(System.TimeSpan)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeString(System.TimeSpan,System.Char)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
            <param name="quote"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonNewDate">
            <summary>
            写入 new Date(
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonOtherDate">
            <summary>
            时间转字符串 第三方格式开始 "/Date(
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonOtherDateEnd">
            <summary>
            时间转字符串 第三方格式结束 )/"
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonName(System.String)">
            <summary>
            写入 JSON 名称
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonKeyValueKey(System.Int32)">
            <summary>
            写入 JSON Key
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonKeyValueValue">
            <summary>
            写入 JSON Value
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlDateTime2String(System.DateTime)">
            <summary>
            时间转字符串 yyyy/MM/dd HH:mm:ss.fffffff
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlDateTimeString(System.DateTime)">
            <summary>
            时间转字符串 yyyy/MM/dd HH:mm:ss.fff
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlSmallDateTimeString(System.DateTime)">
            <summary>
            时间转字符串 yyyy/MM/dd HH:mm:ss
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlDateString(System.DateTime)">
            <summary>
            时间转字符串 yyyy/MM/dd
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlString(System.TimeSpan)">
            <summary>
            时间转字符串 HH:mm:ss.fffffff
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(System.String,System.Char)">
            <summary>
            输出字符串，不处理转义符
            </summary>
            <param name="value"></param>
            <param name="quoteChar">默认为双引号</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Boolean)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Byte)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.SByte)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Int16)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.UInt16)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Int32)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.UInt32)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Int64)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.UInt64)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Single)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Double)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Decimal)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Char)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.DateTime)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Guid)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.String)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(AutoCSer.SubString)">
            <summary>
            WebView 写入 JSON 字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Memory.Pointer">
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="F:AutoCSer.Memory.Pointer.Data">
            <summary>
            指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Pointer.ByteSize">
            <summary>
            总字节长度
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Size">
            <summary>
            总字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Pointer.CurrentIndex">
            <summary>
            当前数据操作位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Index">
            <summary>
            当前数据操作位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Current">
            <summary>
            当前数据操作位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.End">
            <summary>
            数据结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.FreeSize">
            <summary>
            空闲字节数量
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.IsFreeSize">
            <summary>
            不为 0 表示存在空闲字节
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.#ctor(System.Void*,System.Int32)">
            <summary>
            指针
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Byte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.SByte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Short">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.UShort">
            <summary>
            双字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Char">
            <summary>
            字符指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Int">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.UInt">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Long">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.ULong">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Equals(System.Object)">
            <summary>
            指针比较
            </summary>
            <param name="obj">待比较指针</param>
            <returns>指针是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Get(System.Int32)">
            <summary>
            获取指定字节
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Equals(AutoCSer.Memory.Pointer)">
            <summary>
            指针比较
            </summary>
            <param name="other">待比较指针</param>
            <returns>指针是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetNull">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Clear">
            <summary>
            数据全部设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetDataClearOnly">
            <summary>
            获取指针并清除
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Set(System.Void*,System.Int32)">
            <summary>
            设置指针
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetNull(System.Void*)">
            <summary>
            当指针匹配时清空数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Slice(System.Int32,System.Int32)">
            <summary>
            获取子段
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="byteSize">长度</param>
            <returns>子段</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.CopyTo(AutoCSer.Memory.Pointer@)">
            <summary>
            复制数据到另外一个指针
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetBeforeMove(System.Int32)">
            <summary>
            移动当前数据操作位置并返回移动之前的位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetIndexBeforeMove(System.Int32)">
            <summary>
            移动当前数据操作位置并返回移动之前的位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetCurrent(System.Void*)">
            <summary>
            设置当前数据操作位置
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetBit(System.Int32)">
            <summary>
            设置位图
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetBit(System.Int32)">
            <summary>
            获取位图数据
            </summary>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.MoveToEnd">
            <summary>
            移动当前位置到最后
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.CheckMoveSize(System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.MoveSize(System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetMoveSize(System.Int32)">
            <summary>
            移动当前位置并返回当前位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetBeforeMoveSize(System.Int32)">
            <summary>
            移动当前位置并返回移动之前的位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeMoveSize(System.Int32,System.Int32)">
            <summary>
            写入缓冲区字节数
            </summary>
            <param name="startIndex"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.newByteSize(System.Int32)">
            <summary>
            扩展数据总字节数
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.NewByteSize(System.Int32)">
            <summary>
            扩展数据总字节数
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.NewByteSize(System.Int32,AutoCSer.Memory.UnmanagedPool)">
            <summary>
            扩展数据总字节数
            </summary>
            <param name="size"></param>
            <param name="freePool"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.PopInt">
            <summary>
            弹出一个整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Guid@)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            写入会话回调标识
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int32,System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int32,System.Int32,System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int64,System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            写入 64 字节数据
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSize(System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="value"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSize(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSize(System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSize(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Byte*,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串，长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.String,System.Int32,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串，长度必须大于0</param>
            <param name="index">起始位置</param>
            <param name="size">长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.String,System.Char)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
            <param name="quoteChar"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteJsonCustomNameFirst(System.String)">
            <summary>
            写 JSON 名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteJsonCustomNameNext(System.String)">
            <summary>
            写 JSON 名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteJson(System.Guid@,System.Char)">
            <summary>
            Guid转换成字符串
            </summary>
            <param name="value">Guid</param>
            <param name="quoteChar"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.JavaScriptUnescape(System.Byte*,System.Byte*)">
            <summary>
            模拟javascript解码函数unescape
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.javascriptUnescape(System.Byte*,System.Byte*)">
            <summary>
            模拟javascript解码函数unescape
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SimpleWrite(System.String)">
            <summary>
            复制字符串，适合零碎短小数据(不足8字节按8字节算)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SimpleWrite(System.Byte*,System.Int32)">
            <summary>
            复制字节数组，适合零碎短小数据(不足8字节按8字节算)
            </summary>
            <param name="source"></param>
            <param name="size">必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize1">
            <summary>
            增加 1 个空白字节
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize2">
            <summary>
            增加 2 个空白字节
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize3">
            <summary>
            增加 3 个空白字节
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFill(System.Int32)">
            <summary>
            填充空白字节
            </summary>
            <param name="fillSize">字节数量</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillWithStartIndex(System.Int32)">
            <summary>
            补白对齐 4 字节
            </summary>
            <param name="startIndex">起始位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillLeftByteSize(System.Int32)">
            <summary>
            左侧补白对齐 4 字节
            </summary>
            <param name="size">增加数据长度</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillLeftByteSize2(System.Int32)">
            <summary>
            左侧补白对齐 4 字节
            </summary>
            <param name="size">增加数据长度</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize(System.Void*)">
            <summary>
            增加当前数据长度并且补白对齐 4 字节
            </summary>
            <param name="current">新的当前位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize2(System.Void*)">
            <summary>
            增加当前数据长度并且补白对齐 4 字节
            </summary>
            <param name="current">新的当前位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.JsonSerializeFill(System.Int32)">
            <summary>
            二进制序列化 JSON 成员序列化补白对齐 4 字节并写入 JSON 字节长度
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetArray">
            <summary>
            转换成字节数组
            </summary>
            <returns>字节数组</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetBuffer(AutoCSer.Memory.ByteArrayBuffer@,System.Int32)">
            <summary>
            转换成字节数组
            </summary>
            <param name="buffer"></param>
            <param name="index">复制起始位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.TimeSpan)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Guid)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Byte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.SByte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Boolean)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.TimeSpan)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="T:AutoCSer.Memory.Common">
            <summary>
            内存或字节数组处理
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Common.Clear(System.UInt64*,System.Int32)">
            <summary>
            填充整数
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.Clear(System.Byte*,System.Int32)">
            <summary>
            填充整数
            </summary>
            <param name="src">串起始地址，不能为 null</param>
            <param name="count">字节数量，必须大于 0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.Fill(System.UInt64*,System.Int32,System.UInt64)">
            <summary>
            填充整数
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="count">整数数量,大于0</param>
            <param name="value">填充整数</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.Copy(System.Void*,System.Void*,System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.Copy(System.Void*,System.Void*,System.Int64)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.SimpleCopyNotNull64(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            复制字节数组(不足8字节按8字节算)
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.SequenceEqual(System.Void*,System.Void*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.SimpleEqualNotNull(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.SimpleEqualNotNull(AutoCSer.Memory.Pointer@,AutoCSer.Memory.Pointer@,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.GetHashCode64(System.Byte*,System.Int32)">
            <summary>
            计算 64 位 HASH 值
            </summary>
            <param name="start">数据起始位置</param>
            <param name="length">数据长度</param>
            <returns>64 位 HASH 值</returns>
        </member>
        <member name="F:AutoCSer.Memory.Common.clearCountCaches">
            <summary>
            清除缓存数据委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Common.clearCaches">
            <summary>
            清除缓存数据委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Common.clearCacheLock">
            <summary>
            清除缓存数据委托集合 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Common.AddClearCache(System.Action{System.Int32})">
            <summary>
            添加清除缓存数据委托
            </summary>
            <param name="clearCache"></param>
            <returns>false 表示已经添加过，无需重复添加</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.RemoveClearCache(System.Action{System.Int32})">
            <summary>
            移除清除缓存数据委托
            </summary>
            <param name="clearCache"></param>
            <returns>false 表示没有找到委托</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.AddClearCache(System.Action)">
            <summary>
            添加清除缓存数据委托
            </summary>
            <param name="clearCache"></param>
            <returns>false 表示已经添加过，无需重复添加</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.AddClearCache(System.Action,System.Int32)">
            <summary>
            添加清除缓存数据委托
            </summary>
            <param name="clearCache"></param>
            <param name="internalTaskSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.ClearCache(System.Int32,System.Boolean)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
            <param name="IsGCCollect">是否调用 GC 回收</param>
        </member>
        <member name="T:AutoCSer.Memory.ObjectRoot.ScanType">
            <summary>
            待检测类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ObjectRoot.ScanType.types">
            <summary>
            待检测类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.ObjectRoot.ScanType.Types">
            <summary>
            待检测类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ObjectRoot.ScanType.typeLock">
            <summary>
            待检测类型集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ObjectRoot.ScanType.TryAdd(System.Type)">
            <summary>
            添加待检测类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ObjectRoot.ScanType.Add(System.Type)">
            <summary>
            添加待检测类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:AutoCSer.Memory.Unmanaged">
            <summary>
            非托管内存
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Unmanaged.staticSize">
            <summary>
            不释放的固定内存申请大小
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetStatic(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)
            </summary>
            <param name="size"></param>
            <param name="isClear">是否需要清除</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetStaticPointer(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)
            </summary>
            <param name="size"></param>
            <param name="isClear"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetStaticPointer8(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)（8字节补齐）
            </summary>
            <param name="size"></param>
            <param name="isClear"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.FreeStatic(AutoCSer.Memory.Pointer@)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.FreeStatic(AutoCSer.Memory.Pointer@,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="F:AutoCSer.Memory.Unmanaged.totalSize">
            <summary>
            非托管内存申请字节数
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Get(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetPointer(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetPointer8(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存（8字节补齐）
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Free(AutoCSer.Memory.Pointer@)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Free(AutoCSer.Memory.Pointer@,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Free(System.Void*,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Free(System.Byte*@,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.FreePool(System.Void*,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.FreeOnly(AutoCSer.Memory.Pointer@)">
            <summary>
            释放内存（一次性单线程队列释放，不允许多次调用）
            </summary>
            <param name="data">非托管内存起始指针</param>
        </member>
        <member name="F:AutoCSer.Memory.Unmanaged.AutoCSerStatic">
            <summary>
            AutoCSer 使用静态内存段，防止碎片化
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Unmanaged.NullByte8">
            <summary>
            8个0字节（公用）
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetDeBruijn32Number">
            <summary>
            2^n相关32位deBruijn序列集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetDateWeekData">
            <summary>
            星期字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetDateMonthData">
            <summary>
            月份字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetJsonDeserializeBits">
            <summary>
            JSON 解析字符状态位
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetJsonDeserializeEscapeCharData">
            <summary>
            JSON 转义字符集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetRandomSecureSeeds">
            <summary>
            随机种子
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetReusableDictionaryCapacityPrimes">
            <summary>
            可重用字典静态容器大小质数集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetReusableDictionaryPrimes">
            <summary>
            可重用字典小质数集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedPool">
            <summary>
            非托管内存池
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.free">
            <summary>
            空闲内存地址
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.freeLock">
            <summary>
            空闲内存地址访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.Size">
            <summary>
            缓冲区尺寸
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.#ctor(System.Int32)">
            <summary>
            内存池
            </summary>
            <param name="size">缓冲区尺寸</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.tryGet">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPointer">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPointer(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPoolPointer">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.push(System.Byte*)">
            <summary>
            保存缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.PushOnly(AutoCSer.Memory.Pointer@)">
            <summary>
            保存缓冲区（一次性单线程队列释放，不允许多次调用）
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.PushPool(AutoCSer.Memory.Pointer@)">
            <summary>
            保存缓冲区（多线程并发）
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.Free(AutoCSer.Memory.Pointer@)">
            <summary>
            保存缓冲区（多线程并发）
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.clear(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.clear(System.Byte*)">
            <summary>
            释放缓冲区
            </summary>
            <param name="head"></param>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.TinySize">
            <summary>
            微型缓冲区池字节大小 256B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.Tiny">
            <summary>
            微型缓冲区池(256B)
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.DefaultSize">
            <summary>
            默认缓冲区池字节大小 4KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.Default">
            <summary>
            默认缓冲区池(4KB)
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.RadixSortCountBufferSize">
            <summary>
            64B 基数排序计数缓冲区字节大小 8KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.RadixSortCountBuffer">
            <summary>
            64B 基数排序计数缓冲区池(8KB)
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.LzwEncodeTableBuffer">
            <summary>
            LZW压缩编码查询表缓冲区(2MB)
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPool(System.Int32)">
            <summary>
            获取临时缓冲区
            </summary>
            <param name="length">缓冲区字节长度</param>
            <returns>临时缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPoolPointer(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="length">缓冲区字节长度</param>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedPoolPointer">
            <summary>
            非托管内存池指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPoolPointer.Pointer">
            <summary>
            指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPoolPointer.unmanagedPool">
            <summary>
            非托管内存池
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.#ctor(AutoCSer.Memory.UnmanagedPool,System.Void*)">
            <summary>
            非托管内存池指针
            </summary>
            <param name="unmanagedPool">非托管内存池</param>
            <param name="data">指针</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.#ctor(AutoCSer.Memory.UnmanagedPool,AutoCSer.Memory.Pointer)">
            <summary>
            非托管内存池指针
            </summary>
            <param name="unmanagedPool">非托管内存池</param>
            <param name="pointer">指针</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.#ctor(AutoCSer.Memory.Pointer)">
            <summary>
            非托管内存池指针
            </summary>
            <param name="pointer">指针</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.PushOnly">
            <summary>
            保存缓冲区（一次性单线程队列释放，不允许多次调用）
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.Push">
            <summary>
            保存缓冲区（多线程并发）
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.PushSetNull">
            <summary>
            保存缓冲区并清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.Set(System.Void*,System.Int32)">
            <summary>
            设置指针
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedStreamBase">
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.Data">
            <summary>
            数据指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.UnmanagedStreamBase.FreeSize">
            <summary>
            空闲字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.IsUnmanaged">
            <summary>
            是否非托管内存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.CanResize">
            <summary>
            是否允许扩展缓存区大小
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.IsResizeError">
            <summary>
            在不允许扩展缓存区大小的情况下是否产生了扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.Reserve">
            <summary>
            保留
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.#ctor(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            非托管内存池
            </summary>
            <param name="unmanagedPool"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.#ctor(AutoCSer.Memory.UnmanagedPoolPointer@,System.Boolean)">
            <summary>
            非托管内存池
            </summary>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Finalize">
            <summary>
            析构释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Dispose">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Close">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.ClearCanResize">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.TrySetData(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            尝试申请数据缓冲区并清空数据
            </summary>
            <param name="unmanagedPool"></param>
            <returns>flase 表示已经存在数据缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.TrySetDataCanResize(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            尝试申请数据缓冲区并清空数据
            </summary>
            <param name="unmanagedPool"></param>
            <returns>flase 表示已经存在数据缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Reset(System.Void*,System.Int32)">
            <summary>
            重置数据（调用该方法之后应该调用 ResetEnd / Close 避免后续调用写入数据）
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.ResetEnd(System.Void*)">
            <summary>
            重置数据完成
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Exchange(AutoCSer.Memory.UnmanagedStreamBase,AutoCSer.Memory.UnmanagedPoolPointer@,System.Boolean@,System.Boolean@)">
            <summary>
            复制数据缓冲区并返回原数据缓冲区信息
            </summary>
            <param name="stream"></param>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
            <param name="canResize"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Exchange(AutoCSer.Memory.UnmanagedStreamBase,AutoCSer.Memory.UnmanagedPoolPointer@,System.Boolean,System.Boolean)">
            <summary>
            恢复设置数据缓冲区
            </summary>
            <param name="stream"></param>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
            <param name="canResize"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.SetCanResize(System.Boolean)">
            <summary>
            设置是否允许扩展缓存区大小并返回当前数据位置
            </summary>
            <param name="canResize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.SetCanResizeGetCurrentIndex(System.Boolean)">
            <summary>
            设置是否允许扩展缓存区大小并返回当前数据位置
            </summary>
            <param name="canResize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.setPrepSize(System.Int32)">
            <summary>
            设置预增数据流字节长度
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.SetResizeError">
            <summary>
            设置扩展错误状态
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.PrepSize(System.Int32)">
            <summary>
            预增数据流字节长度
            </summary>
            <param name="size">增加字节长度</param>
            <returns>是否增加成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.PrepSize(AutoCSer.Memory.UnmanagedStreamBase,System.Int32)">
            <summary>
            预增数据流字节长度
            </summary>
            <param name="unmanagedStream"></param>
            <param name="size">增加字节长度</param>
            <returns>是否增加成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetBeforeMove(System.Int32)">
            <summary>
            增加数据流字节长度并返回增加之前的位置
            </summary>
            <param name="size">增加字节长度</param>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetIndexBeforeMove(System.Int32)">
            <summary>
            增加数据流字节长度并返回增加之前的位置
            </summary>
            <param name="size">增加字节长度</param>
            <returns>失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetCanResizeBeforeMove(System.Int32)">
            <summary>
            增加数据流字节长度并返回增加之前的位置
            </summary>
            <param name="size">增加字节长度</param>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetPrepSizeCurrent(System.Int32)">
            <summary>
            预增数据流字符长度
            </summary>
            <param name="size">增加字符长度</param>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetPrepSizeCurrentIndex(System.Int32)">
            <summary>
            预增数据流字符长度
            </summary>
            <param name="size">增加字符长度</param>
            <returns>失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetMoveSize(System.Int32)">
            <summary>
            移动当前位置并返回当前位置
            </summary>
            <param name="size"></param>
            <returns>失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetBeforeMoveSize(System.Int32)">
            <summary>
            移动当前位置并返回当前位置
            </summary>
            <param name="size"></param>
            <returns>失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.MoveSize(System.Int32)">
            <summary>
            移动当前位置并返回当前位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.MoveSize(AutoCSer.Memory.UnmanagedStreamBase,System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="stream"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.SerializeMoveSize(System.Int32)">
            <summary>
            写入缓冲区字节数
            </summary>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Guid)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Guid@)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.JsonSerializeFill(System.Int32)">
            <summary>
            二进制序列化 JSON 成员序列化补白对齐 4 字节并写入 JSON 字节长度
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Serialize(System.Char*,System.Int32,System.Boolean)">
            <summary>
            字符串序列化
            </summary>
            <param name="stringFixed"></param>
            <param name="stringLength"></param>
            <param name="isCopy"></param>
            <returns>不包括补白的字节数，0 表示序列化失败</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(AutoCSer.Memory.Pointer@)">
            <summary>
            写入数据
            </summary>
            <param name="pointer"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            写入 64 字节数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.UInt16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Int16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Byte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.SByte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Boolean)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.TimeSpan)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="T:AutoCSer.Metadata.EquatableGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType.ServerCallTaskQueueSetType">
            <summary>
            服务端异步调用队列集合类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType.CommandListenerGetServerCallTaskQueueSetDelegate">
            <summary>
            获取服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EquatableGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.EquatableGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EquatableGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.EquatableGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType`1.ServerCallTaskQueueSetType">
            <summary>
            服务端异步调用队列集合类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType`1.CommandListenerGetServerCallTaskQueueSetDelegate">
            <summary>
            获取服务端异步调用队列
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DictionaryGenericType2">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2.JsonSerializeDictionaryDelegate">
            <summary>
            JSON 字典序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2.JsonDeserializeDictionaryDelegate">
            <summary>
            JSON 字典反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType2.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.DictionaryGenericType2.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType2.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType2.Get(System.Type[])">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.DictionaryGenericType2`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2`2.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2`2.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2`2.JsonSerializeDictionaryDelegate">
            <summary>
            JSON 字典序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2`2.JsonDeserializeDictionaryDelegate">
            <summary>
            JSON 字典反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapData`1">
            <summary>
            成员位图
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.map64">
            <summary>
            64 位成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.map">
            <summary>
            超过 64 位的成员位图
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMapData`1.IsDefault">
            <summary>
            是否默认全部成员有效
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMapData`1.IsAnyMember">
            <summary>
            是否存在成员（未初始化表示不存在成员）
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.#ctor(System.UInt64,System.UInt64[])">
            <summary>
            成员位图
            </summary>
            <param name="map64"></param>
            <param name="map"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Equals(AutoCSer.Metadata.MemberMapData{`0})">
            <summary>
            成员位图比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Equals(System.Object)">
            <summary>
            成员位图比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.GetHashCode">
            <summary>
            计算哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.GetHashCode64">
            <summary>
            计算哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.setMap(System.UInt64)">
            <summary>
            设置成员数组值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Empty">
            <summary>
            清空所有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Full">
            <summary>
            添加所有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.IsMember(System.Int32)">
            <summary>
            判断成员索引是否有效
            </summary>
            <param name="memberIndex">成员索引</param>
            <returns>成员索引是否有效</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.SetMember(System.Int32)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.SetMember(System.String)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberName">成员名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.ClearMember(System.Int32)">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.ClearMember(System.String)">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Copy">
            <summary>
            成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.And(AutoCSer.Metadata.MemberMapData{`0})">
            <summary>
            成员交集运算
            </summary>
            <param name="other">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Serialize(AutoCSer.Memory.UnmanagedStream)">
            <summary>
            二进制序列化
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            二进制反序列化
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.nameIndexSearcher">
            <summary>
            名称索引查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.memberCount">
            <summary>
            成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.fieldCount">
            <summary>
            字段成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.memberMapSize">
            <summary>
            成员位图字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.memberMapArraySize">
            <summary>
            成员位图数组大小
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap">
            <summary>
            成员位图对象
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            二进制反序列化
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.GetMemberName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取成员名称
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap`1">
            <summary>
            成员位图对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap`1.MemberMapData">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor">
            <summary>
            成员位图对象
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor(AutoCSer.Metadata.MemberMapData{`0})">
            <summary>
            成员位图对象
            </summary>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor(AutoCSer.Metadata.MemberMapData{`0}@)">
            <summary>
            成员位图对象
            </summary>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            复制成员位图
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.ClearMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member">成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.SetMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.IsMember(AutoCSer.Metadata.MemberMap{`0},System.Int32)">
            <summary>
            判断成员索引是否有效
            </summary>
            <param name="memberMap">成员位图</param>
            <param name="memberIndex">成员索引</param>
            <returns>成员索引是否有效</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.SetMember(AutoCSer.Metadata.MemberMap{`0},System.Int32)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberMap"></param>
            <param name="memberIndex"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            二进制反序列化
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.NewFull">
            <summary>
            成员所有成员位图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.NewEmpty">
            <summary>
            空成员位图
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapValue`1">
            <summary>
            成员位图对象绑定
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`1.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`1.Value">
            <summary>
            目标数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            成员位图对象绑定自定义二进制序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T}}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            成员位图对象绑定自定义二进制反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.AutoCSer#Json#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T}}#Serialize(AutoCSer.JsonSerializer)">
            <summary>
            成员位图对象绑定自定义 JSON 序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.AutoCSer#Json#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T}}#Deserialize(AutoCSer.JsonDeserializer)">
            <summary>
            成员位图对象绑定自定义 JSON 反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.op_Implicit(`0)~AutoCSer.Metadata.MemberMapValue{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapValue`2">
            <summary>
            成员位图对象绑定
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`2.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`2.Value">
            <summary>
            目标数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T,VT}}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            成员位图对象绑定自定义二进制序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T,VT}}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            成员位图对象绑定自定义二进制反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.AutoCSer#Json#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T,VT}}#Serialize(AutoCSer.JsonSerializer)">
            <summary>
            成员位图对象绑定自定义 JSON 序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.AutoCSer#Json#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T,VT}}#Deserialize(AutoCSer.JsonDeserializer)">
            <summary>
            成员位图对象绑定自定义 JSON 反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.Metadata.TestMethodAttribute">
            <summary>
            测试函数
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DefaultConstructor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DefaultConstructor.GetConstructor``1">
            <summary>
            获取自定义创建对象的默认构造函数，用于反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <returns>委托返回值的 T 类型对象不允许为 null</returns>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructor.CallMemberwiseClone">
            <summary>
            对象浅复制
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DefaultConstructor`1">
            <summary>
            默认构造函数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructor`1.Constructor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructor`1.uninitializedObject">
            <summary>
            未初始化对象，用于Clone
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DefaultConstructor`1.cloneUninitializedObject">
            <summary>
            获取未初始化对象，用于Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructor`1.Type">
            <summary>
            是否存在默认构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DefaultConstructorTypeEnum">
            <summary>
            默认构造函数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.None">
            <summary>
            没有构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.Constructor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.Custom">
            <summary>
            自定义构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.Default">
            <summary>
            值类型返回默认值
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.UninitializedObjectClone">
            <summary>
            未初始化对象浅克隆，仅用户数据反序列化
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.FieldIndex">
            <summary>
            字段索引
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.FieldIndex.AnonymousName">
            <summary>
            匿名字段名称（如果是属性生成则转换为属性名称）
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.FieldIndex.#ctor(System.Reflection.FieldInfo,AutoCSer.Metadata.MemberFiltersEnum,System.Int32)">
            <summary>
            字段信息
            </summary>
            <param name="field">字段信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.Metadata.FieldIndex.GetValue(System.Object)">
            <summary>
            获取字段值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.BaseGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.GetJsonSerializeBaseDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 基类序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType.JsonDeserializeBaseDelegate">
            <summary>
            JSON 基类反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.GetBinarySerializeBaseDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取基类二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType.BinaryDeserializeBaseDelegate">
            <summary>
            获取基类二进制反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.GetCommandServerInterfaceControllerCreator(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.GetCommandServerInterfaceControllerCreatorWithCommandListener(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.BaseGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.BaseGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.BaseGenericType`2.ReferenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType`2.GetJsonSerializeBaseDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 基类序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType`2.JsonDeserializeBaseDelegate">
            <summary>
            JSON 基类反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType`2.GetBinarySerializeBaseDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取基类二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType`2.BinaryDeserializeBaseDelegate">
            <summary>
            获取基类二进制反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType`2.GetCommandServerInterfaceControllerCreator(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType`2.GetCommandServerInterfaceControllerCreatorWithCommandListener(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.ClassGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.CreateConfigObject(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.CreateConfigObjectTask(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.GetConfigObjectTask(System.Object)">
            <summary>
            获取配置对象
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.GetBinarySerializeArrayDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            二进制序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinarySerializeLeftArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinarySerializeListArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinaryDeserializeArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinaryDeserializeListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinaryDeserializeLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.ClassGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.ClassGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.ClassGenericType`1.referenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType`1.CreateConfigObject(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType`1.CreateConfigObjectTask(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType`1.GetConfigObjectTask(System.Object)">
            <summary>
            获取配置对象
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType`1.GetBinarySerializeArrayDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            二进制序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinarySerializeLeftArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinarySerializeListArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinaryDeserializeArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinaryDeserializeListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinaryDeserializeLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.CollectionGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType.GetJsonSerializeCollectionDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 集合序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType.JsonDeserializeCollectionDelegate">
            <summary>
            JSON 集合反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType.GetBinarySerializeCollectionDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取集合二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType.BinaryDeserializeCollectionDelegate">
            <summary>
            获取集合二进制反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.CollectionGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">ICollection 类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.CollectionGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.CollectionGenericType`2.ReferenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType`2.GetJsonSerializeCollectionDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 集合序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType`2.JsonDeserializeCollectionDelegate">
            <summary>
            JSON 集合反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType`2.GetBinarySerializeCollectionDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取集合二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType`2.BinaryDeserializeCollectionDelegate">
            <summary>
            获取集合二进制反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DictionaryGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType.GetJsonSerializeDictionaryDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 字典序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType.JsonDeserializeDictionaryDelegate">
            <summary>
            JSON 字典反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType.GetBinarySerializeDictionaryDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取字典二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType.BinaryDeserializeDictionaryDelegate">
            <summary>
            获取字典二进制反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType.create``3">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.DictionaryGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">IDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.DictionaryGenericType`3">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.DictionaryGenericType`3.valueReferenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DictionaryGenericType`3.referenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType`3.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType`3.GetJsonSerializeDictionaryDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 字典序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType`3.JsonDeserializeDictionaryDelegate">
            <summary>
            JSON 字典反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType`3.GetBinarySerializeDictionaryDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取字典二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType`3.BinaryDeserializeDictionaryDelegate">
            <summary>
            获取字典二进制反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.EnumGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.JsonSerializeEnumDelegate">
            <summary>
            获取 JSON 序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.JsonDeserializeEnumDelegate">
            <summary>
            获取 JSON 反序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.JsonDeserializeEnumFlagsDelegate">
            <summary>
            获取 JSON 反序列化枚举委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.GetBinarySerializeEnumDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取获取二进制序列化枚举委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinarySerializeEnumArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinarySerializeEnumLeftArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinarySerializeEnumListArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.GetBinaryDeserializeEnumDelegate(AutoCSer.BinarySerialize.DeserializeDelegate@)">
            <summary>
            获取二进制反序列化枚举委托
            </summary>
            <param name="deserializeDelegate"></param>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinaryDeserializeEnumArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinaryDeserializeEnumLeftArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinaryDeserializeEnumListArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.SimpleSerializeEnumDelegate">
            <summary>
            获取简单序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.SimpleDeserializeEnumDelegate">
            <summary>
            获取简单反序列化枚举委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.EnumGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.EnumGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.JsonSerializeEnumDelegate">
            <summary>
            获取 JSON 序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.JsonDeserializeEnumDelegate">
            <summary>
            获取 JSON 反序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.JsonDeserializeEnumFlagsDelegate">
            <summary>
            获取 JSON 反序列化枚举委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType`2.GetBinarySerializeEnumDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取获取二进制序列化枚举委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinarySerializeEnumArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinarySerializeEnumLeftArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinarySerializeEnumListArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType`2.GetBinaryDeserializeEnumDelegate(AutoCSer.BinarySerialize.DeserializeDelegate@)">
            <summary>
            获取二进制反序列化枚举委托
            </summary>
            <param name="deserializeDelegate"></param>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinaryDeserializeEnumArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinaryDeserializeEnumLeftArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinaryDeserializeEnumListArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.SimpleSerializeEnumDelegate">
            <summary>
            获取简单序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.SimpleDeserializeEnumDelegate">
            <summary>
            获取简单反序列化枚举委托
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.EnumGenericType`2.UnderlyingType">
            <summary>
            枚举类型映射基本类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.EnumGenericType`2.ToInt">
            <summary>
            枚举转数字委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType`2.toIntUnknown(`0)">
            <summary>
            类型不匹配的未知转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.EnumGenericType`2.FromInt">
            <summary>
            数字转枚举委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType`2.fromIntUnknown(`1)">
            <summary>
            类型不匹配的未知转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetMemberMapType">
            <summary>
            获取成员委托类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetMemberMapIsMemberDelegate">
            <summary>
            判断成员索引是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetMemberMapSetMemberDelegate">
            <summary>
            设置成员索引
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetMemberIndexGroup">
            <summary>
            获取成员索引分组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.IsSerializeConstructor">
            <summary>
            判断构造函数是否支持数据反序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.LeftArrayDefaultConstructorDelegate">
            <summary>
            数组字串构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType.GetAnonymousFieldsDelegate">
            <summary>
            获取字段集合（包括匿名字段）
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <param name="fields">成员选择类型</param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetAnonymousFields">
            <summary>
            获取字段集合（包括匿名字段）
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType.AppendAnonymousFieldDelegate">
            <summary>
            追加字段信息（包括匿名字段）
            </summary>
            <param name="memberFilter"></param>
            <param name="attributeFields"></param>
            <param name="anonymousDepth"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.AppendAnonymousField">
            <summary>
            追加字段信息（包括匿名字段）
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeDelegateReference">
            <summary>
            JSON 序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeObjectDelegate">
            <summary>
            获取 JSON 序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeNotSupportDelegate">
            <summary>
            JSON 自定义序列化不支持类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.GetJsonSerializeArrayDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 序列化数组委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeNotSupportDelegate">
            <summary>
            JSON 自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeDelegate">
            <summary>
            JSON 反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeObjectGenericDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeStreamObjectDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeLeftArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeListArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeLeftArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeListArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeDelegateReference">
            <summary>
            二进制序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeDelegate">
            <summary>
            二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeNotSupportDelegate">
            <summary>
            二进制自定义序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeRealTypeObjectDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.GetBinarySerializeStructArrayDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            二进制序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeStructLeftArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeStructListArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinaryDeserializeNotSupportDelegate">
            <summary>
            二进制自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinaryDeserializeRealTypeObjectDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinaryDeserializeDelegate">
            <summary>
            二进制反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.TaskType">
            <summary>
            Task 类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.GetCommandServerInterfaceControllerCreator(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controller"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerSocketSendReturnValueDelegate">
            <summary>
            发送返回值数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallbackType">
            <summary>
            TCP 服务器端异步回调类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallbackDelegate">
            <summary>
            TCP 服务器端异步成功回调
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerSynchronousCallbackDelegate">
            <summary>
            TCP 服务器端异步成功回调
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackCountDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackQueueNodeDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackCountQueueNodeDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateServerKeepCallbackTaskDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateServerKeepCallbackCountTaskDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateServerEnumerableKeepCallbackCountTaskDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateServerAsyncEnumerableTaskDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerAsyncEnumerableQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerAsyncEnumerableQueueTaskGetSocketDelegate">
            <summary>
            获取命令服务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerAsyncEnumerableQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientEnumeratorCommandGetAsyncEnumerableDelegate">
            <summary>
            获取 IAsyncEnumerable
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.AsyncEnumerableQueueTaskGetTaskQueueDelegate">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackTaskQueueDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackCountTaskQueueDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallQueueSendReturnValueDelegate">
            <summary>
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallSendDelegate">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerReturnValueType">
            <summary>
            命令服务返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallTaskQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallTaskQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerSocketCheckTaskDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackTaskCheckTaskDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackTaskCheckTaskAutoCancelKeepDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackTaskCheckCountTaskDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackTaskCheckCountTaskAutoCancelKeepDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackQueueTaskGetSocketDelegate">
            <summary>
            获取命令服务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandServerReturnValueDelegate">
            <summary>
            客户端获取命令服务返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.SetCommandServerReturnValueDelegate">
            <summary>
            设置客户端命令服务返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientReturnValueDelegate">
            <summary>
            获取客户端返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientReturnTypeDelegate">
            <summary>
            获取客户端错误返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerCallbackDelegate">
            <summary>
            命令客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerKeepCallbackDelegate">
            <summary>
            命令客户端保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerCallbackQueueDelegate">
            <summary>
            命令客户端队列回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerKeepCallbackQueueDelegate">
            <summary>
            命令客户端队列保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerReturnValueDelegate">
            <summary>
            命令客户端返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientReturnCommandGetTaskDelegate">
            <summary>
            获取 Task 委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerReturnValueQueueDelegate">
            <summary>
            命令客户端队列返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerEnumeratorDelegate">
            <summary>
            命令客户端枚举返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerEnumeratorQueueDelegate">
            <summary>
            命令客户端队列枚举返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientCallbackDelegate">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientKeepCallbackDelegate">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientCallbackQueueDelegate">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientKeepCallbackQueueDelegate">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackQueueTaskGetTaskQueueDelegate">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.GenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.GenericType`1.ReferenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetMemberMapType">
            <summary>
            获取成员委托类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetMemberMapIsMemberDelegate">
            <summary>
            判断成员索引是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetMemberMapSetMemberDelegate">
            <summary>
            设置成员索引
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetMemberIndexGroup">
            <summary>
            获取成员索引分组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.IsSerializeConstructor">
            <summary>
            是否存在默认构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetIsSerializeConstructor">
            <summary>
            是否存在默认构造函数
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.LeftArrayDefaultConstructorDelegate">
            <summary>
            数组字串构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.leftArrayDefaultConstructor">
            <summary>
            数组字串构造函数
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetAnonymousFields">
            <summary>
            获取字段集合（包括匿名字段）
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.AppendAnonymousField">
            <summary>
            追加字段信息（包括匿名字段）
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeDelegateReference">
            <summary>
            JSON 序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeObjectDelegate">
            <summary>
            获取 JSON 序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeDelegate">
            <summary>
            JSON 自定义序列化引用类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeNotSupportDelegate">
            <summary>
            JSON 自定义序列化不支持类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetJsonSerializeArrayDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            JSON 序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeNotSupportDelegate">
            <summary>
            JSON 自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeDelegate">
            <summary>
            JSON 反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeObjectGenericDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeStreamObjectDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeLeftArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeListArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeLeftArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeListArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeDelegateReference">
            <summary>
            二进制序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeDelegate">
            <summary>
            二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeNotSupportDelegate">
            <summary>
            二进制自定义序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeRealTypeObjectDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetBinarySerializeStructArrayDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            二进制序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeStructLeftArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeStructListArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinaryDeserializeNotSupportDelegate">
            <summary>
            二进制自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinaryDeserializeRealTypeObjectDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinaryDeserializeDelegate">
            <summary>
            二进制反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.TaskType">
            <summary>
            Task 类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetCommandServerInterfaceControllerCreator(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controller"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerSocketSendReturnValueDelegate">
            <summary>
            发送返回值数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallbackType">
            <summary>
            TCP 服务器端异步回调类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallbackDelegate">
            <summary>
            TCP 服务器端异步成功回调
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerSynchronousCallbackDelegate">
            <summary>
            TCP 服务器端异步成功回调
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackCountDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackQueueNodeDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackCountQueueNodeDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateServerKeepCallbackTaskDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateServerKeepCallbackCountTaskDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateServerEnumerableKeepCallbackCountTaskDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateServerAsyncEnumerableTaskDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerAsyncEnumerableQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerAsyncEnumerableQueueTaskGetSocketDelegate">
            <summary>
            获取命令服务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerAsyncEnumerableQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientEnumeratorCommandGetAsyncEnumerableDelegate">
            <summary>
            获取 IAsyncEnumerable
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.AsyncEnumerableQueueTaskGetTaskQueueDelegate">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackTaskQueueDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackCountTaskQueueDelegate">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallQueueSendReturnValueDelegate">
            <summary>
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallSendDelegate">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerReturnValueType">
            <summary>
            命令服务返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallTaskQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallTaskQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerSocketCheckTaskDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackTaskCheckTaskDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackTaskCheckTaskAutoCancelKeepDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackTaskCheckCountTaskDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackTaskCheckCountTaskAutoCancelKeepDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackQueueTaskGetSocketDelegate">
            <summary>
            获取命令服务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandServerReturnValueDelegate">
            <summary>
            命令客户端获取命令服务返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.SetCommandServerReturnValueDelegate">
            <summary>
            设置客户端命令服务返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientReturnValueDelegate">
            <summary>
            获取命令客户端返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientReturnTypeDelegate">
            <summary>
            获取命令客户端错误返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerCallbackDelegate">
            <summary>
            命令客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerKeepCallbackDelegate">
            <summary>
            命令客户端保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerCallbackQueueDelegate">
            <summary>
            命令客户端队列回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerKeepCallbackQueueDelegate">
            <summary>
            命令客户端队列保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerReturnValueDelegate">
            <summary>
            命令客户端返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientReturnCommandGetTaskDelegate">
            <summary>
            获取 Task 委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerReturnValueQueueDelegate">
            <summary>
            命令客户端队列返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerEnumeratorDelegate">
            <summary>
            命令客户端枚举返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerEnumeratorQueueDelegate">
            <summary>
            命令客户端队列枚举返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientCallbackDelegate">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientKeepCallbackDelegate">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientCallbackQueueDelegate">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientKeepCallbackQueueDelegate">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackQueueTaskGetTaskQueueDelegate">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType2">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2.JsonSerializeKeyValuePairDelegate">
            <summary>
            JSON 键值对序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2.JsonDeserializeKeyValuePairDelegate">
            <summary>
            JSON 键值对序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType2.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.GenericType2.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType2.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType2.Get(System.Type[])">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType2`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2`2.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2`2.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2`2.JsonSerializeKeyValuePairDelegate">
            <summary>
            JSON 键值对序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2`2.JsonDeserializeKeyValuePairDelegate">
            <summary>
            JSON 键值对序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.GenericTypeCache`1">
            <summary>
            泛型类型元数据 基类
            </summary>
            <typeparam name="T">泛型类型元数据类型</typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.GenericTypeCache`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache`1.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache`1.cache">
            <summary>
            泛型类型元数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache`1.cacheLock">
            <summary>
            泛型类型元数据缓存 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.getEnum(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.getDictionary(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">IDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.getCollection(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">IDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.clearCache">
            <summary>
            清理缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.GenericTypeCache2`1">
            <summary>
            泛型类型元数据 基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.GenericTypeCache2`1.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericTypeCache2`1.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache2`1.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache2`1.cache">
            <summary>
            泛型类型元数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache2`1.cacheLock">
            <summary>
            泛型类型元数据缓存 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache2`1.get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache2`1.clearCache">
            <summary>
            清理缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.StructGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.JsonSerializeNullableArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.JsonSerializeNullableDelegate">
            <summary>
            JSON 序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.JsonDeserializeNullableDelegate">
            <summary>
            JSON 反序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeNullableDelegate">
            <summary>
            二进制序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeNullableArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeNullableLeftArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeNullableListArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeNullableDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeNullableArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeNullableListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeNullableLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeStructArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeStructListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeStructLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.CommandServerCallQueueSend">
            <summary>
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.StructGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.StructGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.StructGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.StructGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.JsonSerializeNullableArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.JsonSerializeNullableDelegate">
            <summary>
            JSON 序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.JsonDeserializeNullableDelegate">
            <summary>
            JSON 反序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeNullableDelegate">
            <summary>
            二进制序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeNullableArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeNullableLeftArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeNullableListArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeNullableDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeNullableArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeNullableListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeNullableLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeStructArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeStructListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeStructLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.StructGenericType`1.CommandServerCallQueueSendDelegate">
            <summary>
            发送数据
            </summary>
            <param name="node"></param>
            <param name="queue"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.CommandServerCallQueueSend">
            <summary>
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.IgnoreAttribute">
            <summary>
            全局忽略
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.IgnoreMemberAttribute">
            <summary>
            忽略成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.IgnoreMemberAttribute.IsIgnoreCurrent">
            <summary>
            是否忽略当前成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            是否忽略当前成员
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute">
            <summary>
            成员选择
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.IsAttribute">
            <summary>
            成员是否匹配自定义属性类型，默认为 false 表示选择所有成员。
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.IsBaseTypeAttribute">
            <summary>
            指定是否搜索该成员的继承链以查找这些特性，参考System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.Instance">
            <summary>
            默认公有动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.Instance.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.Instance.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.NonPublic">
            <summary>
            默认非公有成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.NonPublic.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.NonPublic.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance">
            <summary>
            默认公有动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField">
            <summary>
            默认公有动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.InstanceField">
            <summary>
            默认动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.InstanceField.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.InstanceField.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty">
            <summary>
            默认动态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFiltersEnum">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Unknown">
            <summary>
            未知成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicInstanceField">
            <summary>
            公共动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicInstanceField">
            <summary>
            非公共动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicInstanceProperty">
            <summary>
            公共动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicInstanceProperty">
            <summary>
            非公共动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicStaticField">
            <summary>
            公共静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicStaticField">
            <summary>
            非公共静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicStaticProperty">
            <summary>
            公共静态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicStaticProperty">
            <summary>
            非公共静态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicInstance">
            <summary>
            公共动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicInstance">
            <summary>
            非公共动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicStatic">
            <summary>
            公共静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicStatic">
            <summary>
            非公共静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.InstanceField">
            <summary>
            动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.InstanceProperty">
            <summary>
            动态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.StaticField">
            <summary>
            静态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.StaticProperty">
            <summary>
            静态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Public">
            <summary>
            公共成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublic">
            <summary>
            非公共成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Instance">
            <summary>
            动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Static">
            <summary>
            静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Property">
            <summary>
            属性
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup">
            <summary>
            成员索引分组
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup.Group">
            <summary>
            动态成员分组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.Group.PublicFields">
            <summary>
            公有动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.Group.NonPublicFields">
            <summary>
            非公有动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.Group.PublicProperties">
            <summary>
            公有动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.Group.NonPublicProperties">
            <summary>
            非公有动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.Group.AnonymousFields">
            <summary>
            匿名字段
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Group.#ctor(System.Type,System.Boolean)">
            <summary>
            动态成员分组
            </summary>
            <param name="type">目标类型</param>
            <param name="isStatic">是否静态成员</param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup.TypeDepth">
            <summary>
            类型深度
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.Depth">
            <summary>
            类型深度
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.isField">
            <summary>
            是否字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.isPublic">
            <summary>
            是否共有成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.PublicField">
            <summary>
            共有字段成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.NonPublicField">
            <summary>
            非共有字段成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.PublicProperty">
            <summary>
            共有属性成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.NonPublicProperty">
            <summary>
            非共有属性成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.#ctor(System.Type,System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            类型深度
            </summary>
            <param name="type">类型</param>
            <param name="field">成员字段</param>
            <param name="isPublic">是否共有成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.TypeDepth.#ctor(System.Type,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            类型深度
            </summary>
            <param name="type">类型</param>
            <param name="property">成员属性</param>
            <param name="isPublic">是否共有成员</param>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.PublicFields">
            <summary>
            公有字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.NonPublicFields">
            <summary>
            非公有字段
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.FieldCount">
            <summary>
            字段成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.PublicProperties">
            <summary>
            公有属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.NonPublicProperties">
            <summary>
            非公有属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.AnonymousFields">
            <summary>
            匿名字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.MemberCount">
            <summary>
            所有成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.clearCache">
            <summary>
            清除缓存委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.#ctor(System.Type,System.Boolean,System.Action{AutoCSer.Metadata.MemberIndexGroup})">
            <summary>
            成员索引分组
            </summary>
            <param name="type">对象类型</param>
            <param name="isStatic">是否静态成员</param>
            <param name="clearCache">清除缓存委托</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.OnTimer">
            <summary>
            清除缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.GetAllMembers">
            <summary>
            成员集合
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.get(System.Func{AutoCSer.Metadata.MemberIndexInfo,System.Boolean})">
            <summary>
            获取成员索引集合
            </summary>
            <param name="isValue">成员匹配委托</param>
            <returns>成员索引集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Find(AutoCSer.Metadata.MemberFiltersEnum,System.Boolean)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <param name="filter">选择类型</param>
            <param name="isFilter">是否完全匹配选择类型</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Compare(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.fieldCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.compare(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.propertyCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup`1">
            <summary>
            成员索引分组
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup`1.cache">
            <summary>
            成员索引分组缓存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup`1.cacheLock">
            <summary>
            成员索引分组缓存数据访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.Get">
            <summary>
            获取成员索引分组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.clearCache(AutoCSer.Metadata.MemberIndexGroup)">
            <summary>
            清除缓存数据
            </summary>
            <param name="clearCache"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetFields(AutoCSer.Metadata.MemberFiltersEnum)">
            <summary>
            获取字段集合
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetProperties(AutoCSer.Metadata.MemberFiltersEnum)">
            <summary>
            获取属性集合
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.getAnonymousFields(AutoCSer.Metadata.MemberFiltersEnum)">
            <summary>
            获取字段集合（包括匿名字段）
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetAnonymousFields(AutoCSer.Metadata.MemberFiltersEnum,AutoCSer.LeftArray{AutoCSer.Metadata.FieldIndex}@)">
            <summary>
            获取字段集合（包括匿名字段）
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <param name="fields">成员选择类型</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetAnonymousFields(AutoCSer.Metadata.MemberFiltersEnum)">
            <summary>
            获取字段集合（包括匿名字段）
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexInfo">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.MemberSystemType">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.TemplateMemberType">
            <summary>
            模板成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.MemberIndex">
            <summary>
            成员编号
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.MemberFilters">
            <summary>
            选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.IsField">
            <summary>
            是否字段
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.CanSet">
            <summary>
            是否可赋值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.CanGet">
            <summary>
            是否可读取
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.isIgnore">
            <summary>
            是否忽略该成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.IsIgnore">
            <summary>
            是否忽略该成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.attributes">
            <summary>
            自定义属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.baseAttributes">
            <summary>
            自定义属性集合(包括基类成员属性)
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.#ctor(System.Reflection.MemberInfo,System.Type,AutoCSer.Metadata.MemberFiltersEnum,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
            <param name="memberType">成员类型</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.Attributes``1(System.Boolean)">
            <summary>
            获取自定义属性集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.GetAttribute``1(System.Boolean)">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="T">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.GetValue(System.Object)">
            <summary>
            获取数据值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexInfo`1">
            <summary>
            成员索引
            </summary>
            <typeparam name="T">成员类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo`1.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo`1.#ctor(`0,System.Type,AutoCSer.Metadata.MemberFiltersEnum,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
            <param name="memberType">成员类型</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="T:AutoCSer.Metadata.PropertyIndex">
            <summary>
            属性索引
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.PropertyIndex.#ctor(System.Reflection.PropertyInfo,AutoCSer.Metadata.MemberFiltersEnum,System.Int32)">
            <summary>
            属性信息
            </summary>
            <param name="property">属性信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.Metadata.PropertyIndex.GetValue(System.Object)">
            <summary>
            获取数据值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.UnderlyingTypeEnum">
            <summary>
            枚举类型映射基本类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.Int">
            <summary>
            int
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.UInt">
            <summary>
            uint
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.Byte">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.ULong">
            <summary>
            ulong
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.UShort">
            <summary>
            ushort
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.Long">
            <summary>
            long
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.Short">
            <summary>
            short
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.SByte">
            <summary>
            sbyte
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackFlagsEnum">
            <summary>
            回调参数标志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackFlagsEnum.None">
            <summary>
            缺省空参数标志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackFlagsEnum.JsonSerialize">
            <summary>
            是否采用JSON序列化,否则使用二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackFlagsEnum.SendData">
            <summary>
            是否发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackFlagsEnum.Error">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackIdentity">
            <summary>
            会话回调标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackIdentity.CallbackIndexBits">
            <summary>
            会话索引有效位
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackIdentity.CallbackIndexAnd">
            <summary>
            会话索引最大值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackIdentity.Index">
            <summary>
            会话序号 + 输出标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CallbackIdentity.CallbackIndex">
            <summary>
            会话序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackIdentity.Identity">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.#ctor(System.UInt32)">
            <summary>
            会话回调标识
            </summary>
            <param name="index">会话序号</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.#ctor(System.UInt32,System.UInt32)">
            <summary>
            会话回调标识
            </summary>
            <param name="index">会话序号</param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.SetNull">
            <summary>
            设置未知回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.Set(System.Int32,System.UInt32)">
            <summary>
            设置会话回调标识
            </summary>
            <param name="index"></param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.CallbackEquals(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            客户端保持回调比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.Equals(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CancelKeepCallbackData">
            <summary>
            取消异步保持调用数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCallbackData.Index">
            <summary>
            会话序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCallbackData.Identity">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCallbackData.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCallbackData.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCallbackData.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity@)">
            <summary>
            取消异步保持调用数据
            </summary>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCallbackData.Set(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消异步保持调用数据
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientBuildInfo">
            <summary>
            客户端输出创建参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.SendBufferSize">
            <summary>
            发送数据缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.FreeCount">
            <summary>
            当前释放输出数量，包括错误输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.Count">
            <summary>
            当前已经创建输出数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.IsFullSend">
            <summary>
            数据是否需要发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.IsError">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.IsNewBuffer">
            <summary>
            是否创建了新的缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.IsCallback">
            <summary>
            客户端最后一个命令是否设置了回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientBuildInfo.GetFreeCount">
            <summary>
            获取并重置当前释放输出数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientBuildInfo.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientBuildInfo.AddCount">
            <summary>
            增加输出计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientBuildInfo.SetIsCallback">
            <summary>
            设置是否设置了回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum">
            <summary>
            客户端 await 等待返回值回调线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.RunTask">
            <summary>
            默认调用 Task.Run 防止阻塞 IO 线程，如果确认后续操作不存在同步阻塞推荐采用同步调用模式 Synchronous 避免不必要的线程上下文切换
            压力测试结果适合客户端 callback 回调模式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.Synchronous">
            <summary>
            IO 线程同步回调，后续存在同步阻塞的情况应该采用默认的 RunTask 模式防止 IO 线程被阻塞可能造成死锁
            压力测试结果适合客户端 await 模式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.TinyBackground">
            <summary>
            AutoCSer.Threading.ThreadPool.TinyBackground 线程池模式，适合并发度低的场景，否则可能造成启动大量线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.ThreadPool">
            <summary>
            系统线程池模式
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3">
            <summary>
            控制器接口信息
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="ST">服务端接口类型</typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.Create(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,System.Int32)">
            <summary>
            创建命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="maxMethodCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.create(AutoCSer.Net.CommandClientController{`0,`2},`2)">
            <summary>
            创建命令客户端控制器
            </summary>
            <param name="controller"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.methods">
            <summary>
            客户端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.callConstructor">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientCheckTimer">
            <summary>
            客户端心跳检测定时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCheckTimer.socket">
            <summary>
            TCP 服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientCheckTimer.#ctor(AutoCSer.Net.CommandClientSocket,System.Int32)">
            <summary>
            客户端心跳检测定时
            </summary>
            <param name="socket"></param>
            <param name="seconds">超时秒数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientCheckTimer.OnTimer">
            <summary>
            定时器触发
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientInterfaceController">
            <summary>
            控制器接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandControllerConstructorInfo">
            <summary>
            命令客户端控制器构造函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSynchronous">
            <summary>
            同步等待命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSendOnly">
            <summary>
            仅发送数据命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallback">
            <summary>
            保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackQueue">
            <summary>
            队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackQueue">
            <summary>
            队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnType">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.ReturnCommandGetTask">
            <summary>
            获取 Task
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnTypeQueue">
            <summary>
            队列返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumerator">
            <summary>
            枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorQueue">
            <summary>
            队列枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.GetCommandClientCallback">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.GetCommandClientKeepCallback">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.GetCommandClientCallbackQueue">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.GetCommandClientKeepCallbackQueue">
            <summary>
            获取客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientReturnValueGetIsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientReturnValueCheckThrowException">
            <summary>
            检查状态并抛出异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.ClientInterfaceMethodThrowException">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSynchronousInputMethod">
            <summary>
            同步等待命令方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSynchronousOutputMethod">
            <summary>
            同步等待命令方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSynchronousInputOutputMethod">
            <summary>
            同步等待命令方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSendOnlyInputMethod">
            <summary>
            仅发送数据命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackInputMethod">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackOutputMethod">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackOutputReturnValueMethod">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackInputMethod">
            <summary>
            保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackOutputMethod">
            <summary>
            保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackOutputReturnValueMethod">
            <summary>
            保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackQueueInputMethod">
            <summary>
            队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackQueueOutputMethod">
            <summary>
            队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackQueueOutputReturnValueMethod">
            <summary>
            队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackQueueInputMethod">
            <summary>
            队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackQueueOutputMethod">
            <summary>
            队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackQueueOutputReturnValueMethod">
            <summary>
            队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnTypeInputMethod">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnValueOutputMethod">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnValueOutputReturnValueMethod">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnTypeQueueInputMethod">
            <summary>
            队列返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnValueQueueOutputMethod">
            <summary>
            队列返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnValueQueueOutputReturnValueMethod">
            <summary>
            队列返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorInputMethod">
            <summary>
            枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorOutputMethod">
            <summary>
            枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorOutputReturnValueMethod">
            <summary>
            枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorQueueInputMethod">
            <summary>
            队列枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorQueueOutputMethod">
            <summary>
            队列枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorQueueOutputReturnValueMethod">
            <summary>
            队列枚举返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientInterfaceController`2">
            <summary>
            控制器接口信息
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="ST">服务端接口类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceController`2.Create(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,System.Int32)">
            <summary>
            创建命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="maxMethodCount"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`2.methods">
            <summary>
            客户端接口方法信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceController`2.GetMethods">
            <summary>
            获取客户端接口方法信息集合
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`2.callConstructor">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`2.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`2.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceController`2.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod">
            <summary>
            设置客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.#ctor(System.Type)">
            <summary>
            设置客户端控制器
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.Push(System.Reflection.PropertyInfo,System.String)">
            <summary>
            添加客户端控制器属性 this.ClientController = this.GetController("controllerName");
            </summary>
            <param name="property"></param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.Create(System.Type)">
            <summary>
            创建web表单委托
            </summary>
            <param name="type">委托类型</param>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.commandClientSocketEventGetControllerMethodInfo">
            <summary>
            获取命令客户端控制器方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandMethodAttribute">
            <summary>
            命令服务方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandMethodAttribute.MethodIndex">
            <summary>
            自定义命令序号，用于客户端识别服务端 API 的路由，同一个控制器接口中不允许重复，默认小于 0 表示采用自动匹配模式，自动匹配模式不能保证服务端修改升级以后旧的客户端调用路由能与新的服务端路由匹配。存在自定义需求时不要使用巨大的数据，建议从 0 开始，因为它会是某个数组的大小。
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum">
            <summary>
            服务端异步调用队列等待类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum.Concurrent">
            <summary>
            当可增加并发任务数量为 0 时，等待增加并发任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum.LowPriority">
            <summary>
            等待所有未完成任务执行完以后执行低优先级任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum.RunLowPriority">
            <summary>
            等待低优先级任务完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum.Queue">
            <summary>
            当没有新任务并且存在未完成任务时，等待新任务继续执行，或者等待未完成任务执行完以后释放执行任务标志
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerAsyncEnumerableTask`1">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerAsyncEnumerableTask`1.callTask">
            <summary>
            回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerAsyncEnumerableTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Collections.Generic.IAsyncEnumerator{`0},AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="asyncEnumerator"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerAsyncEnumerableTask`1.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerAsyncEnumerableTask`1.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Collections.Generic.IAsyncEnumerable{`0},AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="asyncEnumerable"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerControllerCallTaskQueue">
            <summary>
            服务端控制器异步调用队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerControllerCallTaskQueue.controller">
            <summary>
            命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CommandServerControllerCallTaskQueue.KeyString">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerControllerCallTaskQueue.#ctor">
            <summary>
            默认空服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerControllerCallTaskQueue.#ctor(AutoCSer.Net.CommandServerController)">
            <summary>
            服务端执行队列
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerControllerCallTaskQueue.appendRemove">
            <summary>
            添加到删除队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerControllerCallTaskQueue.Null">
            <summary>
            默认空服务端异步调用队列
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerEnumerableKeepCallbackCountTask`1">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerEnumerableKeepCallbackCountTask`1.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerEnumerableKeepCallbackCountTask`1.callbackTask">
            <summary>
            回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerEnumerableKeepCallbackCountTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}},AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerEnumerableKeepCallbackCountTask`1.onCallCompleted">
            <summary>
            接口调用完成
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerEnumerableKeepCallbackCountTask`1.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerEnumerableKeepCallbackCountTask`1.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}},AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.#ctor(AutoCSer.Net.CommandServerSocket,System.Int32)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.setCallTask(System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.onCompletedAutoCancelKeep">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.setCallTaskAutoCancelKeep(System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,System.Int32)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.CheckTask(AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask,System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask.CheckTaskAutoCancelKeep(AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask,System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.setCallTask(System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.onCompletedAutoCancelKeep">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.setCallTaskAutoCancelKeep(System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.CheckTask(AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask{`0},System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask`1.CheckTaskAutoCancelKeep(AutoCSer.Net.CommandServer.CommandServerKeepCallbackCountTask{`0},System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask">
            <summary>
            TCP 服务器端异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.setCallTask(System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.onCompletedAutoCancelKeep">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.setCallTaskAutoCancelKeep(System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.CheckTask(AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask,System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask.CheckTaskAutoCancelKeep(AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask,System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.setCallTask(System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.onCompletedAutoCancelKeep">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.setCallTaskAutoCancelKeep(System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.CheckTask(AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask{`0},System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask`1.CheckTaskAutoCancelKeep(AutoCSer.Net.CommandServer.CommandServerKeepCallbackTask{`0},System.Threading.Tasks.Task,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1.getTask">
            <summary>
            队列委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},`0)">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <param name="getTask">队列委托</param>
            <param name="key">关键字</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1.GetTask(AutoCSer.Net.CommandServerCallTaskQueue)">
            <summary>
            队列委托包装
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2.getTask">
            <summary>
            队列委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{`1}},`0)">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <param name="getTask">队列委托</param>
            <param name="key">关键字</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2.GetTask(AutoCSer.Net.CommandServerCallTaskQueue)">
            <summary>
            队列委托包装
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc">
            <summary>
            服务端异步调用队列委托包装
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc.getTask">
            <summary>
            队列委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <param name="getTask">队列委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc.GetTask(AutoCSer.Net.CommandServerCallTaskQueue)">
            <summary>
            队列委托包装
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc`1">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc`1.getTask">
            <summary>
            队列委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <param name="getTask">队列委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc`1.GetTask(AutoCSer.Net.CommandServerCallTaskQueue)">
            <summary>
            队列委托包装
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.BaseCommand">
            <summary>
            基本命令，和控制器无关
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseCommand.Socket">
            <summary>
            命令客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseCommand.Method">
            <summary>
            客户端命令信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseCommand.#ctor(AutoCSer.Net.CommandClientSocket,AutoCSer.Net.CommandServer.ClientInterfaceMethod)">
            <summary>
            基本命令，和控制器无关
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseCommand.Push">
            <summary>
            添加命令到队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseCommand.CheckWaitPush">
            <summary>
            检查等待添加队列命令
            </summary>
            <returns>是否需要继续等待</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CancelKeepCommand">
            <summary>
            取消异步保持调用回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCommand.callbackIdentity">
            <summary>
            取消保持调用的会话回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCommand.#ctor(AutoCSer.Net.CommandClientSocket,AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            心跳检测命令
            </summary>
            <param name="socket"></param>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.BaseReturnCommand">
            <summary>
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseReturnCommand.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.BaseReturnCommand.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseReturnCommand.returnType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseReturnCommand.errorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.BuildQueue(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.Push">
            <summary>
            添加命令到发送队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.CheckWaitPush">
            <summary>
            检查等待添加队列命令
            </summary>
            <returns>是否需要继续等待</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.SetReturn(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            设置返回类型
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.SetReturnQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            设置返回类型
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1">
            <summary>
            队列回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.returnValue">
            <summary>
            返回初始值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.callback">
            <summary>
            客户端队列回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{`0})">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{`0},`0@)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.appendQueue(AutoCSer.Net.CommandClientReturnValue{`0})">
            <summary>
            添加到回调队列
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.appendQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            添加到回调队列
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2">
            <summary>
            队列回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{`1},`0@)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{`1},`0@,`1@)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackQueueCommand">
            <summary>
            队列回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueCommand.callback">
            <summary>
            客户端队列回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.appendQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            添加到回调队列
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage">错误信息</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackQueueCommand`1">
            <summary>
            队列回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode,`0@)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackCommand">
            <summary>
            回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackCommand.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackCommand`1">
            <summary>
            回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback,`0@)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackOutputCommand`1">
            <summary>
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.returnValue">
            <summary>
            返回初始值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{`0})">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{`0},`0@)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.IsSynchronousIO">
            <summary>
            检查当前序列化是否 IO 同步环境
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackOutputCommand`2">
            <summary>
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackOutputCommand`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{`1},`0@)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{`1},`0@,`1@)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPushStateEnum">
            <summary>
            命令添加状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPushStateEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPushStateEnum.WaitCount">
            <summary>
            需要等待队列数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPushStateEnum.Closed">
            <summary>
            套接字已经关闭
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.ReturnCount">
            <summary>
            返回值数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.IsCanceled">
            <summary>
            是否已经取消回调 0/2
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.IsCurrentMoveNext">
            <summary>
            枚举命令是否存在下一个数据 是否当前等待数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.IsCompleted">
            <summary>
            完成状态（重用需求不允许设置 IsCompleted = true 比较设置完以后马上被读取掉导致重复执行）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.isNextValue">
            <summary>
            是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.#ctor">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.#ctor(System.Boolean)">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.Wait">
            <summary>
            等待下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.SetNextValue(AutoCSer.Net.CommandServer.Command,System.Boolean)">
            <summary>
            设置是否存在下一个数据
            </summary>
            <param name="command"></param>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.SetNextValueQueue(AutoCSer.Net.CommandServer.Command,System.Boolean)">
            <summary>
            设置是否存在下一个数据
            </summary>
            <param name="command"></param>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.SetNextValue(System.Boolean)">
            <summary>
            设置是否存在下一个数据
            </summary>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.MoveNext">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.Push">
            <summary>
            添加新数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.Close">
            <summary>
            关闭回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.TryCancel">
            <summary>
            尝试取消回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.Cancel">
            <summary>
            取消回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.MoveNextValue">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.PushValue">
            <summary>
            添加新数据
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.NextValueTrue">
            <summary>
            枚举命令存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.NextValueFalse">
            <summary>
            枚举命令不存在下一个数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorCommand`1">
            <summary>
            枚举命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorCommand`2">
            <summary>
            枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommand`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1@)">
            <summary>
            枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`1">
            <summary>
            队列枚举命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2">
            <summary>
            队列枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1@)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1">
            <summary>
            队列保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.returnValue">
            <summary>
            返回初始值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{`0})">
            <summary>
            队列保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{`0},`0@)">
            <summary>
            队列保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消队列保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.appendQueue(`0)">
            <summary>
            添加到回调队列
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.appendQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            添加到回调队列
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2">
            <summary>
            队列保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{`1},`0@)">
            <summary>
            队列保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{`1},`0@,`1@)">
            <summary>
            队列保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue)">
            <summary>
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.appendQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            添加到回调队列
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand`1">
            <summary>
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue,`0@)">
            <summary>
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.returnValue">
            <summary>
            返回初始值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{`0})">
            <summary>
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{`0},`0@)">
            <summary>
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.IsSynchronousIO">
            <summary>
            检查当前序列化是否 IO 同步环境
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2">
            <summary>
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{`1},`0@)">
            <summary>
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{`1},`0@,`1@)">
            <summary>
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCommand">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCommand.keepCallback">
            <summary>
            命令保持回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCommand.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.KeepCommand.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCommand.PushState">
            <summary>
            命令添加状态
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.KeepCommand.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.KeepCommand.IsKeepCallback">
            <summary>
            是否保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCommand.IsDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            添加输出命令通知
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.BuildKeep``1(AutoCSer.Net.CommandServer.ClientBuildInfo@,``0@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <param name="inputParameter"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.Push">
            <summary>
            添加命令到发送队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.CheckWaitPush">
            <summary>
            检查等待添加队列命令
            </summary>
            <returns>是否需要继续等待</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnCommandQueueNode">
            <summary>
            返回值回调队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnCommandQueueNode.callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnCommandQueueNode.#ctor(System.Action)">
            <summary>
            返回值回调队列节点
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnCommandQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            回调
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand">
            <summary>
            返回值命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand`1">
            <summary>
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1">
            <summary>
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.returnValue">
            <summary>
            返回初始值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2">
            <summary>
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1@)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnValueCommand`1">
            <summary>
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnValueCommand`1.returnValue">
            <summary>
            返回初始值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ReturnValueCommand`1.IsSynchronousIO">
            <summary>
            检查当前序列化是否 IO 同步环境
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnValueCommand`2">
            <summary>
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnValueCommand`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1@)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnTypeCommand">
            <summary>
            返回值命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnTypeCommand`1">
            <summary>
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnTypeCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SynchronousCommand">
            <summary>
            同步等待命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousCommand.WaitLock">
            <summary>
            命令等待锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.SynchronousCommand.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousCommand.errorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.SynchronousCommand.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            返回值回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.Wait">
            <summary>
            等待返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.CheckWaitPush">
            <summary>
            检查等待添加队列命令
            </summary>
            <returns>是否需要继续等待</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.OnReceive``1(AutoCSer.SubArray{System.Byte}@,System.String,``0@)">
            <summary>
            返回值回调
            </summary>
            <param name="data"></param>
            <param name="outputParameter"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SynchronousCommand`1">
            <summary>
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand`1.Wait">
            <summary>
            等待返回值
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1">
            <summary>
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            返回值回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1.Wait(`0@)">
            <summary>
            等待返回值
            </summary>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2">
            <summary>
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            返回值回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2.Wait(`1@)">
            <summary>
            等待返回值
            </summary>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.IgnoreInitobjParameterAttribute">
            <summary>
            参数忽略初始化，允许随机初始化数据以降低反序列化开销
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.InterfaceController">
            <summary>
            控制器接口信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceController.CheckType(System.Type,System.String@)">
            <summary>
            检查接口类型
            </summary>
            <param name="type"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceController.GetCommandControllerAttribute(System.Type,System.String@)">
            <summary>
            获取命令控制器配置
            </summary>
            <param name="type"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceController.CheckMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            检查方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns>错误信息</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.InterfaceMethod">
            <summary>
            接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.controllerAttribute">
            <summary>
            命令服务配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethod.MatchMethodName">
            <summary>
            匹配方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.isReturnType">
            <summary>
            返回值类型是否一致
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.InputParameterCount">
            <summary>
            有效输入参数数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.OutputParameterCount">
            <summary>
            有效输出参数数量
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethod.OutputParameters">
            <summary>
            输入参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.OutputParameterType">
            <summary>
            输出参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.OutputParameterFields">
            <summary>
            输出参数字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.IsJsonSerializeParamter">
            <summary>
            非简单序列化时是否采用 JSON 序列化数据，否则采用二进制序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.#ctor">
            <summary>
            服务端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.#ctor(System.Type,System.Reflection.MethodInfo,AutoCSer.Net.CommandServerControllerInterfaceAttribute)">
            <summary>
            服务端接口方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="controllerAttribute"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.checkSynchronousParameter">
            <summary>
            检查同步方法有效参数名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.setParameterCount">
            <summary>
            设置参数数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.Equals(AutoCSer.Net.CommandServer.InterfaceMethod)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.InterfaceMethodBase">
            <summary>
            接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.type">
            <summary>
            接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.Method">
            <summary>
            接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.ReturnValueType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.MethodIndex">
            <summary>
            自定义命令序号，不能重复，默认小于 0  表示不指定。存在自定义需求时不要使用巨大的数据，建议从 0 开始，因为它会是某个数组的大小。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.Parameters">
            <summary>
            方法参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.ParameterStartIndex">
            <summary>
            有效参数起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.ParameterEndIndex">
            <summary>
            有效参数结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethodBase.ParameterCount">
            <summary>
            有效参数数量
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethodBase.InputParameters">
            <summary>
            输入参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.InputParameterType">
            <summary>
            输入参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.InputParameterFields">
            <summary>
            输入参数字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.IsSimpleSerializeParamter">
            <summary>
            是否简单序列化输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.IsSimpleDeserializeParamter">
            <summary>
            是否简单反序列化输入数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.#ctor">
            <summary>
            服务端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.#ctor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            服务端接口方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.SetInputParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            设置输入数据
            </summary>
            <param name="methodGenerator"></param>
            <param name="newInputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.CheckMethodIndexs``1(System.Type,AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute,AutoCSer.LeftArray{``0}@,AutoCSer.LeftArray{System.String}@,``0[]@)">
            <summary>
            检查方法编号
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="methodIndexAttribute"></param>
            <param name="methodArray"></param>
            <param name="messages"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.Compare(AutoCSer.Net.CommandServer.InterfaceMethodBase,AutoCSer.Net.CommandServer.InterfaceMethodBase)">
            <summary>
            服务端接口方法排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.compare(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            参数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute">
            <summary>
            接口方法编号配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute.MethodIndexEnumType">
            <summary>
            方法序号映射枚举类型，必须为 enum 且字段定义必须与 API 方法名称一致（由于 API 路由采用数字编号，当服务接口定义变更以后不能保证同一个 API 的路由一致，所以建议采用枚举映射）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute.IsAutoMethodIndex">
            <summary>
            默认为 true 表示自动分配未知方法编号，否则产生匹配错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute.IsMethodParameterCreator">
            <summary>
            默认为 false 表示不生成调用方法参数创建工具，如果需要手动调用触发持久化操作则需要指定该参数为 true
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientInterfaceMethod">
            <summary>
            客户端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.ServerMethod">
            <summary>
            对应的服务端接口方法信息，非对称定义为 null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.MethodAttribute">
            <summary>
            命令客户端方法配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ClientInterfaceMethod.MatchMethodName">
            <summary>
            匹配方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.ReturnValueParameterIndex">
            <summary>
            返回值输出参数索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.MethodType">
            <summary>
            客户端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.isCallbackAction">
            <summary>
            是否 Action 回调参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.TimeoutSeconds">
            <summary>
            超时秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.CallbackType">
            <summary>
            客户端 await 等待返回值回调线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.QueueIndex">
            <summary>
            回调队列序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.IsLowPriorityQueue">
            <summary>
            是否低优先级队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.#ctor">
            <summary>
            客户端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.#ctor(System.Type,System.Reflection.MethodInfo,AutoCSer.Net.CommandServerControllerInterfaceAttribute,System.Type,System.Boolean)">
            <summary>
            客户端接口方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="controllerAttribute"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="isServer"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.SetError(System.String)">
            <summary>
            设置错误信息
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.CheckEquals(AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            与服务端方法比较
            </summary>
            <param name="serverMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.Set(AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            设置服务端接口方法信息
            </summary>
            <param name="serverMethod"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetInputParameterLocalBuilder(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder@)">
            <summary>
            获取输入参数临时变量定义
            </summary>
            <param name="methodGenerator"></param>
            <param name="newInputParameterLocalBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetOutputParameterLocalBuilder(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType@)">
            <summary>
            获取输出参数临时变量定义
            </summary>
            <param name="methodGenerator"></param>
            <param name="returnValueGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetOutputParameterIndex(System.Reflection.ParameterInfo)">
            <summary>
            获取输出参数序号
            </summary>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.CallbackParameter(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType)">
            <summary>
            回调委托参数
            </summary>
            <param name="methodGenerator"></param>
            <param name="returnValueGenericType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.CallController(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType,System.Reflection.Emit.LocalBuilder)">
            <summary>
            控制器调用
            </summary>
            <param name="methodGenerator"></param>
            <param name="returnValueGenericType"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetMethod(System.Type,AutoCSer.Net.CommandServerControllerInterfaceAttribute,System.Type,AutoCSer.LeftArray{AutoCSer.Net.CommandServer.ClientInterfaceMethod}@,System.Boolean)">
            <summary>
            获取客户端接口方法集合
            </summary>
            <param name="type"></param>
            <param name="controllerAttribute"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="methods"></param>
            <param name="isServer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.ThrowException(System.String)">
            <summary>
            抛出异常
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.NullCommandClientController">
            <summary>
            默认空命令客户端控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullCommandClientController.#ctor(AutoCSer.Net.CommandClientSocket,System.String)">
            <summary>
            默认空命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullCommandClientController.Get(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,System.Int32)">
            <summary>
            获取默认空命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="maxMethodCount"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.NullCommandServerController">
            <summary>
            默认空命令服务控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullCommandServerController.#ctor(AutoCSer.Net.CommandListener)">
            <summary>
            默认空命令服务控制器
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullCommandServerController.DoCommand(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            命令处理
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
            <param name="offlineCount"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum">
            <summary>
            客户端接收数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.LessVerifyMethod">
            <summary>
            缺少验证函数逻辑，需要重载实现 AutoCSer.Net.CommandServerAttribute.ClientVerifyMethod
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CallbackIdentityLess">
            <summary>
            回调标识接收不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CallbackIdentityError">
            <summary>
            回调标识解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.DataSizeError">
            <summary>
            数据长度解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.DataSizeLess">
            <summary>
            接收数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.BigDataSizeLess">
            <summary>
            临时接收数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.DataDecompressError">
            <summary>
            数据解压缩失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.BigDataDecompressError">
            <summary>
            临时数据解压缩失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.OnReceiveInvalidOperation">
            <summary>
            不允许的接收数据回调操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CustomCommandError">
            <summary>
            自定义命令处理错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CustomDataError">
            <summary>
            自定义命令回调数据解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CancelKeepCallbackDataError">
            <summary>
            取消命令回调数据解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.ControllerDataError">
            <summary>
            命令控制器查询回调数据解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.DeserializeError">
            <summary>
            反序列化错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.ErrorMessageDeserialize">
            <summary>
            错误信息解析失败
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum">
            <summary>
            命令服务客户端接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum.CallbackIdentity">
            <summary>
            获取命令回调序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum.CallbackIdentityAgain">
            <summary>
            继续获取命令回调序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum.Data">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum.BigData">
            <summary>
            获取临时数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandControllerOutputData">
            <summary>
            命令控制器查询输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandControllerOutputData.ControllerName">
            <summary>
            命令控制器名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandControllerOutputData.ControllerIndex">
            <summary>
            命令控制器序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandControllerOutputData.MethodCount">
            <summary>
            命令数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandControllerOutputData.Set(System.Int32,AutoCSer.Net.CommandServerController)">
            <summary>
            命令控制器查询输出数据
            </summary>
            <param name="controllerIndex"></param>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandFlagsEnum">
            <summary>
            命令参数标志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandFlagsEnum.None">
            <summary>
            缺省空参数标志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandFlagsEnum.JsonSerialize">
            <summary>
            是否采用JSON序列化,否则使用二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandFlagsEnum.SendData">
            <summary>
            是否发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandFlagsEnum.Callback">
            <summary>
            是否需要回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CancelKeepCallbackCommand">
            <summary>
            取消异步保持调用回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CancelKeepCallbackCommand.IsKeepCallback">
            <summary>
            是否保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            取消异步保持调用回调命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CheckCommand">
            <summary>
            心跳检测命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CheckCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            心跳检测命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CheckCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPoolGetStateEnum">
            <summary>
            客户端获取状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolGetStateEnum.Command">
            <summary>
            普通命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolGetStateEnum.KeepCallback">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolGetStateEnum.IdentityError">
            <summary>
            命令序号标识不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPoolLink">
            <summary>
            客户端命令链表节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolLink.Command">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolLink.Next">
            <summary>
            下一个命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolLink.Identity">
            <summary>
            命令序号标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.Set(AutoCSer.Net.CommandServer.Command,System.UInt32@)">
            <summary>
            设置客户端命令
            </summary>
            <param name="command">客户端命令</param>
            <param name="identity">命令序号标识</param>
            <returns>下一个命令序号</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.CheckTimeout(System.UInt32,System.Int32)">
            <summary>
            超时检测
            </summary>
            <param name="timeoutSeconds"></param>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.Get(System.UInt32,System.Int32,AutoCSer.Net.CommandServer.Command@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="identity"></param>
            <param name="nextIndex"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.CancelCallback(System.UInt32,System.Int32)">
            <summary>
            取消回调
            </summary>
            <param name="identity"></param>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.Free">
            <summary>
            强行释放命令节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPool">
            <summary>
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.minArrayBits">
            <summary>
            命令数组最小二进制长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.maxArrayBits">
            <summary>
            命令数组最大二进制长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pad0">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.TimeoutCount">
            <summary>
            超时计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.arrays">
            <summary>
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.Array">
            <summary>
            第一个客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.arraySizeAnd">
            <summary>
            数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.bitSize">
            <summary>
            数组二进制长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.arrayCount">
            <summary>
            当前数组数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.commandCount">
            <summary>
            命令地址数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pad1">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pushArray">
            <summary>
            客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.freeIndex">
            <summary>
            空闲命令位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pushArrayIndex">
            <summary>
            客户端命令池数组索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pad2">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.keepCallbackIdentity">
            <summary>
            保持回调命令会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.keepCallbackCommand">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.getArray">
            <summary>
            客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.getArrayIndex">
            <summary>
            客户端命令池数组索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.freeEndIndex">
            <summary>
            空闲命令结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.isErrorLog">
            <summary>
            是否输出过错误日志 活动会话数量过多
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.IsDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.freeEndIndexLock">
            <summary>
            空闲命令结束位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pad3">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.#ctor(AutoCSer.Net.CommandClient,AutoCSer.Net.CommandServer.Command)">
            <summary>
            客户端命令池
            </summary>
            <param name="client"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.#ctor(AutoCSer.Net.CommandClient,System.Int32)">
            <summary>
            客户端命令池
            </summary>
            <param name="client"></param>
            <param name="freeIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.DisposeTimeout">
            <summary>
            释放超时计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.Push(AutoCSer.Net.CommandServer.Command,System.UInt32@)">
            <summary>
            添加客户端命令
            </summary>
            <param name="command">客户端命令</param>
            <param name="identity">设置客户端命令</param>
            <returns>客户端命令索引位置</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.create(System.Int32)">
            <summary>
            新建客户端命令池
            </summary>
            <param name="currentIndex">当前空闲命令位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.GetCommand(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            获取客户端命令
            </summary>
            <param name="identity">客户端命令索引位置</param>
            <returns>客户端命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.CancelCallback(AutoCSer.Net.CommandServer.CancelKeepCallbackData@)">
            <summary>
            取消回调
            </summary>
            <param name="cancelKeepCallbackData"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.Free(AutoCSer.Net.CommandServer.Command,AutoCSer.Net.CommandServer.Command,System.Int32)">
            <summary>
            释放所有命令
            </summary>
            <param name="head"></param>
            <param name="end"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.OnTimeout(System.UInt32)">
            <summary>
            超时事件
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPoolTimeout">
            <summary>
            超时事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolTimeout.commandPool">
            <summary>
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolTimeout.seconds">
            <summary>
            超时秒计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolTimeout.#ctor(AutoCSer.Net.CommandServer.CommandPool,System.UInt32)">
            <summary>
            超时事件
            </summary>
            <param name="commandPool"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolTimeout.OnTimeout">
            <summary>
            超时事件
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPoolTimeoutCount">
            <summary>
            超时计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolTimeoutCount.commandPool">
            <summary>
            客户端命令池
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolTimeoutCount.#ctor(AutoCSer.Net.CommandServer.CommandPool,System.UInt16)">
            <summary>
            超时计数
            </summary>
            <param name="commandPool"></param>
            <param name="maxSeconds">最大超时秒数，必须大于 0</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolTimeoutCount.OnTimeout(System.UInt32)">
            <summary>
            超时事件（不允许阻塞）
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ControllerCallbackCommand">
            <summary>
            服务命令控制器查询回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ControllerCallbackCommand.IsKeepCallback">
            <summary>
            是否保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ControllerCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            服务命令控制器查询回调命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ControllerCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ControllerCommand">
            <summary>
            服务命令控制器查询命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ControllerCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            服务命令控制器查询命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ControllerCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CustomDataCallbackCommand">
            <summary>
            自定义数据包回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CustomDataCallbackCommand.IsKeepCallback">
            <summary>
            是否保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CustomDataCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            自定义数据包回调命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CustomDataCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.MergeCallbackCommand">
            <summary>
            合并处理命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.MergeCallbackCommand.IsKeepCallback">
            <summary>
            是否保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.MergeCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            合并处理命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.MergeCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientMethodTypeEnum">
            <summary>
            客户端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Unknown">
            <summary>
            未知，定义不合法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Synchronous">
            <summary>
            同步调用，阻塞工作线程，不推荐使用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.SendOnly">
            <summary>
            只发送数据，失败操作无感应
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Callback">
            <summary>
            IO 线程同步回调，回调返回数据（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.KeepCallback">
            <summary>
            IO 线程同步回调，保持回调返回数据（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.CallbackQueue">
            <summary>
            队列任务回调，回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.KeepCallbackQueue">
            <summary>
            队列任务回调，保持回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.ReturnValue">
            <summary>
            await 同步调用，默认采用 Task.Run 触发 await 回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Task">
            <summary>
            替代 ReturnValue
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.ReturnValueQueue">
            <summary>
            await 同步调用，队列任务触发 await 回调（注意，由于是队列线程同步触发回调，并不能保证队列执行后续操作，不适合存在阻塞的 await 后续操作）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Enumerator">
            <summary>
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性（默认采用 Task.Run 触发 await 回调）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.EnumeratorQueue">
            <summary>
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性（注意，由于是队列线程同步触发回调，并不能保证队列执行后续操作，不适合存在阻塞的 await 后续操作）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.AsyncEnumerable">
            <summary>
            await IAsyncEnumerable 调用，需要 .NET Satndard 2.1
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterface">
            <summary>
            服务接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.ControllerAttribute">
            <summary>
            命令控制器配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.Methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.TaskQueueFieldBuilders">
            <summary>
            异步队列字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.ControllerQueue">
            <summary>
            控制器同步队列标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.Queues">
            <summary>
            服务共享同步队列标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.QueueCount">
            <summary>
            服务共享同步队列数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.VerifyMethodIndex">
            <summary>
            验证方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.Messages">
            <summary>
            提示信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterface.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            服务接口信息
            </summary>
            <param name="type"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="clientType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterface.GetMethodGroup">
            <summary>
            获取方法分组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterface.GetClientMethods(System.Type,System.Type,System.Exception@,System.String[]@,AutoCSer.Net.CommandServer.ClientInterfaceMethod[]@,AutoCSer.LeftArray{AutoCSer.Net.CommandServer.ClientInterfaceMethod}@)">
            <summary>
            获取客户端方法集合
            </summary>
            <param name="type"></param>
            <param name="keyType"></param>
            <param name="controllerConstructorException"></param>
            <param name="controllerConstructorMessages"></param>
            <param name="methodArray"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerMethodParameter">
            <summary>
            命令服务参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.Type">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.fields">
            <summary>
            参数字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.isCheckFields">
            <summary>
            是否已经检查参数字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.isSimpleSerialize">
            <summary>
            是否支持简单序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerMethodParameter.IsSimpleSerialize">
            <summary>
            是否支持简单序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.isInitobj">
            <summary>
            是否需要初始化对象
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerMethodParameter.IsInitobj">
            <summary>
            是否需要初始化对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.#ctor(System.Type)">
            <summary>
            命令服务参数类型
            </summary>
            <param name="type">参数类型</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.checkFields">
            <summary>
            检查参数字段集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.GetFields(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            根据参数获取字段数据
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.GetField(System.String)">
            <summary>
            获取参数字段
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.types">
            <summary>
            命令服务参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.typeIndex">
            <summary>
            命令服务参数类型编号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.getKey(System.Int32,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.Type)">
            <summary>
            获取命令服务参数类型关键字
            </summary>
            <param name="parameterCount"></param>
            <param name="parameters"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.Get(System.Int32,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.Type)">
            <summary>
            获取命令服务参数类型
            </summary>
            <param name="parameterCount"></param>
            <param name="parameters">参数集合</param>
            <param name="returnType">类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.GetOrCreate(System.Int32,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.Type)">
            <summary>
            获取命令服务参数类型
            </summary>
            <param name="parameterCount"></param>
            <param name="parameters">参数集合</param>
            <param name="returnType">类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerMethodParameterKey">
            <summary>
            命令服务参数缓存关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameterKey.parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameterKey.returnType">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameterKey.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.#ctor(System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            TCP 参数类型
            </summary>
            <param name="parameters">参数集合</param>
            <param name="returnType">类型</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.Equals(AutoCSer.Net.CommandServer.ServerMethodParameterKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.compare(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            参数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.OfflineCount">
            <summary>
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.OfflineCount.count">
            <summary>
            计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.OfflineCount.Get">
            <summary>
            获取计数
            </summary>
            <returns>0 表示需要释放计数</returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.OfflineCount.Null">
            <summary>
            服务端下线计数对象空值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputController">
            <summary>
            命令控制器数据输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputController.controllerOutputData">
            <summary>
            命令控制器查询输出数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputController.#ctor(System.Int32,AutoCSer.Net.CommandServerController)">
            <summary>
            命令控制器数据输出
            </summary>
            <param name="controllerIndex"></param>
            <param name="controller">命令控制器</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputController.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputFree`1">
            <summary>
            返回值数据输出
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputFree`1.onFree">
            <summary>
            错误释放处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputFree`1.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0@,System.Action)">
            <summary>
            返回值数据输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
            <param name="onFree"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputFree`1.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1">
            <summary>
            返回值数据输出保持回调计数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.keepCallbackCount">
            <summary>
            TCP 服务器端异步保持回调计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0,AutoCSer.Net.CommandServerKeepCallbackCount)">
            <summary>
            返回值数据输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
            <param name="keepCallbackCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.Set(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0,AutoCSer.Net.CommandServerKeepCallbackCount)">
            <summary>
            设置输出参数
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
            <param name="keepCallbackCount"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCountFree`1">
            <summary>
            返回值数据输出保持回调计数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCountFree`1.onFree">
            <summary>
            错误释放处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCountFree`1.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0,AutoCSer.Net.CommandServerKeepCallbackCount,System.Action)">
            <summary>
            返回值数据输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
            <param name="keepCallbackCount"></param>
            <param name="onFree"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCountFree`1.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount">
            <summary>
            无返回值数据输出保持回调计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount.keepCallbackCount">
            <summary>
            TCP 服务器端异步保持回调计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.Net.CommandServerKeepCallbackCount)">
            <summary>
            无返回值数据输出保持回调计数
            </summary>
            <param name="callbackIdentity">会话标识</param>
            <param name="returnType">会话标识</param>
            <param name="keepCallbackCount">TCP 服务器端异步保持回调计数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerReturnValue`1">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReturnValue`1.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerReturnValue`1.#ctor(`0)">
            <summary>
            异步返回值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerReturnValue`1.GetReturnValue(AutoCSer.Net.CommandServer.ServerReturnValue{`0})">
            <summary>
            获取返回值
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerReturnValue`1.SetReturnValueDelegate">
            <summary>
            设置返回值
            </summary>
            <param name="returnValue"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerReturnValue`1.SetReturnValue(AutoCSer.Net.CommandServer.ServerReturnValue{`0}@,`0@)">
            <summary>
            设置返回值
            </summary>
            <param name="returnValue"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.Command">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.StreamStartIndex">
            <summary>
            输出流起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.MethodIndexBits">
            <summary>
            命令函数序号有效位
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.MethodIndexAnd">
            <summary>
            命令函数序号最大值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.Controller">
            <summary>
            命令客户端控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.Command.Socket">
            <summary>
            命令客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.MethodIndex">
            <summary>
            命令方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.TimeoutSeconds">
            <summary>
            超时秒计数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.Command.IsKeepCallback">
            <summary>
            是否保持回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.Command.IsSynchronousIO">
            <summary>
            检查当前序列化是否 IO 同步环境
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.#ctor">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            客户端命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.SetTimeoutSeconds">
            <summary>
            设置超时秒计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>下一个命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.Build``1(AutoCSer.Net.CommandServer.ClientBuildInfo@,``0@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <param name="inputParameter"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.CheckWaitPush(AutoCSer.Net.CommandServer.Command@)">
            <summary>
            关闭套接字等待添加队列命令处理
            </summary>
            <param name="next"></param>
            <returns>是否需要继续等待</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.CheckWaitPush">
            <summary>
            检查等待添加队列命令
            </summary>
            <returns>是否需要继续等待</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.Callback(System.Action)">
            <summary>
            异步回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.Callback(System.Action,AutoCSer.Net.CommandServer.ClientCallbackTypeEnum)">
            <summary>
            异步回调
            </summary>
            <param name="callback"></param>
            <param name="callbackType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.AppendQueue(System.Action)">
            <summary>
            添加到回调队列
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.CancelLink(AutoCSer.Net.CommandServer.Command,AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            取消命令调用
            </summary>
            <param name="head"></param>
            <param name="returnType"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackCommand">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.NullIndex">
            <summary>
            非法回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.MergeIndex">
            <summary>
            合并回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.CancelKeepCallbackIndex">
            <summary>
            取消异步保持调用回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.CustomDataIndex">
            <summary>
            服务端自定义数据包回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.ControllerIndex">
            <summary>
            控制器信息查询命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.CommandPoolIndex">
            <summary>
            命令索引起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.KeepCallbackMethod">
            <summary>
            命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback)">
            <summary>
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackCommand`1">
            <summary>
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback,`0@)">
            <summary>
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceController">
            <summary>
            控制器接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandControllerConstructorInfo">
            <summary>
            命令服务控制器构造函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.DoCommandParameterTypes">
            <summary>
            执行命令参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketGetCommandMethodIndex">
            <summary>
            获取当前命令方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketSendSuccess">
            <summary>
            同步发送成功返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueAdd">
            <summary>
            添加任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallQueueNodeSocketIsClose">
            <summary>
            判断套接字是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallQueueNodeCheckOfflineCount">
            <summary>
            下线计数对象检查
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueLowPriorityLinkAdd">
            <summary>
            添加任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeGetSocket">
            <summary>
            获取命令服务套接字
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueTaskNodeGetSocketDelegate">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueTaskNodeGetSocket">
            <summary>
            获取命令服务套接字
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCommandServerKeepCallbackQueueTaskGetSocketDelegate">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="keepCallback"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackQueueTaskGetSocket">
            <summary>
            获取命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueVerifyStateTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackQueueTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueSendOnlyTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandListenerGetServerCallQueue">
            <summary>
            获取服务端执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandListenerGetServerCallQueueLowPriority">
            <summary>
            获取服务端执行低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallGetSocket">
            <summary>
            获取命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeSendSuccess">
            <summary>
            发送成功返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallSend">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallSendVerifyState">
            <summary>
            验证函数发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeSetVerifyState">
            <summary>
            设置命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketSetVerifyState">
            <summary>
            设置命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCheckTask">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCheckVerifyStateTask">
            <summary>
            检查认证接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCheckSendOnlyTask">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackCancelKeep">
            <summary>
            取消保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerAddTaskQueue">
            <summary>
            添加队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerAddTaskQueueLowPriority">
            <summary>
            添加队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketDeserializeMethod">
            <summary>
            反序列化方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketSendOutputMethod">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCallTaskQueueAppendQueueMethod">
            <summary>
            添加队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCallTaskQueueAppendLowPriorityMethod">
            <summary>
            添加队列任务（低优先级）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.asynchronousTypeIndex">
            <summary>
            异步回调类型序号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceController.GetAsynchronousTypeName">
            <summary>
            获取异步回调类型名称
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketMethodTypeParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketMethodTypeBoolParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketInterfaceMethodParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerCallbackDelegate">
            <summary>
            异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerCallbackCallQueueNodeDelegate">
            <summary>
            异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackCountDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackQueueNodeDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackCountQueueNodeDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerKeepCallbackTaskDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerKeepCallbackCountTaskDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackTaskCheckTaskDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackTaskCheckTaskAutoCancelKeepDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackTaskCheckCountTaskDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackTaskCheckCountTaskAutoCancelKeepDelegate">
            <summary>
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackTaskQueueDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackCountTaskQueueDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeConstructor">
            <summary>
            服务端执行队列任务构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueSendOnlyTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueVerifyStateTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerKeepCallbackQueueTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerCallQueueField">
            <summary>
            控制器同步调用队列字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerCallQueueLowPriorityField">
            <summary>
            控制器同步调用低优先级队列字段
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceController`1">
            <summary>
            控制器接口信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceController`1.Create(AutoCSer.Net.CommandListener,System.String,`0,System.Func{AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerBindContextController})">
            <summary>
            创建命令服务控制器
            </summary>
            <param name="server"></param>
            <param name="controllerName"></param>
            <param name="controller"></param>
            <param name="getBindController"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.ControllerAttribute">
            <summary>
            命令控制器配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.Methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceController`1.GetMethod(System.Int32)">
            <summary>
            获取服务端接口方法信息集合
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.controllerConstructorInfo">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.controllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceController`1.Check">
            <summary>
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceMethod">
            <summary>
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.MethodFieldBuilder">
            <summary>
            服务端输出信息 字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.taskQueueKeyParameterIndex">
            <summary>
            Task 队列关键字参数位置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerInterfaceMethod.TaskQueueKeyParameter">
            <summary>
            Task 队列关键字参数类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerInterfaceMethod.TaskQueueKeyField">
            <summary>
            Task 队列关键字字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsParameterSocket">
            <summary>
            是否存在 AutoCSer.Net.CommandServerSocket 参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.MethodAttribute">
            <summary>
            命令服务方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.MethodType">
            <summary>
            服务端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.AsynchronousType">
            <summary>
            异步回调类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerInterfaceMethod.KeepCallbackOutputCount">
            <summary>
            保持回调输出计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsOutputInfo">
            <summary>
            是否存在输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsOutputPool">
            <summary>
            服务端输出对象是否采用缓存池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsOfflineCount">
            <summary>
            是否服务下线通知计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsLowPriorityQueue">
            <summary>
            TCP 服务器端同步调用队列是否低优先级
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.#ctor">
            <summary>
            默认空服务端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.#ctor(System.Type,System.Reflection.MethodInfo,AutoCSer.Net.CommandServerControllerInterfaceAttribute,System.Type)">
            <summary>
            服务端接口方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="controllerAttribute"></param>
            <param name="taskQueueControllerKeyType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetOutputParameterField(System.String)">
            <summary>
            获取输出参数字段
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetOutputParameterLocalBuilder(System.Reflection.Emit.ILGenerator)">
            <summary>
            获取输出参数临时变量定义
            </summary>
            <param name="doCommandGenerator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            方法调用传参
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="getControllerMethod"></param>
            <param name="controllerLocalBuilder"></param>
            <param name="inputParameterLocalBuilder"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethod(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder@)">
            <summary>
            调用方法
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="controllerType"></param>
            <param name="returnFieldBuilder"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder,System.Reflection.MethodInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.MethodInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.FieldInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            方法调用传参
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="asynchronousControllerFieldBuilder"></param>
            <param name="getQueueNodeControllerMethod"></param>
            <param name="controllerLocalBuilder"></param>
            <param name="getSocketMethod"></param>
            <param name="commandServerSocketLocalBuilder"></param>
            <param name="queueFieldBuilder"></param>
            <param name="queueLocalBuilder"></param>
            <param name="inputParameterFieldBuilder"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            方法调用传参
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="asynchronousControllerFieldBuilder"></param>
            <param name="controllerLocalBuilder"></param>
            <param name="commandServerSocketLocalBuilder"></param>
            <param name="queueLocalBuilder"></param>
            <param name="inputParameterFieldBuilder"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetMethod(System.Type,AutoCSer.Net.CommandServerControllerInterfaceAttribute,System.Type,AutoCSer.LeftArray{AutoCSer.Net.CommandServer.ServerInterfaceMethod}@)">
            <summary>
            获取服务端接口方法集合
            </summary>
            <param name="type"></param>
            <param name="controllerAttribute"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="methods"></param>
            <returns>错误信息</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.Compare(AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            服务端接口方法排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.compare(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            参数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.DoCommandSwitchMethodIndex(System.Reflection.Emit.ILGenerator,AutoCSer.Net.CommandServer.ServerInterfaceMethod[],System.Reflection.Emit.Label@)">
            <summary>
            switch (CommandServerSocket.GetCommandMethodIndex(socket))
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="methods"></param>
            <param name="doCommandReturnDeserializeErrorLabel"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.InputParameterDeserialize(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label@)">
            <summary>
            输入参数反序列化
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="doCommandReturnDeserializeErrorLabel"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetCommandServerCallTaskQueueTaskType(System.Boolean,AutoCSer.Metadata.GenericType@)">
            <summary>
            获取 Task 队列调用代理类型
            </summary>
            <param name="isVerifyMethodIndex"></param>
            <param name="returnGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.TaskQueueAsynchronousConstructorBase(System.Reflection.Emit.ConstructorBuilder,AutoCSer.Metadata.GenericType,System.Type,System.Boolean)">
            <summary>
            Task 队列调用代理类型调用基类构造函数
            </summary>
            <param name="asynchronousConstructorBuilder"></param>
            <param name="returnGenericType"></param>
            <param name="commandServerCallTaskQueueTaskType"></param>
            <param name="isVerifyMethodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetTaskQueueInputParameterFieldBuilder(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.ILGenerator)">
            <summary>
            Task 队列调用代理类型输入参数定义
            </summary>
            <param name="asynchronousTypeBuilder"></param>
            <param name="asynchronousConstructorGenerator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetTaskQueueKeepCallbackLocalBuilder(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType)">
            <summary>
            获取 Task 队列调用保持回调
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="returnGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.TaskQueueCallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Task 队列方法调用传参
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="inputParameterFieldBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CheckCallTaskQueue(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType,System.Boolean)">
            <summary>
            Task 队列方法调用以后检查是否完成
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="returnGenericType"></param>
            <param name="isVerifyMethodIndex"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerMethodTypeEnum">
            <summary>
            服务端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Unknown">
            <summary>
            未知，定义不合法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.VersionExpired">
            <summary>
            过期方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Synchronous">
            <summary>
            IO 线程同步调用，同步返回数据（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnly">
            <summary>
            IO 线程同步调用，不返回数据（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Callback">
            <summary>
            IO 线程同步调用，回调返回数据（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallback">
            <summary>
            IO 线程同步调用，保持回调返回数据，支持自动释放回调（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCount">
            <summary>
            IO 线程同步调用，保持回调计数返回数据，不支持自动释放回调（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Queue">
            <summary>
            队列任务调用，同步返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnlyQueue">
            <summary>
            队列任务调用，不返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.CallbackQueue">
            <summary>
            队列任务调用，回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackQueue">
            <summary>
            队列任务调用，保持回调返回数据，支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCountQueue">
            <summary>
            队列任务调用，保持回调计数返回数据，不支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Task">
            <summary>
            await Task 调用（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnlyTask">
            <summary>
            await Task 调用，不返回数据（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackTask">
            <summary>
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，支持自动释放回调（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCountTask">
            <summary>
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，支持自动释放回调（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.EnumerableKeepCallbackCountTask">
            <summary>
            .NET Satndard 2.0 中集合自动转 KeepCallbackCountTask（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.TaskQueue">
            <summary>
            await Task 队列调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnlyTaskQueue">
            <summary>
            await Task 队列调用，不返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackTaskQueue">
            <summary>
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCountTaskQueue">
            <summary>
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.EnumerableKeepCallbackCountTaskQueue">
            <summary>
            .NET Satndard 2.0 中集合自动转 KeepCallbackCountTaskQueue
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.AsyncEnumerableTask">
            <summary>
            await IAsyncEnumerable 调用（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.AsyncEnumerableTaskQueue">
            <summary>
            await IAsyncEnumerable 调用
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutput">
            <summary>
            服务端套接字输出信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerOutput.StreamStartIndex">
            <summary>
            输出流起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket">命令服务套接字</param>
            <param name="buildInfo">输出创建参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput.CancelLink(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            取消输出
            </summary>
            <param name="head"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutput`1">
            <summary>
            返回值数据输出
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutput`1.callbackIdentity">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutput`1.method">
            <summary>
            服务端输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutput`1.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput`1.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0@)">
            <summary>
            返回值数据输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput`1.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput`1.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput`1.Set(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0@)">
            <summary>
            设置输出参数
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputCustomData">
            <summary>
            自定义数据输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputCustomData.data">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCustomData.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据输出
            </summary>
            <param name="data">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCustomData.#ctor(System.Byte[])">
            <summary>
            自定义数据输出
            </summary>
            <param name="data">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCustomData.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputCancelKeepCallback">
            <summary>
            取消异步保持调用输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputCancelKeepCallback.cancelKeepCallbackData">
            <summary>
            取消异步保持调用数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCancelKeepCallback.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消异步保持调用输出数据
            </summary>
            <param name="callbackIdentity">需要取消回调的会话标识</param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCancelKeepCallback.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputReturnType">
            <summary>
            无返回值数据输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputReturnType.CallbackIdentity">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputReturnType.returnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputReturnType.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnType.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            无返回值数据输出
            </summary>
            <param name="callbackIdentity">会话标识</param>
            <param name="returnType">会话标识</param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnType.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            无返回值数据输出
            </summary>
            <param name="callbackIdentity">会话标识</param>
            <param name="returnType">会话标识</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnType.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerBuildInfo">
            <summary>
            服务端输出创建参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.SendBufferSize">
            <summary>
            发送数据缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.Count">
            <summary>
            当前已经创建输出数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsSend">
            <summary>
            是否需要发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.isFullSend">
            <summary>
            数据是否需要发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsClose">
            <summary>
            是否需要关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsError">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsNewBuffer">
            <summary>
            是否创建了新的缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerBuildInfo.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum">
            <summary>
            TCP 服务端接收数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyTimeout">
            <summary>
            验证超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyCommandSizeLess">
            <summary>
            验证命令数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyCommandIdentityError">
            <summary>
            验证命令序号不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataSizeError">
            <summary>
            验证数据长度解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataSizeLess">
            <summary>
            验证数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataSizeLimitError">
            <summary>
            验证数据长度超出最大限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataSizeOutOfRange">
            <summary>
            验证数据长度超出解析长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataDecompressError">
            <summary>
            验证数据解压缩失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyError">
            <summary>
            验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.ReceiceSizeLess">
            <summary>
            接收数据不完整时连续两次接收数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CommandSizeLess">
            <summary>
            命令数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CommandError">
            <summary>
            命令不可识别
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.DataSizeError">
            <summary>
            命令数据长度解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.DataSizeLimitError">
            <summary>
            命令数据超出最大限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.DataDecompressError">
            <summary>
            数据解压缩失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.BigDataDecompressError">
            <summary>
            临时数据解压缩失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.MergeDataSizeLimitError">
            <summary>
            合并命令数据超出最大限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.MergeDataSizeLess">
            <summary>
            合并命令数据长度不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CustomDataSizeError">
            <summary>
            自定义命令数据长度解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CustomCommandError">
            <summary>
            自定义命令处理错误
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum">
            <summary>
            TCP 服务端接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.VerifyCommand">
            <summary>
            获取验证命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.VerifyData">
            <summary>
            获取验证数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.VerifyDataAgain">
            <summary>
            继续获取验证数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.Command">
            <summary>
            获取命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.CommandAgain">
            <summary>
            继续获取命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.Data">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.BigData">
            <summary>
            获取临时数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.CompressionData">
            <summary>
            获取压缩数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.CompressionBigData">
            <summary>
            获取临时压缩数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerSendErrorTypeEnum">
            <summary>
            TCP 服务端发送数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSendErrorTypeEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSendErrorTypeEnum.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSendErrorTypeEnum.SendSizeLess">
            <summary>
            发送数据不完整时连续两次发送数据不足
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerSocketSendStateEnum">
            <summary>
            发送数据状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSocketSendStateEnum.Asynchronous">
            <summary>
            异步
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSocketSendStateEnum.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSocketSendStateEnum.Synchronize">
            <summary>
            同步
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController">
            <summary>
            Task 队列控制器接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController.CommandServerCallTaskQueueNodeGetTaskQueue">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController.CommandServerKeepCallbackQueueTaskGetTaskQueue">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2">
            <summary>
            Task 队列控制器接口信息
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.Create(AutoCSer.Net.CommandListener,System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,`1,`0})">
            <summary>
            创建命令服务控制器
            </summary>
            <param name="server"></param>
            <param name="controllerName"></param>
            <param name="getTaskQueue"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.controllerAttribute">
            <summary>
            命令控制器配置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.GetAttribute">
            <summary>
            获取命令控制器配置
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.GetMethods">
            <summary>
            获取服务端接口方法信息集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.GetMethod(System.Int32)">
            <summary>
            获取服务端接口方法信息集合
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.controllerConstructorInfo">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.controllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.Check">
            <summary>
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue})~AutoCSer.Net.CommandClientCallback">
            <summary>
            隐式转换
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.Get(System.Action{AutoCSer.Net.CommandClientReturnValue})">
            <summary>
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback.SuccessCallback">
            <summary>
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback.SuccessCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.SuccessCallback.#ctor(System.Action)">
            <summary>
            成功回调，忽略错误返回
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.SuccessCallback.Callback(AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.op_Implicit(System.Action)~AutoCSer.Net.CommandClientCallback">
            <summary>
            隐式转换（成功回调，忽略错误返回）
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.Callback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage">错误信息</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.Cast``2(System.Action{AutoCSer.Net.CommandClientReturnValue{``1}},System.Func{``0,``1})">
            <summary>
            客户端回调返回值类型转换
            </summary>
            <typeparam name="RT">服务接口返回类型</typeparam>
            <typeparam name="T">目标类型</typeparam>
            <param name="callback"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback`1">
            <summary>
            客户端回调委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`1.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.#ctor(System.Action{`0},System.Action{AutoCSer.Net.CommandClientReturnTypeEnum})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback">成功值回调</param>
            <param name="errorCallback">错误类型回调</param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback`1.ErrorCallback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`1.ErrorCallback.callback">
            <summary>
            成功值回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`1.ErrorCallback.errorCallback">
            <summary>
            错误类型回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.ErrorCallback.#ctor(System.Action{`0},System.Action{AutoCSer.Net.CommandClientReturnTypeEnum})">
            <summary>
            错误回调
            </summary>
            <param name="callback">成功值回调</param>
            <param name="errorCallback">错误类型回调</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.ErrorCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0})">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})~AutoCSer.Net.CommandClientCallback{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.Get(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})">
            <summary>
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback`1.SuccessCallback">
            <summary>
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`1.SuccessCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.SuccessCallback.#ctor(System.Action{`0})">
            <summary>
            成功回调，忽略错误返回
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.SuccessCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0})">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.op_Implicit(System.Action{`0})~AutoCSer.Net.CommandClientCallback{`0}">
            <summary>
            隐式转换（成功回调，忽略错误返回）
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.Callback(`0)">
            <summary>
            成功回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.Callback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            失败回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage">错误信息</param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback`2">
            <summary>
            客户端回调返回值类型转换
            </summary>
            <typeparam name="RT">服务接口返回类型</typeparam>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`2.callback">
            <summary>
            客户端回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`2.cast">
            <summary>
            回调数据类型转换
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`2.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`1}},System.Func{`0,`1})">
            <summary>
            客户端回调返回值类型转换
            </summary>
            <param name="callback">客户端回调</param>
            <param name="cast">回调数据类型转换</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`2.Callback(AutoCSer.Net.CommandClientReturnValue{`0})">
            <summary>
            客户端接口回调传参
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`2.op_Implicit(AutoCSer.Net.CommandClientCallback{`0,`1})~System.Action{AutoCSer.Net.CommandClientReturnValue{`0}}">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            客户端队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.Callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue},AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue})~AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            隐式转换
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.Get(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallback">
            <summary>
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallback.#ctor(System.Action)">
            <summary>
            成功回调，忽略错误返回
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallback.Callback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.op_Implicit(System.Action)~AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            隐式转换（成功回调，忽略错误返回）
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallbackQueue">
            <summary>
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallbackQueue.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallbackQueue.#ctor(System.Action{AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            成功回调，忽略错误返回
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallbackQueue.Callback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.op_Implicit(System.Action{AutoCSer.Net.CommandClientCallQueue})~AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            隐式转换（成功回调，忽略错误返回）
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnTypeCallback">
            <summary>
            返回值类型回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnTypeCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnTypeCallback.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue})">
            <summary>
            成功回调，忽略错误返回
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnTypeCallback.Callback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue})~AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            隐式转换（成功回调，忽略错误返回）
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode`1">
            <summary>
            客户端队列回调委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.Callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue},AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
            <param name="returnType"></param>
            <param name="errorMessage">错误信息</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue},`0)">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.#ctor(System.Action{`0,AutoCSer.Net.CommandClientCallQueue},System.Action{AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback">成功值回调</param>
            <param name="errorCallback">错误类型回调</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback.callback">
            <summary>
            成功值回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback.errorCallback">
            <summary>
            错误类型回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback.#ctor(System.Action{`0,AutoCSer.Net.CommandClientCallQueue},System.Action{AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            错误回调
            </summary>
            <param name="callback">成功值回调</param>
            <param name="errorCallback">错误类型回调</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue})~AutoCSer.Net.CommandClientCallbackQueueNode{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.Get(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode`1.SuccessCallback">
            <summary>
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.SuccessCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.SuccessCallback.#ctor(System.Action{`0})">
            <summary>
            成功回调，忽略错误返回
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.SuccessCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.op_Implicit(System.Action{`0})~AutoCSer.Net.CommandClientCallbackQueueNode{`0}">
            <summary>
            隐式转换（成功回调，忽略错误返回）
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValueCallback">
            <summary>
            返回值回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValueCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValueCallback.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})">
            <summary>
            返回值回调
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValueCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})~AutoCSer.Net.CommandClientCallbackQueueNode{`0}">
            <summary>
            隐式转换（成功回调，忽略错误返回）
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand})~AutoCSer.Net.CommandClientKeepCallback">
            <summary>
            隐式转换
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.Get(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.Error(AutoCSer.Net.CommandClientReturnTypeEnum,System.String,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            失败回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.Callback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            保持回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.emptyCallback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            空回调，比如心跳
            </summary>
            <param name="returnValue"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallback.EmptyCallback">
            <summary>
            空回调，比如心跳
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallback`1">
            <summary>
            客户端回调委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallback`1.Callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.KeepCallbackCommand})~AutoCSer.Net.CommandClientKeepCallback{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback`1.Get(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback`1.Error(AutoCSer.Net.CommandClientReturnTypeEnum,System.String,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            失败回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallbackQueueNode">
            <summary>
            客户端队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode.Callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode.keepCallbackCommand">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode.ReturnValue">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand},AutoCSer.Net.KeepCallbackCommand,AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
            <param name="keepCallbackCommand"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1">
            <summary>
            客户端队列保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.Callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.keepCallbackCommand">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.ReturnValue">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand},AutoCSer.Net.KeepCallbackCommand,`0)">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
            <param name="keepCallbackCommand"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand},AutoCSer.Net.KeepCallbackCommand,AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
            <param name="keepCallbackCommand"></param>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientConfig">
            <summary>
            命令客户端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.SendBufferMaxSize">
            <summary>
            发送数据缓冲区最大字节数，默认为 1MB
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CommandQueueCount">
            <summary>
            最大未处理命令数量，对应并发请求数量，默认为 8192，超过指定值将阻塞调用直到低于指定值避免占用过多内存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CheckSeconds">
            <summary>
            单向心跳包间隔时间默认为 1 秒，对于频率稳定可靠的服务类型可以设置为 0 禁用心跳包，开放服务建议值为 60
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CommandMaxTimeoutSeconds">
            <summary>
            命令调用最大超时秒数，默认为 0 表示无超时逻辑并且接口定义 TimeoutSeconds 超时无效
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.QueueTimeoutSeconds">
            <summary>
            同步队列任务执行超时检查秒数，默认为 0 表示不检查，用于检查队列任务是否存在长时间阻塞或者死锁问题
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CancelKeepCallbackSeconds">
            <summary>
            释放保持回调发送命令定时秒数默认为 2，开放服务建议值为 5
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.VerifyErrorCount">
            <summary>
            创建新客户端认证连续失败尝试次数，默认为 4
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CommandPoolBits">
            <summary>
            命令池初始化二进制大小，最大值为 16，最小值为 2，默认为 14 容器大小为 16384，开放服务建议值为 3 容器大小为 8
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.IsAutoSocket">
            <summary>
            默认为 true 表示在创建客户端对象的时候自动启动连接，否则需要第一次调用触发
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.ControllerCreatorBindingFlags">
            <summary>
            命令客户端套接字事件控制器属性绑定标识，默认为仅当前类型定义属性 BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.DeclaredOnly 
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.AutoCreateSocket(AutoCSer.Net.CommandClient)">
            <summary>
            用于启用服务注册以后重写自动启动连接逻辑
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.AutoCreateSocketAsync(AutoCSer.Net.CommandClient)">
            <summary>
            自动启动连接
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.GetRegistrar(AutoCSer.Net.CommandClient)">
            <summary>
            获取服务注册客户端监听组件，默认为 new AutoCSer.Net.CommandClientServiceRegistrar(commandClient)，客户端初始化时一次性调用
            </summary>
            <param name="commandClient"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.GetSocketEventDelegate">
            <summary>
            获取命令客户端套接字事件委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.GetSocketEvent(AutoCSer.Net.CommandClient)">
            <summary>
            获取命令客户端套接字事件，默认为 new CommandClientSocketEvent(commandClient)，客户端初始化时一次性调用
            </summary>
            <param name="commandClient"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.GetBinaryDeserializeConfig">
            <summary>
            获取二进制反序列化配置参数，客户端初始化时一次性调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.OnCustomData(AutoCSer.Net.CommandClientSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据处理，默认返回 AutoCSer.Net.CommandServer.ClientReceiveErrorType.CustomCommandError 并关闭当前套接字（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
            <returns>客户端接收数据错误类型，返回非 Success 则关闭当前套接字</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.OnQueueTimeout(AutoCSer.Net.CommandClientCallQueue,System.Int64)">
            <summary>
            队列任务执行超时通知
            </summary>
            <param name="queue">客户端执行队列</param>
            <param name="seconds">当前任务执行秒数</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.Null">
            <summary>
            默认空命令客户端配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientConfig`1">
            <summary>
            命令客户端配置
            </summary>
            <typeparam name="T">主控制器接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig`1.IsSymmetryInterface">
            <summary>
            是否对称接口定义
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig`1.GetSocketEvent(AutoCSer.Net.CommandClient)">
            <summary>
            获取命令客户端套接字事件（初始化时一次性调用）
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig`1.CreateSymmetryClient">
            <summary>
            接口对称命令客户端
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientInterfaceControllerCreator">
            <summary>
            客户端控制器创建器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientInterfaceControllerCreator.ControllerName">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.#ctor(System.String)">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.Create(AutoCSer.Net.CommandClientSocket,System.Int32,System.Int32)">
            <summary>
            创建服务控制器
            </summary>
            <param name="socket"></param>
            <param name="startMethodIndex"></param>
            <param name="maxMethodCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetClientCreator``1(System.String)">
            <summary>
            获取客户端控制器创建器
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <param name="controllerName">控制器名称</param>
            <returns>客户端控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetSymmetryCreator``1(System.String)">
            <summary>
            获取接口对称服务客户端控制器创建器
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>客户端控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetCreator``2(System.String)">
            <summary>
            获取客户端控制器创建器
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="ST">服务端接口类型</typeparam>
            <param name="controllerName">控制器名称，默认为 typeof(ST).FullName</param>
            <returns>客户端控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetTaskQueueClientCreator``2(System.String)">
            <summary>
            获取服务端 Task 队列客户端控制器创建器
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="KT">Task 队列关键字类型</typeparam>
            <param name="controllerName">控制器名称</param>
            <returns>服务端 Task 队列客户端控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetTaskQueueCreator``3(System.String)">
            <summary>
            获取服务端 Task 队列客户端控制器创建器
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="ST">服务端接口类型</typeparam>
            <typeparam name="KT">Task 队列关键字类型</typeparam>
            <param name="controllerName">控制器名称，默认为 typeof(ST).FullName+typeof(KT).FullName</param>
            <returns>服务端 Task 队列客户端控制器创建器</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientInterfaceControllerCreator`2">
            <summary>
            客户端控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ST"></typeparam>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.#ctor(System.String)">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.Create(AutoCSer.Net.CommandClientSocket,System.Int32,System.Int32)">
            <summary>
            创建服务控制器
            </summary>
            <param name="socket"></param>
            <param name="startMethodIndex"></param>
            <param name="maxMethodCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientInterfaceControllerCreator`3">
            <summary>
            服务端 Task 队列客户端控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ST"></typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.#ctor(System.String)">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.Create(AutoCSer.Net.CommandClientSocket,System.Int32,System.Int32)">
            <summary>
            创建服务控制器
            </summary>
            <param name="socket"></param>
            <param name="startMethodIndex"></param>
            <param name="maxMethodCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallQueue`1">
            <summary>
            客户端执行队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue`1.client">
            <summary>
            命令客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue`1.head">
            <summary>
            队列头部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue`1.end">
            <summary>
            队列尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue`1.queueLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue`1.runSeconds">
            <summary>
            最后一次运行任务时间
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue`1.#ctor(AutoCSer.Net.CommandClient)">
            <summary>
            客户端执行队列
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue`1.get">
            <summary>
            获取新任务数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallQueue">
            <summary>
            客户端执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue.WaitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue.threadHandle">
            <summary>
            线程句柄
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.#ctor(AutoCSer.Net.CommandClient)">
            <summary>
            客户端执行队列
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.Close">
            <summary>
            关闭执行队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.Add(AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.Add(AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.CreateLink">
            <summary>
            创建低优先级任务队列链表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.OnTimerAsync">
            <summary>
            超时检查
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallQueueLowPriorityLink">
            <summary>
            客户端执行低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.queue">
            <summary>
            客户端执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.head">
            <summary>
            首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.end">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.queueLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.#ctor(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            任务队列链表节点
            </summary>
            <param name="queue">任务队列</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.Add(AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.add(AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.Add(AutoCSer.Net.CommandClientCallQueueLowPriorityLink,AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallQueueNode">
            <summary>
            客户端执行队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.CommandClientCallQueueNode@)">
            <summary>
            执行任务
            </summary>
            <param name="queue"></param>
            <param name="next"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallbackQueue">
            <summary>
            客户端队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueue.Callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})~AutoCSer.Net.CommandClientKeepCallbackQueue">
            <summary>
            隐式转换
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue.Get(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallbackQueue`1">
            <summary>
            客户端队列保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueue`1.Callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})~AutoCSer.Net.CommandClientKeepCallbackQueue{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value">客户端回调委托</param>
            <returns>客户端回调委托</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue`1.Get(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientMethodAttribute">
            <summary>
            命令客户端方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.TimeoutSeconds">
            <summary>
            调用超时秒数，默认为 0 表示不超时，最大值为客户端配置 CommandMaxTimeoutSeconds
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.CallbackType">
            <summary>
            数据回调线程模式，默认为 Task.Run
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.QueueIndex">
            <summary>
            同步队列序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.IsLowPriorityQueue">
            <summary>
            是否低优先级同步队列队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.MatchMethodName">
            <summary>
            匹配服务端方法名称，用于自动命令序号模式下客户端改写方法名称时指定匹配的服务端方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.Defafult">
            <summary>
            默认命令客户端方法配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientServiceRegistrar">
            <summary>
            服务注册客户端监听组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientServiceRegistrar.client">
            <summary>
            命令客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientServiceRegistrar.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            服务注册客户端监听组件
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientServiceRegistrar.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientServiceRegistrar.GetServerEndPoint">
            <summary>
            获取服务监听地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientControllerCreatorParameter">
            <summary>
            客户端控制器创建器参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.ServerInterfaceType">
            <summary>
            服务端接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.ClientInterfaceType">
            <summary>
            客户端接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.ControllerName">
            <summary>
            控制器名称，默认为 ServerInterfaceType.Name
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.TaskQueueKeyType">
            <summary>
            服务端 Task 队列关键字类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientControllerCreatorParameter.Creator">
            <summary>
            客户端控制器创建器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.#ctor(System.Type,System.Type,System.String)">
            <summary>
            客户端控制器创建器参数
            </summary>
            <param name="serverInterfaceType">服务端接口类型</param>
            <param name="clientInterfaceType">客户端接口类型</param>
            <param name="controllerName">控制器名称，默认为 serverInterfaceType.Name</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.#ctor(System.Type,System.Type,System.Type,System.String)">
            <summary>
            客户端控制器创建器参数
            </summary>
            <param name="serverInterfaceType">服务端接口类型</param>
            <param name="taskQueueKeyType">服务端 Task 队列关键字类型</param>
            <param name="clientInterfaceType">客户端接口类型</param>
            <param name="controllerName">控制器名称，默认为 serverInterfaceType.Name+taskQueueKeyType.Name</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.#ctor(System.String,System.Type,System.Type)">
            <summary>
            定义非对称客户端控制器创建器参数
            </summary>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="clientInterfaceType">客户端接口类型</param>
            <param name="taskQueueKeyType">服务端 Task 队列关键字类型</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.GetControllerName">
            <summary>
            获取控制器名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.GetClientCreatorMethodInfo">
            <summary>
            获取客户端控制器创建器方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.GetCreatorMethodInfo">
            <summary>
            获取客户端控制器创建器方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.GetTaskQueueClientCreatorMethodInfo">
            <summary>
            获取服务端 Task 队列客户端控制器创建器方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.GetTaskQueueCreatorMethodInfo">
            <summary>
            获取服务端 Task 队列客户端控制器创建器方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketEvent">
            <summary>
            默认命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.verifySuccessTask">
            <summary>
            验证成功 已完成任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.verifyFailTask">
            <summary>
            验证失败 已完成任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.verifyRetryTask">
            <summary>
            验证失败 已完成任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.lessVerifyMethodTask">
            <summary>
            缺少验证函数逻辑 已完成任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.getCompletedTask(AutoCSer.Net.CommandClientReturnValue{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            根据验证状态获取已完成任务
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.Client">
            <summary>
            命令客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.setController">
            <summary>
            设置客户端控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocketEvent.Socket">
            <summary>
            通过认证 API 的当前命令客户端套接字，该对象会随着断线重连而变化
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocketEvent.ControllerCreatorParameters">
            <summary>
            客户端控制器创建参数集合，用于命令客户端套接字初始化是创建客户端控制器对象，同时也用于命令客户端套接字事件在通过认证 API 之后根据客户端控制器接口类型自动绑定控制器属性
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.closeSocketVersion">
            <summary>
            释放等待锁的关闭套接字版本
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.socketWaitLocks">
            <summary>
            等待客户端套接字锁集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            命令客户端套接字事件
            </summary>
            <param name="commandClient">命令客户端</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.AppendCreators(AutoCSer.LeftArray{AutoCSer.Net.CommandClientInterfaceControllerCreator}@)">
            <summary>
            添加客户端控制器创建器集合
            </summary>
            <param name="controllerCreators"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.GetController(AutoCSer.Net.CommandClientSocketEvent,System.String)">
            <summary>
            获取命令客户端控制器
            </summary>
            <param name="socketEvent"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.CreateSocketSleep(System.Int32)">
            <summary>
            创建套接字失败重试休眠，默认第 1 次失败以后休眠 10ms，第 2 次失败以后休眠 100ms，第 3 次失败以后休眠 1s，以后每次失败都休眠 5s
            </summary>
            <param name="createErrorCount">失败次数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.NotFoundControllerName(AutoCSer.Net.CommandClientSocket,System.String)">
            <summary>
            没有找到服务端控制器名称通知
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.NotFoundServerControllerName(AutoCSer.Net.CommandClientSocket,System.String)">
            <summary>
            没有找到服务端控制器名称通知
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.ControllerNameError(AutoCSer.Net.CommandClientController,System.String)">
            <summary>
            主控制器名称与服务端名称不匹配通知
            </summary>
            <param name="controller"></param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.ControllerMethodCountError(AutoCSer.Net.CommandClientController)">
            <summary>
            控制器方法数量超出服务端限制通知
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnCreateSocketRetrySuccess(AutoCSer.Net.CommandClientSocket,System.Net.IPEndPoint,System.Int32)">
            <summary>
            套接字重试连接成功提示
            </summary>
            <param name="socket"></param>
            <param name="serverEndPoint"></param>
            <param name="exceptionCount">异常错误次数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnCreateSocketException(AutoCSer.Net.CommandClientSocket,System.Exception,System.Net.IPEndPoint,System.Int32)">
            <summary>
            套接字创建异常提示
            </summary>
            <param name="socket"></param>
            <param name="exception"></param>
            <param name="serverEndPoint"></param>
            <param name="exceptionCount">异常错误次数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.CallVerifyMethod(AutoCSer.Net.CommandClientController)">
            <summary>
            客户端创建套接字连接以后调用认证 API
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.ReleaseSocketWaitLock">
            <summary>
            释放等待客户端套接字锁，必须在客户端锁操作中调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.GetWaitLock">
            <summary>
            获取等待客户端套接字锁，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            命令客户端套接字通过认证 API 以后的客户端初始化操作，默认操作为重置当前套接字与自动绑定客户端控制器操作并通知等待连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.onMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            命令客户端套接字通过认证 API 并自动绑定客户端控制器以后的客户端自定义初始化操作，用于手动绑定设置客户端控制器与连接初始化操作，比如初始化保持回调。此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnCreateError(AutoCSer.Net.CommandClientSocket)">
            <summary>
            命令客户端套接字创建连接失败通知，默认操作为通知等待连接的调用者，同一个命令客户端套接字对象可能存在多次调用，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.releaseSocketWaitLock(System.Int32)">
            <summary>
            释放等待客户端套接字锁，关闭套接字仅执行一次，必须在客户端锁操作中调用
            </summary>
            <param name="closeSocketVersion">释放等待锁的关闭套接字版本</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnClosed(AutoCSer.Net.CommandClientSocket)">
            <summary>
            关闭命令客户端当前套接字通知，默认操作为通知等待当前连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.Create(AutoCSer.Net.CommandClientSocket,AutoCSer.Net.CommandClientSocket)">
            <summary>
            重新创建新的套接字通知，默认操作为通知等待当前连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
            <param name="errorSocket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnDisposeClient">
            <summary>
            关闭客户端通知，默认操作为通知等待连接的调用者，此调用位于客户端锁操作中，禁止调用内部嵌套锁操作避免死锁
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketEvent`1">
            <summary>
            默认命令客户端套接字事件
            </summary>
            <typeparam name="T">客户端主控制器接口类型</typeparam>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocketEvent`1.InterfaceController">
            <summary>
            当前套接字命令客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent`1.IsSymmetryInterface">
            <summary>
            是否对称接口定义
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocketEvent`1.ControllerCreatorParameters">
            <summary>
            客户端控制器创建器参数集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent`1.#ctor(AutoCSer.Net.ICommandClient,System.Boolean)">
            <summary>
            命令客户端套接字事件
            </summary>
            <param name="client">命令客户端</param>
            <param name="isSymmetryInterface">是否对称接口定义</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent`1.onMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            当前套接字通过验证方法，用于手动绑定设置客户端控制器与连接初始化操作，比如初始化保持回调。此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketReceiveStateEnum">
            <summary>
            客户端套接字接收命令执行状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketReceiveStateEnum.Asynchronous">
            <summary>
            等待异步完成
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientTaskQueueController`1">
            <summary>
            服务端 Task 队列命令客户端控制器
            </summary>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientTaskQueueController`1.Controller">
            <summary>
            命令客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientTaskQueueController`1.Key">
            <summary>
            队列关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientTaskQueueController`1.#ctor(AutoCSer.Net.CommandClientController,`0)">
            <summary>
            服务端 Task 队列命令客户端控制器
            </summary>
            <param name="controller"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientTaskQueueController`1.GetController(AutoCSer.Net.CommandClientTaskQueueController{`0})">
            <summary>
            命令客户端控制器
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientTaskQueueController`1.GetKey(AutoCSer.Net.CommandClientTaskQueueController{`0})">
            <summary>
            获取队列关键字
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandListenerBase">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.serviceRegistrar">
            <summary>
            服务注册组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.socket">
            <summary>
            TCP 套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.listenAcceptEvent">
            <summary>
            监听套接字异步事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.SocketAsyncEventArgsPool">
            <summary>
            套接字异步事件对象池
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.IsStart">
            <summary>
            是否已启动服务
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.IsDisposed">
            <summary>
            是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.isSocketDisposed">
            <summary>
            是否触发快速关闭套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.ServiceName">
            <summary>
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.Host">
            <summary>
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.#ctor">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.System#IAsyncDisposable#DisposeAsync">
            <summary>
            释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.DisposeSocket">
            <summary>
            快速关闭套接字，用于服务切换操作
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.Offline">
            <summary>
            服务下线通知
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandListenerBuilder">
            <summary>
            创建服务命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBuilder.creators">
            <summary>
            服务控制器创建器集合
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBuilder.Creators">
            <summary>
            服务控制器创建器集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.#ctor(System.Int32)">
            <summary>
            创建服务命令
            </summary>
            <param name="creatorCapacity">服务控制器创建器集合初始化容器大小</param>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(``0,System.String)">
            <summary>
            添加控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller">控制器接口操作实例</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.Func{``0},System.String)">
            <summary>
            添加控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.Func{AutoCSer.Net.CommandListener,``0},System.String)">
            <summary>
            添加控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``2(System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0},System.String)">
            <summary>
            添加控制器创建器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
            <typeparam name="KT">队列关键字类型</typeparam>
            <param name="getTaskQueue">获取队列上下文委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.String,``0)">
            <summary>
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controller">控制器接口操作实例</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.String,System.Func{``0})">
            <summary>
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.String,System.Func{AutoCSer.Net.CommandListener,``0})">
            <summary>
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``2(System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0})">
            <summary>
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="getTaskQueue">获取队列上下文委托</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.CreateCommandListener(AutoCSer.Net.CommandServerConfig)">
            <summary>
            创建命令服务
            </summary>
            <param name="commandServerConfig"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.CreateCommandListener(AutoCSer.Net.CommandReverseClientConfig)">
            <summary>
            创建反向命令服务客户端
            </summary>
            <param name="commandServerConfig"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerBindController">
            <summary>
            绑定命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindController.Controller">
            <summary>
            命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindController.IsContext">
            <summary>
            是否已经设置设置当前执行任务套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerBindController.#ctor">
            <summary>
            绑定命令服务控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerBindController.AutoCSer#Net#ICommandServerBindController#Bind(AutoCSer.Net.CommandServerController)">
            <summary>
            绑定命令服务控制器
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.AsyncEnumerableQueueTask`1">
            <summary>
            服务端异步调用队列保持回调任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.AsyncEnumerableQueueTask`1.keepCallback">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.AsyncEnumerableQueueTask`1.callTask">
            <summary>
            回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.AsyncEnumerableQueueTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            服务端异步调用保持回调队列任务
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.AsyncEnumerableQueueTask`1.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.AsyncEnumerableQueueTask`1.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.AsyncEnumerableQueueTask`1.checkCallTask(System.Collections.Generic.IAsyncEnumerator{`0})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="asyncEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.AsyncEnumerableQueueTask`1.CheckCallTask(AutoCSer.Net.AsyncEnumerableQueueTask{`0},System.Collections.Generic.IAsyncEnumerable{`0})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="asyncEnumerable"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.AsyncEnumerableQueueTask`1.GetSocket(AutoCSer.Net.AsyncEnumerableQueueTask{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.AsyncEnumerableQueueTask`1.GetTaskQueue(AutoCSer.Net.AsyncEnumerableQueueTask{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.AsyncEnumerableQueueTask`1.GetSocketDelegate">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallSendOnlyTask">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallSendOnlyTask.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallSendOnlyTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerSendOnly})">
            <summary>
            异步任务完成回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallSendOnlyTask.OnCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTask">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTask.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,System.Threading.Tasks.Task)">
            <summary>
            异步任务完成回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTask.OnCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTask`1">
            <summary>
            异步任务完成回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTask`1.method">
            <summary>
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTask`1.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{`0})">
            <summary>
            异步任务完成回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTask`1.OnCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue">
            <summary>
            服务端异步调用队列（低优先级，主要用于写操作、事务读操作、更新队列内存缓存状态）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.Queue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.LowPriorityQueue">
            <summary>
            低优先级任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.timeoutLink">
            <summary>
            执行超时检查任务链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.KeyString">
            <summary>
            获取队列关键字字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.ContextObject">
            <summary>
            队列自定义上下文对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.TaskQueue">
            <summary>
            命令服务 Task 队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.MaxConcurrent">
            <summary>
            最大读并发任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.LowPriorityWaitCount">
            <summary>
            写操作等待读取操作任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.canConcurrentCount">
            <summary>
            可增加并发任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.currentLowPriorityWaitCount">
            <summary>
            当前低优先级队列等待任务执行数量，小于等于 0 触发低优先级队列任务执行
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.isRunTask">
            <summary>
            是否正在运行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.waitLock">
            <summary>
            等待任务结束访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.AppendTaskSeconds">
            <summary>
            最后添加任务时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.resideCount">
            <summary>
            队列驻留申请计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.WaitType">
            <summary>
            服务端异步调用队列等待类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.checkTimeout">
            <summary>
            是否检查队列执行超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.isReside">
            <summary>
            队列是否默认驻留内存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.currentTask">
            <summary>
            当前执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.nextTask">
            <summary>
            下一个准备执行的任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.#ctor">
            <summary>
            默认空服务端执行队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.#ctor(AutoCSer.Net.CommandServerCallTaskQueueSet,System.Boolean)">
            <summary>
            服务端执行队列
            </summary>
            <param name="queueSet"></param>
            <param name="isReside"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.#ctor(AutoCSer.Net.CommandServerController)">
            <summary>
            服务端执行队列
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.run">
            <summary>
            开始执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.runLowPriority">
            <summary>
            运行低优先级任务
            </summary>
            <returns>是否需要继续执行下一个任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.wait">
            <summary>
            释放任务所有权并尝试获取任务所有权
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.checkWait">
            <summary>
            尝试获取任务所有权
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.OnCompleted(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            任务完成以后尝试获取任务所有权
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.appendRemove">
            <summary>
            添加到删除队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.CheckTaskTimeoutAsync(System.Int32)">
            <summary>
            任务执行超时检查
            </summary>
            <param name="keepSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.AddLowPriority(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加低优先级任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.AddLowPriorityOnly(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加低优先级任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueue">
            <summary>
            服务端异步调用队列（主要用于读取队列内存缓存状态，除了队列上下文初始化尽量不要有 IO 阻塞操作；脏读数据库操作应该使用普通并发任务处理，不应该使用读写队列操作）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue.contextLock">
            <summary>
            队列上下文异步锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.#ctor">
            <summary>
            默认空服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.#ctor(AutoCSer.Net.CommandServerCallTaskQueueSet,System.Boolean)">
            <summary>
            服务端执行队列
            </summary>
            <param name="queueSet"></param>
            <param name="isReside"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.#ctor(AutoCSer.Net.CommandServerController)">
            <summary>
            服务端执行队列
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.EnterContext">
            <summary>
            进入队列上下文异步锁（用于多个读取任务并发操作 ContextObject 的情况）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.ExitContext">
            <summary>
            释放队列上下文异步锁（用于多个读取任务并发操作 ContextObject 的情况）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.Add(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.AddOnly(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.checkQueueWait">
            <summary>
            尝试获取任务所有权
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueue`1">
            <summary>
            服务端异步调用队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue`1.queueSet">
            <summary>
            服务端异步调用队列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue`1.RemoveNext">
            <summary>
            下一个等待删除队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue`1.RemoveSeconds">
            <summary>
            等待删除时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue`1.Key">
            <summary>
            队列关键字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskQueue`1.KeyString">
            <summary>
            获取队列关键字字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.#ctor">
            <summary>
            默认空服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueSet{`0},System.Boolean,`0)">
            <summary>
            服务端执行队列
            </summary>
            <param name="queueSet"></param>
            <param name="isReside"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.ReleaseReside">
            <summary>
            释放队列驻留内存计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.AddOnlyReside(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.AddLowPriorityOnlyReside(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加低优先级任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.appendRemove">
            <summary>
            添加到删除队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.SetRemoveSeconds(System.Int32)">
            <summary>
            设置等待删除时间
            </summary>
            <param name="timeoutSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.CheckRemove(AutoCSer.Net.CommandServerCallTaskQueue{`0}@)">
            <summary>
            判断队列是否可以删除
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.CheckRemove">
            <summary>
            判断队列是否可以删除
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue`1.Null">
            <summary>
            默认空服务端异步调用队列
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallQueueCustomNode">
            <summary>
            服务端执行队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueCustomNode.isQueue">
            <summary>
            是否已经添加到队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueCustomNode.CheckQueue">
            <summary>
            检查是否已经添加到队列
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.getTask">
            <summary>
            获取执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.exception">
            <summary>
            任务执行异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.isSynchronous">
            <summary>
            是否同步执行回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.RunTask">
            <summary>
            执行任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1">
            <summary>
            服务端异步调用队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.getTask">
            <summary>
            获取执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.value">
            <summary>
            任务返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.exception">
            <summary>
            任务执行异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.isSynchronous">
            <summary>
            是否同步执行回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.RunTask">
            <summary>
            执行任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.Wait">
            <summary>
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.GetResult">
            <summary>
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1">
            <summary>
            服务端异步调用队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.Wait">
            <summary>
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.GetResult">
            <summary>
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueCustomTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.Wait">
            <summary>
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.GetResult">
            <summary>
            获取命令调用结果
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1">
            <summary>
            服务端异步调用队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.Wait">
            <summary>
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.GetResult">
            <summary>
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.checkCallTask(System.Threading.Tasks.Task{AutoCSer.Net.CommandServerSendOnly})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.CheckCallTask(AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerSendOnly})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.checkCallTask(System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.CheckCallTask(AutoCSer.Net.CommandServerCallTaskQueueTask,System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueTask`1">
            <summary>
            服务端异步调用队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTask`1.method">
            <summary>
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTask`1.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.checkCallTask(System.Threading.Tasks.Task{`0})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.CheckCallTask(AutoCSer.Net.CommandServerCallTaskQueueTask{`0},System.Threading.Tasks.Task{`0})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueNode">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.Socket">
            <summary>
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.OfflineCount">
            <summary>
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.CallbackIdentity">
            <summary>
            当前处理会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.Queue">
            <summary>
            服务端异步调用队列
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskQueueNode.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.RunSeconds">
            <summary>
            运行任务时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.methodType">
            <summary>
            服务端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.autoCancelKeep">
            <summary>
            是否自动取消回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.#ctor">
            <summary>
            TCP 服务器端异步回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerMethodTypeEnum)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="methodType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.checkOfflineCount">
            <summary>
            下线计数对象检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.RunTask">
            <summary>
            执行任务
            </summary>
            <returns>是否同步完成任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.TryRunTask">
            <summary>
            执行任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.RunTask(AutoCSer.Net.CommandServerCallTaskQueueNode@)">
            <summary>
            执行任务
            </summary>
            <param name="next"></param>
            <returns>是否同步完成任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.LowPriorityRunTask">
            <summary>
            执行任务
            </summary>
            <returns>是否同步完成任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.GetRunSeconds(AutoCSer.Net.CommandServerCallTaskQueueNode@)">
            <summary>
            获取运行任务时间
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.OnTimeout(System.Int64)">
            <summary>
            服务端队列超时通知
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.GetSocket(AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.GetSocket(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.sendException(System.Exception)">
            <summary>
            输出异常信息
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.sendExceptionCallback(System.Exception)">
            <summary>
            输出异常信息
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.GetTaskQueue(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueTypeAttribute">
            <summary>
            异步任务队列关键字类型自定义属性
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTypeAttribute.TimeoutSeconds">
            <summary>
            异步队列驻留超时秒数，等待指定时间以后没有新任务再删除，负数表示永久驻留内存
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueTypeSet">
            <summary>
            异步任务队列集合管理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.queues">
            <summary>
            队列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.queueLock">
            <summary>
            队列集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.#ctor(AutoCSer.Net.CommandListener)">
            <summary>
            异步任务队列集合管理
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.TryGet``1">
            <summary>
            获取服务端异步调用队列
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.Get``1">
            <summary>
            获取服务端异步调用队列
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.createQueue``1">
            <summary>
            创建服务端执行队列
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.Close">
            <summary>
            关闭服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.onClosed">
            <summary>
            关闭队列处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.OnTimerAsync">
            <summary>
            队列任务执行超时检查
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.method">
            <summary>
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.checkCallTask(System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.CheckCallTask(AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallVerifyStateTask">
            <summary>
            验证函数异步任务完成回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallVerifyStateTask.method">
            <summary>
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallVerifyStateTask.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallVerifyStateTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            异步任务完成回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallVerifyStateTask.OnCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCount">
            <summary>
            TCP 服务器端异步保持回调计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCount.OutputLock">
            <summary>
            输出数据访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerSocket,System.Int32)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerCallQueueNode,System.Int32)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode,System.Int32)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.FreeCount">
            <summary>
            释放输出数据计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.TrySetOutputCount(System.Int32)">
            <summary>
            当输出数据计数有效时重新设置计数
            </summary>
            <param name="outputCount">有效为大于 0</param>
            <returns>是否设置成功，失败表示当前输出数据计数无效</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CallbackAsync">
            <summary>
            返回值回调，保持回调计数等待
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.SetCancelKeep">
            <summary>
            取消保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.tryCancelKeep">
            <summary>
            尝试取消保持回调命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CreateServerKeepCallback(AutoCSer.Net.CommandServerSocket,System.Int32)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallQueueNode,System.Int32)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallTaskQueueNode,System.Int32)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCount`1">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCount`1.LinkNext">
            <summary>
            链表下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCount`1.method">
            <summary>
            服务端输出信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.Callback">
            <summary>
            不支持无输出回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync">
            <summary>
            不支持无输出回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.getOutput(`0)">
            <summary>
            获取输出信息
            </summary>
            <param name="returnValue"></param>
            <returns>输出信息</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.tryCallback(`0,System.Boolean@)">
            <summary>
            返回值回调，保持回调计数等待
            </summary>
            <param name="returnValue"></param>
            <param name="isPush"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.callbackAsync(AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount{AutoCSer.Net.CommandServer.ServerReturnValue{`0}})">
            <summary>
            返回值回调，保持回调计数等待
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync(`0)">
            <summary>
            返回值回调，保持回调计数等待
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync(`0,System.Action)">
            <summary>
            返回值回调，保持回调计数等待
            </summary>
            <param name="returnValue"></param>
            <param name="onFree"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            返回数据集合以后关闭保持回调，保持回调计数等待
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.EnumerableCallbackAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            返回数据集合以后关闭保持回调，保持回调计数等待
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync(AutoCSer.IEnumeratorTask{`0})">
            <summary>
            返回数据集合以后关闭保持回调，保持回调计数等待
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync(System.Collections.Generic.IAsyncEnumerator{`0})">
            <summary>
            返回数据集合以后关闭保持回调，保持回调计数等待
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link">
            <summary>
            TCP 服务器端异步保持回调链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link.head">
            <summary>
            头节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link.PushHead(AutoCSer.Net.CommandServerKeepCallbackCount{`0})">
            <summary>
            添加头节点
            </summary>
            <param name="head"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link.Callback(`0)">
            <summary>
            返回值回调，清理回调失败对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link.CancelKeep">
            <summary>
            取消所有回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerConfig">
            <summary>
            命令服务端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.SessionObject">
            <summary>
            命令服务套接字自定义会话对象操作接口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.SocketAsyncEventArgsMaxCount">
            <summary>
            套接字异步事件对象缓存数量，默认为 256，开放服务建议值大于 1024
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.VerifyTimeoutSeconds">
            <summary>
            认证超时秒数，默认为 4
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.MinSocketSize">
            <summary>
            接收发送数据不完整时连续两次最小字节数，默认为 1，开放服务建议值为 512 避免客户端慢攻击
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.MaxVerifyDataSize">
            <summary>
            最大认证数据字节数量，默认为 256 字节
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.SendBufferMaxSize">
            <summary>
            发送数据缓冲区最大字节数，默认为 0 表示不限制，开放服务建议值不大于 1MB
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.BinaryDeserializeMaxArraySize">
            <summary>
            二进制反序列化数组最大长度，默认为 0 表示不限制，开放服务建议根据实际情况设置防止内存占用攻击，大数组建议拆分循环调用发送或者保持回调模式接收
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.QueueTimeoutSeconds">
            <summary>
            同步队列任务执行超时检查秒数，默认为 0 表示不检查，用于检查队列任务是否存在长时间阻塞或者死锁问题
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.MaxVerifyMethodErrorCount">
            <summary>
            最大认证失败次数，异步认证也可能当成失败处理，默认为 2
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.BuildOutputThread">
            <summary>
            默认为队列模式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.IsOutputExceptionMessage">
            <summary>
            默认为 true 表示输出服务端异常信息，开放服务建议设置为 false 避免敏感信息泄漏
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.TaskQueueMaxConcurrent">
            <summary>
            异步读写队列最大读操作并发任务数量，默认为 1 表示纯队列模式，当设置大于 1 时可提高并发吞吐，但是访问共享资源需要增加队列锁操作，而且写操作需要等待所有未完成读取操作结束以后才能执行，所以并发读取任务数量不宜过大避免造成写操作等待时间过长
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.TaskQueueWaitCount">
            <summary>
            异步读写队列写操作等待读取操作任务数量，默认为 16，最小值为 1，等待读取操作任务数量不宜过大避免造成写操作等待时间过长
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.TaskQueueTimeoutSeconds">
            <summary>
            异步读写队列驻留超时秒数，默认为 60 表示等待指定时间以后没有新任务再删除队列，设置为 0 表示队列任务执行完以后立即删除队列避免占用内存，设置为负数表示永久驻留内存
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.Verify(System.Net.Sockets.Socket,AutoCSer.Net.CommandListener)">
            <summary>
            验证套接字，比如验证 IP 地址，默认返回 true
            </summary>
            <param name="socket"></param>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.OnCustomData(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据处理，默认返回 AutoCSer.Net.CommandServer.ServerReceiveErrorType.CustomCommandError 并关闭当前套接字（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
            <returns>服务端接收数据错误类型，返回非 Success 则关闭当前套接字</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.GetRegistrar(AutoCSer.Net.CommandListener)">
            <summary>
            获取服务注册组件，默认返回 new AutoCSer.Net.CommandServiceRegistrar(server)，服务初始化时一次性调用
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.GetBinaryDeserializeConfig">
            <summary>
            获取二进制反序列化配置参数，默认返回 new AutoCSer.BinarySerialize.DeserializeConfig { IsDisposeMemberMap = true, MaxArraySize = BinaryDeserializeMaxArraySize 小于等于 0 ? int.MaxValue : BinaryDeserializeMaxArraySize }，服务初始化时一次性调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.GetTaskQueueTypeSet(AutoCSer.Net.CommandListener)">
            <summary>
            创建异步读写队列管理，默认返回 new AutoCSer.Net.CommandServerCallTaskQueueTypeSet(server)，服务初始化时一次性调用
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.CheckTaskQueueKey``1(``0)">
            <summary>
            检查异步读写队列关键字是否合法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.IgnoreVerifyMethod(AutoCSer.Net.CommandServerController)">
            <summary>
            非主控制器存在认证 API 警告
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.OnQueueTimeout(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallQueue,System.Int64)">
            <summary>
            同步队列任务执行超时通知
            </summary>
            <param name="socket">命令服务套接字</param>
            <param name="queue">服务端异步调用队列</param>
            <param name="seconds">当前任务执行秒数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.OnQueueTimeout(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallTaskQueue,System.Int64)">
            <summary>
            异步读写队列任务执行超时通知
            </summary>
            <param name="socket">命令服务套接字</param>
            <param name="queue">服务端异步调用队列</param>
            <param name="seconds">当前任务执行秒数</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.Null">
            <summary>
            默认空命令服务端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.NullServerOutput">
            <summary>
            默认空服务端套接字输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.NullServerInterfaceMethod">
            <summary>
            默认空服务端接口方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerConfigBase">
            <summary>
            命令服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.ServiceName">
            <summary>
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.Host">
            <summary>
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.ReceiveBufferSizeBits">
            <summary>
            接收数据缓存区池字节大小二进制位数量，默认为 17 为 128KB，开放服务建议值不大于 12 避免内存占用过多
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.SendBufferSizeBits">
            <summary>
            发送数据缓存区池字节大小二进制位数量，默认为 17 为 128KB，开放服务建议值不大于 12 避免内存占用过多
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.MinCompressSize">
            <summary>
            发送数据启用压缩最低字节数量，默认为 0 表示不压缩数据；压缩数据需要消耗一定的 CPU 资源降低带宽使用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.MaxInputSize">
            <summary>
            最大输入数据字节数，默认为 0 表示不限制，开放服务建议值小于 2^ReceiveBufferSizeBis - 12 而且不建议 API 产生大对象传输行为
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.CompressionLevel">
            <summary>
            压缩级别默认为快速压缩，如果是大数据量传输建议用 CPU 换带宽修改为默认压缩
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerConfigBase.Log">
            <summary>
            日志处理实例
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfigBase.GetAnyLevelLog(AutoCSer.LogLevelEnum)">
            <summary>
            如果支持指定任意级别则返回日志处理实例
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfigBase.OnControllerConstructorMessage(System.Type,System.String[])">
            <summary>
            控制器构造警告信息
            </summary>
            <param name="controllerType">控制器接口类型</param>
            <param name="messages">构造警告信息</param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.NullSocket">
            <summary>
            默认空套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.NullSocketAsyncEventArgs">
            <summary>
            默认空套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.NullBinarySerializer">
            <summary>
            默认空二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.NullIPEndPoint">
            <summary>
            默认空监听地址
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerControllerAttribute">
            <summary>
            命令控制器接口配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerAttribute.InterfaceType">
            <summary>
            服务接口类型
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerBindContextController">
            <summary>
            套接字上下文绑定服务端实例（每个连接一个实例）
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindContextController.Socket">
            <summary>
            当前执行任务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindContextController.Controller">
            <summary>
            命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindContextController.IsContext">
            <summary>
            是否已经设置设置当前执行任务套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerBindContextController.#ctor">
            <summary>
            套接字上下文绑定服务端实例（每个连接一个实例）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerBindContextController.Set(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerController)">
            <summary>
            设置当前执行任务套接字
            </summary>
            <param name="socket"></param>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSocketBuildOutputThreadEnum">
            <summary>
            服务端套接字发送数据线程类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketBuildOutputThreadEnum.Queue">
            <summary>
            队列模式，适合预期并发连接数量为 1 或者大量并发连接的场景
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketBuildOutputThreadEnum.Thread">
            <summary>
            线程并发，适合预期并发连接数量不为 1 并且低于 CPU 线程数量的场景，可以充分利用 CPU 多线程并行处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketBuildOutputThreadEnum.Synchronous">
            <summary>
            纯同步输出或者低频输出场景可以设置为 false 以避免输出线程调度，否则可能造成流程性阻塞对系统并发能力造成巨大影响
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerTaskQueueService">
            <summary>
            命令服务 Task 队列服务实例
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerTaskQueueService.Queue">
            <summary>
            服务端异步调用队列
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerTaskQueueService.Socket">
            <summary>
            当前执行任务套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerTaskQueueService.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            命令服务 Task 队列
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerTaskQueueService.CreateTaskQueue``2(AutoCSer.Net.CommandServerCallTaskQueueNode,``1@,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0})">
            <summary>
            创建命令服务 Task 队列
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="task"></param>
            <param name="key"></param>
            <param name="getQueue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerTaskQueueService.CreateTaskQueueDelegate`2">
            <summary>
            创建命令服务 Task 队列委托
            </summary>
            <param name="task"></param>
            <param name="key"></param>
            <param name="getQueue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerTaskQueueService`1">
            <summary>
            命令服务 Task 队列服务实例
            </summary>
            <typeparam name="T">队列关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerTaskQueueService`1.Key">
            <summary>
            队列关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerTaskQueueService`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode,`0)">
            <summary>
            命令服务 Task 队列
            </summary>
            <param name="task"></param>
            <param name="key"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandKeepCallback">
            <summary>
            命令保持回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandKeepCallback.Command">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandKeepCallback.cancelKeepCommand">
            <summary>
            取消异步保持调用回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandKeepCallback.callbackIdentity">
            <summary>
            会话回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.#ctor(AutoCSer.Net.CommandServer.KeepCommand)">
            <summary>
            命令保持回调对象
            </summary>
            <param name="command">客户端命令</param>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.Cancel(System.Boolean)">
            <summary>
            取消回调
            </summary>
            <param name="isTimerTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.appendTask(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            添加到任务处理
            </summary>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.TryCancel(System.Boolean)">
            <summary>
            取消回调
            </summary>
            <param name="isTimerTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.Set(System.Int32,System.UInt32)">
            <summary>
            设置会话回调标识
            </summary>
            <param name="index"></param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.OnTimer">
            <summary>
            触发定时操作
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.EnumeratorCommand">
            <summary>
            枚举命令， await EnumeratorCommand，await MoveNext 操作不支持多任务并发 await
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand.moveNext">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand.queueLock">
            <summary>
            返回值队列访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消保持回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.Wait">
            <summary>
            等待添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.MoveNext">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.Close(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            关闭回调
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="T:AutoCSer.Net.EnumeratorCommand`1">
            <summary>
            枚举命令， await EnumeratorCommand{T}，await MoveNext 操作不支持多任务并发 await
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand`1.returnValue">
            <summary>
            返回初始值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand`1.moveNext">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand`1.returnValueQueue">
            <summary>
            返回值队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand`1.queueLock">
            <summary>
            返回值队列访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.EnumeratorCommand`1.Current">
            <summary>
            当前返回数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消保持回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.System#IAsyncDisposable#DisposeAsync">
            <summary>
            释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.Wait">
            <summary>
            等待添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.MoveNext">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.Close(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            关闭回调
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.System#Collections#Generic#IAsyncEnumerator{T}#MoveNextAsync">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.GetAsyncEnumerable(AutoCSer.Net.EnumeratorCommand{`0})">
            <summary>
            获取 IAsyncEnumerable
            </summary>
            <param name="enumeratorCommand"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.EnumeratorQueueCommand">
            <summary>
            队列枚举命令，MoveNext 操作不支持多任务并发 await 
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand.moveNext">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand.queueLock">
            <summary>
            返回值队列访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消保持回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.Wait">
            <summary>
            等待添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.MoveNext">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.Close(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            关闭回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.EnumeratorQueueCommand`1">
            <summary>
            队列枚举命令，MoveNext 操作不支持多任务并发 await 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand`1.returnValue">
            <summary>
            返回初始值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand`1.moveNext">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand`1.returnValueQueue">
            <summary>
            返回值队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand`1.queueLock">
            <summary>
            返回值队列访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.EnumeratorQueueCommand`1.Current">
            <summary>
            当前返回数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@,System.String)">
            <summary>
            委托命令回调
            </summary>
            <param name="data"></param>
            <param name="errorMessage">错误信息</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            取消保持回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.System#IAsyncDisposable#DisposeAsync">
            <summary>
            释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.Wait">
            <summary>
            等待添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.MoveNext">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.System#Collections#Generic#IAsyncEnumerator{T}#MoveNextAsync">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.Close(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            取消回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CallbackCommand">
            <summary>
            回调命令 await bool 是否自动触发回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CallbackCommand.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CallbackCommand.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CallbackCommand.pushState">
            <summary>
            命令添加状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            添加输出命令通知
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.Wait">
            <summary>
            等待添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.Push">
            <summary>
            添加命令到发送队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.CheckWaitPush">
            <summary>
            检查等待添加队列命令
            </summary>
            <returns>是否需要继续等待</returns>
        </member>
        <member name="T:AutoCSer.Net.KeepCallbackCommand">
            <summary>
            保持回调命令 await CommandKeepCallback
            </summary>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            添加输出命令通知
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.Wait">
            <summary>
            等待添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.ReturnCommand">
            <summary>
            返回值命令 await CommandClientReturnValue
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.Wait">
            <summary>
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.GetResult">
            <summary>
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.GetTask(AutoCSer.Net.ReturnCommand)">
            <summary>
            获取 Task
            </summary>
            <param name="returnCommand"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.ReturnCommand`1">
            <summary>
            返回值命令 await CommandClientReturnValue{T}
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.ReturnCommand`1.returnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.Wait">
            <summary>
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.GetResult">
            <summary>
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.SetReturn(`0)">
            <summary>
            设置返回值
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.SetReturnQueue(`0)">
            <summary>
            设置返回值
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.GetTask(AutoCSer.Net.ReturnCommand{`0})">
            <summary>
            获取 Task
            </summary>
            <param name="returnCommand"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.ReturnQueueCommand">
            <summary>
            队列返回值命令 await CommandClientReturnValue
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ReturnQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            队列返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="T:AutoCSer.Net.ReturnQueueCommand`1">
            <summary>
            返回值命令 await CommandClientReturnValue{T}
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.ReturnQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            队列返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="T:AutoCSer.Net.ICommandClient">
            <summary>
            命令客户端接口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.ICommandClient.IsDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="P:AutoCSer.Net.ICommandClient.Host">
            <summary>
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.ICommandClient.ServiceName">
            <summary>
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.ICommandClient.Log">
            <summary>
            日志处理实例
            </summary>
        </member>
        <member name="P:AutoCSer.Net.ICommandClient.ControllerCreatorBindingFlags">
            <summary>
            命令客户端套接字事件控制器属性绑定标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ICommandClient.WaitServerEndPoint">
            <summary>
            等待服务监听地址
            </summary>
            <returns>是否需要取消定时任务</returns>
        </member>
        <member name="M:AutoCSer.Net.ICommandClient.ServerEndPointChanged(System.Net.IPEndPoint)">
            <summary>
            服务端监听地址更新通知
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.ICommandClient.GetSendBufferPool">
            <summary>
            获取发送数据缓存区池
            </summary>
            <returns>发送数据缓存区池</returns>
        </member>
        <member name="T:AutoCSer.Net.ICommandListenerSession">
            <summary>
            命令服务会话对象操作接口
            </summary>
        </member>
        <member name="T:AutoCSer.Net.ICommandListenerGetSession`1">
            <summary>
            命令服务会话对象操作接口
            </summary>
            <typeparam name="T">指定会话对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.ICommandListenerGetSession`1.TryGetSessionObject(AutoCSer.Net.CommandServerSocket)">
            <summary>
            尝试从命令服务套接字自定义会话对象获取指定会话对象
            </summary>
            <param name="socket">命令服务套接字</param>
            <returns>失败返回 null</returns>
        </member>
        <member name="T:AutoCSer.Net.ICommandListenerSession`1">
            <summary>
            命令服务会话对象操作接口
            </summary>
            <typeparam name="T">指定会话对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.ICommandListenerSession`1.CreateSessionObject(AutoCSer.Net.CommandServerSocket)">
            <summary>
            创建会话对象
            </summary>
            <param name="socket">命令服务套接字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.ICommandListenerSession`2">
            <summary>
            命令服务会话对象操作接口
            </summary>
            <typeparam name="T">指定会话对象类型</typeparam>
            <typeparam name="ST">服务实例类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.ICommandListenerSession`2.CreateSessionObject(`1,AutoCSer.Net.CommandServerSocket)">
            <summary>
            创建会话对象
            </summary>
            <param name="service">服务控制器对象</param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSocketSessionObject">
            <summary>
            命令服务套接字会话对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketSessionObject.CommandServerSocket">
            <summary>
            命令服务套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocketSessionObject.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            命令服务套接字会话对象
            </summary>
            <param name="socket">命令服务套接字</param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketSessionObject.Null">
            <summary>
            默认空命令服务套接字会话对象
            </summary>
        </member>
        <member name="T:AutoCSer.Net.KeepCallbackReturnValueLink`1">
            <summary>
            持续回调返回值链表
            </summary>
            <typeparam name="T">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.KeepCallbackReturnValueLink`1.LinkNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackReturnValueLink`1.GetEndCount(`0,System.Int32,System.Int32@)">
            <summary>
            获取指定数量的结束节点
            </summary>
            <param name="head">开始节点</param>
            <param name="getCount">获取数量</param>
            <param name="endCount">实际结束数量</param>
            <returns>结束节点</returns>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackReturnValueLink`1.GetEnd(`0,System.Int32,System.Int32@)">
            <summary>
            获取指定数量的结束节点
            </summary>
            <param name="head">开始节点</param>
            <param name="getCount">获取数量</param>
            <param name="endCount">实际结束数量</param>
            <returns>结束节点</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClient">
            <summary>
            命令客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.Config">
            <summary>
            命令服务配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.ServiceName">
            <summary>
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.Log">
            <summary>
            日志处理接口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.Host">
            <summary>
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.AutoCSer#Net#ICommandClient#ControllerCreatorBindingFlags">
            <summary>
            命令客户端套接字事件控制器属性绑定标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.BinaryDeserializeConfig">
            <summary>
            二进制反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.ReceiveBufferPool">
            <summary>
            接受数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.SendBufferPool">
            <summary>
            发送数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.socketLock">
            <summary>
            客户端套接字操作锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.SocketEvent">
            <summary>
            命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.serviceRegistrar">
            <summary>
            服务注册客户端监听组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.ControllerCreators">
            <summary>
            客户端控制器创建器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.callbackQueues">
            <summary>
            客户端回调队列数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.callbackQueueLock">
            <summary>
            客户端回调队列数组访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.CreateVersion">
            <summary>
            服务更新版本号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.VerifyErrorCount">
            <summary>
            验证连续失败次数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.CurrentSocket">
            <summary>
            获取当前客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.createSocket">
            <summary>
            正在创建的客户端套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.IsDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.#ctor">
            <summary>
            默认空命令客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.Null">
            <summary>
            默认空命令客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.#ctor(AutoCSer.Net.CommandClientConfig,AutoCSer.Net.CommandClientInterfaceControllerCreator[])">
            <summary>
            命令客户端
            </summary>
            <param name="config">命令服务配置</param>
            <param name="creators">客户端控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.#ctor(AutoCSer.Net.CommandReverseListener,System.Net.Sockets.Socket)">
            <summary>
            反向命令客户端
            </summary>
            <param name="listener"></param>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.AppendCreators(AutoCSer.Net.CommandClientInterfaceControllerCreator[],AutoCSer.LeftArray{AutoCSer.Net.CommandClientInterfaceControllerCreator}@)">
            <summary>
            添加客户端控制器创建器集合
            </summary>
            <param name="creators"></param>
            <param name="controllerCreators"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.AutoCreateSocket">
            <summary>
            自动启动连接
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.Start">
            <summary>
            反向客户端初始化操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.WaitServerEndPoint">
            <summary>
            等待服务监听地址
            </summary>
            <returns>是否需要取消定时任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.ServerEndPointChanged(System.Net.IPEndPoint)">
            <summary>
            服务端监听地址更新通知
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.AutoCSer#Net#ICommandClient#GetSendBufferPool">
            <summary>
            获取发送数据缓存区池
            </summary>
            <returns>发送数据缓存区池</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetSocketAsync">
            <summary>
            尝试客户端套接字，获取失败返回 null
            </summary>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetSocketEvent">
            <summary>
            获取命令客户端套接字事件
            </summary>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetSocketEvent``1">
            <summary>
            获取命令客户端套接字事件
            </summary>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnCreateError(AutoCSer.Net.CommandClientSocket)">
            <summary>
            命令客户端套接字初始化失败
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnClosed(AutoCSer.Net.CommandClientSocket)">
            <summary>
            关闭命令客户端套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnTimeout(AutoCSer.Net.CommandServer.Command)">
            <summary>
            命令超时触发事件
            </summary>
            <param name="head">超时首节点</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            套接字验证通过以后的处理
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.CreateNewSocket(AutoCSer.Net.CommandClientSocket)">
            <summary>
            套接字操作失败重新创建版本检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.CreateNewSocketAsync(AutoCSer.Net.CommandClientSocket)">
            <summary>
            套接字操作失败重新创建版本检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetControllerCreator(System.String)">
            <summary>
            获取扩展控制器创建器
            </summary>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.getClientCallQueue(System.Int32)">
            <summary>
            获取客户端执行队列
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetCommandClientCallQueue(System.Int32)">
            <summary>
            获取客户端执行队列
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetCommandClientCallQueueLowPriority(System.Int32)">
            <summary>
            获取客户端执行队列（低优先级）
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClient`1">
            <summary>
            接口对称命令客户端
            </summary>
            <typeparam name="T">控制器接口名称</typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandClient`1.#ctor(AutoCSer.Net.CommandClientConfig{`0})">
            <summary>
            接口对称命令客户端
            </summary>
            <param name="config">命令服务配置</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient`1.GetSocketEvent">
            <summary>
            获取命令客户端套接字事件
            </summary>
            <returns>失败返回 null</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientController">
            <summary>
            命令客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.Socket">
            <summary>
            命令客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.ControllerName">
            <summary>
            命令控制器名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.Methods">
            <summary>
            客户端接口方法信息集合
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientController.ErrorMethods">
            <summary>
            获取错误方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.StartMethodIndex">
            <summary>
            方法起始序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.VerifyMethodIndex">
            <summary>
            验证方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.MaxMethodCount">
            <summary>
            最大命令数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SetMaxMethodCount(System.Int32)">
            <summary>
            主控制器设置最大命令数量
            </summary>
            <param name="maxMethodCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.#ctor(AutoCSer.Net.CommandClientSocket,System.String)">
            <summary>
            默认空命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.#ctor(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,System.Int32,AutoCSer.Net.CommandServer.ClientInterfaceMethod[],System.Int32)">
            <summary>
            命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="maxMethodCount"></param>
            <param name="methods"></param>
            <param name="verifyMethodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.GetMethodIndex(System.Int32)">
            <summary>
            获取控制器命令方法序号
            </summary>
            <param name="methodIndex"></param>
            <returns>超出范围返回 0</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Synchronous(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SynchronousInput``1(System.Int32,``0@)">
            <summary>
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SynchronousOutput``1(System.Int32,``0@)">
            <summary>
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SynchronousInputOutput``2(System.Int32,``0@,``1@)">
            <summary>
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SendOnly(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            仅发送数据命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SendOnlyInput``1(System.Int32,``0@)">
            <summary>
            仅发送数据命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Callback(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback)">
            <summary>
            回调委托
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackInput``1(System.Int32,AutoCSer.Net.CommandClientCallback,``0@)">
            <summary>
            回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Callback``1(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{``0})">
            <summary>
            回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackOutput``2(System.Int32,AutoCSer.Net.CommandClientCallback{``1},``0@)">
            <summary>
            回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackOutputReturnValue``2(System.Int32,AutoCSer.Net.CommandClientCallback{``1},``0@,``1@)">
            <summary>
            回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallback(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback)">
            <summary>
            保持回调委托
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackInput``1(System.Int32,AutoCSer.Net.CommandClientKeepCallback,``0@)">
            <summary>
            保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallback``1(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{``0})">
            <summary>
            保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackOutput``2(System.Int32,AutoCSer.Net.CommandClientKeepCallback{``1},``0@)">
            <summary>
            保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackOutputReturnValue``2(System.Int32,AutoCSer.Net.CommandClientKeepCallback{``1},``0@,``1@)">
            <summary>
            保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.AppendQueue(System.Int32,AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            添加到回调队列
            </summary>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueue(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode)">
            <summary>
            队列回调委托
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueueInput``1(System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode,``0@)">
            <summary>
            队列回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueue``1(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{``0})">
            <summary>
            队列回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueueOutput``2(System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{``1},``0@)">
            <summary>
            队列回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueueOutputReturnValue``2(System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{``1},``0@,``1@)">
            <summary>
            队列回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueue(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue)">
            <summary>
            队列保持回调委托
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueueInput``1(System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue,``0@)">
            <summary>
            队列保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueue``1(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{``0})">
            <summary>
            队列保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueueOutput``2(System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{``1},``0@)">
            <summary>
            队列保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueueOutputReturnValue``2(System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{``1},``0@,``1@)">
            <summary>
            队列保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnType(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnTypeInput``1(System.Int32,``0@)">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValue``1(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueOutput``2(System.Int32,``0@)">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueOutputReturnValue``2(System.Int32,``0@,``1@)">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.AppendQueue(System.Int32,System.Action)">
            <summary>
            添加到回调队列
            </summary>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnTypeQueue(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnTypeQueueInput``1(System.Int32,``0@)">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueQueue``1(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueQueueOutput``2(System.Int32,``0@)">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueQueueOutputReturnValue``2(System.Int32,``0@,``1@)">
            <summary>
            返回值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Enumerator(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            枚举返回值
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorInput``1(System.Int32,``0@)">
            <summary>
            枚举返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Enumerator``1(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            枚举返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorOutput``2(System.Int32,``0@)">
            <summary>
            枚举返回值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorOutputReturnValue``2(System.Int32,``0@,``1@)">
            <summary>
            枚举返回值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueue(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            队列枚举返回值
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueueInput``1(System.Int32,``0@)">
            <summary>
            队列枚举返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueue``1(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            队列枚举返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueueOutput``2(System.Int32,``0@)">
            <summary>
            队列枚举返回值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueueOutputReturnValue``2(System.Int32,``0@,``1@)">
            <summary>
            队列枚举返回值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientController`2">
            <summary>
            服务端 Task 队列命令客户端控制器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController`2.createQueueController">
            <summary>
            创建客户端控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController`2.#ctor(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,System.Int32,AutoCSer.Net.CommandServer.ClientInterfaceMethod[],System.Int32,System.Func{AutoCSer.Net.CommandClientController{`0,`1},`1,`0})">
            <summary>
            服务端 Task 队列命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="maxMethodCount"></param>
            <param name="methods"></param>
            <param name="verifyMethodIndex"></param>
            <param name="createQueueController"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController`2.CreateQueueController(`1)">
            <summary>
            创建客户端控制器
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocket">
            <summary>
            命令客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.Client">
            <summary>
            命令客户端
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.Socket">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.serverEndPoint">
            <summary>
            服务监听地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.Controller">
            <summary>
            主客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.CommandPool">
            <summary>
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveAsyncEventArgs">
            <summary>
            接收数据套接字异步事件对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.CreateVersion">
            <summary>
            服务更新版本号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.MaxInputSize">
            <summary>
            最大输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.MaxMergeInputSize">
            <summary>
            最大合并输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.commandQueueCount">
            <summary>
            客户端最大未处理命令数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.pad0">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.SessionObject">
            <summary>
            自定义会话对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.checkTimer">
            <summary>
            客户端心跳检测定时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.controllerLock">
            <summary>
            命令控制器访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.controllerCreators">
            <summary>
            客户端控制器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.ControllerArray">
            <summary>
            命令客户端控制器集合
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.Controllers">
            <summary>
            命令客户端控制器集合
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.Item(System.String)">
            <summary>
            获取命令客户端控制器
            </summary>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.Item(System.Type)">
            <summary>
            获取命令客户端控制器
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveDeserializer">
            <summary>
            接收数据二进制反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveJsonDeserializer">
            <summary>
            接收数据 JSON 解析
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.ReceiveJsonDeserializer">
            <summary>
            接收数据 JSON 解析
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveBigBuffer">
            <summary>
            临时接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveBuffer">
            <summary>
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveDataStart">
            <summary>
            接收数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.callbackIdentity">
            <summary>
            当前处理会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.command">
            <summary>
            当前客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveIndex">
            <summary>
            当前处理接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.compressionDataSize">
            <summary>
            当前数据压缩后的字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.dataSize">
            <summary>
            当前数据字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveSocketError">
            <summary>
            套接字接收数据错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.createErrorCount">
            <summary>
            创建套接字失败次数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveType">
            <summary>
            接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveErrorType">
            <summary>
            接收数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveReserve">
            <summary>
            保留补白
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.pad1">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.commandCount">
            <summary>
            当前队列命令数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.commands">
            <summary>
            TCP 客户端输出信息链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.outputWaitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.waitPushCommands">
            <summary>
            等待添加到队列的命令集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.isClosed">
            <summary>
            是否已经关闭套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.IsClosed">
            <summary>
            是否已经关闭套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.pushReserve">
            <summary>
            保留补白
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.pad2">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.OutputSerializer">
            <summary>
            输出数据二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.outputJsonSerializer">
            <summary>
            输出数据 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.buildCommandCount">
            <summary>
            当前发送命令数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.#ctor">
            <summary>
            默认空客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.Null">
            <summary>
            默认空客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.#ctor(AutoCSer.Net.CommandClient,System.Net.IPEndPoint,System.Int32)">
            <summary>
            客户端套接字
            </summary>
            <param name="client">TCP 服务客户端创建器</param>
            <param name="serverEndPoint"></param>
            <param name="createVersion"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.#ctor(AutoCSer.Net.CommandClientSocket,System.Net.IPEndPoint)">
            <summary>
            客户端套接字
            </summary>
            <param name="socket"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.#ctor(AutoCSer.Net.CommandClient,System.Net.Sockets.Socket)">
            <summary>
            反向客户端套接字
            </summary>
            <param name="client"></param>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.setValue(System.Boolean)">
            <summary>
            设置默认值
            </summary>
            <param name="isNull"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.createController">
            <summary>
            创建主控制器
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.close">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.closeWaitPush">
            <summary>
            关闭套接字等待添加队列命令处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.addBuildCommandCount(System.Int32)">
            <summary>
            增加当前发送命令数量
            </summary>
            <param name="buildCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Shutdown">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.ServerEndPointEquals(System.Net.IPEndPoint)">
            <summary>
            比较服务监听地址是否相等
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.create">
            <summary>
            创建套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Start">
            <summary>
            反向客户端初始化操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.verify(AutoCSer.Net.CommandClientSocketEvent,System.Int32)">
            <summary>
            验证调用
            </summary>
            <param name="socketEvent"></param>
            <param name="exceptionCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.ControllerCallback(AutoCSer.Net.CommandServer.CommandControllerOutputData@)">
            <summary>
            命令控制器查询数据回调
            </summary>
            <param name="controllerOutputData"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.createSynchronizeOnReceive">
            <summary>
            创建套接字同步接收数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isCallbackIdentity(System.Int32)">
            <summary>
            获取命令回调序号
            </summary>
            <param name="count"></param>
            <returns>是否异步</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.checkDataLoopFixed">
            <summary>
            检查命令数据
            </summary>
            <returns>0 表示异步，1 表示成功继续解析数据，2 表示失败</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isOnDataLoopFixed">
            <summary>
            回调命令数据
            </summary>
            <returns>是否执行成功（非异步）</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceiveErrorMessage(System.Byte*)">
            <summary>
            接收错误信息
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isOnBigDataLoopFixed">
            <summary>
            回调命令数据
            </summary>
            <returns>是否成功（非异步）</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isData(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="count"></param>
            <returns>是否异步</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isBigData(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="count"></param>
            <returns>是否异步</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.loop">
            <summary>
            循环处理命令回调
            </summary>
            <returns>是否异步</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceive(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            接收数据处理
            </summary>
            <param name="type"></param>
            <param name="errorMessage">错误信息</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceive(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            接收数据处理
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.MergeCallback(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            合并命令处理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Deserialize``1(AutoCSer.SubArray{System.Byte}@,``0@,System.Boolean)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="isSimpleSerialize"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.CheckSynchronousIO(AutoCSer.BinaryDeserializer)">
            <summary>
            检查当前序列化是否 IO 同步环境
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.buildOutput">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.JsonSerialize``1(``0@)">
            <summary>
            JSON 序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.JsonSerializeBuffer``1(``0@,AutoCSer.Memory.UnmanagedStream)">
            <summary>
            JSON 序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="stream"></param>
            <returns>返回不包括补白的字节数</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.PushNotCheckCount(AutoCSer.Net.CommandServer.Command)">
            <summary>
            添加命令，不检查计数
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.TryPush(AutoCSer.Net.CommandServer.Command)">
            <summary>
            尝试添加命令
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Check">
            <summary>
            心跳检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.SendCustomData(System.Byte[])">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.SendCustomData(AutoCSer.SubArray{System.Byte})">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerController">
            <summary>
            命令服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.MaxCommandBits">
            <summary>
            多命令控制器模式最大命令数量有效位
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.MaxCommandCount">
            <summary>
            多命令控制器模式最大命令数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.DefaultAttribute">
            <summary>
            默认命令服务控制器配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.ControllerName">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.Attribute">
            <summary>
            命令控制器配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.Methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.VerifyMethod">
            <summary>
            验证方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.VerifyMethodIndex">
            <summary>
            验证方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CallQueue">
            <summary>
            同步调用队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CallQueueLowPriority">
            <summary>
            同步调用低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CallTaskQueue">
            <summary>
            服务端异步调用队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CommandStartIndex">
            <summary>
            起始命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CommandEndIndex">
            <summary>
            结束命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.ControllerIndex">
            <summary>
            控制器在服务中的索引编号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.#ctor(AutoCSer.Net.CommandListener)">
            <summary>
            默认空命令服务控制器
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.#ctor(AutoCSer.Net.CommandListener,System.String,AutoCSer.Net.CommandServerControllerInterfaceAttribute,AutoCSer.Net.CommandServer.ServerInterfaceMethod[],System.Int32,System.Byte)">
            <summary>
            命令服务控制器
            </summary>
            <param name="server">命令服务</param>
            <param name="controllerName">控制器名称</param>
            <param name="attribute"></param>
            <param name="methods"></param>
            <param name="verifyMethodIndex"></param>
            <param name="controllerQueue">控制器同步队列标记</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.Close">
            <summary>
            关闭控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.SetCommandStartIndex(System.Int32)">
            <summary>
            设置起始命令序号
            </summary>
            <param name="commandStartIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.GetMethod(System.Int32)">
            <summary>
            获取服务端接口方法信息
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.GetCommandMapIndex(System.Int32)">
            <summary>
            获取命令位图索引
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.DoCommand(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="socket">命令服务套接字</param>
            <param name="data">命令数据</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.DoCommandOfflineCount(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            下线通知接口命令处理
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.DoCommand(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            命令处理
            </summary>
            <param name="socket">命令服务套接字</param>
            <param name="data">命令数据</param>
            <param name="offlineCount">服务端下线计数对象</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddQueue(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加同步调用队列任务
            </summary>
            <param name="node"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddQueueLowPriority(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加同步调用队列低优先级任务
            </summary>
            <param name="node"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.Add(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task})">
            <summary>
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTask(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddExceptionTask(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTask``1(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddExceptionTask``1(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.Add(System.Func{System.Threading.Tasks.Task})">
            <summary>
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddExceptionTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddExceptionTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriority(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task})">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="getTask"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityTask(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityExceptionTask(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityTask``1(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityExceptionTask``1(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriority(System.Func{System.Threading.Tasks.Task})">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="getTask"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityExceptionTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityExceptionTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTaskQueue(AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加队列任务
            </summary>
            <param name="controller"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTaskQueueLowPriority(AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="controller"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerController`1">
            <summary>
            命令服务控制器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController`1.Controller">
            <summary>
            控制器接口实例
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController`1.getBindController">
            <summary>
            获取控制器接口实例
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.#ctor(AutoCSer.Net.CommandListener,System.String,`0,System.Func{AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerBindContextController},System.Int32,System.Byte)">
            <summary>
            命令服务控制器
            </summary>
            <param name="server">命令服务</param>
            <param name="controllerName">控制器名称</param>
            <param name="controller"></param>
            <param name="getBindController"></param>
            <param name="verifyMethodIndex"></param>
            <param name="controllerQueue">控制器同步队列标记</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.getController(AutoCSer.Net.CommandServerSocket)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.GetController(AutoCSer.Net.CommandServerController{`0},AutoCSer.Net.CommandServerSocket)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="controller"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.GetQueueNodeController(AutoCSer.Net.CommandServerController{`0},AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="controller"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerControllerInterfaceAttribute">
            <summary>
            命令控制器接口配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.MethodIndexEnumTypeCodeGeneratorPath">
            <summary>
            生成方法序号映射枚举类型代码相对路径，需要同时设置 MethodIndexEnumType。默认为 null 表示不生成代码，设置为空字符串 "" 表示代码生成到默认文件 {xxx}.AutoCSer.cs 中 
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.IsJsonSerialize">
            <summary>
            是否使用 JSON 序列化，默认为 false 表示使用二进制序列化，否则采用 JSON 序列化（生效的前提是数据不适配简单序列化操作）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.IsSimpleSerializeInputParameter">
            <summary>
            默认为 true 表示输入参数优先适配简单序列化操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.IsSimpleSerializeOutputParameter">
            <summary>
            默认为 true 表示输出参数优先适配简单序列化操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.TaskQueueMaxConcurrent">
            <summary>
            异步读写队列最大读操作并发任务数量，默认为 0 表示不启用控制器队列，如果启用控制器队列建议值为 1 可以不考虑并发问题，当设置大于 1 时可提高并发吞吐，但是访问共享资源需要增加队列锁操作，而且写操作需要等待所有未完成读取操作结束以后才能执行，所以并发读取任务数量不宜过大避免造成写操作等待时间过长
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.TaskQueueWaitCount">
            <summary>
            异步读写队列写操作等待读取操作任务数量，默认为 16，最小值为 1，等待读取操作任务数量不宜过大避免造成写操作等待时间过长
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerControllerInterfaceAttribute.Clone">
            <summary>
            复制命令控制器配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerControllerInterfaceAttribute.GetControllerName(System.Type)">
            <summary>
            获取方法序号映射枚举类型
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandListener">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MethodStartIndex">
            <summary>
            用户命令起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.CancelKeepMethodIndex">
            <summary>
            取消保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.CheckMethodIndex">
            <summary>
            连接心跳检测命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.ControllerMethodIndex">
            <summary>
            获取控制器索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.CustomDataMethodIndex">
            <summary>
            自定义数据包命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MergeMethodIndex">
            <summary>
            客户端流合并命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MinMethodIndex">
            <summary>
            最小系统命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MaxControllerCount">
            <summary>
            最大命令控制器数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.isSocketBuildOutputThread">
            <summary>
            是否已经启动套接字发送数据线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.Config">
            <summary>
            命令服务配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.Log">
            <summary>
            日志处理实例
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.ServiceName">
            <summary>
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.Host">
            <summary>
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.BinaryDeserializeConfig">
            <summary>
            二进制反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.TaskQueueSet">
            <summary>
            异步任务队列集合管理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.ReceiveBufferPool">
            <summary>
            接受数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.SendBufferPool">
            <summary>
            发送数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.VerifyTimeoutTicks">
            <summary>
            验证超时时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MaxInputSize">
            <summary>
            最大输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MaxMergeInputSize">
            <summary>
            最大合并输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MinSocketSize">
            <summary>
            接收发送数据不完整时连续两次最小字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.SendBufferMaxSize">
            <summary>
            发送数据缓存区最大字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MinCompressSize">
            <summary>
            压缩启用最低字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.SessionObject">
            <summary>
            命令服务套接字自定义会话对象操作接口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.EndPoint">
            <summary>
            获取监听地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.callQueues">
            <summary>
            TCP 服务器端同步调用队列数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.controllerLock">
            <summary>
            命令控制器访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.Controllers">
            <summary>
            命令服务控制器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.Controller">
            <summary>
            主服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.CommandEndIndex">
            <summary>
            结束命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.offlineCount">
            <summary>
            下线通知接口调用计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.IsOffline">
            <summary>
            是否已经接收到下线通知
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.#ctor">
            <summary>
            默认空命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.Null">
            <summary>
            默认空命令服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.#ctor(AutoCSer.Net.CommandServerConfig)">
            <summary>
            命令服务
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.#ctor(AutoCSer.Net.CommandServerConfig,AutoCSer.Net.CommandServerInterfaceControllerCreator[])">
            <summary>
            命令服务
            </summary>
            <param name="config">命令服务配置</param>
            <param name="creators">服务控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.#ctor(AutoCSer.Net.CommandServerConfig,AutoCSer.LeftArray{AutoCSer.Net.CommandServerInterfaceControllerCreator}@)">
            <summary>
            命令服务
            </summary>
            <param name="config">命令服务配置</param>
            <param name="creators">服务控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetSessionObject``1">
            <summary>
            获取命令服务套接字自定义会话对象操作对象
            </summary>
            <typeparam name="T">自定义会话对象操作类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.Offline">
            <summary>
            服务下线通知
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.IncrementOfflineCount">
            <summary>
            增加下线通知接口调用计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.DecrementOfflineCount">
            <summary>
            下线通知接口调用完毕
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(``0,System.String)">
            <summary>
            添加命令控制器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
            <param name="controller">控制器接口操作实例</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.Func{``0},System.String)">
            <summary>
            添加命令控制器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.Func{AutoCSer.Net.CommandListener,``0},System.String)">
            <summary>
            添加命令控制器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``2(System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0},System.String)">
            <summary>
            添加命令控制器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="getTaskQueue">获取队列上下文委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.String,``0)">
            <summary>
            添加定义非对称命令控制器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controller">控制器接口操作实例</param>
            <returns>命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.String,System.Func{``0})">
            <summary>
            添加定义非对称命令控制器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <returns>命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.String,System.Func{AutoCSer.Net.CommandListener,``0})">
            <summary>
            添加定义非对称命令控制器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <returns>命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``2(System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0})">
            <summary>
            添加定义非对称命令控制器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="getTaskQueue">获取队列上下文委托</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.Append(AutoCSer.Net.CommandServerController)">
            <summary>
            添加命令控制器
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.Start">
            <summary>
            启动服务监听
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.OnClose(AutoCSer.Net.CommandServerSocket)">
            <summary>
            关闭套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.listenAcceptCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            获取客户端请求套接字
            </summary>
            <param name="sender"></param>
            <param name="listenAcceptEvent"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetCommandController(System.UInt32@)">
            <summary>
            获取命令服务控制器
            </summary>
            <param name="commandMethodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.getServerCallQueue(System.Int32)">
            <summary>
            获取服务端执行队列
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AddQueue(System.Byte,AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加同步调用队列任务
            </summary>
            <param name="index">队列编号索引</param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetServerCallQueue(AutoCSer.Net.CommandListener,System.Int32)">
            <summary>
            获取服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AddQueueLowPriority(System.Byte,AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加同步调用队列任务（低优先级）
            </summary>
            <param name="index">队列编号索引</param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetServerCallQueueLowPriority(AutoCSer.Net.CommandListener,System.Int32)">
            <summary>
            获取服务端执行队列（低优先级）
            </summary>
            <param name="server"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetServerCallTaskQueueSet``1(AutoCSer.Net.CommandListener)">
            <summary>
            获取服务端异步调用队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.QueryController(AutoCSer.Net.CommandServerSocket)">
            <summary>
            获取控制器信息
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerQueueKeyAttribute">
            <summary>
            await Task 队列关键字配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerVerifyStateEnum">
            <summary>
            命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerVerifyStateEnum.Fail">
            <summary>
            验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerVerifyStateEnum.Success">
            <summary>
            验证成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerVerifyStateEnum.Retry">
            <summary>
            验证失败，允许客户端重试
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerVerifyStateEnum.LessVerifyMethod">
            <summary>
            缺少验证函数逻辑，需要重载实现 AutoCSer.Net.CommandServerAttribute.ClientVerifyMethod
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CustomDataCommand">
            <summary>
            自定义数据包命令 await bool 是否成功添加输出队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CustomDataCommand.data">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CustomDataCommand.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CustomDataCommand.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CustomDataCommand.pushState">
            <summary>
            命令添加状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.#ctor(AutoCSer.Net.CommandClientSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据包命令
            </summary>
            <param name="socket"></param>
            <param name="data">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.#ctor(AutoCSer.Net.CommandClientSocket,System.Byte[])">
            <summary>
            自定义数据包命令
            </summary>
            <param name="socket"></param>
            <param name="data">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.Wait">
            <summary>
            等待添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.Push">
            <summary>
            添加命令到发送队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.CheckWaitPush">
            <summary>
            检查等待添加队列命令
            </summary>
            <returns>是否需要继续等待</returns>
        </member>
        <member name="T:AutoCSer.Net.SendOnlyCommand">
            <summary>
            仅发送数据命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            仅发送数据命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand.Discard">
            <summary>
            丢弃命令，用于清除 async 内部提示 await 的警告，仅用于确定不会超过客户端最大未处理命令数量限制，如果是批量请求并且可能超过限制则应该 await 等待
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SendOnlyCommand`1">
            <summary>
            仅发送数据命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.SendOnlyCommand`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            仅发送数据命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            创建命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackQueueTask">
            <summary>
            服务端异步调用队列保持回调任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask.keepCallback">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerMethodTypeEnum,System.Boolean)">
            <summary>
            服务端异步调用保持回调队列任务
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="methodType"></param>
            <param name="autoCancelKeep"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.checkCallTask(System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.CheckCallTask(AutoCSer.Net.CommandServerKeepCallbackQueueTask,System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.GetSocket(AutoCSer.Net.CommandServerKeepCallbackQueueTask,AutoCSer.Net.CommandServerKeepCallback,AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="keepCallback"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.GetTaskQueue(AutoCSer.Net.CommandServerKeepCallbackQueueTask,AutoCSer.Net.CommandServerKeepCallback)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="task"></param>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1">
            <summary>
            服务端异步调用队列保持回调任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.keepCallback">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.callbackTask">
            <summary>
            回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            服务端异步调用保持回调队列任务
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.onCallCompleted">
            <summary>
            调用接口完成
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.checkCallTask(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.CheckCallTask(AutoCSer.Net.CommandServerKeepCallbackQueueTask{`0},System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.GetSocket(AutoCSer.Net.CommandServerKeepCallbackQueueTask{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.GetTaskQueue(AutoCSer.Net.CommandServerKeepCallbackQueueTask{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.GetSocketDelegate">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerInterfaceControllerCreator">
            <summary>
            服务控制器创建器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator.controllerName">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.#ctor(System.String)">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.Create(AutoCSer.Net.CommandListener)">
            <summary>
            创建服务控制器
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.Check">
            <summary>
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.getInterfaceServiceType(System.Type)">
            <summary>
            获取服务接口类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(``0,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller">控制器接口操作实例</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.Func{``0},System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.Func{AutoCSer.Net.CommandListener,``0},System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``2(System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0},System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="getTaskQueue">获取队列上下文委托</param>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.String,``0)">
            <summary>
            获取定义非对称控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controller">控制器接口操作实例</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.String,System.Func{``0})">
            <summary>
            获取定义非对称控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.String,System.Func{AutoCSer.Net.CommandListener,``0})">
            <summary>
            获取定义非对称控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">创建控制器接口操作实例委托</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``2(System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0})">
            <summary>
            获取定义非对称控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="controllerName">控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="getTaskQueue">获取队列上下文委托</param>
            <returns>控制器创建器</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerInterfaceControllerCreator`1">
            <summary>
            服务控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.controllerCreator">
            <summary>
            创建控制器接口操作实例委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.isFunc">
            <summary>
            传参是否委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.#ctor(System.String,`0)">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.#ctor(System.String,System.Func{`0})">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
            <param name="controllerCreator"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.#ctor(System.String,System.Func{AutoCSer.Net.CommandListener,`0})">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
            <param name="controllerCreator"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.Create(AutoCSer.Net.CommandListener)">
            <summary>
            创建服务控制器
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.Check">
            <summary>
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController">
            <summary>
            获取控制器接口实例
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController.server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController.controllerCreator">
            <summary>
            创建控制器接口操作实例委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController.#ctor(AutoCSer.Net.CommandListener,System.Func{AutoCSer.Net.CommandListener,`0})">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="server"></param>
            <param name="controllerCreator"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController.Get(AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerSocket)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="commandServerController"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerInterfaceControllerCreator`2">
            <summary>
            Task 队列服务控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`2.getTaskQueue">
            <summary>
            获取队列上下文委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`2.#ctor(System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,`1,`0})">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
            <param name="getTaskQueue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`2.Create(AutoCSer.Net.CommandListener)">
            <summary>
            创建服务控制器
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`2.Check">
            <summary>
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandReverseClient">
            <summary>
            反向命令服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.config">
            <summary>
            反向命令服务客户端配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandReverseClient.AutoCSer#Net#ICommandClient#ControllerCreatorBindingFlags">
            <summary>
            命令客户端套接字事件控制器属性绑定标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.SocketEvent">
            <summary>
            命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.serverEndPoint">
            <summary>
            服务监听地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.currentSocket">
            <summary>
            当前命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.clientRegistrar">
            <summary>
            服务注册客户端监听组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.createVersion">
            <summary>
            服务更新版本号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.#ctor(AutoCSer.Net.CommandReverseClientConfig,AutoCSer.Net.CommandServerInterfaceControllerCreator[])">
            <summary>
            反向命令服务客户端
            </summary>
            <param name="config">命令服务配置</param>
            <param name="creators">服务控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.#ctor(AutoCSer.Net.CommandReverseClientConfig,AutoCSer.LeftArray{AutoCSer.Net.CommandServerInterfaceControllerCreator}@)">
            <summary>
            反向命令服务客户端
            </summary>
            <param name="config">命令服务配置</param>
            <param name="creators">服务控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.CreateSocket">
            <summary>
            自动启动连接
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.CreateSocketAsync">
            <summary>
            自动启动连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.AutoCSer#Net#ICommandClient#WaitServerEndPoint">
            <summary>
            等待服务监听地址
            </summary>
            <returns>是否需要取消定时任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.AutoCSer#Net#ICommandClient#ServerEndPointChanged(System.Net.IPEndPoint)">
            <summary>
            服务端监听地址更新通知
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.OnClose(AutoCSer.Net.CommandServerSocket)">
            <summary>
            关闭套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.AutoCSer#Net#ICommandClient#GetSendBufferPool">
            <summary>
            获取发送数据缓存区池
            </summary>
            <returns>发送数据缓存区池</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandReverseClientConfig">
            <summary>
            反向命令服务客户端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClientConfig.ControllerCreatorBindingFlags">
            <summary>
            命令客户端套接字事件控制器属性绑定标识，默认为仅当前类型定义属性 BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.DeclaredOnly 
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClientConfig.GetSocketEventDelegate">
            <summary>
            获取命令客户端套接字事件委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClientConfig.GetSocketEvent(AutoCSer.Net.CommandReverseClient)">
            <summary>
            获取命令客户端套接字事件，默认为 new CommandClientSocketEvent(commandClient)，客户端初始化时一次性调用
            </summary>
            <param name="commandClient"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClientConfig.GetRegistrar(AutoCSer.Net.CommandReverseClient)">
            <summary>
            获取服务注册客户端监听组件，默认为 new AutoCSer.Net.CommandClientServiceRegistrar(commandClient)，客户端初始化时一次性调用
            </summary>
            <param name="commandClient"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClientConfig.CreateSocket(AutoCSer.Net.CommandReverseClient)">
            <summary>
            用于启用服务注册以后重写自动启动连接逻辑
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandReverseListener">
            <summary>
            反向命令服务客户端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.Config">
            <summary>
            反向命令服务客户端监听配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandReverseListener.ServiceName">
            <summary>
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandReverseListener.Host">
            <summary>
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.startLock">
            <summary>
            启动服务监听访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.ReceiveBufferPool">
            <summary>
            接受数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.SendBufferPool">
            <summary>
            发送数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.BinaryDeserializeConfig">
            <summary>
            二进制反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.ControllerCreators">
            <summary>
            客户端控制器创建器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.clientLock">
            <summary>
            客户端操作锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.clientWaitLocks">
            <summary>
            等待客户端锁集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.#ctor(AutoCSer.Net.CommandReverseListenerConfig,AutoCSer.Net.CommandClientInterfaceControllerCreator[])">
            <summary>
            反向命令服务客户端监听
            </summary>
            <param name="config">反向命令服务客户端监听配置</param>
            <param name="creators">客户端控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.Start">
            <summary>
            启动服务监听
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.listenAcceptCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            获取客户端请求套接字
            </summary>
            <param name="sender"></param>
            <param name="listenAcceptEvent"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.onSocket(System.Net.Sockets.Socket)">
            <summary>
            新的套接字连接处理
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.verify(System.Net.Sockets.Socket)">
            <summary>
            套接字验证，一般用于验证 IP 地址，默认返回 true
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.currentClient">
            <summary>
            当前客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.start(AutoCSer.Net.CommandClient)">
            <summary>
            反向客户端启动操作
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.verify(AutoCSer.Net.CommandClient)">
            <summary>
            反向客户端验证，用于验证客户端的合法性，默认返回 true
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.setCommandClient(AutoCSer.Net.CommandClient)">
            <summary>
            设置当前客户端
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.releaseClientWaitLock">
            <summary>
            释放等待客户端锁，必须在客户端锁操作中调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.GetCommandClient">
            <summary>
            获取客户端
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandReverseListenerConfig">
            <summary>
            反向命令服务客户端监听配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListenerConfig.SocketAsyncEventArgsMaxCount">
            <summary>
            套接字异步事件对象缓存数量，默认为 8
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListenerConfig.GetRegistrar(AutoCSer.Net.CommandReverseListener)">
            <summary>
            获取服务注册组件，默认返回 new AutoCSer.Net.CommandServiceRegistrar(server)，服务初始化时一次性调用
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerMethodAttribute">
            <summary>
            命令服务方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.KeepCallbackOutputCount">
            <summary>
            保持回调输出计数，用于等待计数的保持回调 API 设置，默认为 1 无法批量输出数据，内部服务高频调用场景建议根据具体业务数据以及输出缓存区大小设置合适值以提高吞吐量并控制内存占用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsOutputPool">
            <summary>
            输出对象是否采用缓存池，默认为 false，频繁调用输出接口建议设置为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.QueueIndex">
            <summary>
            同步队列序号，默认为 0 表示控制器独立队列，否则为当前服务的共享队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsControllerTaskQueue">
            <summary>
            默认为 true 表示采用控制器异步任务队列，否则需要准备队列关键字参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsLowPriorityTaskQueue">
            <summary>
            Task 队列控制器模式是否低优先级 API，默认为 false
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.AutoCancelKeep">
            <summary>
            默认为 true 表示在 API 调用完成时自动取消保持回调，否则需要手动调用 CancelKeep 取消用于异步调用场景
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsOfflineCount">
            <summary>
            是否启用服务下线通知计数逻辑，用于单例服务注册等待所有任务完成以后下线并通知新服务上线，保持回调相关接口不等待异步回调完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsExpired">
            <summary>
            是否过期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.Default">
            <summary>
            默认命令服务方法配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientReturnValue.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            返回值
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue.op_Implicit(AutoCSer.Net.CommandClientReturnTypeEnum)~AutoCSer.Net.CommandClientReturnValue">
            <summary>
            获取返回值
            </summary>
            <param name="returnType"></param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue.GetIsSuccess(AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            是否成功
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue.CheckThrowException(AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            检查状态并抛出异常
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientReturnValue`1">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue`1.Value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue`1.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue`1.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientReturnValue`1.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientReturnValue`1.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.#ctor(`0)">
            <summary>
            返回值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.#ctor(AutoCSer.Net.CommandClientReturnValue@)">
            <summary>
            返回值
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            返回值
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.Cast``1(System.Func{`0,``0})">
            <summary>
            返回值类型转换
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.op_Implicit(`0)~AutoCSer.Net.CommandClientReturnValue{`0}">
            <summary>
            获取返回值
            </summary>
            <param name="value">异步返回值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.op_Implicit(AutoCSer.Net.CommandClientReturnValue)~AutoCSer.Net.CommandClientReturnValue{`0}">
            <summary>
            获取返回值
            </summary>
            <param name="returnValue">返回值类型</param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.GetReturnValue(`0)">
            <summary>
            获取返回值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.GetReturnValue(AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            获取错误返回值
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSendOnly">
            <summary>
            不返回数据方法返回值类型定义
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSendOnly.Null">
            <summary>
            默认空数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientReturnTypeEnum">
            <summary>
            返回值类型，0x80 或者以上空间为自定义返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.VersionExpired">
            <summary>
            版本过期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ServerDeserializeError">
            <summary>
            服务器端反序列化错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ServerException">
            <summary>
            服务器端异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ServerOffline">
            <summary>
            服务接口已下线
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ServerDisposed">
            <summary>
            服务端已释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.SocketClosed">
            <summary>
            套接字已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ClientException">
            <summary>
            客户端异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.Timeout">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ControllerMethodIndexError">
            <summary>
            客户端命令超出控制器范围
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ClientBuildError">
            <summary>
            创建输出错误取消命令调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ClientDeserializeError">
            <summary>
            客户端反序列化错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.CancelKeepCallback">
            <summary>
            取消保持回调通知
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.NotSupportTaskQueueKey">
            <summary>
            不支持的队列关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.KeepCallbackDisposed">
            <summary>
            已释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ClientUnknown">
            <summary>
            客户端未知错误，可能是没有连接上服务器或者验证未通过
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallback">
            <summary>
            TCP 服务器端异步回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor">
            <summary>
            空回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.Callback(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            失败回调
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.Callback">
            <summary>
            无输出成功回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CancelKeep(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消保持回调命令
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CreateServerCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            创建 TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CreateServerCallback(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            创建 TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallback`1">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallback`1.LinkNext">
            <summary>
            链表下一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor">
            <summary>
            空回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Callback">
            <summary>
            不支持无输出回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Callback(`0)">
            <summary>
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.SynchronousCallback(`0)">
            <summary>
            队列同步回调
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.callback(AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0)">
            <summary>
            成功回调
            </summary>
            <param name="method"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Callback(AutoCSer.Net.CommandServerCallback{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0)">
            <summary>
            成功回调
            </summary>
            <param name="serverCallback"></param>
            <param name="method"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.synchronousCallback(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0)">
            <summary>
            成功回调
            </summary>
            <param name="queue"></param>
            <param name="method"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.SynchronousCallback(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServerCallback{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0)">
            <summary>
            成功回调
            </summary>
            <param name="queue"></param>
            <param name="serverCallback"></param>
            <param name="method"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallback`1.Link">
            <summary>
            TCP 服务器端异步回调链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallback`1.Link.head">
            <summary>
            头节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Link.PushHead(AutoCSer.Net.CommandServerCallback{`0})">
            <summary>
            添加头节点
            </summary>
            <param name="head"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Link.Callback(`0)">
            <summary>
            返回值回调，清理回调失败对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Link.CancelKeep">
            <summary>
            取消所有回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallLowPriorityQueue">
            <summary>
            服务端执行低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.Queue">
            <summary>
            服务端执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.head">
            <summary>
            首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.end">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.queueLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.currentTask">
            <summary>
            当前执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.#ctor(AutoCSer.Net.CommandServerCallQueue)">
            <summary>
            任务队列链表节点
            </summary>
            <param name="queue">任务队列</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.Add(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.AddOnly(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.add(AutoCSer.Threading.QueueTaskNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.Add(AutoCSer.Net.CommandServerCallLowPriorityQueue,AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.RunTask">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.OnTimeout(AutoCSer.Net.CommandServerCallQueue,System.Int64)">
            <summary>
            服务端队列超时通知
            </summary>
            <param name="queue"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCall">
            <summary>
            服务端调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCall.Socket">
            <summary>
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCall.OfflineCount">
            <summary>
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCall.CallbackIdentity">
            <summary>
            当前处理会话标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.#ctor">
            <summary>
            空回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="callbackIdentity"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.checkOfflineCount">
            <summary>
            下线计数对象检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.send">
            <summary>
            发送成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.Send(AutoCSer.Net.CommandServerCall)">
            <summary>
            发送成功
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.send``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.Send``1(AutoCSer.Net.CommandServerCall,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="task"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.send(AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            验证函数发送数据
            </summary>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.Send(AutoCSer.Net.CommandServerCall,AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            验证函数发送数据
            </summary>
            <param name="task"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.RemoveKeepCallback(System.Exception)">
            <summary>
            移除 TCP 服务器端异步保持调用
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.GetSocket(AutoCSer.Net.CommandServerCall)">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="serverCall"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.GetCustom(System.Byte)">
            <summary>
            获取自定义返回值类型
            </summary>
            <param name="customReturnType">0-0x7f 之间</param>
            <returns>自定义返回值类型</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueSet">
            <summary>
            服务端异步调用队列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.queueLock">
            <summary>
            队列集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.QueueMaxConcurrent">
            <summary>
            异步队列最大读并发任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.QueueWaitCount">
            <summary>
            异步队列写操作等待读取操作任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.timeoutSeconds">
            <summary>
            异步队列驻留超时秒数，等待指定时间以后没有新任务再删除，负数表示永久驻留内存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.CheckTaskTimeout">
            <summary>
            是否检查队列执行超时
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet.#ctor(AutoCSer.Net.CommandListener,System.Boolean,System.Int32)">
            <summary>
            服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="checkTaskTimeout"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet.Close">
            <summary>
            关闭服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet.CheckTaskTimeoutAsync(System.Int32)">
            <summary>
            队列任务执行超时检查
            </summary>
            <param name="keepSeconds"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueSet`1">
            <summary>
            服务端异步调用队列集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.queues">
            <summary>
            队列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.lastQueue">
            <summary>
            最后一次访问队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.removeHead">
            <summary>
            等待删除的队列链表首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.removeEnd">
            <summary>
            等待删除的队列链表尾首节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.#ctor(AutoCSer.Net.CommandListener,System.Boolean,System.Int32)">
            <summary>
            服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="checkTaskTimeout">是否检查队列执行超时</param>
            <param name="timeoutSeconds">异步队列驻留超时秒数，等待指定时间以后没有新任务再删除，负数表示永久驻留内存</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.#ctor(AutoCSer.Net.CommandListener,System.Boolean)">
            <summary>
            服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="checkTaskTimeout">是否检查队列执行超时</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.createQueue(`0)">
            <summary>
            创建异步队列
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.get(`0)">
            <summary>
            获取队列
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Add(`0,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Add(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task})">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Add(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task})">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Add(`0,System.Func{System.Threading.Tasks.Task})">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask``1(`0,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask``1(`0,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriority(`0,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriority(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task})">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriority(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task})">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriority(`0,System.Func{System.Threading.Tasks.Task})">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask``1(`0,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask``1(`0,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Close">
            <summary>
            关闭服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.onClosed">
            <summary>
            关闭队列处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.CheckTaskTimeoutAsync(System.Int32)">
            <summary>
            队列执行超时检查
            </summary>
            <param name="keepSeconds"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AppendRemove(AutoCSer.Net.CommandServerCallTaskQueue{`0})">
            <summary>
            添加到过期删除队列
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.onRemoved(AutoCSer.Net.CommandServerCallTaskQueue{`0})">
            <summary>
            队列删除以后的处理
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.OnTimer">
            <summary>
            队列过期删除检查
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.typeAttribute">
            <summary>
            异步任务队列关键字类型自定义属性
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallback">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback.IsCancelKeep">
            <summary>
            是否已经取消保持回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerKeepCallback.IsCancelKeepCallback">
            <summary>
            是否已经取消保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback.outputCount">
            <summary>
            输出数据计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor">
            <summary>
            空回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.Callback">
            <summary>
            返回值回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.Callback(AutoCSer.IEnumeratorTask)">
            <summary>
            返回数据集合以后关闭保持回调
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CancelKeep(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消保持回调命令
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.SetCancelKeep">
            <summary>
            取消保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CreateServerKeepCallback(AutoCSer.Net.CommandServerSocket)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CancelKeep(AutoCSer.Net.CommandServerKeepCallback)">
            <summary>
            取消保持回调命令
            </summary>
            <param name="keepCallback"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback.Null">
            <summary>
            默认空 TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallback`1">
            <summary>
            TCP 服务器端异步保持回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback`1.LinkNext">
            <summary>
            链表下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback`1.Method">
            <summary>
            服务端输出信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor">
            <summary>
            空回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback">
            <summary>
            不支持无输出回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback(`0)">
            <summary>
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.VirtualCallback(`0)">
            <summary>
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback(AutoCSer.Net.CommandServerCallQueue,`0)">
            <summary>
            返回值回调
            </summary>
            <param name="queue"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback(`0,System.Action)">
            <summary>
            返回值回调
            </summary>
            <param name="returnValue"></param>
            <param name="onFree"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CallbackCancelKeep(`0)">
            <summary>
            返回值回调并结束回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.VirtualCallbackCancelKeep(`0)">
            <summary>
            返回值回调并结束回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            返回数据集合
            </summary>
            <param name="values"></param>
            <param name="isCancel">回调完成之后是否关闭</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CallbackAsync(AutoCSer.IEnumeratorTask{`0})">
            <summary>
            返回数据集合以后关闭保持回调
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CallbackAsync(System.Collections.Generic.IAsyncEnumerator{`0})">
            <summary>
            返回数据集合以后关闭保持回调
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            创建 TCP 服务器端异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallback`1.Link">
            <summary>
            TCP 服务器端异步保持回调链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback`1.Link.head">
            <summary>
            头节点
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerKeepCallback`1.Link.IsHead">
            <summary>
            判断是否存在头节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Link.PushHead(AutoCSer.Net.CommandServerKeepCallback{`0})">
            <summary>
            添加头节点
            </summary>
            <param name="head"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Link.Callback(`0)">
            <summary>
             返回值回调，清理回调失败对象
            </summary>
            <param name="value"></param>
            <returns>回调输出次数（不保证回调成功）</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Link.CancelKeep">
            <summary>
            取消所有回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSocket">
            <summary>
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.socket">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.onReceiveAsyncCallback">
            <summary>
            接收数据异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.buildOutputHandle">
            <summary>
            尝试发送数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.keepCallbackLock">
            <summary>
            异步保持回调集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.onClosedHashSet">
            <summary>
            套接字关闭事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.pad0">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.commandDataLock">
            <summary>
            命令位图访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.SessionObject">
            <summary>
            自定义会话对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.bindControllers">
            <summary>
            套接字上下文绑定服务端实例集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.commandData">
            <summary>
            命令位图
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveAsyncEventArgs">
            <summary>
            接收数据套接字异步事件对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveDeserializer">
            <summary>
            接收数据二进制反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveJsonDeserializer">
            <summary>
            接收数据 JSON 解析
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.verifyTimeout">
            <summary>
            验证超时时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveBuffer">
            <summary>
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveBigBuffer">
            <summary>
            临时接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveDataStart">
            <summary>
            接收数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.lastReceiveSize">
            <summary>
            上一次接收字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveIndex">
            <summary>
            当前处理接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.compressionDataSize">
            <summary>
            当前数据压缩后的字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.dataSize">
            <summary>
            当前数据字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.controller">
            <summary>
            当前解析命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerSocket.CurrentController">
            <summary>
            当前解析命令服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.Method">
            <summary>
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.CallbackIdentity">
            <summary>
            当前处理会话标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerSocket.customDataSize">
            <summary>
            自定义数据字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputHead">
            <summary>
            同步输出头节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputEnd">
            <summary>
            同步输出尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.commandMethodIndex">
            <summary>
            当前命令方法序号 + 命令标志位信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerSocket.CommandMethodIndex">
            <summary>
            当前命令方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveSocketError">
            <summary>
            接收数据套接字错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.verifyMethodErrorCount">
            <summary>
            允许验证失败次数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.VerifyState">
            <summary>
            是否通过函数验证
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveType">
            <summary>
            接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveErrorType">
            <summary>
            接收数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveReserve">
            <summary>
            保留补白
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.pad1">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.nextOutputSocket">
            <summary>
            下一个输出套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputs">
            <summary>
            服务端套接字输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.isOutput">
            <summary>
            是否正在输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.closeLock">
            <summary>
            关闭套接字访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerSocket.IsClose">
            <summary>
            是否已经触发套接字关闭操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.pad2">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.keepCallbacks">
            <summary>
            异步保持回调集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.OutputSerializer">
            <summary>
            输出数据二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputJsonSerializer">
            <summary>
            输出数据 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.onSendAsyncCallback">
            <summary>
            发送数据异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendAsyncEventArgs">
            <summary>
            发送数据异步事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendBuffer">
            <summary>
            输出数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendCompressBuffer">
            <summary>
            输出压缩数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendCopyBuffer">
            <summary>
            输出复制数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendData">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.lastSendSize">
            <summary>
            上一次发送字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendSocketError">
            <summary>
            发送数据套接字错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.buildOutputThreadEnum">
            <summary>
            服务端套接字发送数据线程类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.#ctor">
            <summary>
            空命令服务套接字，用于模拟服务端上下文
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.#ctor(AutoCSer.Net.CommandListener,System.Net.Sockets.Socket)">
            <summary>
            命令服务套接字
            </summary>
            <param name="server"></param>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetBindController(System.Int32)">
            <summary>
            获取套接字上下文绑定服务端实例
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetBindController(System.Int32,AutoCSer.Net.CommandServerBindContextController)">
            <summary>
            获取套接字上下文绑定服务端实例
            </summary>
            <param name="index"></param>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetCommand(System.Int32,AutoCSer.Net.CommandServerController)">
            <summary>
            设置命令索引信息
            </summary>
            <param name="methodIndex"></param>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetVerifyState(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            设置命令服务验证结果状态
            </summary>
            <param name="socket"></param>
            <param name="verifyState"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Start">
            <summary>
            开始接受数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.DisposeSocket">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.close">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.RemoveOnClosed(System.Action)">
            <summary>
            移除关闭回调委托
            </summary>
            <param name="onClosed"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetOnClosed(System.Action)">
            <summary>
            设置套接字关闭事件
            </summary>
            <param name="onClosed"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetCommandMethodIndex(AutoCSer.Net.CommandServerSocket)">
            <summary>
            获取当前命令方法序号
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.checkReceiveSize(System.Int32)">
            <summary>
            接收数据不足时检查连续两次接收数据长度
            </summary>
            <param name="receiveSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.deserialize``1(AutoCSer.SubArray{System.Byte}@,``0@,System.Boolean)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="isSimpleSerialize"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Deserialize``1(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@,``0@,System.Boolean)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="socket">命令服务套接字</param>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="isSimpleSerialize"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckSynchronousIO(AutoCSer.BinaryDeserializer)">
            <summary>
            检查当前序列化是否 IO 同步环境
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isReceiveVerifyCommand">
            <summary>
            接收验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isVerifyCommand">
            <summary>
            接收验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.checkVerifyCommand">
            <summary>
            检查验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isReceiveVerifyData">
            <summary>
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isVerifyData">
            <summary>
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.verifyData">
            <summary>
            检查验证数据长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doVerifyCommand">
            <summary>
            执行函数验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isReceiveCommand">
            <summary>
            获取命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isCommand">
            <summary>
            获取命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isCommandMap">
            <summary>
            判断命令是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.loop(System.Boolean)">
            <summary>
            循环处理命令
            </summary>
            <param name="isCommand">是否接收命令后的处理</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.receiveData(System.Boolean@)">
            <summary>
            检查命令数据
            </summary>
            <param name="isDoCommand">是否执行了命令</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isData">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isBigData">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doCommandBig">
            <summary>
            执行命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doBaseCommand">
            <summary>
            执行命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doBaseCommand(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            执行命令
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doControllerCommand">
            <summary>
            执行命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doCommand">
            <summary>
            执行命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doCommand(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            执行命令
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.controllerDoCommand(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            控制器名利处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.merge(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            流合并命令处理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.JsonSerialize``1(``0@)">
            <summary>
            JSON 序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.sendError">
            <summary>
            发送数据失败或者异常需要关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.closeSend">
            <summary>
            释放发送数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.freeSendCopyBuffer">
            <summary>
            释放输出复制缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.output">
            <summary>
            启动发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.getNextOutputSocket">
            <summary>
            获取并清除下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.buildOutput">
            <summary>
            尝试发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.setSendData(System.Byte*,System.Int32)">
            <summary>
            设置发送数据
            </summary>
            <param name="start">数据起始位置</param>
            <param name="count">输出数量</param>
            <returns>是否改变输出缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.send">
            <summary>
            发送数据
            </summary>
            <returns>发送数据状态</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.onSend(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据发送完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.AppendOutput(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            添加同步输出
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.sendLink">
            <summary>
            发送同步输出
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Push(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            添加输出信息
            </summary>
            <param name="output">当前输出信息</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Push(AutoCSer.Net.CommandServer.ServerOutput,AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            添加输出信息
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckPush(AutoCSer.Net.CommandServer.ServerOutput,AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            添加输出信息
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.TryPush(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            添加输出信息
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            发送数据
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            发送数据
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            同步发送数据
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            同步发送数据
            </summary>
            <param name="returnType"></param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandServerSocket)">
            <summary>
            同步发送成功返回值类型
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.getOutput``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            同步获取输出信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">输出参数</param>
            <returns>输出信息</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetOutput``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            获取输出信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callbackIdentity">会话标识</param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">输出参数</param>
            <returns>输出信息</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.send``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            同步发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="callbackIdentity">会话标识</param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0,System.Action)">
            <summary>
            发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="callbackIdentity">会话标识</param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <param name="onFree"></param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendKeepCallback``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            发送数据集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="returnValues"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendKeepCallbackLink``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0,``0)">
            <summary>
            发送数据集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="head"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            发送数据
            </summary>
            <param name="callbackIdentity">会话标识</param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="callbackIdentity">会话标识</param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.send``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            同步发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendOutput``1(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            同步发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="socket"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendReturnValue``1(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            同步发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="socket"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.AppendCustomData(System.Byte[])">
            <summary>
            同步发送自定义数据（非同步模式则需要等待下次触发同步发送调用）
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.AppendCustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            同步发送自定义数据（非同步模式则需要等待下次触发同步发送调用）
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendCustomData(System.Byte[])">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendCustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,System.Threading.Tasks.Task)">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckTask``1(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{``0})">
            <summary>
            检查接口任务完成状态
            </summary>
            <typeparam name="T"></typeparam>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerSendOnly})">
            <summary>
            检查接口任务完成状态
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CallTaskQueueAppendQueue``1(AutoCSer.Net.CommandServerCallTaskQueueSet{``0},``0,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue"></param>
            <param name="key"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CallTaskQueueAppendLowPriority``1(AutoCSer.Net.CommandServerCallTaskQueueSet{``0},``0,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            添加队列任务（低优先级）
            </summary>
            <param name="queue"></param>
            <param name="key"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Add(AutoCSer.Net.CommandServerKeepCallback)">
            <summary>
            添加 TCP 服务器端异步保持调用
            </summary>
            <param name="keepCallback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.ClientCancelKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            客户端主动关闭保持回调
            </summary>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.RemoveKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            移除 TCP 服务器端异步保持调用
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.RemoveKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            移除 TCP 服务器端异步保持调用
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.RemoveKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,System.Exception)">
            <summary>
            移除 TCP 服务器端异步保持调用
            </summary>
            <param name="callbackIdentity"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CancelKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            服务端异常取消异步保持调用
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消异步保持调用
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendCancelKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            发送取消异步保持调用输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.JsonSerializeConfig">
            <summary>
            JSON 序列化配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.CommandServerSocketContext">
            <summary>
            空命令服务套接字，用于模拟服务端上下文
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputSocketHead">
            <summary>
            等待发送数据的套接字集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.socketOutputWaitHandle">
            <summary>
            套接字集合发送数据等待事件
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.socketBuildOutput">
            <summary>
            套接字集合发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.StartSocketBuildOutputThread">
            <summary>
            启动套接字发送数据线程
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServiceRegistrar">
            <summary>
            服务端注册组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServiceRegistrar.server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.#ctor(AutoCSer.Net.CommandListenerBase)">
            <summary>
            服务注册组件
            </summary>
            <param name="server">命令服务</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.DisposeAsync">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.GetEndPoint">
            <summary>
            获取服务监听地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.GetHostPort">
            <summary>
            获取服务监听端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.OnListened(System.Net.IPEndPoint)">
            <summary>
            服务监听成功
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.Offline">
            <summary>
            通知单例服务下线
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallQueue">
            <summary>
            服务端执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.ContextObject">
            <summary>
            队列自定义上下文对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.queue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.Controller">
            <summary>
            命令服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.WaitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.threadHandle">
            <summary>
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.currentTask">
            <summary>
            当前执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.runSeconds">
            <summary>
            最后一次运行任务时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.Index">
            <summary>
            队列编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.sendSocket">
            <summary>
            当前发送数据套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.outputHead">
            <summary>
            输出信息头节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.outputEnd">
            <summary>
            输出信息尾节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.#ctor(AutoCSer.Net.CommandListener,AutoCSer.Net.CommandServerController,System.Int32)">
            <summary>
            服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="controller"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.Close">
            <summary>
            关闭执行队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.Add(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.AddOnly(AutoCSer.Threading.QueueTaskNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.Add(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            添加任务
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.CreateLink">
            <summary>
            创建低优先级任务队列链表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.OnTimerAsync">
            <summary>
            超时检查
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.sendTimestamp">
            <summary>
            发送数据时间戳
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.send">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.Send(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            服务端执行队列任务发送数据
            </summary>
            <param name="socket"></param>
            <param name="output">服务端输出信息</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallQueueNode">
            <summary>
            服务端执行队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.Socket">
            <summary>
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.OfflineCount">
            <summary>
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.CallbackIdentity">
            <summary>
            当前处理会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.methodType">
            <summary>
            服务端方法调用类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.#ctor">
            <summary>
            TCP 服务器端异步回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerMethodTypeEnum)">
            <summary>
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="methodType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.OnTimeout(AutoCSer.Net.CommandServerCallQueue,System.Int64)">
            <summary>
            服务端队列超时通知
            </summary>
            <param name="queue"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.checkOfflineCount">
            <summary>
            下线计数对象检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.CheckOfflineCount(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            下线计数对象检查
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.OnException(System.Exception)">
            <summary>
            队列任务执行异常
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.SocketIsClose(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            判断套接字是否已经关闭
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.GetSocket(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            获取命令服务套接字
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.Send(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServerCallQueue)">
            <summary>
            发送成功返回值类型
            </summary>
            <param name="node"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.send``1(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="queue"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.Send``1(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="node"></param>
            <param name="queue"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.sendReturnValue``1(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="queue"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.SendReturnValue``1(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            服务端执行队列任务发送数据
            </summary>
            <typeparam name="T">输出数据类型</typeparam>
            <param name="node"></param>
            <param name="queue"></param>
            <param name="method">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.SetVerifyState(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            设置命令服务验证结果状态
            </summary>
            <param name="node"></param>
            <param name="verifyState"></param>
        </member>
        <member name="T:AutoCSer.Net.ICommandServerBindController">
            <summary>
            控制器实例绑定命令服务控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ICommandServerBindController.Bind(AutoCSer.Net.CommandServerController)">
            <summary>
            绑定命令服务控制器
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.HostEndPoint">
            <summary>
            服务主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.HostEndPoint.Host">
            <summary>
            服务主机名称或者 IP 地址，无法解析时默认使用 IPAddress.Any，比如 "www.autocser.com" 或者 "127.0.0.1"
            </summary>
        </member>
        <member name="F:AutoCSer.Net.HostEndPoint.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.#ctor(System.UInt16,System.String)">
            <summary>
            服务主机与端口信息
            </summary>
            <param name="port">端口号，0 表示从端口注册服务获取分配端口号</param>
            <param name="host">服务主机名称或者 IP 地址，无法解析时默认使用 IPAddress.Any，比如 "www.autocser.com" 或者 "127.0.0.1"</param>
        </member>
        <member name="P:AutoCSer.Net.HostEndPoint.IPEndPoint">
            <summary>
            获取服务监听地址
            </summary>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.Get(System.UInt16)">
            <summary>
            根据端口号获取服务主机与端口信息
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.Equals(AutoCSer.Net.HostEndPoint)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.SocketAsyncEventArgsPool">
            <summary>
            套接字异步事件对象池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.head">
            <summary>
            套接字异步事件对象池首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.popLock">
            <summary>
            套接字异步事件对象池弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.maxCount">
            <summary>
            最大缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
            套接字异步事件对象池
            </summary>
            <param name="maxCount"></param>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.Get">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.Free">
            <summary>
            释放套接字异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.free">
            <summary>
            释放套接字异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.ObjectReferenceType">
            <summary>
            对象引用（用于序列化循环引用比较）
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectReferenceType.value">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectReferenceType.type">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectReferenceType.#ctor(System.Object,System.Type)">
            <summary>
            对象引用
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.ObjectReferenceType.Equals(AutoCSer.ObjectReferenceType)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectReferenceType.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectReferenceType.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CombinationTemplateConfig">
            <summary>
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="P:AutoCSer.CombinationTemplateConfig.TemplatePath">
            <summary>
            自定义模板相对项目路径
            </summary>
        </member>
        <member name="T:AutoCSer.Config">
            <summary>
            公共配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Encoding">
            <summary>
            全局编码
            </summary>
        </member>
        <member name="F:AutoCSer.Config.TimeoutCapacityBitSize">
            <summary>
            二维秒级定时器数组容器二进制位长度，默认为最小值 8，最大值为 12
            </summary>
        </member>
        <member name="F:AutoCSer.Config.MemoryCacheClearSeconds">
            <summary>
            临时性缓存清理时间间隔秒数，默认为 3600 秒
            </summary>
        </member>
        <member name="F:AutoCSer.Config.MaxByteArrayPoolSizeBits">
            <summary>
            字节数组缓冲区池最大缓冲区二进制位数，默认为 17 为 128KB，最小值为 4 为 16B，最大值为 30 为 1GB
            </summary>
        </member>
        <member name="M:AutoCSer.Config.GetMemoryCacheClearSeconds">
            <summary>
            获取临时性缓存清理时间间隔秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.OnLogFileException(AutoCSer.ILog,System.Exception)">
            <summary>
            日志文件操作异常处理（因为没法写日志），注意应用层也不要调用该日志记录这个异常，也不要让两个异常的日志相互调用避免死循环
            </summary>
            <param name="log">日志处理接口</param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Config.GetLinkPoolParameter(System.Type)">
            <summary>
            默认链表缓存池参数
            </summary>
            <param name="type">缓存数据类型</param>
            <returns>链表缓存池参数</returns>
        </member>
        <member name="M:AutoCSer.Config.GetRingPoolType(System.Type)">
            <summary>
            获取缓存环池参数重定向类型
            </summary>
            <param name="type"></param>
            <returns>重定向类型</returns>
        </member>
        <member name="M:AutoCSer.Config.GetRingPoolParameter(System.Type)">
            <summary>
            默认缓存环池参数
            </summary>
            <param name="type">缓存数据类型</param>
            <returns>缓存环池参数</returns>
        </member>
        <member name="M:AutoCSer.Config.Compress(System.Byte[],System.Int32,System.Int32,AutoCSer.Memory.ByteArrayBuffer@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32,System.IO.Compression.CompressionLevel)">
            <summary>
            压缩数据
            </summary>
            <param name="data">原始数据</param>
            <param name="startIndex">原始数据起始位置</param>
            <param name="count">原始数据待压缩字节数</param>
            <param name="buffer">压缩输出缓冲区</param>
            <param name="compressData">压缩后的数据</param>
            <param name="seek">压缩输出起始位置</param>
            <param name="compressHeadSize">压缩多余头部大小</param>
            <param name="level"></param>
            <returns>是否压缩成功</returns>
        </member>
        <member name="M:AutoCSer.Config.Decompress(AutoCSer.SubArray{System.Byte},AutoCSer.SubArray{System.Byte}@)">
            <summary>
            解压数据
            </summary>
            <param name="compressData">压缩后的数据</param>
            <param name="destinationData">等待写入的原始数据缓冲区</param>
            <returns>是否解压成功</returns>
        </member>
        <member name="F:AutoCSer.Config.setMemoryStreamExpandable">
            <summary>
            内存流扩容设置
            </summary>
        </member>
        <member name="M:AutoCSer.Config.GetExpandableMemoryStream(AutoCSer.Memory.ByteArrayBuffer@,System.Int32)">
            <summary>
            获取可扩容内存流
            </summary>
            <param name="buffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.Cache">
            <summary>
            配置加载缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Cache.GetCreator(System.Type,System.String)">
            <summary>
            获取配置创建
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Configuration.Cache.Get(System.Type,System.String)">
            <summary>
            获取配置项数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置缓存名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="F:AutoCSer.Configuration.Cache.cache">
            <summary>
            配置集合 [类型+名称]
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Cache.append(System.Type)">
            <summary>
            添加配置缓存
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:AutoCSer.Configuration.Common">
            <summary>
            公共配置，该类型不允许增加依赖成员
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.Common.Root">
            <summary>
            根配置
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.Common.IsConfigLoaded">
            <summary>
            配置缓存是否已经加载
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Common.SetRoot(AutoCSer.Configuration.IRoot)">
            <summary>
            设置根配置，用于如果不是 Assembly.GetEntryAssembly() 或者不希望扫描程序集的场景
            </summary>
            <param name="root">根配置</param>
            <returns>false 表示配置缓存已经加载，设置无效</returns>
        </member>
        <member name="M:AutoCSer.Configuration.Common.Get(System.Type,System.String)">
            <summary>
            获取配置项数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称，默认为 null 表示默认名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Configuration.Common.GetAsync(System.Type,System.String)">
            <summary>
            获取配置项数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称，默认为 null 表示默认名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Configuration.Common.Get``1(System.String)">
            <summary>
            获取配置项数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">配置名称，默认为 null 表示默认名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Configuration.Common.GetAsync``1(System.String)">
            <summary>
            获取配置项数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">配置名称，默认为 null 表示默认名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="T:AutoCSer.Configuration.Creator">
            <summary>
            配置创建
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Creator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Configuration.Creator.CreateAsync">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.FieldCreator">
            <summary>
            字段配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.FieldCreator.field">
            <summary>
            目标字段
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.FieldCreator.#ctor(System.Reflection.FieldInfo)">
            <summary>
            字段配置创建
            </summary>
            <param name="field">目标字段</param>
        </member>
        <member name="M:AutoCSer.Configuration.FieldCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.FieldObjectCreator">
            <summary>
            字段配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.FieldObjectCreator.field">
            <summary>
            目标字段
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.FieldObjectCreator.#ctor(System.Reflection.FieldInfo)">
            <summary>
            字段配置创建
            </summary>
            <param name="field">目标字段</param>
        </member>
        <member name="M:AutoCSer.Configuration.FieldObjectCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.MethodCreator">
            <summary>
            Task 函数配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MethodCreator.method">
            <summary>
            目标函数
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MethodCreator.type">
            <summary>
            配置数据类型 ConfigObject{T}
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.MethodCreator.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Task 函配置创建
            </summary>
            <param name="method">目标函数</param>
            <param name="type">配置数据类型</param>
        </member>
        <member name="M:AutoCSer.Configuration.MethodCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Configuration.MethodCreator.CreateAsync">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.MethodObjectCreator">
            <summary>
            Task 函数配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MethodObjectCreator.method">
            <summary>
            目标函数
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MethodObjectCreator.type">
            <summary>
            配置数据类型
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.MethodObjectCreator.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Task 函配置创建
            </summary>
            <param name="method">目标函数</param>
            <param name="type">配置数据类型</param>
        </member>
        <member name="M:AutoCSer.Configuration.MethodObjectCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Configuration.MethodObjectCreator.CreateAsync">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.PropertyCreator">
            <summary>
            属性配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.PropertyCreator.method">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.PropertyCreator.#ctor(System.Reflection.MethodInfo)">
            <summary>
            属性配置创建
            </summary>
            <param name="method">目标属性</param>
        </member>
        <member name="M:AutoCSer.Configuration.PropertyCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.PropertyObjectCreator">
            <summary>
            属性配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.PropertyObjectCreator.method">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.PropertyObjectCreator.#ctor(System.Reflection.MethodInfo)">
            <summary>
            属性配置创建
            </summary>
            <param name="method">目标属性</param>
        </member>
        <member name="M:AutoCSer.Configuration.PropertyObjectCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.MemberAttribute">
            <summary>
            申明为配置项
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MemberAttribute.Name">
            <summary>
            配置名称，默认为 null 表示默认名称，空字符串表示使用定义名称
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.MemberAttribute.#ctor(System.String)">
            <summary>
            申明为配置项
            </summary>
            <param name="name">配置名称，默认为 null 表示默认名称，空字符串表示使用定义名称</param>
        </member>
        <member name="M:AutoCSer.Configuration.MemberAttribute.GetCacheName(System.String)">
            <summary>
            获取配置缓存名称
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.IRoot">
            <summary>
            根配置接口
            </summary>
        </member>
        <member name="P:AutoCSer.Configuration.IRoot.MainTypes">
            <summary>
            主配置类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.Configuration.IRoot.PublicTypes">
            <summary>
            公共配置类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.IRoot.OnLoadException(AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Exception}})">
            <summary>
            缓存类型加载异常（注意不要同步阻塞配置线程）
            </summary>
            <param name="exceptionTypes">缓存类型加载异常</param>
        </member>
        <member name="T:AutoCSer.Configuration.Root">
            <summary>
            根配置
            </summary>
        </member>
        <member name="P:AutoCSer.Configuration.Root.MainTypes">
            <summary>
            主配置类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.Configuration.Root.PublicTypes">
            <summary>
            公共配置类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Root.OnLoadException(AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Exception}})">
            <summary>
            缓存类型加载异常
            </summary>
            <param name="exceptionTypes">缓存类型加载异常</param>
        </member>
        <member name="M:AutoCSer.Configuration.Root.OnLoadException(AutoCSer.Configuration.IRoot,AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Exception}})">
            <summary>
            缓存类型加载异常
            </summary>
            <param name="root"></param>
            <param name="exceptionTypes"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Configuration.Root.Null">
            <summary>
            默认空配置
            </summary>
        </member>
        <member name="T:AutoCSer.ConfigObject">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="F:AutoCSer.ConfigObject.onChangedLock">
            <summary>
            日志队列访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.ConfigObject.IsReadOnly">
            <summary>
            配置数据是否只读
            </summary>
        </member>
        <member name="M:AutoCSer.ConfigObject.#ctor(System.Boolean)">
            <summary>
            配置对象
            </summary>
            <param name="isReadOnly"></param>
        </member>
        <member name="M:AutoCSer.ConfigObject.GetConfigObjectType(System.Type)">
            <summary>
            获取配置对象类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ConfigObject`1">
            <summary>
            配置对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.ConfigObject`1.Value">
            <summary>
            配置数据
            </summary>
        </member>
        <member name="F:AutoCSer.ConfigObject`1.onChangeds">
            <summary>
            配置更新触发任务集合
            </summary>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.#ctor(`0,System.Boolean)">
            <summary>
            配置数据
            </summary>
            <param name="value"></param>
            <param name="isReadOnly"></param>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.Get">
            <summary>
            获取配置数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.op_Implicit(AutoCSer.ConfigObject{`0})~`0">
            <summary>
            配置对象隐式转换，当 T 为接口类型时隐式转换会异常
            </summary>
            <param name="config">配置对象</param>
            <returns>配置数据</returns>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.ClearOnChanged">
            <summary>
            清除配置更新触发任务
            </summary>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.SetOnChanged(System.Func{AutoCSer.ConfigObject{`0},System.Threading.Tasks.Task})">
            <summary>
            添加配置更新触发任务
            </summary>
            <param name="onChanged">配置更新触发任务</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.RemoveOnChanged(System.Func{AutoCSer.ConfigObject{`0},System.Threading.Tasks.Task})">
            <summary>
            移除配置更新触发任务
            </summary>
            <param name="onChanged">配置更新触发任务</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.callOnChanged">
            <summary>
            触发配置更新触发任务
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Date">
            <summary>
            日期相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Date.BaseTime">
            <summary>
            默认基础时间值 1900/1/1
            </summary>
        </member>
        <member name="F:AutoCSer.Date.StartTime">
            <summary>
            初始化时间 Utc
            </summary>
        </member>
        <member name="F:AutoCSer.Date.StartTimestamp">
            <summary>
            初始化时钟周期
            </summary>
        </member>
        <member name="P:AutoCSer.Date.TimestampDifference">
            <summary>
            获取初始化时间差
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Date.TimestampByMilliseconds">
            <summary>
            1毫秒时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Date.LocalTimeTicks">
            <summary>
            本地时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Date.ZoneHourString">
            <summary>
            时区小时字符串 +HH:
            </summary>
        </member>
        <member name="F:AutoCSer.Date.ZoneMinuteString">
            <summary>
            时区f分钟字符串 mm"
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_32Mul">
            <summary>
            32位除以60转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_32Shift">
            <summary>
            32位除以60转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_16Mul">
            <summary>
            16位除以60转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_16Shift">
            <summary>
            16位除以60转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Date.weekData">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:AutoCSer.Date.monthData">
            <summary>
            月份
            </summary>
        </member>
        <member name="M:AutoCSer.Date.localToUniversalTime(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.ToDateString(System.DateTime,System.Char*,System.Char)">
            <summary>
            时间转换成日期字符串(yyyy/MM/dd)
            </summary>
            <param name="time">时间</param>
            <param name="chars">时间字符串</param>
            <param name="split">分隔符</param>
        </member>
        <member name="M:AutoCSer.Date.toTimeString(System.Int32,System.Char*)">
            <summary>
            时间转换成字符串(HH:mm:ss)
            </summary>
            <param name="second">当天的计时秒数</param>
            <param name="chars">时间字符串</param>
        </member>
        <member name="F:AutoCSer.Date.ToStringSize">
            <summary>
            时间转换字符串最大字节长度 yyyy-MM-ddTHH:mm:ss.fffffff
            </summary>
        </member>
        <member name="F:AutoCSer.Date.DefaultDateSplit">
            <summary>
            默认年月日之间的分隔符
            </summary>
        </member>
        <member name="M:AutoCSer.Date.ToString(System.DateTime,System.Char*,System.Char,System.Char)">
            <summary>
            时间转换成字符串 yyyy-MM-ddTHH:mm:ss.fffffff
            </summary>
            <param name="time"></param>
            <param name="timeFixed"></param>
            <param name="dateTimeSplit">日期与时间之间的分隔符</param>
            <param name="dateSplit">年月日之间的分隔符</param>
            <returns>字符串长度，可能返回 19/23/27</returns>
        </member>
        <member name="M:AutoCSer.Date.toTicksString(System.Char*,System.Int64)">
            <summary>
            时间转换成字符串 .fffffff
            </summary>
            <param name="timeFixed"></param>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.ToString3(System.DateTime,System.Char*,System.Char,System.Char)">
            <summary>
            时间转换成字符串 yyyy-MM-ddTHH:mm:ss.fff
            </summary>
            <param name="time"></param>
            <param name="timeFixed"></param>
            <param name="dateTimeSplit">日期与时间之间的分隔符</param>
            <param name="dateSplit">年月日之间的分隔符</param>
            <returns>字符串长度，可能返回 19/23</returns>
        </member>
        <member name="M:AutoCSer.Date.ToSecondString(System.DateTime,System.Char*,System.Char,System.Char)">
            <summary>
            时间转换成字符串 yyyy-MM-ddTHH:mm:ss
            </summary>
            <param name="time"></param>
            <param name="timeFixed"></param>
            <param name="dateTimeSplit">日期与时间之间的分隔符</param>
            <param name="dateSplit">年月日之间的分隔符</param>
            <returns>不足1秒的周期数</returns>
        </member>
        <member name="M:AutoCSer.Date.toString(System.DateTime,AutoCSer.Memory.CharStream,System.Char)">
            <summary>
            时间转换成字符串
            </summary>
            <param name="time">时间</param>
            <param name="charStream">字符流</param>
            <param name="dateSplit">年月日之间的分隔符</param>
        </member>
        <member name="M:AutoCSer.Date.toString(System.DateTime,System.Char)">
            <summary>
            时间转换成字符串 yyyy-MM-ddTHH:mm:ss.fffffff
            </summary>
            <param name="time"></param>
            <param name="dateSplit">年月日之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.ToString(System.TimeSpan,System.Char*)">
            <summary>
            时间转换成字符串 HH:mm:ss.fffffff
            </summary>
            <param name="time"></param>
            <param name="timeFixed"></param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Date.toString(System.TimeSpan)">
            <summary>
            时间转换成字符串 HH:mm:ss.fffffff
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.GetMillisecondsByTimestamp(System.Int64)">
            <summary>
            时间戳转毫秒数
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.GetTimestampByMilliseconds(System.Int64)">
            <summary>
            毫秒数转时间戳
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Date.TimestampPerSecond">
            <summary>
            每秒时间戳
            </summary>
        </member>
        <member name="M:AutoCSer.Date.GetTimestampBySeconds(System.Int64)">
            <summary>
            秒数转时间戳
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.GetTimestampByTicks(System.Int64)">
            <summary>
            时钟周期转时间戳
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.DictionaryCreator">
            <summary>
            创建字典
            </summary>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateAny``2">
            <summary>
            创建字典
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="VT">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateInt``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashString``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashString``1(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashObject``2">
            <summary>
            创建字典
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="T">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashObject``2(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="T">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.DictionaryCreator`1">
            <summary>
            创建字典
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.DictionaryCreator`1.Create``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="VT">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator`1.Create``1(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="VT">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.DynamicArray">
            <summary>
            动态数组信息
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.DefalutArrayCapacity">
            <summary>
            默认数组容器长度
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.isClearArrayCache">
            <summary>
            是否需要清除数组缓存信息
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.isClearArrayLock">
            <summary>
            是否需要清除数组缓存 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray.IsClearArray(System.Type)">
            <summary>
            是否需要清除数组
            </summary>
            <param name="type">类型</param>
            <returns>需要清除数组</returns>
        </member>
        <member name="M:AutoCSer.DynamicArray.isClearArray(System.Type,System.Collections.Generic.Dictionary{AutoCSer.HashObject{System.Type},System.Boolean})">
            <summary>
            是否需要清除数组
            </summary>
            <param name="type">类型</param>
            <param name="isClearArrayCache"></param>
            <returns>需要清除数组</returns>
        </member>
        <member name="M:AutoCSer.DynamicArray.clearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.DynamicArray`1">
            <summary>
            动态数组基类
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.DynamicArray`1.IsClearArray">
            <summary>
            是否需要清除数组
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray`1.GetNewArray(System.Int32)">
            <summary>
            创建新数组
            </summary>
            <param name="capacity">数组长度</param>
            <returns>数组</returns>
        </member>
        <member name="T:AutoCSer.EmptyArray`1">
            <summary>
            0 长度空数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.EmptyArray`1.Array">
            <summary>
            0元素数组（严重警告，禁止对该对象进行 Array.Resize 操作，在无法保证的场景禁止使用）
            </summary>
        </member>
        <member name="T:AutoCSer.Enumerator`1">
            <summary>
            枚举器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AutoCSer.Enumerator`1.EmptyEnumerator">
            <summary>
            空枚举器
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.EmptyEnumerator.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.EmptyEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.MoveNext">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.Reset">
            <summary>
            重置枚举器状态
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.Dispose">
            <summary>
            释放枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Empty">
            <summary>
            空枚举实例
            </summary>
        </member>
        <member name="T:AutoCSer.Enumerator`1.Array">
            <summary>
            数组枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.array">
            <summary>
            被枚举数组
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.currentIndex">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.endIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.startIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.#ctor(AutoCSer.LeftArray{`0})">
            <summary>
            数组枚举器
            </summary>
            <param name="value">数组子串</param>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            数组枚举器
            </summary>
            <param name="array">数组</param>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="P:AutoCSer.Enumerator`1.Array.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.Array.System#Collections#IEnumerator#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.MoveNext">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.Reset">
            <summary>
            重置枚举器状态
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.Dispose">
            <summary>
            释放枚举器
            </summary>
        </member>
        <member name="T:AutoCSer.GuidCreator">
            <summary>
            Guid 联合体
            </summary>
        </member>
        <member name="F:AutoCSer.GuidCreator.Value">
            <summary>
            Guid
            </summary>
        </member>
        <member name="M:AutoCSer.GuidCreator.ToString(System.Char*)">
            <summary>
            转换成字符串
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.HashKey`2">
            <summary>
            哈希关键字
            </summary>
            <typeparam name="T1">关键字类型1</typeparam>
            <typeparam name="T2">关键字类型2</typeparam>
        </member>
        <member name="F:AutoCSer.HashKey`2.value1">
            <summary>
            关键字1
            </summary>
        </member>
        <member name="F:AutoCSer.HashKey`2.value2">
            <summary>
            关键字2
            </summary>
        </member>
        <member name="M:AutoCSer.HashKey`2.#ctor(`0,`1)">
            <summary>
            哈希关键字
            </summary>
            <param name="value1">关键字1</param>
            <param name="value2">关键字2</param>
        </member>
        <member name="M:AutoCSer.HashKey`2.Equals(AutoCSer.HashKey{`0,`1})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashKey`2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashKey`2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.HashSetCreator">
            <summary>
            创建 HashSet
            </summary>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateOnly``1">
            <summary>
            创建HASH表
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateAny``1">
            <summary>
            创建HASH表
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateInt">
            <summary>
            创建HASH表
            </summary>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateLong">
            <summary>
            创建HASH表
            </summary>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateHashString">
            <summary>
            创建HASH表
            </summary>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateHashObject``1">
            <summary>
            创建HASH表
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>HASH表</returns>
        </member>
        <member name="T:AutoCSer.HashSetCreator`1">
            <summary>
            创建 HashSet表
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.HashSetCreator`1.Create">
            <summary>
            创建 HashSet 表
            </summary>
            <returns>HashSet 表</returns>
        </member>
        <member name="T:AutoCSer.HashString">
            <summary>
            字符串 HASH
            </summary>
        </member>
        <member name="F:AutoCSer.HashString.String">
            <summary>
            字符子串
            </summary>
        </member>
        <member name="F:AutoCSer.HashString.HashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:AutoCSer.HashString.#ctor(System.String)">
            <summary>
            字符串 HASH
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashString.op_Implicit(System.String)~AutoCSer.HashString">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.HashString.SetEmpty">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.HashString.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.getHashCode64(System.String)">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.HashString)">
            <summary>
            判断字符串是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.HashString@)">
            <summary>
            判断字符串是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(System.Object)">
            <summary>
            判断字符串是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.HashString.Empty">
            <summary>
            长度为 0 的字符串
            </summary>
        </member>
        <member name="T:AutoCSer.HashObject`1">
            <summary>
            包装 IEquatable 对象，用于 Hash 比较
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.HashObject`1.Value">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:AutoCSer.HashObject`1.Equals(AutoCSer.HashObject{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashObject`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashObject`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashObject`1.op_Implicit(`0)~AutoCSer.HashObject{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashObject`1.op_Implicit(AutoCSer.HashObject{`0})~`0">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.IO.File">
            <summary>
            文件扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.IO.File.BakPrefix">
            <summary>
            临时文件前缀
            </summary>
        </member>
        <member name="M:AutoCSer.IO.File.MoveBak(System.String)">
            <summary>
            修改文件名成为默认备份文件 %yyyyMMdd-HHmmss_HEX_fileName
            </summary>
            <param name="fileName">源文件名</param>
            <returns>备份文件名称,失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.IO.File.MoveBakFileName(System.String)">
            <summary>
            获取备份文件名称 %yyyyMMdd-HHmmss_HEX_fileName
            </summary>
            <param name="fileName">源文件名</param>
            <returns>备份文件名称</returns>
        </member>
        <member name="T:AutoCSer.JsonDeserializeConfig">
            <summary>
            JSON 反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializeConfig.IsEndSpace">
            <summary>
            对象解析结束后是否检测最后的空格符，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.JsonDeserializer">
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.NullStringValue">
            <summary>
            字符串 null
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.AllMemberAttribute">
            <summary>
            默认解析所有成员
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.escapeChars">
            <summary>
            转义字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.endChar">
            <summary>
            最后一个字符
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.Quote">
            <summary>
            当前字符串引号
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isEndSpace">
            <summary>
            是否以空格字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isEndDigital">
            <summary>
            是否以10进制数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isEndHex">
            <summary>
            是否以16进制数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isEndNumber">
            <summary>
            是否以数字字符结束
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.#ctor">
            <summary>
            JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize``1(AutoCSer.SubString@,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize``1(System.String,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(System.Char*,System.Int32,``0@)">
            <summary>
            Json解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="length">Json长度</param>
            <param name="value">目标数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize``1(``0@)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">目标数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.DeserializeCommandServer``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            命令服务反序列化
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.DeserializeCommandServer``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            命令服务反序列化
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="deserializer"></param>
            <param name="value">目标对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.freeThreadStatic">
            <summary>
            释放 JSON 解析器（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Free">
            <summary>
            释放 JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.space">
            <summary>
            扫描空格字符
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsNull">
            <summary>
            是否null
            </summary>
            <returns>是否null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.tryNull">
            <summary>
            是否null
            </summary>
            <returns>是否null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NotSupport``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            自定义反序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Constructor``1(``0@)">
            <summary>
            构造函数调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.baseeSerialize``2(``0@)">
            <summary>
            基类转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Base``2(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            基类转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.arrayIndex``1(``0[]@)">
            <summary>
            数组解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">目标数据</param>
            <returns>数据数量,-1表示失败</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Array``1(AutoCSer.JsonDeserializer,``0[]@)">
            <summary>
            数组解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.nullable``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Nullable``1(AutoCSer.JsonDeserializer,System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.collection``2(``0@)">
            <summary>
            集合反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="collection"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Collection``2(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            集合反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="collection"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.keyValuePair``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            键值对解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.KeyValuePair``2(AutoCSer.JsonDeserializer,System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            键值对解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.dictionary``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Dictionary``2(AutoCSer.JsonDeserializer,System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="dictionary">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.dictionary``3(``0@)">
            <summary>
            字典反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Dictionary``3(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            字典反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Byte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.SByte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.UInt16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Int16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.UInt32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Int32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.UInt64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.getLong(System.UInt64,System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value"></param>
            <param name="sign"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Int64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Single@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Single}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Double@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Double}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Decimal@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Decimal}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Char@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Char}@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.DateTime@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.DateTime}@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.TimeSpan@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.TimeSpan}@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeTimeSpan(System.TimeSpan@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns>是否 null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeTimeSpanString(System.TimeSpan@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Guid@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Nullable{System.Guid}@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(AutoCSer.SubString@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Object@)">
            <summary>
            对象解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Type@)">
            <summary>
            类型解析
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(AutoCSer.JsonNode@)">
            <summary>
            JSON节点解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeStringNode(AutoCSer.JsonNode@)">
            <summary>
            解析字符串节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchEscapeEnd">
            <summary>
            查找转义字符串结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsFirstObject">
            <summary>
            判断是否存在第一个成员
            </summary>
            <returns>是否存在第一个成员</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsFirstArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchNameEnd">
            <summary>
            查找名称直到结束
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchColon">
            <summary>
            查找冒号
            </summary>
            <returns>是否找到</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsNextObject">
            <summary>
            判断是否存在下一个成员
            </summary>
            <returns>是否存在下一个成员</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsNextArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchArray``1(``0[]@)">
            <summary>
            查找数组起始位置
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="value">目标数组</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchArraySize``1(``0[]@)">
            <summary>
            获取数组长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsEnumNumberUnsigned">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsEnumNumberSigned">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.GetFirstName">
            <summary>
            获取成员名称第一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NextStringChar">
            <summary>
            读取下一个字符
            </summary>
            <returns>字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.GetNextName">
            <summary>
            获取成员名称下一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchQuote">
            <summary>
            查找字符串引号并返回第一个字符
            </summary>
            <returns>第一个字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchEnumQuote">
            <summary>
            查找枚举引号并返回第一个字符
            </summary>
            <returns>第一个字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NextEnumChar">
            <summary>
            获取下一个枚举字符
            </summary>
            <returns>下一个枚举字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchNextEnum">
            <summary>
            查找下一个枚举字符
            </summary>
            <returns>下一个枚举字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchStringEnd">
            <summary>
            查找字符串直到结束
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Ignore">
            <summary>
            忽略对象
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ignoreString">
            <summary>
            忽略字符串
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ignoreNumber">
            <summary>
            忽略数字
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ignoreName">
            <summary>
            忽略成员名称
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchObject">
            <summary>
            查找对象起始位置
            </summary>
            <returns>是否查找到</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchDictionary">
            <summary>
            查找字典起始位置
            </summary>
            <returns>是否查找到</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.isDictionaryObjectEnd">
            <summary>
            对象是否结束
            </summary>
            <returns>对象是否结束</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.isName(AutoCSer.Memory.Pointer@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsName(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NextNameIndex(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer@)">
            <summary>
            移动到下一个名称
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.JsonDeserializer.NameDelegate">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NoConstructorIgnoreObject">
            <summary>
            找不到构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ignoreObject">
            <summary>
            忽略对象
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value"></param>
            <returns>是否 null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeHex32">
            <summary>
            解析16进制数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeUInt32(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserializeUInt">
            <summary>
            数字解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserializeInt">
            <summary>
            数字解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserializeUIntNull">
            <summary>
            数字解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserializeIntNull">
            <summary>
            数字解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeHex64">
            <summary>
            解析16进制数字
            </summary>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeUInt64(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeHex2">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeHex4">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.isNegativeInfinity">
            <summary>
            是否 -Infinity
            </summary>
            <returns>是否 -Infinity</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.isNaNPositiveInfinity">
            <summary>
            是否非数字 NaN / Infinity
            </summary>
            <returns>是否非数字NaN</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchNumber(System.Char*@)">
            <summary>
            查找数字结束位置
            </summary>
            <param name="numberEnd">数字结束位置</param>
            <returns>数字类型</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchNumberNull(System.Char*@)">
            <summary>
            查找数字结束位置
            </summary>
            <param name="numberEnd">数字结束位置</param>
            <returns>数字类型</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeInt32Next(System.UInt32@)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTime">
            <summary>
            时间片段值解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTimeTicks">
            <summary>
            时间时钟周期解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTimeMillisecond(System.DateTime@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTimeString(System.DateTime@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTime(System.DateTime@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns>是否 null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.GetQuoteStringBuffer">
            <summary>
            临时字符串解析（不处理转义）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize(AutoCSer.GuidCreator@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchEscape">
            <summary>
            查找字符串中的转义符
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeString">
            <summary>
            字符串解析
            </summary>
            <returns>字符串,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeEscapeSize">
            <summary>
            获取转义后的字符串长度
            </summary>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeEscapeUnsafe(System.Char*)">
            <summary>
            字符串转义解析
            </summary>
            <param name="write">当前写入位置</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeEscape(System.Char*)">
            <summary>
            字符串解析
            </summary>
            <param name="start"></param>
            <returns>字符串,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeEscape">
            <summary>
            字符串转义解析
            </summary>
            <returns>写入结束位置</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeQuoteString(AutoCSer.SubString@,System.Int32,System.Char,System.Int32)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.DeserializeQuoteString(AutoCSer.SubString@,System.Int32,System.Char,System.Int32)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.DeserializeQuoteString(AutoCSer.SubString@,AutoCSer.Memory.CharStream,System.Int32,System.Char)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="charStream"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.CustomDeserialize``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SetCustomError(System.String)">
            <summary>
            设置反序列化自定义错误状态
            </summary>
            <param name="customError">自定义错误</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(System.String,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(System.String,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.SubString,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.SubString,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.SubString@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.SubString@,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.UnsafeDeserialize``1(System.Char*,System.Int32,``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">Json 字符串</param>
            <param name="length">Json 长度</param>
            <param name="value">目标数据</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(System.String,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(System.String,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString@,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="T:AutoCSer.JsonDeserializer.DeserializeDelegate`1">
            <summary>
            解析委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">JSON 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.deserializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.GetDeserializeDelegate(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.JavaScriptLocalMinTime">
            <summary>
            JSON 转换时间差
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.JavaScriptLocalMinTimeTicks">
            <summary>
             JSON 转换时间差
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.EscapeCharSize">
            <summary>
            转义字符集合尺寸
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.escapeCharData">
            <summary>
            转义字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeNumberBit">
            <summary>
            JSON 解析数字
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeNameBit">
            <summary>
            JSON 解析键值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeNameStartBit">
            <summary>
            JSON 解析键值开始
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeSpaceBit">
            <summary>
            JSON 解析空格[ ,\t,\r,\n,160]
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeEscapeSearchBit">
            <summary>
            JSON 解析转义查找
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.EscapeBit">
            <summary>
            JavaScript 转义位[\0,\b,\t,\f,\r,\n,\\,"]
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeBits">
            <summary>
            JSON 解析字符状态位
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.UInt64[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt64[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt64@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.String@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.UInt64}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Int64[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int64[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.UInt32[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt32[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Int32[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int32[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.UInt16[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt16[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Int16[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int16[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Byte[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Byte[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.SByte[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.SByte[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.Boolean[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Boolean[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.DateTime[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.DateTime[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.PrimitiveDeserialize(System.TimeSpan[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.TimeSpan[]@)">
            <summary>
            数组反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Object@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Type@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int64@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt32@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int32@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt16@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int16@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Byte@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.SByte@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Boolean@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Single@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Double@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Decimal@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Guid@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Char@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.DateTime@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.TimeSpan@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,AutoCSer.SubString@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,AutoCSer.JsonNode@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Int64}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.UInt32}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Int32}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.UInt16}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Int16}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Byte}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.SByte}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Boolean}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Single}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Double}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Decimal}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Char}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.DateTime}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.TimeSpan}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Guid}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.JsonSerializeMemberAttribute">
            <summary>
            JSON 序列化成员配置
            </summary>
        </member>
        <member name="T:AutoCSer.JsonNode">
            <summary>
            JSON 节点
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNode.Int64">
            <summary>
            64位整数值
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.String">
            <summary>
            JSON 节点隐式转换为字符串
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonNode.checkQuoteString">
            <summary>
            检测未解析字符串
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.toString(AutoCSer.Memory.CharStream,AutoCSer.JsonDeserializer@)">
            <summary>
            输出字符串
            </summary>
            <param name="charStream"></param>
            <param name="jsonDeserializer"></param>
        </member>
        <member name="P:AutoCSer.JsonNode.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.Boolean">
            <summary>
            JSON 节点隐式转换为逻辑值
            </summary>
            <param name="value">JSON 节点</param>
            <returns>逻辑值</returns>
        </member>
        <member name="P:AutoCSer.JsonNode.Number">
            <summary>
            数值
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.Double">
            <summary>
            JSON 节点隐式转换为数值
            </summary>
            <param name="value">JSON 节点</param>
            <returns>数值</returns>
        </member>
        <member name="P:AutoCSer.JsonNode.DateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.DateTime">
            <summary>
            JSON 节点隐式转换为时间
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="P:AutoCSer.JsonNode.TimeSpan">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.TimeSpan">
            <summary>
            JSON 节点隐式转换为时间
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="F:AutoCSer.JsonNode.DictionaryArray">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Values">
            <summary>
            字典数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNode.ListArray">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.LeftArray">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Array">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNode.SubString">
            <summary>
            字符串
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.IsNull">
            <summary>
            是否空节点
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Count">
            <summary>
            字典 / 列表节点数量
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Item(System.Int32)">
            <summary>
            获取列表节点数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.JsonNode.Item(System.String)">
            <summary>
            获取字典数据
            </summary>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonNode.SetNumberString(System.Char)">
            <summary>
            设置数字字符串
            </summary>
            <param name="quote"></param>
        </member>
        <member name="M:AutoCSer.JsonNode.SetQuoteString(System.Int32,System.Char,System.Boolean)">
            <summary>
            未解析字符串
            </summary>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
        </member>
        <member name="M:AutoCSer.JsonNode.SetList(AutoCSer.LeftArray{AutoCSer.JsonNode}@)">
            <summary>
            设置列表
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:AutoCSer.JsonNode.SetList">
            <summary>
            设置列表
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.SetDictionary(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.JsonNode,AutoCSer.JsonNode}}@)">
            <summary>
            设置字典
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonNode.SetDictionary">
            <summary>
            设置字典
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.JsonNodeTypeEnum">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.QuoteString">
            <summary>
            未解析字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.ErrorQuoteString">
            <summary>
            解析错误的字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.NumberString">
            <summary>
            数字字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.NaN">
            <summary>
            非数值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.DateTimeTick">
            <summary>
            时间周期值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.Array">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="T:AutoCSer.Reflection.TypeNameBuildEnum">
            <summary>
            类型名称输出类型
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuildEnum.Code">
            <summary>
            CSharp 代码
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuildEnum.XmlDocument">
            <summary>
            读取 XML 文档
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuildEnum.OutputXml">
            <summary>
            XML 文档输出注释
            </summary>
        </member>
        <member name="T:AutoCSer.Reflection.Emit.Module">
            <summary>
            动态程序集模块
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.Module.assemblyBuilder">
            <summary>
            动态程序集
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.Module.Builder">
            <summary>
            动态程序集模块
            </summary>
        </member>
        <member name="T:AutoCSer.Reflection.Emit.Field">
            <summary>
            字段操作
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.Field.UnsafeSetField``2(System.String)">
            <summary>
            创建设置字段委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="FT"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.Field.UnsafeSetField``2(System.Reflection.FieldInfo,System.String)">
            <summary>
            创建设置字段委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="FT"></typeparam>
            <param name="field"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Reflection.Emit.StringWriter">
            <summary>
            字符串写入器
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.target">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.endLabel">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.step">
            <summary>
            写入阶段
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.size">
            <summary>
            未写入字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.value0">
            <summary>
            写入数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.value1">
            <summary>
            写入数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.value2">
            <summary>
            写入数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.value3">
            <summary>
            写入数据缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.#ctor(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            字符串写入器
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.Write(System.String)">
            <summary>
            写入字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.Write(System.Char)">
            <summary>
            添加字符
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.WriteEnd">
            <summary>
            写入结束
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.Write(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.String)">
            <summary>
            写入字符串
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.UnmanagedStreamBasePrepSizeMethod">
            <summary>
            非托管内存数据流预增数据流长度方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULong4Method">
            <summary>
            非托管内存数据流写入 64 字节数据方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULongSizeMethod">
            <summary>
            非托管内存数据流写入数据方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULong2SizeMethod">
            <summary>
            非托管内存数据流写入数据方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULong3SizeMethod">
            <summary>
            非托管内存数据流写入数据方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULong4SizeMethod">
            <summary>
            非托管内存数据流写入数据方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.Reflection.AssemblyCache">
            <summary>
            程序集缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.fullName">
            <summary>
            程序集全名称
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.AssemblyCache.#ctor(System.Reflection.Assembly)">
            <summary>
            程序集缓存
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:AutoCSer.Reflection.AssemblyCache.Get(System.String)">
            <summary>
            根据程序集名称获取程序集
            </summary>
            <param name="fullName">程序集名称</param>
            <returns>程序集,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.cache">
            <summary>
            程序集缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.cacheLock">
            <summary>
            程序集缓存访问
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.lastAssembly">
            <summary>
            最后一次访问的程序集
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.AssemblyCache.loadAssembly(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            加载程序集
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AutoCSer.Reflection.Common">
            <summary>
            反射公共配置
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Common.createDelegateCount">
            <summary>
            创建委托数量
            </summary>
        </member>
        <member name="P:AutoCSer.Reflection.Common.CreateDelegateCount">
            <summary>
            创建委托数量
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Common.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
            <summary>
            创建委托并计数
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Reflection.RemoteType">
            <summary>
            远程类型
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.RemoteType.AssemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.RemoteType.Name">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.#ctor(System.String,System.String)">
            <summary>
            远程类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.Set(System.String,System.String)">
            <summary>
            设置类型信息
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.#ctor(System.Type)">
            <summary>
            远程类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.op_Implicit(System.Type)~AutoCSer.Reflection.RemoteType">
            <summary>
            类型隐式转换
            </summary>
            <param name="type">类型</param>
            <returns>远程类型</returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.TryGet(System.Type@)">
            <summary>
            尝试获取类型
            </summary>
            <param name="type">类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.Equals(AutoCSer.Reflection.RemoteType)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.Equals(System.Object)">
            <summary>
            /
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Reflection.TypeNameBuilder">
            <summary>
            类型代码名称生成器
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuilder.GenericSplit">
            <summary>
            类型名称泛型分隔符
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuilder.NameStream">
            <summary>
            名称缓存
            </summary>
        </member>
        <member name="P:AutoCSer.Reflection.TypeNameBuilder.typeNameEnum">
            <summary>
            类型名称输出类型
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.#ctor(AutoCSer.Reflection.TypeNameBuildEnum)">
            <summary>
            类型代码名称生成器
            </summary>
            <param name="typeNameEnum"></param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.GetTypeFullName(System.Type,System.Boolean)">
            <summary>
            获取类型名称
            </summary>
            <param name="type">类型</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.Array(System.Type,System.Boolean)">
            <summary>
            数组处理
            </summary>
            <param name="type">类型</param>
            <param name="isFullName">是否全称</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.getFullName(System.Type)">
            <summary>
            任意类型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.getNameNoArray(System.Type)">
            <summary>
            任意类型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.GenericName(System.Type,System.String)">
            <summary>
            泛型处理
            </summary>
            <param name="type">类型</param>
            <param name="nameSuffix">类名称后缀</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.GenericFullName(System.Type,System.Boolean)">
            <summary>
            泛型处理
            </summary>
            <param name="type">类型</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.genericParameter(System.Type,System.Boolean)">
            <summary>
            泛型参数处理
            </summary>
            <param name="type">类型</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.genericParameter(System.Type[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            泛型参数处理
            </summary>
            <param name="parameterTypes">参数类型集合</param>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.ReflectedType(System.Type,System.Type)">
            <summary>
            嵌套类型处理
            </summary>
            <param name="type">类型</param>
            <param name="reflectedType">上层类型</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.GetFullName(System.Type,AutoCSer.Reflection.TypeNameBuildEnum,System.Boolean)">
            <summary>
            根据类型获取代码名称
            </summary>
            <param name="type">类型</param>
            <param name="buildEnum">类型名称输出类型</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
            <returns>代码名称</returns>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuilder.TypeNames">
            <summary>
            类型代码名称集合
            </summary>
        </member>
        <member name="T:AutoCSer.TextSerialize.Common">
            <summary>
            公共调用
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.Common.StringBufferSize">
            <summary>
            字符串缓存区大小
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.Common.GetSerializeFields``1(AutoCSer.Metadata.FieldIndex[],AutoCSer.TextSerialize.SerializeAttribute)">
            <summary>
            获取字段成员集合
            </summary>
            <typeparam name="T">序列化成员配置类型</typeparam>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.Common.GetSerializeProperties``1(AutoCSer.Metadata.PropertyIndex[],AutoCSer.TextSerialize.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <typeparam name="T">序列化成员配置类型</typeparam>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.Common.GetDeserializeFields``1(AutoCSer.Metadata.FieldIndex[],AutoCSer.TextSerialize.SerializeAttribute)">
            <summary>
            获取字段成员集合
            </summary>
            <typeparam name="T">序列化成员配置类型</typeparam>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.Common.GetDeserializeProperties``1(AutoCSer.Metadata.PropertyIndex[],AutoCSer.TextSerialize.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <typeparam name="T">序列化成员配置类型</typeparam>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.CustomConfig">
            <summary>
            自定义全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.CustomConfig.customSerializeDelegate">
            <summary>
            自定义序列化委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.CustomConfig.customSerializeDelegateLock">
            <summary>
            自定义序列化委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.AppendCustomSerializeDelegate(System.Type,AutoCSer.TextSerialize.SerializeDelegate,System.Delegate)">
            <summary>
            添加自定义序列化委托（应该在该类型的静态构造函数中调用，否则可能无法生效）
            </summary>
            <param name="type"></param>
            <param name="serializeDelegate"></param>
            <param name="deserializeDelegate">必须是静态方法，第一个参数类型为 AutoCSer.JsonDeserializer / AutoCSer.XmlDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void</param>
            <returns>如果已经存在该类型的自定义序列化委托则添加失败并返回 false</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.getCustomSerializeDelegate(System.Type,AutoCSer.TextSerialize.SerializeDelegate@)">
            <summary>
            根据类型获取自定义序列化委托
            </summary>
            <param name="type"></param>
            <param name="serializeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.geteCustomDeserializDelegate(System.Type,System.Delegate@)">
            <summary>
            根据类型获取自定义反序列化委托
            </summary>
            <param name="type"></param>
            <param name="deserializDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.getCustomSerializeReferenceTypes``1(System.Type)">
            <summary>
            根据类型获取自定义序列化需要循环引用检查的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.TextSerialize.CustomConfig.PrimitiveSerializeDelegates">
            <summary>
            获取自定义类型序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.JsonSerializer / AutoCSer.XmlDeserializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.Write(AutoCSer.Memory.CharStream,System.Single)">
            <summary>
            写入浮点数
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.Write(AutoCSer.Memory.CharStream,System.Double)">
            <summary>
            写入浮点数
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.Write(AutoCSer.Memory.CharStream,System.Decimal)">
            <summary>
            写入小数
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="P:AutoCSer.TextSerialize.CustomConfig.PrimitiveDeserializeDelegates">
            <summary>
            获取自定义类型反序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.JsonDeserializer / AutoCSer.XmlDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.CallCustomConstructor``1(``0@)">
            <summary>
            找不到构造函数的自定义创建对象处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.Deserialize(AutoCSer.SubString@,System.Double@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.PropertyMethod`1">
            <summary>
            属性成员信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.TextSerialize.PropertyMethod`1.Property">
            <summary>
            属性索引
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PropertyMethod`1.Method">
            <summary>
            访问函数
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PropertyMethod`1.MemberAttribute">
            <summary>
            成员自定义属性
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.PropertyMethod`1.#ctor(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,`0)">
            <summary>
            属性成员信息
            </summary>
            <param name="property"></param>
            <param name="method"></param>
            <param name="memberAttribute"></param>
        </member>
        <member name="T:AutoCSer.TextSerialize.SerializeAttribute">
            <summary>
            序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeAttribute.IsBaseType">
            <summary>
            是否作用与派生类型，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeAttribute.CheckLoopReference">
            <summary>
            是否检测循环引用（仅对引用类型有效），默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeAttribute.CustomReferenceTypes">
            <summary>
            自定义序列化需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知
            </summary>
        </member>
        <member name="T:AutoCSer.TextSerialize.SerializeConfig">
            <summary>
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.DefaultCheckDepth">
            <summary>
            默认最大节点检测深度
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.CheckDepth">
            <summary>
            最大节点检测深度，默认为 64（过大的深度会造成堆栈溢出，所以该序列化组件不适合序列化链表结构，如果存在该类似需求请自定义序列化转换为数组处理）
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.CheckLoop">
            <summary>
            是否检查循环引用，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.IsMemberMapErrorToDefault">
            <summary>
            成员位图类型不匹配时是否使用默认输出，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.IsObject">
            <summary>
            是否将 object 转换成真实类型输出
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.IsEnumToString">
            <summary>
            枚举类型是否输出字符串，否则输出数字
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeConfig.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.SerializeDelegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeDelegate.Delegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeDelegate.ReferenceTypes">
            <summary>
            需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.#ctor(System.Delegate,System.Type[])">
            <summary>
            自定义序列化委托
            </summary>
            <param name="delegateValue">序列化委托，必须是静态方法，第一个参数类型为 AutoCSer.JsonSerializer / AutoCSer.XmlSerializer，第二参数类型为具体数据类型，返回值类型为 void</param>
            <param name="referenceTypes">需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知</param>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.op_Implicit(System.Delegate)~AutoCSer.TextSerialize.SerializeDelegate">
            <summary>
            隐式转换
            </summary>
            <param name="value">自定义序列化委托，必须是静态方法，第一个参数类型为 AutoCSer.JsonSerializer / AutoCSer.XmlSerializer，第二参数类型为具体数据类型，返回值类型为 void</param>
            <returns>自定义序列化委托</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.Set(System.Delegate,System.Type[])">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="referenceTypes"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.GetRemoveDelegate">
            <summary>
            获取自定义序列化委托
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.Check(System.Type,System.Type@,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="serializerType"></param>
            <param name="type"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.Check(System.Type,System.Type,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="serializerType"></param>
            <param name="type"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.Check(System.Type,AutoCSer.TextSerialize.DelegateReference@,System.Type@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="serializerType"></param>
            <param name="serializeDelegateReference"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.DelegateReference">
            <summary>
            序列化委托循环引用信息
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.PushType">
            <summary>
            引用循环执行类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.IsUnknownMember">
            <summary>
            是否存在未知子节点
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.IsCheckMember">
            <summary>
            循环引用是否需要检查成员类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.IsCompleted">
            <summary>
            状态是否计算完成
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.Delegate">
            <summary>
            序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.ReferenceGenericTypes">
            <summary>
            需要循环引用检查的类型
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.#ctor(System.Delegate)">
            <summary>
            序列化委托循环引用信息
            </summary>
            <param name="delegateValue">序列化委托</param>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.SetNoLoop(System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.SetUnknown(System.Type,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="type"></param>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.SetMember(AutoCSer.TextSerialize.SerializeDelegate@)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.SetMember(System.Delegate,System.Type[])">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="referenceTypes"></param>
        </member>
        <member name="T:AutoCSer.TextSerialize.LoopTypeArray">
            <summary>
            序列化委托循环引用检查数组
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.LoopTypeArray.ReferenceTypes">
            <summary>
            需要循环引用检查的类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.LoopTypeArray.ReferenceGenericTypes">
            <summary>
            需要循环引用检查的类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.LoopTypeArray.Index">
            <summary>
            当前检查的类型位置
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.LoopTypeArray.Set(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            设置检查数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.LoopTypeArray.Set(AutoCSer.TextSerialize.DelegateReference)">
            <summary>
            设置检查数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="T:AutoCSer.TextSerialize.PushTypeEnum">
            <summary>
            序列化循环引用检查类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.DepthCount">
            <summary>
            仅做层级计数操作
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.UnknownNode">
            <summary>
            上级节点为值类型未知节点时添加循环对象检查
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.UnknownDepthCount">
            <summary>
            当前节点为值类型未知节点，仅做层级计数与状态修改操作，不添加循环对象检查
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.Push">
            <summary>
            添加循环对象检查，包括循环类型对象与未知引用类型对象
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.DepthOutOfRange">
            <summary>
            深度超出范围
            </summary>
        </member>
        <member name="T:AutoCSer.TextSerialize.WarningEnum">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.DepthOutOfRange">
            <summary>
            深度超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.LoopReference">
            <summary>
            存在对象循环引用
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.ResizeError">
            <summary>
            在不允许扩展缓存区大小的情况下产生了扩展操作
            </summary>
        </member>
        <member name="T:AutoCSer.TextSerialize.EnumDeserialize`1">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.TextSerialize.EnumDeserialize`1.enumValues">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.EnumDeserialize`1.enumSearchData">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="T:AutoCSer.JsonSerializer">
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.UInt64[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt64[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt64)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.enumULong``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumULong``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.UInt64})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.UInt64})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="F:AutoCSer.JsonSerializer.NullString">
            <summary>
            字符串 "null"
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.MaxInteger">
            <summary>
            最大整数值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.CustomConfig">
            <summary>
            JSON 自定义全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.ConfigurationAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.AllMemberAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.GetCharStream(AutoCSer.JsonSerializer)">
            <summary>
            获取 JSON 字符串输出缓冲区
            </summary>
            <param name="jsonSerializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.#ctor(System.Boolean)">
            <summary>
            JSON 序列化
            </summary>
            <param name="isThreadStatic">是否单线程模式</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serialize``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serialize``1(``0@,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">Json输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serializeThreadStatic``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换JSON字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serialize``1(``0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeNext``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            JSON 序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="config"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.freeThreadStatic">
            <summary>
            释放资源（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.FreeDisposeStream">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0@,AutoCSer.Memory.UnmanagedStream,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="stream">二进制缓冲区</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SetCommandServer">
            <summary>
            设置命令服务参数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeCommandServer``1(``0@,AutoCSer.Memory.UnmanagedStream)">
            <summary>
            命令服务序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serializeCommandServer``1(``0@,AutoCSer.Memory.UnmanagedStream)">
            <summary>
            命令服务序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeCommandServerBuffer``1(``0@,AutoCSer.Memory.UnmanagedStream)">
            <summary>
            命令服务序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="stream"></param>
            <returns>返回不包括补白的字节数</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binarySerializeString(AutoCSer.Memory.UnmanagedStream,System.Int32,System.Int32)">
            <summary>
            字符串二进制序列化
            </summary>
            <param name="stream"></param>
            <param name="index"></param>
            <param name="size"></param>
            <returns>返回不包括补白的字节数</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.WriteLoopReference">
            <summary>
            循环引用对象处理
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.WriteJsonNull(AutoCSer.JsonSerializer)">
            <summary>
            输出 null 值
            </summary>
            <param name="jsonSerializer"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            转换JSON字符串
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.NotSupport``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            自定义序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Base``2(AutoCSer.JsonSerializer,``0)">
            <summary>
            基类序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Object``1(``0)">
            <summary>
            object 对象转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Object``1(AutoCSer.JsonSerializer,System.Object)">
            <summary>
            object 对象转换JSON字符串
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.nullable``1(System.Nullable{``0}@)">
            <summary>
            可空类型序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Nullable``1(AutoCSer.JsonSerializer,System.Nullable{``0})">
            <summary>
            可空类型序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.array``1(``0[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Array``1(AutoCSer.JsonSerializer,``0[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.LeftArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.nullableArray``1(System.Nullable{``0}[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.NullableArray``1(AutoCSer.JsonSerializer,System.Nullable{``0}[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.collection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            集合序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Collection``2(AutoCSer.JsonSerializer,``0)">
            <summary>
            集合序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.stringDictionary``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.StringDictionary``1(AutoCSer.JsonSerializer,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.StringDictionary``2(AutoCSer.JsonSerializer,``0)">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.dictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Dictionary``2(AutoCSer.JsonSerializer,System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Dictionary``3(AutoCSer.JsonSerializer,``0)">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.keyValuePair``2(System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            键值对序列化
            </summary>
            <param name="keyValue"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.KeyValuePair``2(AutoCSer.JsonSerializer,System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            键值对序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="keyValue"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Boolean)">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Single)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Double)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Decimal)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeDateTime(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.TimeSpan)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeTimeSpan(System.TimeSpan)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Guid)">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Guid)">
            <summary>
            数字转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerializeNotEmpty(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value">长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(AutoCSer.SubString)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Object)">
            <summary>
            object 转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Type)">
            <summary>
            类型转换
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(AutoCSer.JsonNode)">
            <summary>
            JSON 节点转换
            </summary>
            <param name="value">JSON节点</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,AutoCSer.JsonNode)">
            <summary>
            JSON 节点转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serialize(AutoCSer.JsonNode@)">
            <summary>
            JSON 节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Boolean[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Boolean[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.DateTime[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.DateTime[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.TimeSpan[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.TimeSpan[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.CustomSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0@,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0@,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeObject(System.Object,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeObject(System.Object,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(System.Object,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="objectValue">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串 + 警告提示状态</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeObject(System.Object,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(System.Object,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="objectValue">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ThreadStaticSerialize``1(``0,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ThreadStaticSerialize``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ThreadStaticSerialize``1(``0,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ThreadStaticSerialize``1(``0@,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="F:AutoCSer.JsonSerializer.SerializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Int64[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int64[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.UInt32[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt32[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Int32[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int32[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.UInt16[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt16[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Int16[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int16[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Byte[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Byte[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.SByte[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.SByte[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int64)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt32)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int32)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt16)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int16)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Byte)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.SByte)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Boolean)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Single)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Double)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Decimal)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Char)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.DateTime)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.TimeSpan)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.String)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,AutoCSer.SubString)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Object)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Type)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.enumLong``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumLong``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.enumUInt``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumUInt``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.enumInt``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumInt``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.enumUShort``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumUShort``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.enumShort``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumShort``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.enumByte``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumByte``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.enumSByte``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumSByte``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Int64})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Int64})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.UInt32})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.UInt32})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Int32})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Int32})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.UInt16})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.UInt16})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Int16})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Int16})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Byte})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Byte})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.SByte})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.SByte})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Boolean})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Boolean})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Single})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Single})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Double})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Double})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Decimal})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Decimal})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Char})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Char})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.DateTime})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.DateTime})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.TimeSpan})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.TimeSpan})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Guid})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.PrimitiveSerialize(System.Nullable{System.Guid})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="T:AutoCSer.JsonSerializeAttribute">
            <summary>
            JSON 序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeAttribute.DocumentType">
            <summary>
            文档类型，用于 WEB API 等接口文档的 JSON 序列化描述
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeAttribute.AnonymousTypeMember">
            <summary>
            匿名类型序列化配置
            </summary>
        </member>
        <member name="T:AutoCSer.TextDeserializeConfig">
            <summary>
            文本反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializeConfig.IsTempString">
            <summary>
            是否临时字符串(可修改)
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializeConfig.IsMatchEnum">
            <summary>
            是否强制匹配枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializeConfig.NewArraySize">
            <summary>
            默认数组大小为 10
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializeConfig.IsErrorNewString">
            <summary>
            指针模式反序列化失败时是否 new string
            </summary>
        </member>
        <member name="T:AutoCSer.TextDeserializer`1">
            <summary>
            文本反序列化
            </summary>
            <typeparam name="T">文本反序列化类型</typeparam>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="P:AutoCSer.TextDeserializer`1.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.text">
            <summary>
            解析字符串
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.textFixed">
            <summary>
            解析字符串起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.Current">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.end">
            <summary>
            解析结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.stringBuffer">
            <summary>
            临时字符串
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.customError">
            <summary>
            自定义错误
            </summary>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.#ctor(System.Byte*)">
            <summary>
            文本反序列化
            </summary>
            <param name="bits">字符状态位查询表格</param>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.free">
            <summary>
            释放 XML 解析器（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.fillStringBuffer(System.Char*,System.Int32)">
            <summary>
            临时字符串填充空格
            </summary>
            <param name="bufferFixed"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.GetStringBuffer(AutoCSer.Memory.Pointer@)">
            <summary>
            获取数字字符串
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.KeyValue">
            <summary>
            键值对
            </summary>
        </member>
        <member name="M:AutoCSer.KeyValue.From``2(``0,``1)">
            <summary>
            获取键值对
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.KeyValue`2">
            <summary>
            键值对
            </summary>
            <typeparam name="KT">键类型</typeparam>
            <typeparam name="VT">值类型</typeparam>
        </member>
        <member name="F:AutoCSer.KeyValue`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="F:AutoCSer.KeyValue`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0,`1)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0@,`1)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0@,`1@)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.SetNull">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.KeyValue`2.Set(`0,`1)">
            <summary>
            重置键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="T:AutoCSer.LeftArray`1">
            <summary>
            数组子串
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Array">
            <summary>
            原数组
            </summary>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.FreeCount">
            <summary>
            原数组空闲数量
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.IsFree">
            <summary>
            是否存在空闲位置
            </summary>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Reserve">
            <summary>
            保留字段
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.IsReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.Item(System.Int32)">
            <summary>
            设置或获取值
            </summary>
            <param name="index">位置</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Int32)">
            <summary>
            数组子串
            </summary>
            <param name="capacity">容器大小</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(`0[])">
            <summary>
            数组子串
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Int32,`0[])">
            <summary>
            数组子串
            </summary>
            <param name="length">初始化数据长度</param>
            <param name="array">原数组</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetEnumerable(System.Int32,System.Int32)">
            <summary>
            枚举数据
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetEnumerable(System.Int32)">
            <summary>
            枚举数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetReverseEnumerable(System.Int32,System.Int32)">
            <summary>
            枚举数据
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetReverseIndexEnumerable">
            <summary>
            枚举数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.setCapacity(System.Int32)">
            <summary>
            设置数据容器长度
            </summary>
            <param name="capacity">数据长度</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.checkCapacity(System.Int32)">
            <summary>
            设置数据容器长度
            </summary>
            <param name="capacity">数据长度</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.PrepLength(System.Int32)">
            <summary>
            预增长度
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.SetEmpty">
            <summary>
            置空并释放数组并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Set(`0[])">
            <summary>
            重置数据
            </summary>
            <param name="value">数组,不能为null</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Clear">
            <summary>
            清除所有数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ClearLength">
            <summary>
            清除当前长度有效数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Exchange(AutoCSer.LeftArray{`0}@)">
            <summary>
            数组互换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.UnsafeAdd(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.TryAdd(`0)">
            <summary>
            当有空闲位置时添加数据
            </summary>
            <param name="value"></param>
            <returns>如果数组已满则添加失败并返回 false</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(System.Collections.Generic.ICollection{`0})">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(`0[])">
            <summary>
            添加数据集合
            </summary>
            <param name="array">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Append(`0[])">
            <summary>
            添加数据集合
            </summary>
            <param name="array">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(AutoCSer.LeftArray{`0}@)">
            <summary>
            添加数据集合
            </summary>
            <param name="array">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Insert(System.Int32,`0)">
            <summary>
            插入数据
            </summary>
            <param name="index">插入位置</param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value">匹配数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.IndexOf(`0)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Remove(`0)">
            <summary>
            移除第一个匹配数据
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAt(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据位置</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.indexOf(System.Func{`0,System.Boolean})">
            <summary>
            获取获取数组中的匹配位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>数组中的匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.IndexOf(System.Func{`0,System.Boolean})">
            <summary>
            获取获取数组中的匹配位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>数组中的匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ReplaceAdd(`0,System.Func{`0,System.Boolean})">
            <summary>
            根据匹配条件替换第一个匹配值，不存在匹配则添加新数据
            </summary>
            <param name="value">新数据</param>
            <param name="isValue">匹配条件</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveToEnd(System.Func{`0,System.Boolean})">
            <summary>
            移除第一个匹配数据，然后将最后一个数据移动到被删除数据位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAllToEnd(System.Func{`0,System.Boolean})">
            <summary>
            移除所有匹配数据，每次删除操作将当前最后一个数据移动到删除数据位置
            </summary>
            <param name="isValue"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetRemoveAllToEnd(System.Func{`0,System.Boolean})">
            <summary>
            移除所有匹配数据，每次删除操作将当前最后一个数据移动到删除数据位置
            </summary>
            <param name="isValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveToEnd(System.Int32)">
            <summary>
            最后一个数据移动到被删除数据位置
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAtToEnd(System.Int32)">
            <summary>
            最后一个数据移动到被删除数据位置
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Pop">
            <summary>
            移除最后一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.TryPop(`0@)">
            <summary>
            尝试弹出最后一个数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.PopAll">
            <summary>
            弹出所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.PopOnly">
            <summary>
            移除最后一个数据
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.LastOrDefault">
            <summary>
            获取最后一个值
            </summary>
            <returns>最后一个值,失败为default(valueType)</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Reverse">
            <summary>
            逆转列表
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="destinationArray">目标数据</param>
            <param name="index">目标位置</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ToArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.getArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetArray``1(System.Func{`0,``0})">
            <summary>
            转换数组
            </summary>
            <typeparam name="VT">数组类型</typeparam>
            <param name="getValue">数据获取委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Sort(System.Func{`0,`0,System.Int32})">
            <summary>
            排序
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.JoinString(System.String,System.Func{`0,System.String})">
            <summary>
            连接字符串
            </summary>
            <param name="toString">字符串转换器</param>
            <param name="join">连接串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetFixedBuffer">
            <summary>
            获取 fixed 缓冲区，DEBUG 模式对数据范围进行检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.JsonSerialize(AutoCSer.JsonSerializer,AutoCSer.LeftArray{`0})">
            <summary>
            数组序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.JsonDeserialize(AutoCSer.JsonDeserializer,AutoCSer.LeftArray{`0}@)">
            <summary>
            数组解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="array"></param>
        </member>
        <member name="T:AutoCSer.ListArray`1">
            <summary>
            单向动态数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ListArray`1.Array">
            <summary>
            数组子串
            </summary>
        </member>
        <member name="P:AutoCSer.ListArray`1.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.ListArray`1.IsReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="P:AutoCSer.ListArray`1.Item(System.Int32)">
            <summary>
            设置或获取值
            </summary>
            <param name="index">位置</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor">
            <summary>
            单向动态数组
            </summary>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(System.Int32)">
            <summary>
            单向动态数组
            </summary>
            <param name="capacity">容器大小</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(`0[])">
            <summary>
            单向动态数据
            </summary>
            <param name="array">数据数组</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(AutoCSer.LeftArray{`0})">
            <summary>
            单向动态数据
            </summary>
            <param name="array">数据数组</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(System.Int32,`0[])">
            <summary>
            单向动态数据
            </summary>
            <param name="length">初始化数据长度</param>
            <param name="array">原数组</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.ListArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Add(`0[])">
            <summary>
            添加数据集合
            </summary>
            <param name="array">数据集合</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Append(`0[])">
            <summary>
            添加数据集合
            </summary>
            <param name="array">数据集合</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Add(AutoCSer.ListArray{`0})">
            <summary>
            添加数据集合
            </summary>
            <param name="array">数据集合</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Insert(System.Int32,`0)">
            <summary>
            插入数据
            </summary>
            <param name="index">插入位置</param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value">匹配数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="destinationArray">目标数据</param>
            <param name="index">目标位置</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Reverse">
            <summary>
            逆转列表
            </summary>
        </member>
        <member name="M:AutoCSer.ListArray`1.IndexOf(`0)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.Remove(`0)">
            <summary>
            移除数据
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.RemoveAt(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据位置</param>
            <returns>被移除数据</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.Sort(System.Func{`0,`0,System.Int32})">
            <summary>
            排序
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.JoinString(System.String,System.Func{`0,System.String})">
            <summary>
            连接字符串
            </summary>
            <param name="toString">字符串转换器</param>
            <param name="join">连接串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.JsonSerialize(AutoCSer.JsonSerializer,AutoCSer.ListArray{`0})">
            <summary>
            数组序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.JsonDeserialize(AutoCSer.JsonDeserializer,AutoCSer.ListArray{`0}@)">
            <summary>
            数组解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="array"></param>
        </member>
        <member name="T:AutoCSer.ReusableDictionary">
            <summary>
            可重用字典静态数据（主要用于非引用类型缓冲区，避免 new / Clear 开销）
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.CreateInt``1(System.Int32,System.Boolean)">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="capacity">容器初始化大小</param>
            <param name="isClear">是否需要清除数据</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.ReusableDictionary.SearchStateEnum">
            <summary>
            查找节点状态
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.SearchStateEnum.End">
            <summary>
            最后一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.SearchStateEnum.Equal">
            <summary>
            相等
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.SearchStateEnum.Next">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.capacityPrimes">
            <summary>
            容器大小质数集合
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.GetPrime(System.Int32)">
            <summary>
            根据质数索引获取质数，失败返回 0
            </summary>
            <param name="primeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.GetPrimeIndex(System.Int32)">
            <summary>
            获取质数索引
            </summary>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.primes">
            <summary>
            小质数集合起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.endPrimes">
            <summary>
            小质数集合结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.IsPrime(System.Int32)">
            <summary>
            判断是否质数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.isPrime(System.Int32)">
            <summary>
            判断是否质数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ReusableDictionary`1">
            <summary>
            创建可重用字典（主要用于非引用类型缓冲区，避免 new / Clear 开销）
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.Create``1(System.Int32,System.Boolean)">
            <summary>
            创建字典
            </summary>
            <typeparam name="VT">数据类型</typeparam>
            <param name="capacity">容器初始化大小</param>
            <param name="isClear">是否需要清除数据</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.ReusableDictionary`2">
            <summary>
            可重用字典（主要用于非引用类型缓冲区，避免 new / Clear 开销）
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="VT">数据类型</typeparam>
        </member>
        <member name="T:AutoCSer.ReusableDictionary`2.Node">
            <summary>
            节点数据
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.Node.LinkIndex">
            <summary>
            哈希索引
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.Node.Source">
            <summary>
            节点来源，最高位为 0 表示首节点，否则表示后续节点
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Node.SourceIndex">
            <summary>
            节点来源，用于调试
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.Node.HashCode">
            <summary>
            关键字哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.Node.Next">
            <summary>
            下一个数据索引位置，int.MaxValue 表示最后一个
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.Node.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.Node.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Node.KeyValue">
            <summary>
            获取键值对
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Node.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Node.Set(AutoCSer.ReusableDictionary{`0,`1}.SearchNode@,`1,System.UInt32)">
            <summary>
            设置数据
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <param name="source"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Node.Set(AutoCSer.ReusableDictionary{`0,`1}.SearchNode@,`1,System.UInt32,System.Int32)">
            <summary>
            设置数据
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <param name="source"></param>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Node.Search(AutoCSer.ReusableDictionary{`0,`1}.SearchNode@,System.UInt32)">
            <summary>
            判断关键字是否相等
            </summary>
            <param name="node">查找节点</param>
            <param name="source">节点来源</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Node.Search(AutoCSer.ReusableDictionary{`0,`1}.SearchNode@)">
            <summary>
            判断关键字是否相等
            </summary>
            <param name="node">查找节点</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Node.SearchState(AutoCSer.ReusableDictionary{`0,`1}.SearchNode@)">
            <summary>
            搜索节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Node.RemoveGetNext(`1@)">
            <summary>
            删除节点时获取下一个数据索引位置
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Node.RemoveSet(AutoCSer.ReusableDictionary{`0,`1}.Node@,System.Int32@)">
            <summary>
            设置数据
            </summary>
            <param name="node"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ReusableDictionary`2.SearchNode">
            <summary>
            查找节点
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.SearchNode.HashCode">
            <summary>
            关键字哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.SearchNode.Index">
            <summary>
            查找索引
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.SearchNode.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.SearchNode.#ctor(`0@)">
            <summary>
            查找节点
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.SearchNode.#ctor(AutoCSer.ReusableDictionary{`0,`1}.Node@,`1@)">
            <summary>
            查找节点
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.isClear">
            <summary>
            是否需要清除数据
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.primeIndex">
            <summary>
            质数索引未知
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.capacity">
            <summary>
            容器大小
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.count">
            <summary>
            有效数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`2.nodes">
            <summary>
            节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.KeyValues">
            <summary>
            键值对集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Keys">
            <summary>
            关键字集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Item(`0)">
            <summary>
            获取或者设置数据
            </summary>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            可重用字典
            </summary>
            <param name="capacity">容器初始化大小</param>
            <param name="isClear">是否需要清除数据</param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.#ctor(AutoCSer.ReusableDictionary{`0,`1})">
            <summary>
            可重用字典重组 
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Empty">
            <summary>
            长度设为0（注意：对于引用类型没有置 0 可能导致内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.add(AutoCSer.ReusableDictionary{`0,`1}.SearchNode@,`1)">
            <summary>
            新增数据
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.ClearKey">
            <summary>
            清除关键字 
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.ClearValue">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.indexOf(`0@)">
            <summary>
            获取关键字匹配位置
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">目标数据</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.TryGetValue(`0@,`1@)">
            <summary>
            尝试获取数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">目标数据</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.resize">
            <summary>
            重组数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.set(AutoCSer.ReusableDictionary{`0,`1}.SearchNode@,`1)">
            <summary>
            设置数据
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Set(`0,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Set(`0@,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.ContainsKey(`0@)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.ContainsKey(`0)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Remove(`0)">
            <summary>
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Remove(`0@)">
            <summary>
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Remove(`0,`1@)">
            <summary>
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value">被删除数据</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Remove(`0@,`1@)">
            <summary>
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value">被删除数据</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.remove(System.Int32)">
            <summary>
            删除节点
            </summary>
            <param name="nodeIndex"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.CopyTo(AutoCSer.LeftArray{AutoCSer.KeyValue{`0,`1}}@)">
            <summary>
            复制数据
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Deserializer">
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumULong``1(System.Byte*,``0@)">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">枚举值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.UInt64@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.UInt64}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">逻辑值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.SByte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Int16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.UInt16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Char}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.String@,System.Byte*)">
            <summary>
            字符串反序列化
            </summary>
            <param name="start"></param>
            <param name="value">字符串</param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.String@,System.Byte*)">
            <summary>
            字符串反序列化
            </summary>
            <param name="start"></param>
            <param name="value"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Deserializer.DeserializeDelegate`1">
            <summary>
            反序列化委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Deserializer.DeserializeDefaultDelegate`1">
            <summary>
            反序列化委托
            </summary>
            <param name="data"></param>
            <param name="value">目标数据</param>
            <param name="end"></param>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.Deserializer.deserializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.GetDeserializeDelegate(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Int64}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.UInt32}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Int32}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Single}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Double}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Decimal}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.DateTime}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.TimeSpan}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Nullable{System.Guid}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Int64@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.UInt32@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Int32@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.UInt16@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Int16@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Byte@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.SByte@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Boolean@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Single@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Double@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Decimal@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Char@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.DateTime@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.TimeSpan@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.deserialize(System.Byte*,System.Guid@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumLong``1(System.Byte*,``0@)">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">枚举值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumUInt``1(System.Byte*,``0@)">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">枚举值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumInt``1(System.Byte*,``0@)">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">枚举值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumUShort``1(System.Byte*,``0@)">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">枚举值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumShort``1(System.Byte*,``0@)">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">枚举值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumByte``1(System.Byte*,``0@)">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">枚举值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumSByte``1(System.Byte*,``0@)">
            <summary>
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">枚举值</param>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Serializer">
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.UInt64})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.UInt64)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumULong``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Boolean})">
            <summary>
            逻辑值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.SByte})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Int16})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.UInt16})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Char})">
            <summary>
            字符序列化
            </summary>
            <param name="stream"></param>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Guid)">
            <summary>
            Guid序列化
            </summary>
            <param name="stream"></param>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.String)">
            <summary>
            字符串序列化
            </summary>
            <param name="stream"></param>
            <param name="value">字符串</param>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.Serializer.serializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.GetSerializeDelegate(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.IsType(System.Type)">
            <summary>
            判断是否可序列化类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Int64})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.UInt32})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Int32})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Single})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Double})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Decimal})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.DateTime})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.TimeSpan})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Guid})">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Int64)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.UInt32)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Int32)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.UInt16)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Int16)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Byte)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.SByte)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Boolean)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Single)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Double)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Decimal)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Char)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.DateTime)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.TimeSpan)">
            <summary>
            序列化
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumLong``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumUInt``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumInt``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumUShort``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumShort``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumByte``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumSByte``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.DeserializeDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.FixedFill(System.Int32)">
            <summary>
            填充对齐数据
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Deserializer`1">
            <summary>
            简单反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.Deserializer`1.DefaultDeserializer">
            <summary>
            简单反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.SerializeDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.SerializeDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.SerializeDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.SerializeDynamicMethod.returnLabel">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.SerializeDynamicMethod.#ctor(System.Type,System.Int32)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="fixedSize"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.SerializeDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.SerializeDynamicMethod.FixedFill(System.Int32)">
            <summary>
            填充对齐数据
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamBaseMoveSizeMethod">
            <summary>
            内存字符流移动当前位置方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.SerializeDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Serializer`1">
            <summary>
            简单序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Serializer`1.SimpleSerializer">
            <summary>
            简单序列化委托
            </summary>
            <param name="stream"></param>
            <param name="value">目标数据</param>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.Serializer`1.DefaultSerializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="T:AutoCSer.SubArray`1">
            <summary>
            数组子串
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.SubArray`1.Array">
            <summary>
            原数组
            </summary>
        </member>
        <member name="F:AutoCSer.SubArray`1.Start">
            <summary>
            原数组中的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.SubArray`1.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubArray`1.EndIndex">
            <summary>
            数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(`0[])">
            <summary>
            数组子串
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            数组子串
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(System.Int32)">
            <summary>
            用于命令服务返回类型
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            数组子串
            </summary>
            <param name="array">原数据</param>
            <param name="startIndex">起始位置</param>
            <param name="length">数据数量</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.op_Implicit(`0[])~AutoCSer.SubArray{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.SetEmpty">
            <summary>
            置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(`0[])">
            <summary>
            重置数据
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(System.Int32,System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="startIndex">起始位置,必须合法</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(`0[],System.Int32,System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="array">数组,不能为null</param>
            <param name="startIndex">起始位置,必须合法</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.MoveStart(System.Int32)">
            <summary>
            修改起始位置
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetArray``1(System.Func{`0,``0})">
            <summary>
            转换数组
            </summary>
            <typeparam name="VT">数组类型</typeparam>
            <param name="getValue">数据获取委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetFixedBuffer">
            <summary>
            获取 fixed 缓冲区，DEBUG 模式对数据范围进行检测
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TextSerializer`2">
            <summary>
            文本序列化
            </summary>
            <typeparam name="T">文本序列化类型</typeparam>
            <typeparam name="CT">序列化配置参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.CharStream">
            <summary>
            字符串输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.forefather">
            <summary>
            祖先节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.CheckDepth">
            <summary>
            节点层级计数
            </summary>
        </member>
        <member name="P:AutoCSer.TextSerializer`2.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.isProcessing">
            <summary>
            是否正在处理序列化操作
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.#ctor(`1,System.Boolean)">
            <summary>
            文本序列化
            </summary>
            <param name="config">配置参数</param>
            <param name="isThreadStatic">是否单线程模式</param>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.Check(AutoCSer.TextSerialize.PushTypeEnum)">
            <summary>
            获取序列化循环引用检查类型
            </summary>
            <param name="pushType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.PushUnknownNode(System.Object)">
            <summary>
            上级节点为值类型未知节点时添加循环对象检查
            </summary>
            <param name="value"></param>
            <returns>0 表示循环引用</returns>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.Push(System.Object)">
            <summary>
            添加循环引用检查对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.WriteLoopReference">
            <summary>
            循环引用对象处理
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.PopUnknownNode(System.Int32)">
            <summary>
            上级节点为值类型未知节点时添加循环对象检查
            </summary>
            <param name="unknownCount"></param>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.PopUnknownDepthCount">
            <summary>
            当前节点为值类型未知节点
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.Pop">
            <summary>
            弹出循环引用检查对象
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="T:AutoCSer.Threading.CpuCachePad">
            <summary>
            CPU 高速缓存填充数据块，默认为 64b 应用，填充 7 * 8 = 56b
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.NullQueueTaskNode">
            <summary>
            默认空队列任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.NullQueueTaskNode.RunTask">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.NullQueueTaskNode.Null">
            <summary>
            默认空队列任务节点
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.OnceAutoWaitHandle">
            <summary>
            一次性等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.OnceAutoWaitHandle.waitLock">
            <summary>
            同步等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.OnceAutoWaitHandle.IsWait">
            <summary>
            是否等待中
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.OnceAutoWaitHandle.Reserved">
            <summary>
            保留
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.OnceAutoWaitHandle.Set(System.Object,System.Int32)">
            <summary>
            初始化数据
            </summary>
            <param name="waitLock">同步等待锁</param>
            <param name="isWait">是否等待中</param>
        </member>
        <member name="M:AutoCSer.Threading.OnceAutoWaitHandle.Wait">
            <summary>
            等待结束
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.OnceAutoWaitHandle.Set">
            <summary>
            结束等待
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LockObject">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockObject.lockObject">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockObject.#ctor(System.Object)">
            <summary>
            锁对象
            </summary>
            <param name="lockObject"></param>
        </member>
        <member name="M:AutoCSer.Threading.LockObject.Enter">
            <summary>
            等待锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockObject.Exit">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.CatchTask">
            <summary>
            捕获异常任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.onException">
            <summary>
            异常处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.CallerFilePath">
            <summary>
            调用文件路径
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.CallerLineNumber">
            <summary>
            所在文件行数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.CallerMemberName">
            <summary>
            调用成员名称
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.#ctor(System.Action{System.AggregateException},System.String,System.Int32,System.String)">
            <summary>
            捕获异常线程
            </summary>
            <param name="onException">异常处理委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.checkException(System.AggregateException,System.Action{System.AggregateException})">
            <summary>
            异常回调
            </summary>
            <param name="exception"></param>
            <param name="onException"></param>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.TaskLink">
            <summary>
            未释放任务集合
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.CatchTask.Tasks">
            <summary>
            枚举所有未释放任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.Add(System.Threading.Tasks.Task,System.Action{System.AggregateException},System.String,System.Int32,System.String)">
            <summary>
            添加监视任务
            </summary>
            <param name="task">线程任务委托</param>
            <param name="onException">异常处理委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.AddIgnoreException(System.Threading.Tasks.Task,System.String,System.Int32,System.String)">
            <summary>
            添加监视任务
            </summary>
            <param name="task">线程任务委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.Add(System.Threading.Tasks.ValueTask,System.Action{System.AggregateException},System.String,System.Int32,System.String)">
            <summary>
            添加监视任务
            </summary>
            <param name="task">线程任务委托</param>
            <param name="onException">异常处理委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.AddIgnoreException(System.Threading.Tasks.ValueTask,System.String,System.Int32,System.String)">
            <summary>
            添加监视任务
            </summary>
            <param name="task">线程任务委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.Add``1(System.Threading.Tasks.Task{``0},System.Action{System.AggregateException},System.String,System.Int32,System.String)">
            <summary>
            添加监视任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task">线程任务委托</param>
            <param name="onException">异常处理委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.AddIgnoreException``1(System.Threading.Tasks.Task{``0},System.String,System.Int32,System.String)">
            <summary>
            添加监视任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task">线程任务委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.ignoreException(System.AggregateException)">
            <summary>
            忽略异常处理
            </summary>
            <param name="exception"></param>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.IgnoreException">
            <summary>
            忽略异常处理
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.CatchTaskOnly">
            <summary>
            捕获异常任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTaskOnly.task">
            <summary>
            任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CatchTaskOnly.#ctor(System.Action{System.AggregateException},System.String,System.Int32,System.String,System.Threading.Tasks.Task)">
            <summary>
            捕获异常线程
            </summary>
            <param name="onException">异常处理委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="task">线程任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTaskOnly.OnCompleted">
            <summary>
            任务完成检测
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.CatchTask`1">
            <summary>
            捕获异常任务
            </summary>
            <typeparam name="T">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask`1.task">
            <summary>
            任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask`1.#ctor(System.Action{System.AggregateException},System.String,System.Int32,System.String,System.Threading.Tasks.Task{`0})">
            <summary>
            捕获异常线程
            </summary>
            <param name="onException">异常处理委托</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerLineNumber">所在文件行数</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="task">线程任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask`1.OnCompleted">
            <summary>
            任务完成检测
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.DoubleLink`1">
            <summary>
            双向链表节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.DoubleLinkNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.DoubleLinkPrevious">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.ResetDoubleLink">
            <summary>
            重置链表状态
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.freeNotEnd(AutoCSer.Threading.SpinLock@)">
            <summary>
            弹出节点
            </summary>
            <param name="linkLock">链表访问锁</param>
            <returns>是否弹出节点，false 表示不允许重复弹出操作</returns>
        </member>
        <member name="T:AutoCSer.Threading.DoubleLink`1.YieldLink">
            <summary>
            双向链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.YieldLink.End">
            <summary>
            链表尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.YieldLink.linkLock">
            <summary>
            链表访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.YieldLink.PushNotNull(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.YieldLink.PopNotNull(`0)">
            <summary>
            弹出节点
            </summary>
            <param name="value"></param>
            <returns>是否弹出节点，false 表示不允许重复弹出操作</returns>
        </member>
        <member name="T:AutoCSer.Threading.Link`1">
            <summary>
            链表节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.LinkNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.GetLinkNextClear">
            <summary>
            获取并清除下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.GetEnd(`0)">
            <summary>
            获取链表最后一个节点
            </summary>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldLink">
            <summary>
            链表（用于冲突概率低的场景）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldLink.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldLink.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Link`1.YieldLink.IsEmpty">
            <summary>
            是否空链表
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.GetClear">
            <summary>
            获取链表头部并清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.Push(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.IsPushHead(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.Push(`0,`0)">
            <summary>
            添加节点
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldPool">
            <summary>
            缓存对象链表（用于冲突概率低的场景）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.isAsyncDisponse">
            <summary>
            是否需要异步释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.isDisponse">
            <summary>
            是否需要释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.maxCount">
            <summary>
            最大缓存数量（非精确数量）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.#ctor(System.Int32)">
            <summary>
            链表
            </summary>
            <param name="maxCount">链表缓存池默认缓存数量</param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.push(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.Push(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value">不可为 null</param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.IsPush(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value">不可为 null</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.dispose(`0)">
            <summary>
            释放队形
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.disposeLink(`0)">
            <summary>
            释放列表
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.PushLink(`0,`0,System.Int32)">
            <summary>
            添加链表
            </summary>
            <param name="value">链表头部</param>
            <param name="end">链表尾部</param>
            <param name="count">数据数量</param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.disposeLinkAsync(`0)">
            <summary>
            释放列表
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.Default">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.defaultClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.defaultReleaseFree">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldQueue">
            <summary>
            链表节点队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldQueue.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldQueue.end">
            <summary>
            链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldQueue.QueueLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Link`1.YieldQueue.IsEmpty">
            <summary>
            是否空链表
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.IsPushHead(`0)">
            <summary>
            添加节点到尾部
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.IsPushHead(`0,`0)">
            <summary>
            添加节点到尾部
            </summary>
            <param name="head"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.TryPushHead(`0)">
            <summary>
            添加首节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.PopOnly">
            <summary>
            弹出首节点（不检查数据，由调用方保证）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.GetClear">
            <summary>
            获取链表头部并清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.GetClear(`0@)">
            <summary>
            获取链表并清除数据
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.CheckGetClear(`0@)">
            <summary>
            获取链表并清除数据
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.GetToEndClear(`0@)">
            <summary>
            获取链表清除数据
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.GetToEndClear(`0@,`0@)">
            <summary>
            获取链表清除数据
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.PushHead(`0,`0)">
            <summary>
            添加链表到头部
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="T:AutoCSer.Threading.LinkPoolParameter">
            <summary>
            默认链表缓存池参数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolParameter.MaxObjectCount">
            <summary>
            最大缓存对象数量，默认为  AutoCSer.Common.ProcessorCount * 2
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolParameter.ReleaseFreeTimeoutSeconds">
            <summary>
            释放空闲缓存对象定时间隔秒数，默认为 3600s
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolParameter.IsClearCache">
            <summary>
            是否添加到公共清除缓存数据，默认为 true
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.LinkPoolParameter.Default">
            <summary>
            默认链表缓存池参数
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.QueueTaskNode">
            <summary>
            队列任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.RunTask">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.ClearLinkRunTask">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.RunTask(AutoCSer.Threading.QueueTaskNode@)">
            <summary>
            执行任务
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.OnException(System.Exception)">
            <summary>
            队列任务执行异常
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.OnTimeout(AutoCSer.Net.CommandServerCallQueue,System.Int64)">
            <summary>
            服务端队列超时通知
            </summary>
            <param name="queue"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.RingPool`1">
            <summary>
            缓存环池，用于读写线程没有交集的场景，避免内存数据被读写线程交叉访问
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AutoCSer.Threading.RingPool`1.releaseFreeTimerTask">
            <summary>
            释放空闲缓存对象 定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.releaseFreeTimerTask.ringPool">
            <summary>
            缓存环池
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.releaseFreeTimerTask.#ctor(AutoCSer.Threading.RingPool{`0},System.Int32)">
            <summary>
            释放空闲缓存对象 定时任务
            </summary>
            <param name="ringPool"></param>
            <param name="releaseFreeTimeoutSeconds"></param>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.releaseFreeTimerTask.OnTimer">
            <summary>
            释放空闲缓存对象 定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.pad0">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.ring">
            <summary>
            环池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.count">
            <summary>
            环大小
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.countLess">
            <summary>
            环索引值
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.cpuCacheBlockObjectCount">
            <summary>
            每个 CPU 高速缓存块容纳对象引用数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.canReadCount">
            <summary>
            最大可读数量 count - cpuCacheBlockObjectCount
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.releaseFreeTask">
            <summary>
            释放空闲缓存对象 定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.clearCacheHandle">
            <summary>
            清理缓存委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.pad1">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.writeIndex">
            <summary>
            预写位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.writeEndIndex">
            <summary>
            可写结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.writeEndLock">
            <summary>
            可写结束位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.writedIndex">
            <summary>
            已写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.pad2">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.readIndex">
            <summary>
            预读位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.readEndIndex">
            <summary>
            可读结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.readEndLock">
            <summary>
            可读结束位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.readedIndex">
            <summary>
            已读取位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.pad3">
            <summary>
            填充隔离数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            环池
            </summary>
            <param name="cacheObjectCount">缓存对象数量</param>
            <param name="isClearCache">是否添加到公共清除缓存数据</param>
            <param name="releaseFreeTimeoutSeconds">释放空闲缓存对象定时间隔秒数</param>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.PushNotNull(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.Pop">
            <summary>
            弹出数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.onTimer">
            <summary>
            释放空闲缓存对象 定时任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.clearCache(System.Int32)">
            <summary>
            清理缓存
            </summary>
            <param name="count"></param>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.Default">
            <summary>
            默认缓存环池
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.RingPoolAttribute">
            <summary>
            缓存环池配置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolAttribute.BlockCountBits">
            <summary>
            缓存分块数量二进制位，默认为最小值 8，最大值为 17，0 表示不启用默认缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolAttribute.ReleaseFreeTimeoutSeconds">
            <summary>
            释放空闲缓存对象定时间隔秒数，默认为 3600s
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolAttribute.IsClearCache">
            <summary>
            是否添加到公共清除缓存数据，默认为 true
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.RingPoolAttribute.Parameter">
            <summary>
            默认缓存环池构造函数传参参数
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.RingPoolParameter">
            <summary>
            默认缓存环池构造函数传参参数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolParameter.MinBlockCountBits">
            <summary>
            缓存分块数量二进制位 最小值为 2，最大缓存对象数据为 8 * 4 = 32
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolParameter.MaxBlockCountBits">
            <summary>
            缓存分块数量二进制位 最大值为 17，最大缓存对象数据为 8 * 128K = 1M
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolParameter.BlockCountBits">
            <summary>
            缓存分块数量二进制位，默认为最小值 8，最大值为 17，0 表示不启用默认缓存
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.RingPoolParameter.CacheObjectCount">
            <summary>
            缓存对象数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolParameter.ReleaseFreeTimeoutSeconds">
            <summary>
            释放空闲缓存对象定时间隔秒数，默认为 3600s
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolParameter.IsClearCache">
            <summary>
            是否添加到公共清除缓存数据，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPoolParameter.IsDefault">
            <summary>
            是否默认缓存环池构造函数传参参数
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.RingPoolParameter.Default">
            <summary>
            默认缓存环池构造函数传参参数
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimer">
            <summary>
            秒级定时操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.timer">
            <summary>
            刷新时间的定时器
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.InternalTaskArray">
            <summary>
            二维定时任务数组，用于确定性非阻塞的内部任务（队列模式无并发）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.TaskArray">
            <summary>
            二维定时任务数组（队列模式无并发）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.CurrentSeconds">
            <summary>
            当前时钟秒数计数
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SecondTimer.GetCurrentSeconds">
            <summary>
            当前时钟秒数计数
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SecondTimer.Now">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SecondTimer.UtcNow">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimer.SetNow">
            <summary>
            重置时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimer.SetUtcNow">
            <summary>
            重置时间
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.NextSecondTicks">
            <summary>
            下一秒时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.TimerInterval">
            <summary>
            当前时间更新间隔
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.refreshTimeThreadCount">
            <summary>
            未结束刷新时间线程数量
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SecondTimer.RefreshTimeThreadCount">
            <summary>
            未结束刷新时间线程数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.SecondNodeLink">
            <summary>
            每秒触发一次的定时任务链表，用于确定性非阻塞的内部任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimer.refreshTime(System.Object)">
            <summary>
            刷新时间
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerAppendTaskStateEnum">
            <summary>
            任务添加状态
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerAppendTaskStateEnum.Completed">
            <summary>
            已经同步处理完成
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerAppendTaskStateEnum.After">
            <summary>
            执行之后添加新的定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerAppendTaskStateEnum.AppendTaskArray">
            <summary>
            添加任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerAppendTaskStateEnum.OnTimer">
            <summary>
            触发定时操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArrayActionNode">
            <summary>
            二维秒级定时委托任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayActionNode.task">
            <summary>
            委托任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayActionNode.#ctor(System.Action,AutoCSer.Threading.SecondTimerArray,System.Int32,AutoCSer.Threading.SecondTimerKeepModeEnum,System.Int32)">
            <summary>
            二维秒级定时委托任务节点
            </summary>
            <param name="task">委托任务</param>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="keepMode">定时任务继续模式</param>
            <param name="keepSeconds">继续执行间隔秒数，0 表示不继续执行</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayActionNode.OnTimer">
            <summary>
            触发定时操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerKeepModeEnum">
            <summary>
            定时任务继续模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerKeepModeEnum.Before">
            <summary>
            执行之前添加新的定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerKeepModeEnum.After">
            <summary>
            执行之后添加新的定时任务
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerNode">
            <summary>
            定时同步任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerNode.OnTimer">
            <summary>
            触发定时操作
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerNode.LinkOnTimer(AutoCSer.Threading.SecondTimerNode)">
            <summary>s
            执行定时任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArray`1">
            <summary>
            二维定时任务数组
            </summary>
            <typeparam name="T">二维秒级定时任务节点链表类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArray">
            <summary>
            第一维定时任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.nextLinkArray">
            <summary>
            第二维定时任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArrayCapacity">
            <summary>
            任务数组容器大小
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArrayBitSize">
            <summary>
            容器二进制位长度，最小值为 8，最大值为 12
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.timerLink">
            <summary>
            超出二维任务链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.NodeLink">
            <summary>
            每秒尝试一次的定时任务链表，不能保证每秒触发一次
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArrayBaseSeconds">
            <summary>
            第一维定时任务数组基础秒数计时
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArrayIndex">
            <summary>
            第一维定时任务数组当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.nextLinkArrayIndex">
            <summary>
            第二维定时任务数组当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.TimerLinkLock">
            <summary>
            任务节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray`1.#ctor(System.Byte)">
            <summary>
            二维定时任务数组
            </summary>
            <param name="linkArrayBitSize">容器二进制位长度，最小值为 8，最大值为 12</param>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArray">
            <summary>
            二维定时同步任务数组
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.#ctor(System.Byte)">
            <summary>
            二维定时任务数组
            </summary>
            <param name="linkArrayBitSize">容器二进制位长度，最小值为 8，最大值为 12</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.Append(AutoCSer.Threading.SecondTimerArrayNode)">
            <summary>
            添加定时任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.Append(System.Action,System.Int32)">
            <summary>
            添加定时委托任务
            </summary>
            <param name="task">委托任务</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.Append(System.Action,System.Int32,AutoCSer.Threading.SecondTimerKeepModeEnum,System.Int32)">
            <summary>
            添加定时委托任务
            </summary>
            <param name="task">委托任务</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="keepMode">定时任务继续模式</param>
            <param name="keepSeconds">继续执行间隔秒数，0 表示不继续执行</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.OnTimer">
            <summary>
            执行定时任务
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArrayNodeLink">
            <summary>
            二维秒级定时任务同步节点链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNodeLink.end">
            <summary>
            任务尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNodeLink.head">
            <summary>
            任务首节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNodeLink.Append(AutoCSer.Threading.SecondTimerArrayNode)">
            <summary>
            添加尾节点
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNodeLink.AppendOtherHead(AutoCSer.Threading.SecondTimerArrayNode)">
            <summary>
            将另外一个链表的首节点添加到尾节点并返回下一个节点
            </summary>
            <param name="otherHead"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNodeLink.GetClear">
            <summary>
            获取首节点并且清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArrayNode">
            <summary>
            二维秒级定时同步任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.taskArray">
            <summary>
            二维定时任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.keepSeconds">
            <summary>
            继续执行间隔秒数，小于等于 0 表示不继续执行
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.KeepMode">
            <summary>
            定时任务继续模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.TimeoutSeconds">
            <summary>
            超时
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.#ctor">
            <summary>
            二维秒级定时任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.#ctor(AutoCSer.Threading.SecondTimerArray,System.Int32,AutoCSer.Threading.SecondTimerKeepModeEnum,System.Int32)">
            <summary>
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="keepMode">定时任务继续模式</param>
            <param name="keepSeconds">继续执行间隔秒数，0 表示不继续执行</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.#ctor(AutoCSer.Threading.SecondTimerArray,System.Int64)">
            <summary>
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">执行任务时间</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.getNextTimeoutSeconds">
            <summary>
            获取下一个超时秒计数
            </summary>
            <returns>0 表示不再继续</returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.AppendTaskArray">
            <summary>
            任务添加到二维定时任务数组
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.AppendCall">
            <summary>
            添加任务直接触发定时操作
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.After">
            <summary>
            执行之后添加新的定时任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.Call(AutoCSer.Threading.SecondTimerArrayNode@)">
            <summary>
            触发定时任务并返回下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.OnTimer">
            <summary>
            触发定时操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.Null">
            <summary>
            默认空节点
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskArray">
            <summary>
            二维定时任务数组
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArray.#ctor(System.Byte)">
            <summary>
            二维定时任务数组
            </summary>
            <param name="linkArrayBitSize">容器二进制位长度，最小值为 8，最大值为 12</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArray.Append(AutoCSer.Threading.SecondTimerTaskArrayNode)">
            <summary>
            添加定时任务节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArray.OnTimer">
            <summary>
            执行定时任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArray.Append(System.Action,System.Int32,AutoCSer.Threading.SecondTimerTaskThreadModeEnum)">
            <summary>
            添加定时任务
            </summary>
            <param name="task">委托任务</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="threadMode">执行任务的线程模式</param>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskArrayActionNode">
            <summary>
            二维秒级定时委托任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayActionNode.task">
            <summary>
            委托任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayActionNode.#ctor(System.Action,AutoCSer.Threading.SecondTimerTaskArray,System.Int32,AutoCSer.Threading.SecondTimerTaskThreadModeEnum)">
            <summary>
            二维秒级定时委托任务节点
            </summary>
            <param name="task">委托任务</param>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="threadMode">执行任务的线程模式</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayActionNode.OnTimer">
            <summary>
            触发定时操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskArrayNode">
            <summary>
            二维秒级定时任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.taskArray">
            <summary>
            二维定时任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.KeepSeconds">
            <summary>
            继续执行间隔秒数，小于等于 0 表示不继续执行
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.threadMode">
            <summary>
            执行任务的线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.KeepMode">
            <summary>
            定时任务继续模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.isTryAppended">
            <summary>
            是否已经添加任务到任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.TimeoutSeconds">
            <summary>
            超时秒计数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.#ctor">
            <summary>
            二维秒级定时任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.#ctor(AutoCSer.Threading.SecondTimerTaskArray,AutoCSer.Threading.SecondTimerTaskThreadModeEnum,AutoCSer.Threading.SecondTimerKeepModeEnum)">
            <summary>
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">二维定时任务数组</param>
            <param name="threadMode">执行任务的线程模式</param>
            <param name="KeepMode">定时任务继续模式</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.#ctor(AutoCSer.Threading.SecondTimerTaskArray,System.Int32,AutoCSer.Threading.SecondTimerTaskThreadModeEnum,AutoCSer.Threading.SecondTimerKeepModeEnum,System.Int32)">
            <summary>
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="threadMode">执行任务的线程模式</param>
            <param name="KeepMode">定时任务继续模式</param>
            <param name="keepSeconds">继续执行间隔秒数，0 表示不继续执行</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.getNextTimeoutSeconds">
            <summary>
            获取下一个超时秒计数
            </summary>
            <returns>0 表示不再继续</returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryAppendTaskArrayAsync">
            <summary>
            尝试添加到任务数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryAppendTaskArray">
            <summary>
            尝试添加到任务数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.AppendTaskArrayAsync(AutoCSer.Threading.SecondTimerAppendTaskStateEnum)">
            <summary>
            任务添加到二维定时任务数组
            </summary>
            <param name="appendTaskState"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryAppendTaskArray(System.Int32)">
            <summary>
            尝试添加到任务数组
            </summary>
            <param name="timeoutSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.AppendTaskArray">
            <summary>
            任务添加到二维定时任务数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.After">
            <summary>
            执行之后添加新的定时任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.AfterAsync">
            <summary>
            执行之后添加新的定时任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryCall(AutoCSer.Threading.SecondTimerAppendTaskStateEnum@)">
            <summary>
            尝试触发定时任务
            </summary>
            <param name="appendTaskState"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.Call(AutoCSer.Threading.SecondTimerAppendTaskStateEnum,AutoCSer.Threading.SecondTimerAppendTaskStateEnum)">
            <summary>
            触发定时任务
            </summary>
            <param name="callTaskState"></param>
            <param name="appendTaskState"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.OnTimer">
            <summary>
            触发定时操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.OnTimerAsync">
            <summary>
            触发定时操作
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.Null">
            <summary>
            默认空节点
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskArrayNodeLink">
            <summary>
            二维秒级定时任务节点链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.end">
            <summary>
            任务尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.head">
            <summary>
            任务首节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.Append(AutoCSer.Threading.SecondTimerTaskArrayNode)">
            <summary>
            添加尾节点
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.AppendOtherHead(AutoCSer.Threading.SecondTimerTaskArrayNode)">
            <summary>
            将另外一个链表的首节点添加到尾节点并返回下一个节点
            </summary>
            <param name="otherHead"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.GetClear">
            <summary>
            获取首节点并且清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskThreadModeEnum">
            <summary>
            执行任务的线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskThreadModeEnum.Synchronous">
            <summary>
            阻塞定时线程同步执行 OnTimer，适用于无阻塞快速结束任务避免线程调度
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskThreadModeEnum.WaitTask">
            <summary>
            await 阻塞定时线程同步执行 OnTimerAsync，适用于无阻塞快速结束任务避免线程调度
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskThreadModeEnum.AddCatchTask">
            <summary>
            调用 AutoCSer.Threading.CatchTask.Add 执行 OnTimerAsync
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TimeoutCount">
            <summary>
            超时计数
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TimeoutCount.SecondIndex">
            <summary>
            计时与索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.SecondIndex.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.SecondIndex.Index">
            <summary>
            计数索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.SecondIndex.Second">
            <summary>
            计时秒基数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.SecondIndex.Next(System.Int32)">
            <summary>
            计算下一个位置
            </summary>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.secondIndex">
            <summary>
            计时与索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.Counts">
            <summary>
            计数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.maxSeconds">
            <summary>
            最大超时秒数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.#ctor(System.UInt16)">
            <summary>
            超时计数
            </summary>
            <param name="maxSeconds">最大超时秒数，必须大于 0</param>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.Finalize">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.TryIncrement(System.UInt16)">
            <summary>
            增加超时计数
            </summary>
            <param name="seconds">超时秒数</param>
            <returns>超时秒计数</returns>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.Increment(System.UInt16)">
            <summary>
            增加超时计数
            </summary>
            <param name="seconds">超时秒数，必须大于 0</param>
            <returns>超时秒计数</returns>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.TryDecrement(System.UInt32)">
            <summary>
            减少超时计数
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.Decrement(System.UInt32)">
            <summary>
            减少超时计数
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.OnTimer">
            <summary>
            超时检测
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.OnTimeout(System.UInt32)">
            <summary>
            超时事件（不允许阻塞）
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="T:AutoCSer.Threading.SemaphoreSlimLock">
            <summary>
            异步锁（不支持重入，重入则死锁）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SemaphoreSlimLock.LockObject">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.#ctor(System.Int32,System.Int32)">
            <summary>
            异步锁（不支持重入，重入则死锁）
            </summary>
            <param name="initialCount">初始允许并发数量，默认应该传 1</param>
            <param name="maxCount">最大并发数量</param>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.Enter">
            <summary>
            申请锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.EnterAsync">
            <summary>
            申请锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.Exit">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.TryExit(AutoCSer.Threading.SemaphoreSlimLock)">
            <summary>
            释放锁
            </summary>
            <param name="semaphoreSlimLock"></param>
        </member>
        <member name="T:AutoCSer.Threading.SleepFlagSpinLock">
            <summary>
            休眠标志自旋锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SleepFlagSpinLock.lockValue">
            <summary>
            锁数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SleepFlagSpinLock.SleepFlag">
            <summary>
            休眠标志
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.TryEnter">
            <summary>
            申请锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.Enter">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.enter">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.EnterSleepFlag">
            <summary>
            申请锁并设置休眠标志，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.EnterNotCheckSleepFlag">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频高冲突场景（不检测休眠标识，和 SpinLock.Enter4 效果一样）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.enterNotCheckSleepFlag">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频高冲突场景（不检测休眠标识，和 SpinLock.Enter4 效果一样）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.Exit">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.ExitSleepFlag">
            <summary>
            重置休眠标志并释放锁
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SpinLock">
            <summary>
            Interlocked.CompareExchange 自旋锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SpinLock.Lock">
            <summary>
            锁数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SpinLock.Reserve">
            <summary>
            保留
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.TryEnter">
            <summary>
            申请锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.EnterYield">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.enterYield">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.EnterSleep">
            <summary>
            申请锁，一直调用 Thread.Sleep(0)，用于低频场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.Exit">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Thread">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.threadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.Handle">
            <summary>
            线程句柄
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Thread.IsAborted">
            <summary>
            线程是否已经退出
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Thread.Task">
            <summary>
            任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.waitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.#ctor(AutoCSer.Threading.ThreadPool)">
            <summary>
            线程池线程
            </summary>
            <param name="threadPool">线程池</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.#ctor(AutoCSer.Threading.ThreadPool,System.Action)">
            <summary>
            线程池线程
            </summary>
            <param name="threadPool">线程池</param>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.start(System.Boolean)">
            <summary>
            启动线程
            </summary>
            <param name="isBackground"></param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.exitTest">
            <summary>
            退出测试线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.runBackground">
            <summary>
            运行线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.run">
            <summary>
            运行线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.RunTask(System.Action)">
            <summary>
            执行任务
            </summary>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.Stop">
            <summary>
            结束线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.StopLink">
            <summary>
            结束线程
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.Thread.beginThreadAffinityState">
            <summary>
            System.Threading.Thread.BeginThreadAffinity() 调用状态
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.BeginThreadAffinity">
            <summary>
            System.Threading.Thread.BeginThreadAffinity()
            </summary>
            <returns>调用是否成功</returns>
        </member>
        <member name="M:AutoCSer.Threading.Thread.beginThreadAffinity">
            <summary>
            System.Threading.Thread.BeginThreadAffinity()
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.ThreadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.TinyStackSize">
            <summary>
            最低线程堆栈大小 128KB
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.defaultStackSize">
            <summary>
            默认线程堆栈大小 1MB
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.StackSize">
            <summary>
            线程堆栈大小
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.IsBackground">
            <summary>
            是否后台线程
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.threads">
            <summary>
            线程链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.freeThreadCount">
            <summary>
            空闲线程数量
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.#ctor(System.Int32,System.Boolean)">
            <summary>
            线程池
            </summary>
            <param name="stackSize">线程堆栈大小</param>
            <param name="isBackground">是否后台线程</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.PushBackground(AutoCSer.Threading.Thread)">
            <summary>
            后台线程入池
            </summary>
            <param name="thread">线程池线程</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.Push(AutoCSer.Threading.Thread)">
            <summary>
            前台线程入池
            </summary>
            <param name="thread">线程池线程</param>
            <returns>线程池是否已经释放</returns>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.exit">
            <summary>
            前台线程退出
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.FastStart(System.Action)">
            <summary>
            获取一个线程并执行任务
            </summary>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.Start(System.Action)">
            <summary>
            获取一个线程并执行任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.releaseFree">
            <summary>
            是否空闲线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.releaseFreeBackground">
            <summary>
            是否空闲线程
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.Tiny">
            <summary>
            微型线程池,堆栈 128K
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.TinyBackground">
            <summary>
            微型后台线程池,堆栈 128K
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.backgroundExitThread">
            <summary>
            后台退出测试线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.CheckExit">
            <summary>
            前台退出测试
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.releaseFreeThread">
            <summary>
            释放多余线程数据
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.ThreadPoolQueueUserWorkItem">
            <summary>
            线程池回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPoolQueueUserWorkItem.callback">
            <summary>
            线程池回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPoolQueueUserWorkItem.#ctor(System.Action)">
            <summary>
            线程池回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPoolQueueUserWorkItem.Callback(System.Object)">
            <summary>
            线程池回调委托
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Threading.ThreadYield">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.YieldOnly">
            <summary>
            .NET 4.0 之前的版本不做任何事
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.Yield">
            <summary>
            .NET 4.0 之前的版本调用 System.Threading.Thread.Sleep(0)
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.UISynchronousTask">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask.getTask">
            <summary>
            获取任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask.wait">
            <summary>
            等待任务执行结果
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask.exception">
            <summary>
            任务执行异常信息
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.UISynchronousTask.Exception">
            <summary>
            任务执行异常信息，正常执行无异常返回 null
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <param name="getTask">获取任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.run">
            <summary>
            执行任务线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.Wait">
            <summary>
            任务执行结果
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.Wait(System.Func{System.Threading.Tasks.Task})">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <param name="getTask"></param>
            <returns>任务执行异常信息，正常执行无异常返回 null</returns>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.GetResult``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <param name="getTask">获取任务委托</param>
            <returns>任务执行结果</returns>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.GetResult``1(System.Func{System.Threading.Tasks.Task{``0}},System.Exception@)">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <param name="getTask">获取任务委托</param>
            <param name="exception">任务执行异常信息，正常执行无异常返回 null</param>
            <returns>任务执行结果</returns>
        </member>
        <member name="T:AutoCSer.Threading.UISynchronousTask`1">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask`1.getTask">
            <summary>
            获取任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask`1.wait">
            <summary>
            等待任务执行结果
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask`1.exception">
            <summary>
            任务执行异常信息
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.UISynchronousTask`1.Exception">
            <summary>
            任务执行异常信息，正常执行无异常返回 null
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask`1.result">
            <summary>
            任务执行结果
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <param name="getTask">获取任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask`1.run">
            <summary>
            执行任务线程
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.UISynchronousTask`1.Result">
            <summary>
            任务执行结果
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask`1.GetResult(System.Exception@)">
            <summary>
            获取任务执行结果与任务执行异常信息
            </summary>
            <param name="exception">任务执行异常信息，正常执行无异常返回 null</param>
            <returns>任务执行结果</returns>
        </member>
        <member name="T:AutoCSer.ILog">
            <summary>
            日志处理接口
            </summary>
        </member>
        <member name="M:AutoCSer.ILog.IsAnyLevel(AutoCSer.LogLevelEnum)">
            <summary>
            判断是否支持任意级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ILog.Debug(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.ILog.Exception(System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.ILog.Flush">
            <summary>
            等待写入完成
            </summary>
            <returns>写盘是否成功</returns>
        </member>
        <member name="T:AutoCSer.LogLevelEnum">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.AutoCSer">
            <summary>
            AutoCSer 框架底层调试信息
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Info">
            <summary>
            一般信息
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Debug">
            <summary>
            调试信息
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Error">
            <summary>
            一般错误
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Breakpoint">
            <summary>
            测试断点
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.All">
            <summary>
            所有日志
            </summary>
        </member>
        <member name="T:AutoCSer.LogHelper">
            <summary>
            公共日志配置
            </summary>
        </member>
        <member name="F:AutoCSer.LogHelper.Default">
            <summary>
            公共配置日志，默认为文件日志
            </summary>
        </member>
        <member name="M:AutoCSer.LogHelper.Info(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加普通日志
            </summary>
            <param name="message">普通日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.InfoIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加普通日志
            </summary>
            <param name="message">普通日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Debug(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.DebugIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Exception(System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.ExceptionIgnoreException(System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Error(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加一般错误日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.ErrorIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加一般错误日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Warn(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.WarnIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Fatal(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.FatalIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Breakpoint(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加测试断点日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.BreakpointIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加测试断点日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Flush">
            <summary>
            等待写入完成
            </summary>
            <returns>写盘是否成功</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.FlushIgnoreException">
            <summary>
            等待写入完成
            </summary>
            <returns>写盘是否成功</returns>
        </member>
        <member name="T:AutoCSer.JsonSerializeConfig">
            <summary>
            JSON 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.DateTimeCustomFormat">
            <summary>
            自定义 ToString("xxx") 格式
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.DateTimeType">
            <summary>
            时间输出类型
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsDateTimeMinNull">
            <summary>
            最小时间是否输出为 null，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsStringDictionaryToObject">
            <summary>
            Dictionary[string,] 是否转换成对象输出，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsDictionaryToObject">
            <summary>
            Dictionary 是否转换成对象模式输出
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsIntegerToHex">
            <summary>
            整数是否允许转换为 16 进制字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsMaxNumberToString">
            <summary>
            超出最大有效精度的 long / ulong 是否转换成字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsInfinityToNaN">
            <summary>
            默认为 true 表示将 Infinity / -Infinity 转换为 NaN 输出
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsBoolToInt">
            <summary>
            逻辑值是否转换成 1/0 输出
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializeConfig.CreateInternal">
            <summary>
            创建内部配置参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.NullableBoolEnum">
            <summary>
            可空逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBoolEnum.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBoolEnum.False">
            <summary>
            逻辑假值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBoolEnum.True">
            <summary>
            逻辑真值
            </summary>
        </member>
        <member name="T:AutoCSer.Random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.SecureSeedsSize">
            <summary>
            种子字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.SeedArrayField">
            <summary>
            系统随机数默认种子数组
            </summary>
        </member>
        <member name="F:AutoCSer.Random.seeds">
            <summary>
            公用种子
            </summary>
        </member>
        <member name="F:AutoCSer.Random.secureSeeds">
            <summary>
            安全种子
            </summary>
        </member>
        <member name="F:AutoCSer.Random.current">
            <summary>
            32位种子位置
            </summary>
        </member>
        <member name="F:AutoCSer.Random.current64">
            <summary>
            64位种子位置
            </summary>
        </member>
        <member name="F:AutoCSer.Random.currentLock">
            <summary>
            64位种子位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bits">
            <summary>
            随机位缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bitCount">
            <summary>
            随机位缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.byteLock">
            <summary>
            字节缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bytes">
            <summary>
            字节缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.byteCount">
            <summary>
            字节缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushortLock">
            <summary>
            双字节缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushorts">
            <summary>
            双字节缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushortCount">
            <summary>
            双字节缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Random.#ctor(System.Boolean)">
            <summary>
            随机数
            </summary>
            <param name="isAutoCSerStatic">随机种子是否采用默认静态内存</param>
        </member>
        <member name="M:AutoCSer.Random.Dispose">
            <summary>
            释放种子内存
            </summary>
        </member>
        <member name="M:AutoCSer.Random.nextIndex">
            <summary>
            获取随机种子位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.Next">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.NextFloat">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.Next(System.Int32)">
            <summary>
            获取下一个随机数
            </summary>
            <param name="mod">求余取模数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextBit">
            <summary>
            获取下一个随机位
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextByte">
            <summary>
            获取下一个随机字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextUShort">
            <summary>
            获取下一个随机双字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.nextIndex64">
            <summary>
            获取随机种子位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextULong">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.NextDouble">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNext">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextUIntNotZero">
            <summary>
            获取下一个非0随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextULong">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextULongNotZero">
            <summary>
            获取下一个非0随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Default">
            <summary>
            默认随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Hash64">
            <summary>
            随机Hash值(用于防构造)
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Hash">
            <summary>
            随机Hash值(用于防构造)
            </summary>
        </member>
        <member name="T:AutoCSer.ReferenceHashKey`1">
            <summary>
            引用哈希关键字
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ReferenceHashKey`1.Value">
            <summary>
            哈希关键字
            </summary>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.#ctor(`0)">
            <summary>
            哈希关键字
            </summary>
            <param name="value">关键字</param>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.op_Implicit(`0)~AutoCSer.ReferenceHashKey{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value">哈希关键字</param>
            <returns>引用哈希关键字</returns>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.Equals(AutoCSer.ReferenceHashKey{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.CharBuilder">
            <summary>
            状态数据创建器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.names">
            <summary>
            名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.Data">
            <summary>
            状态数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.prefix">
            <summary>
            前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.table">
            <summary>
            状态矩阵
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.stateCount">
            <summary>
            状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.tableCount">
            <summary>
            矩阵状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.prefixSize">
            <summary>
            前缀数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.chars">
            <summary>
            状态字符集合
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.#ctor(AutoCSer.KeyValue{System.String,System.Int32}[],System.Boolean)">
            <summary>
            状态数据创建器
            </summary>
            <param name="names">名称集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.count(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算状态数量
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.create(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建状态数据
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.StringCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.compare(AutoCSer.KeyValue{System.String,System.Int32},AutoCSer.KeyValue{System.String,System.Int32})">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.Check(AutoCSer.KeyValue{System.String,System.Int32}[],System.String@)">
            <summary>
            状态检测
            </summary>
            <param name="values"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.Create(System.String[],System.Boolean)">
            <summary>
            创建名称查找数据
            </summary>
            <param name="names">名称集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
            <returns>名称查找数据</returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.CharSearcher">
            <summary>
            字符搜索器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.#ctor(AutoCSer.Memory.Pointer)">
            <summary>
            字符搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.#ctor(AutoCSer.Memory.Pointer@)">
            <summary>
            字符搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.GetCharIndex(System.Char*,System.Char*,System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="charStart">特殊字符串查找表</param>
            <param name="charEnd">特殊字符串查找表结束位置</param>
            <param name="value">特殊字符</param>
            <returns>特殊字符位置,匹配失败返回null</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.Search(System.String)">
            <summary>
            获取状态索引
            </summary>
            <param name="value"></param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.UnsafeSearch(System.Char*,System.Char*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.UnsafeSearch(System.Char*,System.Int32)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="length">匹配长度</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="T:AutoCSer.SubString">
            <summary>
            字符子串
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.String">
            <summary>
            原字符串
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.Start">
            <summary>
            原字符串中的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.Length">
            <summary>
            字符子串长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubString.Item(System.Int32)">
            <summary>
            获取字符
            </summary>
            <param name="index">字符位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubString.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            字符子串
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="value">字符串</param>
            <param name="length">长度</param>
        </member>
        <member name="M:AutoCSer.SubString.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            字符子串
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="value">字符串</param>
            <param name="length">长度</param>
        </member>
        <member name="M:AutoCSer.SubString.op_Implicit(System.String)~AutoCSer.SubString">
            <summary>
            字符串隐式转换为子串
            </summary>
            <param name="value">字符串</param>
            <returns>字符子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.op_Implicit(AutoCSer.SubString)~System.String">
            <summary>
            字符子串隐式转换为字符串
            </summary>
            <param name="value">字符子串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetHashCode64">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.SubString.SetEmpty">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.SubString.Set(System.String,System.Int32,System.Int32)">
            <summary>
            设置数据长度
            </summary>
            <param name="value">字符串,不能为null</param>
            <param name="startIndex">起始位置,必须合法</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.SubString.Equals(System.Object)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="obj">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(AutoCSer.SubString)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(AutoCSer.SubString@)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(System.String)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.SubString.Slice(System.Int32,System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="length">长度</param>
            <returns>子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.Sub(System.Int32,System.Int32)">
            <summary>
            设置为子串
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="length">长度</param>
        </member>
        <member name="M:AutoCSer.SubString.Sub(System.Int32)">
            <summary>
            设置为子串
            </summary>
            <param name="startIndex">起始位置</param>
        </member>
        <member name="M:AutoCSer.SubString.GetSub(System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">起始位置</param>
            <returns>子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetSub(System.Int32,System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="length">长度</param>
            <returns>子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.MoveStart(System.Int32)">
            <summary>
            修改起始位置
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SubString.IndexOf(System.Char)">
            <summary>
            字符查找
            </summary>
            <param name="value">查找值</param>
            <returns>字符位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SubString.Trim">
            <summary>
            删除前后空格，包括 \t\r\n
            </summary>
            <returns>删除前后空格</returns>
        </member>
        <member name="M:AutoCSer.SubString.Split(System.Char)">
            <summary>
            分割字符串
            </summary>
            <param name="split">分割符</param>
            <returns>字符子串集合</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetFixedBuffer">
            <summary>
            获取 fixed 缓冲区，DEBUG 模式对数据范围进行检测
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ToGenericCollection`1">
            <summary>
            ICollection 泛型转换
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ToGenericCollection`1.collection">
            <summary>
            ICollection数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.#ctor(System.Collections.ICollection)">
            <summary>
            ICollection泛型转换
            </summary>
            <param name="collection">ICollection数据集合</param>
        </member>
        <member name="P:AutoCSer.ToGenericCollection`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.ToGenericCollection`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.Remove(`0)">
            <summary>
            移除数据(不可用)
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="values">目标数据</param>
            <param name="index">目标位置</param>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value">匹配数据</param>
            <returns>是否存在数据</returns>
        </member>
    </members>
</doc>
