<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.ORM</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.ORM.AssociatedTable`3">
            <summary>
            模拟关联表格
            </summary>
            <typeparam name="LT">关联表格模型类型</typeparam>
            <typeparam name="RT">被关联表格模型类型</typeparam>
            <typeparam name="KT">关联关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTable`3.leftTable">
            <summary>
            关联表格
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTable`3.leftKeyName">
            <summary>
            关联表格关键字列名称
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTable`3.GetLeftKey">
            <summary>
            获取关联表格关键字委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTable`3.rightTable">
            <summary>
            被关联表格
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTable`3.rightKeyName">
            <summary>
            被关联表格关键字列名称
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTable`3.getRightKey">
            <summary>
            获取被关联表格关键字委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTable`3.setQuery">
            <summary>
            设置关联查询条件以后的附加查询设置委托
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTable`3.#ctor(AutoCSer.ORM.TableWriter{`0,`2},AutoCSer.ORM.TableWriter{`1,`2},System.Action{AutoCSer.ORM.QueryBuilder{`1}})">
            <summary>
            模拟关联表格
            </summary>
            <param name="leftTable"></param>
            <param name="rightTable"></param>
            <param name="setQuery"></param>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTable`3.#ctor(AutoCSer.ORM.TableWriter{`0,`2},AutoCSer.ORM.TableWriter{`1},System.Linq.Expressions.Expression{System.Func{`1,`2}},System.Action{AutoCSer.ORM.QueryBuilder{`1}})">
            <summary>
            模拟关联表格
            </summary>
            <param name="leftTable"></param>
            <param name="rightTable"></param>
            <param name="getRightKey"></param>
            <param name="setQuery"></param>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTable`3.#ctor(AutoCSer.ORM.TableWriter{`0},System.Linq.Expressions.Expression{System.Func{`0,`2}},AutoCSer.ORM.TableWriter{`1,`2},System.Action{AutoCSer.ORM.QueryBuilder{`1}})">
            <summary>
            模拟关联表格
            </summary>
            <param name="leftTable"></param>
            <param name="getLeftKey"></param>
            <param name="rightTable"></param>
            <param name="setQuery"></param>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTable`3.#ctor(AutoCSer.ORM.TableWriter{`0},System.Linq.Expressions.Expression{System.Func{`0,`2}},AutoCSer.ORM.TableWriter{`1},System.Linq.Expressions.Expression{System.Func{`1,`2}},System.Action{AutoCSer.ORM.QueryBuilder{`1}})">
            <summary>
            模拟关联表格
            </summary>
            <param name="leftTable"></param>
            <param name="getLeftKey"></param>
            <param name="rightTable"></param>
            <param name="getRightKey"></param>
            <param name="setQuery"></param>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTable`3.GetOnJoinQuery(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            获取被连接模拟查询信息
            </summary>
            <param name="leftValues">连接数据集合</param>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTable`3.CreateExistsSqlQuery(System.Boolean)">
            <summary>
            主表格创建 EXISTS 子查询条件
            </summary>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTable`3.CreateLeftExistsSqlQuery(System.Boolean)">
            <summary>
            子表格创建 EXISTS 条件
            </summary>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTable`3.WriteExists(AutoCSer.Memory.CharStream,System.Boolean)">
            <summary>
            写入 EXISTS 条件
            </summary>
            <param name="charStream"></param>
            <param name="isLeft"></param>
        </member>
        <member name="T:AutoCSer.ORM.AutoIdentityTableWriter`2">
            <summary>
            自增ID 数据库表格持久化写入
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="P:AutoCSer.ORM.AutoIdentityTableWriter`2.AutoIdentity">
            <summary>
            主键是否自增ID
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AutoIdentityTableWriter`2.currentIdentity">
            <summary>
            当前已使用的自增ID
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter`2.#ctor(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.ModelAttribute,AutoCSer.ORM.Member[],AutoCSer.ORM.Member,AutoCSer.ORM.ITableEvent{`0})">
            <summary>
            数据库表格持久化写入
            </summary>
            <param name="connectionPool">数据库连接池</param>
            <param name="attribute">数据表格模型配置</param>
            <param name="members">数据表格模型字段成员集合</param>
            <param name="primaryKey">关键字字段成员</param>
            <param name="tableEvent">表格操作事件处理</param>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter`2.primaryKeyToIdentity(`1)">
            <summary>
            关键字转自增ID
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter`2.GetCurrentIdentity">
            <summary>
            初始化获取当前已使用的自增ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.AutoIdentityTableWriter`1">
            <summary>
            自增ID 数据库表格持久化写入
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter`1.#ctor(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.ModelAttribute,AutoCSer.ORM.Member[],AutoCSer.ORM.Member,AutoCSer.ORM.ITableEvent{`0})">
            <summary>
            数据库表格持久化写入
            </summary>
            <param name="connectionPool">数据库连接池</param>
            <param name="attribute">数据表格模型配置</param>
            <param name="members">数据表格模型字段成员集合</param>
            <param name="primaryKey">关键字字段成员</param>
            <param name="tableEvent">表格操作事件处理</param>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter`1.SetInsertAutoIdentity(`0)">
            <summary>
            设置新增对象自增ID
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter`1.primaryKeyToIdentity(System.Int32)">
            <summary>
            关键字转自增ID
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter`1.CheckUpdateAutoIdentity(System.Int32)">
            <summary>
            更新自增ID记录
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.AutoIdentityTableWriter64`1">
            <summary>
            自增ID 数据库表格持久化写入
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter64`1.#ctor(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.ModelAttribute,AutoCSer.ORM.Member[],AutoCSer.ORM.Member,AutoCSer.ORM.ITableEvent{`0})">
            <summary>
            数据库表格持久化写入
            </summary>
            <param name="connectionPool">数据库连接池</param>
            <param name="attribute">数据表格模型配置</param>
            <param name="members">数据表格模型字段成员集合</param>
            <param name="primaryKey">关键字字段成员</param>
            <param name="tableEvent">表格操作事件处理</param>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter64`1.SetInsertAutoIdentity(`0)">
            <summary>
            设置新增对象自增ID
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter64`1.primaryKeyToIdentity(System.Int64)">
            <summary>
            关键字转自增ID
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.AutoIdentityTableWriter64`1.CheckUpdateAutoIdentity(System.Int64)">
            <summary>
            更新自增ID记录
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.BusinessQuery`3">
            <summary>
            业务表格模型持久化查询
            </summary>
            <typeparam name="BT">业务表格模型类型</typeparam>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.BusinessQuery`3.TableQuery">
            <summary>
            数据库表格持久化查询
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.#ctor(AutoCSer.ORM.TableQuery{`1,`2})">
            <summary>
            业务表格模型持久化查询
            </summary>
            <param name="tableQuery"></param>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean)">
            <summary>
            创建 SQL 查询创建器
            </summary>
            <param name="condition">查询条件</param>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateQuery(AutoCSer.ORM.Transaction@,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            创建 SQL 查询创建器
            </summary>
            <param name="transaction">事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.GetByPrimaryKey(`2,AutoCSer.Metadata.MemberMap{`1},AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <param name="primaryKey"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.GetByPrimaryKey``1(`2,AutoCSer.Metadata.MemberMap{`1},AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKey"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.SingleOrDefault(AutoCSer.ORM.Query{`1},AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.SingleOrDefault``1(AutoCSer.ORM.Query{`1},AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            判断是否存在表格记录（设置查询列为表格主键）
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Query(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Query(AutoCSer.ORM.Query{`1},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Query``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Query``1(AutoCSer.ORM.Query{`1},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.QueryCast``1(System.Func{`1,``0},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="getValue">数据转换委托</param>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.QueryCast``1(AutoCSer.ORM.Query{`1},System.Func{`1,``0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="query"></param>
            <param name="getValue">数据转换委托</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.QueryCast``2(System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="getValue">数据转换委托</param>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.QueryCast``2(AutoCSer.ORM.Query{`1},System.Func{``0,``1},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="query"></param>
            <param name="getValue">数据转换委托</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Select(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Select(AutoCSer.ORM.Query{`1},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Select``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Select``1(AutoCSer.ORM.Query{`1},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据数量
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Sum``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Int32,``0,AutoCSer.ORM.Transaction)">
            <summary>
            查询字段求和结果
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member">求和字段</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="defaultValue">查询失败返回的默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Max``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Int32,``0,AutoCSer.ORM.Transaction)">
            <summary>
            查询字段最大值
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member">取最大值字段</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="defaultValue">查询失败返回的默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.Min``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Int32,``0,AutoCSer.ORM.Transaction)">
            <summary>
            查询字段最小值
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member">取最小值字段</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="defaultValue">查询失败返回的默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.GetDictionary(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            获取表格关键字数据字典
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.GetDictionary(AutoCSer.ORM.Query{`1},AutoCSer.ORM.Transaction)">
            <summary>
            获取表格关键字数据字典
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.GetDictionary``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            获取表格关键字数据字典
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.GetDictionary``1(AutoCSer.ORM.Query{`1},AutoCSer.ORM.Transaction)">
            <summary>
            获取表格关键字数据字典
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateDictionaryCache(System.Action{System.Func{System.Threading.Tasks.Task}},System.Int32,System.Boolean)">
            <summary>
            根据数据库关键字创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <param name="appendQueue">添加队列任务</param>
            <param name="reserveCapacity">字典初始预留容器大小</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateDictionaryCache``1(System.Action{System.Func{System.Threading.Tasks.Task}},System.Int32,System.Boolean)">
            <summary>
            根据数据库关键字创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="reserveCapacity">字典初始预留容器大小</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateDictionaryCache``1(System.Action{System.Func{System.Threading.Tasks.Task}},System.Func{`1,``0},System.Int32,System.Boolean)">
            <summary>
            创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="CKT">缓存数据关键字类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="reserveCapacity">字典初始预留容器大小</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateDictionaryCache``2(System.Action{System.Func{System.Threading.Tasks.Task}},System.Func{`1,``1},System.Int32,System.Boolean)">
            <summary>
            创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="CKT">缓存数据关键字类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="reserveCapacity">字典初始预留容器大小</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateFragmentDictionaryCache(System.Action{System.Func{System.Threading.Tasks.Task}},System.Boolean)">
            <summary>
            根据数据库关键字创建 256 基分片 字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <param name="appendQueue">添加队列任务</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateFragmentDictionaryCache``1(System.Action{System.Func{System.Threading.Tasks.Task}},System.Boolean)">
            <summary>
            根据数据库关键字创建 256 基分片 字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateFragmentDictionaryCache``1(System.Action{System.Func{System.Threading.Tasks.Task}},System.Func{`1,``0},System.Boolean)">
            <summary>
            创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="CKT">缓存数据关键字类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateFragmentDictionaryCache``2(System.Action{System.Func{System.Threading.Tasks.Task}},System.Func{`1,``1},System.Boolean)">
            <summary>
            创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="CKT">缓存数据关键字类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateFifoPriorityQueueCache(System.Int32,System.Boolean)">
            <summary>
            根据数据库关键字创建先进先出队列缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <param name="capacity">字典容器大小</param>
            <param name="isClear">默认为 true 表示清理容器数据，否则可能会产生临时性的局部内存泄露</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateFifoPriorityQueueCache``1(System.Int32,System.Boolean)">
            <summary>
            根据数据库关键字创建先进先出队列缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <param name="capacity">字典容器大小</param>
            <param name="isClear">默认为 true 表示清理容器数据，否则可能会产生临时性的局部内存泄露</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateFifoPriorityQueueCache``1(System.Func{`1,``0},System.Func{``0,System.Threading.Tasks.Task{`0}},System.Int32,System.Boolean)">
            <summary>
            创建先进先出队列缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="CKT">缓存数据关键字类型</typeparam>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="getValue">从数据库获取数据委托</param>
            <param name="capacity">字典容器大小</param>
            <param name="isClear">默认为 true 表示清理容器数据，否则可能会产生临时性的局部内存泄露</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessQuery`3.CreateFifoPriorityQueueCache``2(System.Func{`1,``1},System.Func{``1,System.Threading.Tasks.Task{``0}},System.Int32,System.Boolean)">
            <summary>
            创建先进先出队列缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="CKT">缓存数据关键字类型</typeparam>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="getValue">从数据库获取数据委托</param>
            <param name="capacity">字典容器大小</param>
            <param name="isClear">默认为 true 表示清理容器数据，否则可能会产生临时性的局部内存泄露</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.BusinessTableEvent`2">
            <summary>
            业务表格模型表格操作事件
            </summary>
            <typeparam name="BT">业务表格模型类型</typeparam>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.BusinessTableEvent`2.tableEvent">
            <summary>
            业务表格模型表格操作事件接口
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.#ctor(AutoCSer.ORM.IBusinessTableEvent{`0,`1})">
            <summary>
            业务表格模型表格操作事件
            </summary>
            <param name="tableEvent">业务表格模型表格操作事件接口</param>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.BeforeInsert(`1)">
            <summary>
            添加数据之前检查数据
            </summary>
            <param name="value"></param>
            <returns>是否继续执行添加数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnInserted(`1)">
            <summary>
            非事务模式添加数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnInserted(`1,AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行添加数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnInsertedCommited(`1)">
            <summary>
            事务模式添加数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.BeforeUpdate(`1,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据之前检查操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns>是否继续执行更新数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnUpdated(`1,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            非事务模式更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnUpdated(`1,AutoCSer.Metadata.MemberMap{`1},AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnUpdatedCommited(`1,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            事务模式更新数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.BeforeDelete(`1)">
            <summary>
            删除数据之前检查数据
            </summary>
            <param name="value"></param>
            <returns>是否继续执行删除数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnDeleted(`1)">
            <summary>
            非事务模式删除数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnDeleted(`1,AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行删除数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.OnDeletedCommited(`1)">
            <summary>
            事务模式删除数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessTableEvent`2.CreatePersistence``1(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.ModelAttribute)">
            <summary>
            创建业务表格持久化
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <param name="connectionPool">数据库连接池</param>
            <param name="attribute">数据表格模型配置</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.IBusinessTableEvent`2">
            <summary>
            业务表格模型表格操作事件接口
            </summary>
            <typeparam name="BT">业务表格模型类型</typeparam>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.BeforeInsert(`0)">
            <summary>
            添加数据之前检查数据
            </summary>
            <param name="value"></param>
            <returns>是否继续执行添加数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnInserted(`0)">
            <summary>
            非事务模式添加数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnInserted(`0,AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行添加数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnInsertedCommited(`0)">
            <summary>
            事务模式添加数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.BeforeUpdate(`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据之前检查操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns>是否继续执行更新数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            非事务模式更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`1},AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnUpdatedCommited(`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            事务模式更新数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.BeforeDelete(`0)">
            <summary>
            删除数据之前检查数据
            </summary>
            <param name="value"></param>
            <returns>是否继续执行删除数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnDeleted(`0)">
            <summary>
            非事务模式删除数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnDeleted(`0,AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行删除数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.IBusinessTableEvent`2.OnDeletedCommited(`0)">
            <summary>
            事务模式删除数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.BusinessWriter`3">
            <summary>
            业务表格模型持久化写入
            </summary>
            <typeparam name="BT">业务表格模型类型</typeparam>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.BusinessWriter`3.writer">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.#ctor(AutoCSer.ORM.TableWriter{`1,`2})">
            <summary>
            业务表格模型持久化查询
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.AppendEvent(AutoCSer.ORM.BusinessTableEvent{`0,`1})">
            <summary>
            添加表格操作事件处理对象（表格增删改操作必须在队列中调用）
            </summary>
            <param name="tableEvent"></param>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.RemoveEvent(AutoCSer.ORM.BusinessTableEvent{`0,`1})">
            <summary>
            移除表格操作事件处理对象
            </summary>
            <param name="tableEvent"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.CreateIndex(System.String[],System.String,System.Boolean,System.Int32)">
            <summary>
            创建表格索引
            </summary>
            <param name="columnNames"></param>
            <param name="indexNameSuffix">索引名称后缀</param>
            <param name="isUnique">是否唯一索引</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <returns>指定的索引名称已经存在则返回 false</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Insert``1(``0,AutoCSer.ORM.Transaction)">
            <summary>
            添加表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Insert``1(System.Collections.Generic.IEnumerable{``0},AutoCSer.ORM.Transaction)">
            <summary>
            添加表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="values"></param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``1(``0,AutoCSer.Metadata.MemberMap{`1},AutoCSer.ORM.Transaction)">
            <summary>
            更新表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``1(AutoCSer.Metadata.MemberMapValue{`1,``0},AutoCSer.ORM.Transaction)">
            <summary>
            更新表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``1(System.Collections.Generic.IEnumerable{``0},AutoCSer.Metadata.MemberMap{`1},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            更新表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="values"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``1(``0,AutoCSer.Metadata.MemberMap{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``1(AutoCSer.Metadata.MemberMapValue{`1,``0},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``1(``0,AutoCSer.Metadata.MemberMap{`1},AutoCSer.ORM.QueryBuilder{`1},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``1(AutoCSer.Metadata.MemberMapValue{`1,``0},AutoCSer.ORM.QueryBuilder{`1},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``2(AutoCSer.ORM.ICachePersistence{`1,``0,``1},``0,AutoCSer.Metadata.MemberMap{`1},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据（缓存操作必须在队列中调用）
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CKT"></typeparam>
            <param name="cache"></param>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Update``2(AutoCSer.ORM.ICachePersistence{`1,``0,``1},AutoCSer.Metadata.MemberMapValue{`1,``0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据（缓存操作必须在队列中调用）
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CKT"></typeparam>
            <param name="cache"></param>
            <param name="value"></param>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete(`2,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <param name="primaryKey"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete``1(`2,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKey"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete``1(``0,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete(System.Collections.Generic.IEnumerable{`2},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <param name="primaryKeys"></param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete``1(System.Collections.Generic.IEnumerable{`2},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKeys"></param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="values"></param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete``1(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete(AutoCSer.ORM.QueryBuilder{`1},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete``1(AutoCSer.ORM.QueryBuilder{`1},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.BusinessWriter`3.Delete``2(AutoCSer.ORM.ICachePersistence{`1,``0,``1},``1,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存关键字删除数据（缓存操作必须在队列中调用）
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CKT"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.BusinessPersistence">
            <summary>
            业务表格持久化
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.BusinessPersistence.GetConstructors(System.Collections.Generic.Dictionary{AutoCSer.HashObject{System.Type},AutoCSer.KeyValue{System.Delegate,System.Type}},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            获取持久化表格模型类型构造函数
            </summary>
            <param name="constructors">构造函数集合</param>
            <param name="persistenceTypes">持久化数据信息类型集合</param>
        </member>
        <member name="M:AutoCSer.ORM.BusinessPersistence.BusinessConstructor``2">
            <summary>
            持久化表格模型类型构造函数
            </summary>
            <typeparam name="BT">业务表格模型类型</typeparam>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.BusinessPersistence`3">
            <summary>
            业务表格持久化
            </summary>
            <typeparam name="BT">业务表格模型类型</typeparam>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.BusinessPersistence`3.Query">
            <summary>
            业务表格模型持久化查询
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.BusinessPersistence`3.Writer">
            <summary>
            业务表格模型持久化写入
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.BusinessPersistence`3.#ctor(AutoCSer.ORM.TableQuery{`1,`2})">
            <summary>
            数据库表格持久化
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:AutoCSer.ORM.CacheTableEvent`1">
            <summary>
            时间缓存表格操作事件
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.CacheTableEvent`1.cache">
            <summary>
            事件缓存
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.#ctor(AutoCSer.ORM.EventCache{`0})">
            <summary>
            时间缓存表格操作事件
            </summary>
            <param name="cache">事件缓存</param>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.BeforeInsert(`0)">
            <summary>
            添加数据之前检查数据
            </summary>
            <param name="value"></param>
            <returns>是否继续执行添加数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnInserted(`0)">
            <summary>
            非事务模式添加数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnInserted(`0,AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行添加数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnInsertedCommited(`0)">
            <summary>
            事务模式添加数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.BeforeUpdate(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新数据之前检查操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns>是否继续执行更新数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            非事务模式更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnUpdatedCommited(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            事务模式更新数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.BeforeDelete(`0)">
            <summary>
            删除数据之前检查数据
            </summary>
            <param name="value"></param>
            <returns>是否继续执行删除数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnDeleted(`0)">
            <summary>
            非事务模式删除数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnDeleted(`0,AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行删除数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.CacheTableEvent`1.OnDeletedCommited(`0)">
            <summary>
            事务模式删除数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.DictionaryEventCache`3">
            <summary>
            字典事件缓存
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="KT">缓存关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.DictionaryEventCache`3.getKey">
            <summary>
            获取缓存关键字委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DictionaryEventCache`3.cache">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.DictionaryEventCache`3.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.DictionaryEventCache`3.Keys">
            <summary>
            获取所有缓存关键字（缓存操作必须在队列中调用）
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.DictionaryEventCache`3.Values">
            <summary>
            获取缓存数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.#ctor(AutoCSer.ORM.TableWriter{`0},System.Boolean,System.Action{System.Func{System.Threading.Tasks.Task}},System.Int32,System.Func{`0,`2})">
            <summary>
            字典事件缓存
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isEventAvailable">缓存对象是否事件可用</param>
            <param name="appendQueue">添加队列任务</param>
            <param name="capacity">字典初始容器大小</param>
            <param name="getKey">获取缓存关键字委托</param>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.#ctor(AutoCSer.ORM.TableWriter{`0,`2},System.Boolean,System.Action{System.Func{System.Threading.Tasks.Task}},System.Int32)">
            <summary>
            字典事件缓存
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isEventAvailable">缓存对象是否事件可用</param>
            <param name="appendQueue">添加队列任务</param>
            <param name="capacity">字典初始容器大小</param>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.Initialize">
            <summary>
            缓存数据初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.Get(`2,System.Boolean)">
            <summary>
            根据关键字获取缓存数据（缓存操作必须在队列中调用）
            </summary>
            <param name="key">缓存关键字</param>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <returns>没有找到缓存对象时返回 null</returns>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.getCacheValue(`0)">
            <summary>
            根据数据库操作数据获取缓存数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.insert(`1)">
            <summary>
            添加缓存数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.delete(`1)">
            <summary>
            删除缓存数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.AutoCSer#ORM#ICachePersistence{T,VT,KT}#Update(`1,AutoCSer.Metadata.MemberMap{`0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="isClone"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.AutoCSer#ORM#ICachePersistence{T,VT,KT}#Update(AutoCSer.Metadata.MemberMapValue{`0,`1},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据
            </summary>
            <param name="value"></param>
            <param name="isClone"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.DictionaryEventCache`3.AutoCSer#ORM#ICachePersistence{T,VT,KT}#Delete(`2,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除数据
            </summary>
            <param name="key"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.EventCache`1">
            <summary>
            事件缓存
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.EventCache`1.tableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.EventCache`1.TableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.EventCache`1.tableEvent">
            <summary>
            表格操作事件
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.EventCache`1.IsDispose">
            <summary>
            是否调用了释放资源操作
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.EventCache`1.isEventAvailable">
            <summary>
            缓存对象是否事件可用
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`1.#ctor(AutoCSer.ORM.TableWriter{`0},System.Boolean)">
            <summary>
            事件缓存
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isEventAvailable">缓存对象是否事件可用</param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`1.OnInserted(`0)">
            <summary>
            添加数据之后的操作
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`1.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`1.OnDeleted(`0)">
            <summary>
            删除数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.EventCache`2">
            <summary>
            事件缓存
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="VT">缓存数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.EventCache`2.AppendQueue">
            <summary>
            添加队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.EventCache`2.events">
            <summary>
            缓存事件集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.EventCache`2.callbackFlow">
            <summary>
            当前缓存数据同步回调流
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.EventCache`2.Count">
            <summary>
            获取缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.EventCache`2.Values">
            <summary>
            获取缓存数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.#ctor(AutoCSer.ORM.TableWriter{`0},System.Boolean,System.Action{System.Func{System.Threading.Tasks.Task}})">
            <summary>
            事件缓存
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isEventAvailable">缓存对象是否事件可用</param>
            <param name="appendQueue">添加队列任务</param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.AppendEvent(AutoCSer.ORM.ICacheEvent{`0,`1})">
            <summary>
            添加缓存事件处理对象（缓存操作必须在队列中调用）
            </summary>
            <param name="cacheEvent"></param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.appendEvent(AutoCSer.ORM.ICacheEvent{`0,`1})">
            <summary>
            添加缓存事件处理对象
            </summary>
            <param name="cacheEvent"></param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.RemoveEvent(AutoCSer.ORM.ICacheEvent{`0,`1})">
            <summary>
            移除缓存事件处理对象（缓存操作必须在队列中调用）
            </summary>
            <param name="cacheEvent"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.getIndexOfEvent(AutoCSer.ORM.ICacheEvent{`0,`1})">
            <summary>
            获取缓存事件处理对象索引位置
            </summary>
            <param name="cacheEvent"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.getCacheValue(`0)">
            <summary>
            根据数据库操作数据获取缓存数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.OnInserted(`0)">
            <summary>
            添加数据之后的操作
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.insert(`1)">
            <summary>
            添加缓存数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.OnDeleted(`0)">
            <summary>
            删除数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.delete(`1)">
            <summary>
            删除缓存数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.GetValues(System.Boolean)">
            <summary>
            获取所有缓存数据（缓存操作必须在队列中调用）
            </summary>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.GetCacheArray">
            <summary>
            缓存数据转数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.CreateCallbackFlow(AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.ORM.Cache.Synchronous.CallbackValue{`0}})">
            <summary>
            创建缓存数据同步回调流（缓存操作必须在队列中调用）
            </summary>
            <param name="callback">缓存数据回调委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.EventCache`2.NextCallbackFlow(System.Boolean)">
            <summary>
            启动下一个缓存数据同步回调流
            </summary>
            <param name="isRemove">是否移除当前缓存数据同步回调流</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.FifoPriorityQueueCache`3">
            <summary>
            先进先出队列缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.FifoPriorityQueueCache`3.getValue">
            <summary>
            从数据库获取数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.FifoPriorityQueueCache`3.getKey">
            <summary>
            获取缓存关键字委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.FifoPriorityQueueCache`3.cache">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.FifoPriorityQueueCache`3.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.FifoPriorityQueueCache`3.Keys">
            <summary>
            获取所有缓存关键字
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.FifoPriorityQueueCache`3.capacity">
            <summary>
            字典容器大小
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.FifoPriorityQueueCache`3.#ctor(AutoCSer.ORM.TableWriter{`0},System.Int32,System.Boolean,System.Func{`0,`2},System.Func{`2,System.Threading.Tasks.Task{`1}})">
            <summary>
            先进先出队列缓存
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="capacity">字典容器大小</param>
            <param name="isClear">是否需要清除数据</param>
            <param name="getKey">获取缓存关键字委托</param>
            <param name="getValue">从数据库获取数据委托</param>
        </member>
        <member name="M:AutoCSer.ORM.FifoPriorityQueueCache`3.#ctor(AutoCSer.ORM.TableWriter{`0,`2},System.Int32,System.Boolean)">
            <summary>
            先进先出队列缓存
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="capacity">字典容器大小</param>
            <param name="isClear">是否需要清除数据</param>
        </member>
        <member name="M:AutoCSer.ORM.FifoPriorityQueueCache`3.GetValues(System.Boolean)">
            <summary>
            获取所有缓存数据
            </summary>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.FifoPriorityQueueCache`3.Get(`2,System.Boolean)">
            <summary>
            根据关键字获取缓存数据（缓存操作必须在队列中调用）
            </summary>
            <param name="key">缓存关键字</param>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.FifoPriorityQueueCache`3.OnInserted(`0)">
            <summary>
            添加数据之后的操作
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.FifoPriorityQueueCache`3.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.FifoPriorityQueueCache`3.OnDeleted(`0)">
            <summary>
            删除数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.FragmentDictionaryEventCache`3">
            <summary>
            256 基分片 字典事件缓存
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="KT">缓存关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.FragmentDictionaryEventCache`3.getKey">
            <summary>
            获取缓存关键字委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.FragmentDictionaryEventCache`3.cache">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.FragmentDictionaryEventCache`3.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.FragmentDictionaryEventCache`3.Keys">
            <summary>
            获取所有缓存关键字（缓存操作必须在队列中调用）
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.FragmentDictionaryEventCache`3.Values">
            <summary>
            获取缓存数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.#ctor(AutoCSer.ORM.TableWriter{`0},System.Boolean,System.Action{System.Func{System.Threading.Tasks.Task}},System.Func{`0,`2})">
            <summary>
            256 基分片 字典事件缓存
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isEventAvailable">缓存对象是否事件可用</param>
            <param name="appendQueue">添加队列任务</param>
            <param name="getKey">获取缓存关键字委托</param>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.#ctor(AutoCSer.ORM.TableWriter{`0,`2},System.Boolean,System.Action{System.Func{System.Threading.Tasks.Task}})">
            <summary>
            256 基分片 字典事件缓存
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isEventAvailable">缓存对象是否事件可用</param>
            <param name="appendQueue">添加队列任务</param>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.Initialize">
            <summary>
            缓存数据初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.Get(`2,System.Boolean)">
            <summary>
            根据关键字获取缓存数据（缓存操作必须在队列中调用）
            </summary>
            <param name="key">缓存关键字</param>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <returns>没有找到缓存对象时返回 null</returns>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.getCacheValue(`0)">
            <summary>
            根据数据库操作数据获取缓存数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.insert(`1)">
            <summary>
            添加缓存数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.delete(`1)">
            <summary>
            删除缓存数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.AutoCSer#ORM#ICachePersistence{T,VT,KT}#Update(`1,AutoCSer.Metadata.MemberMap{`0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据（缓存操作必须在队列中调用）
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="isClone"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.AutoCSer#ORM#ICachePersistence{T,VT,KT}#Update(AutoCSer.Metadata.MemberMapValue{`0,`1},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据
            </summary>
            <param name="value"></param>
            <param name="isClone"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.FragmentDictionaryEventCache`3.AutoCSer#ORM#ICachePersistence{T,VT,KT}#Delete(`2,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除数据（缓存操作必须在队列中调用）
            </summary>
            <param name="key"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.ICacheEvent`2">
            <summary>
            缓存事件
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="VT">缓存数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.ORM.ICacheEvent`2.OnInserted(`1)">
            <summary>
            添加事件缓存数据之后的操作
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ICacheEvent`2.BeforeUpdate(`1,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新事件缓存数据之前的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.ICacheEvent`2.OnUpdated(`1,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新事件缓存数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.ICacheEvent`2.OnDeleted(`1)">
            <summary>
            删除事件数据之后的操作
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.ORM.ICachePersistence`3">
            <summary>
            持久化缓存
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.ORM.ICachePersistence`3.Update(`1,AutoCSer.Metadata.MemberMap{`0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="isClone"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ICachePersistence`3.Update(AutoCSer.Metadata.MemberMapValue{`0,`1},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据
            </summary>
            <param name="value"></param>
            <param name="isClone"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ICachePersistence`3.Delete(`2,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除缓存数据
            </summary>
            <param name="key"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2">
            <summary>
            缓存数据同步回调流
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="VT">缓存数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.callback">
            <summary>
            缓存数据回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.cache">
            <summary>
            事件缓存
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.checkQueueHandle">
            <summary>
            检查队列数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.queueHead">
            <summary>
            等待传输的新数据队列首节点
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.queueEnd">
            <summary>
            等待传输的新数据队列尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.Next">
            <summary>
            下一个等待处理的缓存数据同步回调流
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.synchronousTask">
            <summary>
            是否已经启动同步任务
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.#ctor(AutoCSer.ORM.EventCache{`0,`1},AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.ORM.Cache.Synchronous.CallbackValue{`0}})">
            <summary>
            缓存数据同步回调流
            </summary>
            <param name="cache"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.GetNext">
            <summary>
            获取下一个等待处理的缓存数据同步回调流
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.Start">
            <summary>
            启动缓存数据同步
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.StartError">
            <summary>
            启动错误处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.synchronous(`0[])">
            <summary>
            同步初始缓存数据
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.checkQueue">
            <summary>
            检查队列数据委托
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.synchronous(AutoCSer.ORM.Cache.Synchronous.CallbackValueLinkNode{`0})">
            <summary>
            同步新操作数据
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.append(`1,AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum)">
            <summary>
            添加新操作数据
            </summary>
            <param name="value"></param>
            <param name="operationType"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.OnInserted(`1)">
            <summary>
            添加事件缓存数据之后的操作
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.BeforeUpdate(`1,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新事件缓存数据之前的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.OnUpdated(`1,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新事件缓存数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackFlow`2.OnDeleted(`1)">
            <summary>
            删除事件数据之后的操作
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.ORM.Cache.Synchronous.CallbackValue`1">
            <summary>
            缓存数据同步回调数据
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackValue`1.Value">
            <summary>
            同步数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackValue`1.OperationType">
            <summary>
            同步操作类型
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackValue`1.#ctor(`0,AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum)">
            <summary>
            缓存数据同步回调数据
            </summary>
            <param name="value"></param>
            <param name="operationType"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackValue`1.#ctor(AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum)">
            <summary>
            缓存数据同步回调数据
            </summary>
            <param name="operationType"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackValue`1.Set(`0,AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum)">
            <summary>
            设置缓存数据同步回调数据
            </summary>
            <param name="value"></param>
            <param name="operationType"></param>
        </member>
        <member name="T:AutoCSer.ORM.Cache.Synchronous.CallbackValueLinkNode`1">
            <summary>
            缓存数据同步回调数据节点
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CallbackValueLinkNode`1.Value">
            <summary>
            缓存数据同步回调数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackValueLinkNode`1.#ctor(`0,AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum)">
            <summary>
            缓存数据同步回调数据节点
            </summary>
            <param name="value"></param>
            <param name="operationType"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CallbackValueLinkNode`1.#ctor(AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum)">
            <summary>
            缓存数据同步回调数据节点
            </summary>
            <param name="operationType"></param>
        </member>
        <member name="T:AutoCSer.ORM.Cache.Synchronous.CacheClient`1">
            <summary>
            缓存数据同步客户端
            </summary>
            <typeparam name="T">客户端缓存对象类型</typeparam>
        </member>
        <member name="P:AutoCSer.ORM.Cache.Synchronous.CacheClient`1.Cache">
            <summary>
            当前客户端缓存对象
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CacheClient`1.createCache">
            <summary>
            创建中的缓存
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CacheClient`1.Loaded(`0)">
            <summary>
            缓存数据初始化传输完毕
            </summary>
            <param name="cache"></param>
        </member>
        <member name="T:AutoCSer.ORM.Cache.Synchronous.CacheClient`3">
            <summary>
            缓存数据同步客户端
            </summary>
            <typeparam name="CT">客户端缓存对象类型</typeparam>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">缓存关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CacheClient`3.GetCache">
            <summary>
            获取缓存数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CacheClient`3.GetKey">
            <summary>
            获取缓存关键字委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.CacheClient`3.createClientCache">
            <summary>
            创建客户端缓存对象委托
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CacheClient`3.#ctor(System.Func{System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.ORM.Cache.Synchronous.CallbackValue{`1}},AutoCSer.Net.KeepCallbackCommand},AutoCSer.Net.KeepCallbackCommand},System.Func{`1,`2},System.Func{AutoCSer.ORM.Cache.Synchronous.CacheClient{`0,`1,`2},`0})">
            <summary>
            缓存数据同步客户端
            </summary>
            <param name="getCache">获取缓存数据委托</param>
            <param name="getKey">获取缓存数据委托</param>
            <param name="createClientCache">创建客户端缓存对象委托</param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.CacheClient`3.Create">
            <summary>
            重新创建客户端缓存对象
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2">
            <summary>
            缓存数据同步客户端关键字缓存
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">缓存关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.client">
            <summary>
            缓存数据同步客户端
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.cache">
            <summary>
            客户端字典缓存
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.Keys">
            <summary>
            获取关键字集合
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.Values">
            <summary>
            获取缓存数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.Item(`1)">
            <summary>
            根据关键字获取缓存数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.keepCallbackCommand">
            <summary>
            当前命令
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.exceptionCount">
            <summary>
            获取缓存异常次数
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.#ctor(AutoCSer.ORM.Cache.Synchronous.CacheClient{AutoCSer.ORM.Cache.Synchronous.DictionaryCache{`0,`1},`0,`1})">
            <summary>
            缓存数据同步客户端关键字缓存
            </summary>
            <param name="client">缓存数据同步客户端</param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.tryGetCache">
            <summary>
            尝试请求缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.callback(AutoCSer.Net.CommandClientReturnValue{AutoCSer.ORM.Cache.Synchronous.CallbackValue{`0}},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            缓存数据回调处理
            </summary>
            <param name="returnValue"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.createCache(AutoCSer.ORM.Cache.Synchronous.CacheClient{AutoCSer.ORM.Cache.Synchronous.DictionaryCache{`0,`1},`0,`1})">
            <summary>
            创建缓存数据同步客户端关键字缓存
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Cache.Synchronous.DictionaryCache`2.CreateClient(System.Func{System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.ORM.Cache.Synchronous.CallbackValue{`0}},AutoCSer.Net.KeepCallbackCommand},AutoCSer.Net.KeepCallbackCommand},System.Func{`0,`1})">
            <summary>
            创建缓存数据同步客户端
            </summary>
            <param name="getCache"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum">
            <summary>
            同步操作类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum.Unknown">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum.Cache">
            <summary>
            缓存数据传输
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum.Loaded">
            <summary>
            缓存数据初始化传输完毕
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum.Insert">
            <summary>
            添加数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum.Update">
            <summary>
            更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Cache.Synchronous.OperationTypeEnum.Delete">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.CombinationTemplateConfig">
            <summary>
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.ConditionExpressionConverter">
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
            <summary>
            条件表达式重组
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateULong(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareULong(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateDouble(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateLong(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateNotULong(System.Object)">
            <summary>
            计算器
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.ORM.ConditionExpressionConverter.Expression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.Type">
            <summary>
            表达式类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.NotSupportType">
            <summary>
            不支持的表达式类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.ExceptionType">
            <summary>
            空引用类型
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.ConditionExpressionConverter.LogicType">
            <summary>
            逻辑值类型
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            条件表达式重组
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.TryConvert(System.Linq.Expressions.Expression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.Convert(System.Linq.Expressions.Expression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.Convert">
            <summary>
            转换表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.getLogicType">
            <summary>
            获取逻辑值类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertOrElse">
            <summary>
            || 表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertAndAlso">
            <summary>
            AND 表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertNot">
            <summary>
            ! 表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertBinaryExpression">
            <summary>
            二元表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.getConstantEqualType(System.Linq.Expressions.Expression)">
            <summary>
            获取常量 == 比较结果类型
            </summary>
            <param name="leftExpression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertEqual(AutoCSer.ORM.ConditionExpressionConverter@)">
            <summary>
            == 表达式
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertNotEqual(AutoCSer.ORM.ConditionExpressionConverter@)">
            <summary>
            != 表达式
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.getConstantComparatorType(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            获取常量比较结果类型
            </summary>
            <param name="leftExpression"></param>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertGreaterThanOrEqual(AutoCSer.ORM.ConditionExpressionConverter@)">
            <summary>
            大于等于 表达式
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertGreaterThan(AutoCSer.ORM.ConditionExpressionConverter@)">
            <summary>
            大于 表达式
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertLessThan(AutoCSer.ORM.ConditionExpressionConverter@)">
            <summary>
            小于 表达式
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertLessThanOrEqual(AutoCSer.ORM.ConditionExpressionConverter@)">
            <summary>
            小于等于 表达式
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.getConstantCalculator(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            获取常量计算结果
            </summary>
            <param name="leftExpression"></param>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.getConstantCalculatorShift(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            获取常量计算结果
            </summary>
            <param name="leftExpression"></param>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertLeftShift(AutoCSer.ORM.ConditionExpressionConverter@)">
            <summary>
            左移 表达式
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertRightShift(AutoCSer.ORM.ConditionExpressionConverter@)">
            <summary>
            右移 表达式
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.checkMemberAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression@)">
            <summary>
            检查成员表达式
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.checkMemberAccessParameter(System.Linq.Expressions.MemberExpression)">
            <summary>
            判断成员表达式是否参数成员
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertMemberAccess">
            <summary>
            成员表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.unknown(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            未知表达式
            </summary>
            <param name="expression"></param>
            <param name="notSupportType"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertArrayLength">
            <summary>
            数组长度表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertArray(System.Linq.Expressions.ExpressionType)">
            <summary>
            转换为数组
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertArrayIndex">
            <summary>
            数组索引表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertCoalesce">
            <summary>
            ?? 表达式（isnull）
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertUnbox">
            <summary>
            拆箱表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertUnaryCalculator">
            <summary>
            单值计算表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertIsTrue">
            <summary>
            真值判断 表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertIsFalse">
            <summary>
            假值判断 表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertConvert(System.Linq.Expressions.UnaryExpression)">
            <summary>
            类型转换表达式
            </summary>
            <param name="unaryExpression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertEnum(System.Object,System.Type)">
            <summary>
            枚举转换整数
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertConditional">
            <summary>
            三元表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertCall">
            <summary>
            函数表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertCallIn(System.Boolean)">
            <summary>
            IN 表达式
            </summary>
            <param name="isNot"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.convertCallExists(System.Boolean)">
            <summary>
            EXISTS 表达式
            </summary>
            <param name="isNot"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.ConvertCall(System.Linq.Expressions.MethodCallExpression,System.Reflection.MethodInfo)">
            <summary>
            函数表达式
            </summary>
            <param name="methodCallExpression"></param>
            <param name="method"></param>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.constantTrue">
            <summary>
            常量真值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.constantFalse">
            <summary>
            常量假值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.comparators">
            <summary>
            常量比较器集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.calculators">
            <summary>
            常量计算器集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.unaryCalculators">
            <summary>
            常量计算器集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpressionConverter.notCalculators">
            <summary>
            常量计算器集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateLong(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateUInt(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateInt(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateUShort(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateShort(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateByte(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateSByte(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateChar(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareLong(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareUInt(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareInt(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareUShort(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareShort(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareByte(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareSByte(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareDouble(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareFloat(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareDecimal(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareDateTime(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.compareTimeSpan(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            比较器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateFloat(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateDecimal(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateUInt(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateInt(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateUShort(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateShort(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateByte(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateSByte(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateChar(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateDouble(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateFloat(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateDecimal(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>
            计算器
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateNotLong(System.Object)">
            <summary>
            计算器
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateNotUInt(System.Object)">
            <summary>
            计算器
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateNotInt(System.Object)">
            <summary>
            计算器
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateNotUShort(System.Object)">
            <summary>
            计算器
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateNotShort(System.Object)">
            <summary>
            计算器
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateNotByte(System.Object)">
            <summary>
            计算器
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConditionExpressionConverter.calculateNotSByte(System.Object)">
            <summary>
            计算器
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Member">
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
            <summary>
            字段成员
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Member.readLong(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readLongNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readLongObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readLongNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readLong(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readLongNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Member.DefaultAttribute">
            <summary>
            默认数据列自定义配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Member.MemberIndex">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Member.Attribute">
            <summary>
            数据库成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Member.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Member.CustomColumnAttribute">
            <summary>
            自定义数据列配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Member.NullableElementType">
            <summary>
            可空成员类型的基础类型，否则为成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Member.IsNullable">
            <summary>
            是否可空成员类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Member.ReaderDataType">
            <summary>
            数据库读取数据类型
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Member.GenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Member.StructGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Member.CustomColumnNames">
            <summary>
            自定义数据列名称集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Member.#ctor(AutoCSer.Metadata.MemberIndexInfo,AutoCSer.ORM.MemberAttribute,System.Boolean)">
            <summary>
            字段成员
            </summary>
            <param name="member">字段成员</param>
            <param name="attribute">数据库成员信息</param>
            <param name="isModel"></param>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetCustomColumnMemberNames(System.String,System.String)">
            <summary>
            递归获取自定义数据列所有表格列名称
            </summary>
            <param name="parentName"></param>
            <param name="nameConcatSplit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.ConcatMemberName(System.String,System.String)">
            <summary>
            连接列名称
            </summary>
            <param name="parentName"></param>
            <param name="nameConcatSplit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetCustomColumnMemberName(System.Linq.Expressions.MemberExpression,AutoCSer.LeftArray{System.Linq.Expressions.MemberExpression}@)">
            <summary>
            获取自定义列名称
            </summary>
            <param name="memberExpression"></param>
            <param name="memberExpressions"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetCustomColumnMemberName(System.Linq.Expressions.MemberExpression,AutoCSer.LeftArray{System.Linq.Expressions.MemberExpression}@,System.String,System.String)">
            <summary>
            获取自定义列名称
            </summary>
            <param name="memberExpression"></param>
            <param name="memberExpressions"></param>
            <param name="parentName"></param>
            <param name="nameConcatSplit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetCustomColumnMemberNameValues(System.Linq.Expressions.MemberExpression,AutoCSer.LeftArray{System.Linq.Expressions.MemberExpression}@,System.Object)">
            <summary>
            获取自定义列信息与数值
            </summary>
            <param name="memberExpression"></param>
            <param name="memberExpressions"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetCustomColumnMemberNameValues(System.Linq.Expressions.MemberExpression,AutoCSer.LeftArray{System.Linq.Expressions.MemberExpression}@,System.Object,System.String,System.String)">
            <summary>
            获取自定义列信息与数值
            </summary>
            <param name="memberExpression"></param>
            <param name="memberExpressions"></param>
            <param name="value"></param>
            <param name="parentName"></param>
            <param name="nameConcatSplit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeOffset(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeOffsetNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readTimeSpan(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readTimeSpanNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetReadMethod">
            <summary>
            获取读取数据访问信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.Get(AutoCSer.Metadata.FieldIndex[],AutoCSer.Metadata.PropertyIndex[],System.Boolean)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="properties"></param>
            <param name="isModel"></param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.get(System.Collections.Generic.IEnumerable{AutoCSer.Metadata.MemberIndexInfo},System.Collections.Generic.IEnumerable{AutoCSer.Metadata.MemberIndexInfo},System.Boolean,System.Int32)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="properties"></param>
            <param name="isModel"></param>
            <param name="memberCount"></param>
            <returns>字段成员集合</returns>
        </member>
        <member name="P:AutoCSer.ORM.Member.dataTypeSort">
            <summary>
            数据类型排序
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Member.stringSizeSort">
            <summary>
            字符串长度排序
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Member.Sort(AutoCSer.ORM.Member,AutoCSer.ORM.Member)">
            <summary>
            成员排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.ReadString(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取字符串
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.ReadJson``1(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取 JSON 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.JsonSerialize``1(``0)">
            <summary>
            JSON 序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeOffsetObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeOffsetNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readTimeSpanObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readTimeSpanNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetReadObjectMethod">
            <summary>
            获取读取数据访问信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.ReadStringObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取字符串
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetObjectType">
            <summary>
            获取数据库数据类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeOffset(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeOffsetNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readTimeSpan(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readTimeSpanNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetRemoteProxyReadMethod">
            <summary>
            获取读取数据访问信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.ReadRemoteProxyString(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取字符串
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.ReadRemoteProxyJson``1(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取 JSON 对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.GetConstantConvertMethod(System.Boolean@)">
            <summary>
            获取常量转换处理委托
            </summary>
            <param name="isObjectToString"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.ORM.Member.VerifyMethod">
            <summary>
            获取数据验证方法
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Member.verify(System.String)">
            <summary>
            字符串数据验证
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.Verify(AutoCSer.ORM.TableWriter,System.Int32,System.String)">
            <summary>
            字符串数据验证
            </summary>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.verify(System.DateTime)">
            <summary>
            时间数据验证
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.Verify(AutoCSer.ORM.TableWriter,System.Int32,System.DateTime)">
            <summary>
            时间数据验证
            </summary>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.Verify(AutoCSer.ORM.TableWriter,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            时间数据验证
            </summary>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.verify(System.Decimal)">
            <summary>
            小数数据验证
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.Verify(AutoCSer.ORM.TableWriter,System.Int32,System.Decimal)">
            <summary>
            时间数据验证
            </summary>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.Verify(AutoCSer.ORM.TableWriter,System.Int32,System.Nullable{System.Decimal})">
            <summary>
            时间数据验证
            </summary>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.ORM.Member.VerifyInterfaceMethod">
            <summary>
            获取自定义接口数据验证方法
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Member.RefIntType">
            <summary>
            int引用参数类型
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Member.readInt(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readIntNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readIntObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readIntNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readInt(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readIntNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readShort(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readShortNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readShortObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readShortNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readShort(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readShortNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readByte(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readByteNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readByteObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readByteNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readByte(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readByteNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readBool(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readBoolNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readBoolObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readBoolNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readBool(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readBoolNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTime(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTime(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDateTimeNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDecimal(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDecimalNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDecimalObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDecimalNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDecimal(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDecimalNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readGuid(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readGuidNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readGuidObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readGuidNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readGuid(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readGuidNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDouble(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDoubleNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDoubleObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDoubleNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDouble(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readDoubleNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readFloat(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readFloatNullable(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readFloatObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readFloatNullableObject(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readFloat(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Member.readFloatNullable(AutoCSer.ORM.RemoteProxy.DataValue[],System.Int32)">
            <summary>
            读取数据
            </summary>
            <param name="row"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.DataValue">
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
            <summary>
            数据值包装
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadLong">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadLongNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataValue.Bit128">
            <summary>
            整数数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataValue.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataValue.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataValue.isNull">
            <summary>
            是否空值
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.Set(System.Data.Common.DbDataReader,System.Int32,AutoCSer.ORM.RemoteProxy.DataType)">
            <summary>
            设置数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.Serialize(AutoCSer.Memory.UnmanagedStream)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.Deserialize(System.Byte,AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="dataType"></param>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readInt">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readLong">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readShort">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readByte">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readBool">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readDateTime">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readDateTimeOffset">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readTimeSpan">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readGuid">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readDecimal">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readDouble">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.readFloat">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadString">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadInt">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadIntNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadShort">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadShortNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadByte">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadByteNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadBool">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadBoolNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadDateTime">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadDateTimeNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadDateTimeOffset">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadDateTimeOffsetNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadTimeSpan">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadTimeSpanNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadDecimal">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadDecimalNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadGuid">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadGuidNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadDouble">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadDoubleNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadFloat">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataValue.ReadFloatNullable">
            <summary>
            读取数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.Bit128">
            <summary>
            数据 联合体
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Int">
            <summary>
            int
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.DateTime">
            <summary>
            时间值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.TimeSpan">
            <summary>
            时间值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Long">
            <summary>
            long
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Decimal">
            <summary>
            小数
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Byte">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Short">
            <summary>
            short
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Float">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Bit128.Double">
            <summary>
            双精度浮点数
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.Column">
            <summary>
            数据列描述
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Column.Name">
            <summary>
            数据列名称
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Column.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.Column.Set(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            设置数据
            </summary>
            <param name="reader"></param>
            <param name="index"></param>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.Column.dataTypes">
            <summary>
            数据类型转换集合
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.CustomColumnReader`1">
            <summary>
            读取自定义数据列
            </summary>
            <typeparam name="T">自定义数据列类型</typeparam>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.CustomColumnReader`1.ReaderDelegate">
            <summary>
            读取自定义数据列
            </summary>
            <param name="row">数据行</param>
            <param name="value">目标数据</param>
            <param name="columnIndexs">数据列索引集合</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.CustomColumnReader`1.reader">
            <summary>
            默认数据列设置
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.CustomColumnReader`1.Read(AutoCSer.ORM.RemoteProxy.DataValue[],`0@,System.Int32[],System.Int32@)">
            <summary>
            读取自定义数据列
            </summary>
            <param name="row"></param>
            <param name="value"></param>
            <param name="columnIndexs"></param>
            <param name="index"></param>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.DataRow">
            <summary>
            数据行
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataRow.Columns">
            <summary>
            数据列描述集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataRow.Row">
            <summary>
            行数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataRow.#ctor(System.Data.Common.DbDataReader,AutoCSer.ORM.RemoteProxy.Column[])">
            <summary>
            数据行
            </summary>
            <param name="reader"></param>
            <param name="columns"></param>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataRow.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#ORM#RemoteProxy#DataRow}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            二进制序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataRow.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#ORM#RemoteProxy#DataRow}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            二进制反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataRow.SingleOrDefault``1">
            <summary>
            客户端获取远程代理访问数据库结果 查询第一个数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataRow.Query``1(AutoCSer.Net.EnumeratorCommand{AutoCSer.ORM.RemoteProxy.DataRow},System.Int32)">
            <summary>
            客户端获取远程代理访问数据库结果 查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeratorCommand">RPC 远程代理访问命令</param>
            <param name="capacity">数组容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.DataRow.Select``1(AutoCSer.Net.EnumeratorCommand{AutoCSer.ORM.RemoteProxy.DataRow})">
            <summary>
            客户端获取远程代理访问数据库结果 查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeratorCommand">RPC 远程代理访问命令</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Int">
            <summary>
            int
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.DateTime">
            <summary>
            时间值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.TimeSpan">
            <summary>
            时间值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Long">
            <summary>
            long
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Decimal">
            <summary>
            小数
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Byte">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Short">
            <summary>
            short
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Float">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.DataType.Double">
            <summary>
            双精度浮点数
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.ModelReader`1">
            <summary>
            读取数据模型对象委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.ModelReader`1.Reader">
            <summary>
            读取数据模型对象委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.ModelReader`1.columnIndexs">
            <summary>
            数据列名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.ModelReader`1.columnIndexCache">
            <summary>
            数据列索引集合 临时缓存
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.ModelReader`1.GetColumnIndexCache(AutoCSer.ORM.RemoteProxy.Column[])">
            <summary>
            获取数据列索引集合
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.ModelReader`1.FreeColumnIndexCache(System.Int32[])">
            <summary>
            释放数据列索引集合
            </summary>
            <param name="indexs"></param>
        </member>
        <member name="T:AutoCSer.ORM.RemoteProxy.ModelSelectEnumerator`1">
            <summary>
            异步查询枚举器
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.ModelSelectEnumerator`1.enumeratorCommand">
            <summary>
            RPC 远程代理访问命令
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.RemoteProxy.ModelSelectEnumerator`1.columnIndexs">
            <summary>
            数据列索引集合
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.RemoteProxy.ModelSelectEnumerator`1.Current">
            <summary>
            当前读取数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.ModelSelectEnumerator`1.#ctor(AutoCSer.Net.EnumeratorCommand{AutoCSer.ORM.RemoteProxy.DataRow})">
            <summary>
            异步查询枚举器
            </summary>
            <param name="enumeratorCommand"></param>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.ModelSelectEnumerator`1.System#Collections#Generic#IAsyncEnumerator{T}#MoveNextAsync">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.RemoteProxy.ModelSelectEnumerator`1.DisposeAsync">
            <summary>
            释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumn.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.Date.Value">
            <summary>
            日期值
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.CustomColumn.Date.Year">
            <summary>
            年份
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.CustomColumn.Date.Month">
            <summary>
            月份
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.CustomColumn.Date.Day">
            <summary>
            日期天数
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.Date.op_Implicit(System.DateTime)~AutoCSer.ORM.CustomColumn.Date">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.Date.Verify">
            <summary>
            自定义验证，验证失败需要抛出异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.Date.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#ORM#CustomColumn#Date}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            二进制序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.Date.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#ORM#CustomColumn#Date}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            二进制反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.Date.AutoCSer#Json#ICustomSerialize{AutoCSer#ORM#CustomColumn#Date}#Serialize(AutoCSer.JsonSerializer)">
            <summary>
            JSON 序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.Date.AutoCSer#Json#ICustomSerialize{AutoCSer#ORM#CustomColumn#Date}#Deserialize(AutoCSer.JsonDeserializer)">
            <summary>
            JSON 反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumn.ModelReader`1">
            <summary>
            读取自定义数据列
            </summary>
            <typeparam name="T">自定义数据列类型</typeparam>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumn.ModelReader`1.ReaderDelegate">
            <summary>
            读取自定义数据列
            </summary>
            <param name="reader">字段读取器物理存储</param>
            <param name="value">目标数据</param>
            <param name="columnIndexs">数据列索引集合</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.ModelReader`1.reader">
            <summary>
            默认数据列设置
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.ModelReader`1.Read(System.Data.Common.DbDataReader,`0@,System.Int32[],System.Int32@)">
            <summary>
            读取自定义数据列
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
            <param name="columnIndexs"></param>
            <param name="index"></param>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumn.ToArray`1">
            <summary>
            自定义数据列值转数组
            </summary>
            <typeparam name="T">自定义数据列类型</typeparam>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumn.ToArray`1.Writer">
            <summary>
            自定义数据列值转数组
            </summary>
            <param name="value">目标数据</param>
            <param name="array">数据列储存数组</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.ToArray`1.writer">
            <summary>
            自定义数据列值转数组
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.ToArray`1.Write(`0,System.Object[],System.Int32@)">
            <summary>
            自定义数据列值转数组
            </summary>
            <param name="value"></param>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumn.ModelMetadata`1">
            <summary>
            自定义数据列模型元数据
            </summary>
            <typeparam name="T">自定义数据列类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.ModelMetadata`1.Attribute">
            <summary>
            自定义数据列配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.ModelMetadata`1.Members">
            <summary>
            字段成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.ModelMetadata`1.MemberCount">
            <summary>
            字段总数
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.ModelMetadata`1.GetMemberNames(System.String,System.String)">
            <summary>
            递归获取所有数据列名称
            </summary>
            <param name="parentName"></param>
            <param name="nameConcatSplit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.ModelMetadata`1.GetMemberName(System.Linq.Expressions.MemberExpression,AutoCSer.LeftArray{System.Linq.Expressions.MemberExpression},System.String,System.String)">
            <summary>
            获取自定义列名称
            </summary>
            <param name="memberExpression"></param>
            <param name="memberExpressions"></param>
            <param name="parentName"></param>
            <param name="nameConcatSplit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.ModelMetadata`1.GetMemberNameValues(System.Linq.Expressions.MemberExpression,AutoCSer.LeftArray{System.Linq.Expressions.MemberExpression},System.Object,System.String,System.String)">
            <summary>
            递归匹配自定义数据列获取数值
            </summary>
            <param name="memberExpression"></param>
            <param name="memberExpressions"></param>
            <param name="value"></param>
            <param name="parentName"></param>
            <param name="nameConcatSplit"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumn.TableModel`1">
            <summary>
            自定义数据列委托
            </summary>
            <typeparam name="T">自定义数据列类型</typeparam>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumn.TableModel`1.ReaderDelegate">
            <summary>
            读取自定义数据列
            </summary>
            <param name="reader">字段读取器物理存储</param>
            <param name="value">目标数据</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.TableModel`1.read">
            <summary>
            默认数据列设置
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.TableModel`1.Read(System.Data.Common.DbDataReader,`0@,System.Int32@)">
            <summary>
            读取自定义数据列
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.TableModel`1.insert">
            <summary>
            写入表格模型数据委托
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.TableModel`1.Insert(AutoCSer.Memory.CharStream,`0,AutoCSer.ORM.TableWriter,System.Int32)">
            <summary>
            写入表格模型数据
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.TableModel`1.update">
            <summary>
            写入更新数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.TableModel`1.Update(AutoCSer.Memory.CharStream,`0,AutoCSer.ORM.TableWriter,System.Int32,System.Boolean)">
            <summary>
            写入更新数据
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="isFirst"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumn.TableModel`1.concatCondition">
            <summary>
            写入条件数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.TableModel`1.ConcatCondition(AutoCSer.Memory.CharStream,`0,AutoCSer.ORM.TableWriter,System.Int32,System.Boolean)">
            <summary>
            写入条件数据
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="isFirst"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.TableModel`1.write(System.Reflection.Emit.ILGenerator,AutoCSer.ORM.Member,System.Reflection.Emit.LocalBuilder)">
            <summary>
            写入列数据
            </summary>
            <param name="generator"></param>
            <param name="member"></param>
            <param name="connectionCreatorLocal"></param>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumn.TableModel`1.insertVerifyInterface(System.Reflection.Emit.ILGenerator,AutoCSer.ORM.Member)">
            <summary>
            写入表格模型数据验证接口调用
            </summary>
            <param name="generator"></param>
            <param name="member"></param>
        </member>
        <member name="T:AutoCSer.ORM.Excel.ConnectionInfo">
            <summary>
            Excel 连接信息
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ConnectionInfo.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ConnectionInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ConnectionInfo.Provider">
            <summary>
            数据接口属性，默认为 Ace12
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ConnectionInfo.Intermixed">
            <summary>
            混合数据处理方式，默认为 WriteAndRead
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ConnectionInfo.IsTitleColumn">
            <summary>
            默认为 true 表示第一行是列名
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Excel.ConnectionInfo.ToString">
            <summary>
            获取连接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ConnectionInfo.schemaTableName">
            <summary>
            表格名称
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Excel.ConnectionInfo.GetTableNames">
            <summary>
            获取表格名称集合
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ConnectionInfo.DefaultTableName">
            <summary>
            默认表格名称
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Excel.ConnectionInfo.GetFirstTableName(System.String)">
            <summary>
            获取指定表格名称，如果表格不存在返回第一个表格名称
            </summary>
            <param name="tableName">指定表格名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Excel.ConnectionInfo.getFirstTableName(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            获取指定表格名称，如果表格不存在返回第一个表格名称
            </summary>
            <param name="dbConnection"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Excel.ConnectionInfo.Query``1(System.String)">
            <summary>
            SQL 语句查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Excel.ConnectionInfo.query``1(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            SQL 语句查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbConnection"></param>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Excel.ConnectionInfo.QueryTable``1(System.String)">
            <summary>
            查询指定表格，如果表格不存在则查询第一个表格
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Excel.IntermixedEnum">
            <summary>
            混合数据处理方式
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.IntermixedEnum.Write">
            <summary>
            输出模式，此情况下只能用作写入Excel
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.IntermixedEnum.Read">
            <summary>
            输入模式，此情况下只能用作读取Excel，并且始终将Excel数据作为文本类型读取
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.IntermixedEnum.WriteAndRead">
            <summary>
            连接模式，此情况下既可用作写入、也可用作读取
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.Excel.ProviderEnum">
            <summary>
            Excel 接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ProviderEnum.Ace12">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Excel.ProviderEnum.Jet4">
            <summary>
            只能操作Excel2007之前的.xls文件
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.AutoIdentity">
            <summary>
            自增ID 记录表格
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AutoIdentity.TableName">
            <summary>
            表格名称
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AutoIdentity.Identity">
            <summary>
            当前最大自增ID
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.PrimaryKeyTypeEnum">
            <summary>
            关键字类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.PrimaryKeyTypeEnum.None">
            <summary>
            非关键字
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.PrimaryKeyTypeEnum.PrimaryKey">
            <summary>
            普通关键字，关键字必须实现 IEquatable{T} 接口
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.PrimaryKeyTypeEnum.AutoIdentity">
            <summary>
            自增ID，只支持 int 与 long（不是数据库特性，是程序逻辑自增，增删改操作必须在队列中调用）
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.Metadata.BaseGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.BaseGenericType.BusinessConstructorDelegate">
            <summary>
            持久化表格模型类型构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.BaseGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Metadata.BaseGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.BaseGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Metadata.BaseGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.Metadata.BaseGenericType`2.referenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.BaseGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.BaseGenericType`2.BusinessConstructorDelegate">
            <summary>
            持久化表格模型类型构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.Metadata.EnumGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType.GetConstantConverter(AutoCSer.ORM.ConnectionCreator)">
            <summary>
            获取常量转换处理委托
            </summary>
            <param name="connectionCreator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType.GetNullableConstantConverter(AutoCSer.ORM.ConnectionCreator)">
            <summary>
            获取常量转换处理委托
            </summary>
            <param name="connectionCreator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType.GetConstantConvertMethod">
            <summary>
            获取常量转换处理方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType.GetNullableConstantConvertMethod">
            <summary>
            获取常量转换处理委托方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Metadata.EnumGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Metadata.EnumGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.EnumGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType`2.GetConstantConverter(AutoCSer.ORM.ConnectionCreator)">
            <summary>
            获取常量转换处理委托
            </summary>
            <param name="connectionCreator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType`2.GetNullableConstantConverter(AutoCSer.ORM.ConnectionCreator)">
            <summary>
            获取常量转换处理委托
            </summary>
            <param name="connectionCreator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType`2.GetConstantConvertMethod">
            <summary>
            获取常量转换处理方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.EnumGenericType`2.GetNullableConstantConvertMethod">
            <summary>
            获取常量转换处理委托方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Metadata.GenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.GenericType.ReadJsonDelegate">
            <summary>
            读取 JSON 对象
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.GenericType.JsonSerializeDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.GenericType.ReadRemoteProxyJsonDelegate">
            <summary>
            读取 JSON 对象
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.GenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Metadata.GenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.GenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Metadata.GenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.GenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.GenericType`1.ReadJsonDelegate">
            <summary>
            读取 JSON 对象
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.GenericType`1.JsonSerializeDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.GenericType`1.ReadRemoteProxyJsonDelegate">
            <summary>
            读取 JSON 对象
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.Metadata.StructGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnAttribute">
            <summary>
            自定义数据列配置
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnTableReadDelegate">
            <summary>
            读取自定义数据列
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnTableInsertDelegate">
            <summary>
            写入表格模型数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnTableUpdateDelegate">
            <summary>
            写入更新数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnTableConcatConditionDelegate">
            <summary>
            写入条件数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnMemberCount">
            <summary>
            自定义数据列表格字段数量
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.GetCustomColumnMemberNames">
            <summary>
            递归获取自定义数据列所有表格列名称
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.GetCustomColumnMemberName">
            <summary>
            递归匹配自定义数据列名称
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.GetCustomColumnMemberNameValues">
            <summary>
            递归匹配自定义数据列获取数值
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnToArrayDelegate">
            <summary>
            自定义数据列值转数组
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnToArray(System.Object,System.Object[],System.Int32@)">
            <summary>
            自定义数据列值转数组
            </summary>
            <param name="value"></param>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.StructGenericType.IsNullableHasValue(System.Object)">
            <summary>
            判断可空类型是否存在数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.StructGenericType.GetNullableValue(System.Object)">
            <summary>
            获取可空类型数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnModelReaderDelegate">
            <summary>
            读取自定义数据列
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType.CustomColumnModelRemoteProxyReaderDelegate">
            <summary>
            读取自定义数据列
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.StructGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Metadata.StructGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.StructGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Metadata.StructGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnAttribute">
            <summary>
            自定义数据列配置
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnTableReadDelegate">
            <summary>
            读取自定义数据列
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnTableInsertDelegate">
            <summary>
            写入表格模型数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnTableUpdateDelegate">
            <summary>
            写入更新数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnTableConcatConditionDelegate">
            <summary>
            写入条件数据
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnMemberCount">
            <summary>
            自定义数据列表格字段数量
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.GetCustomColumnMemberNames">
            <summary>
            递归获取自定义数据列所有表格列名称
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.GetCustomColumnMemberName">
            <summary>
            递归匹配自定义数据列名称
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.GetCustomColumnMemberNameValues">
            <summary>
            递归匹配自定义数据列获取数值
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnToArrayDelegate">
            <summary>
            自定义数据列值转数组
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnToArray(System.Object,System.Object[],System.Int32@)">
            <summary>
            自定义数据列值转数组
            </summary>
            <param name="value"></param>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.StructGenericType`1.IsNullableHasValue(System.Object)">
            <summary>
            判断可空类型是否存在数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Metadata.StructGenericType`1.GetNullableValue(System.Object)">
            <summary>
            获取可空类型数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnModelReaderDelegate">
            <summary>
            读取自定义数据列
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Metadata.StructGenericType`1.CustomColumnModelRemoteProxyReaderDelegate">
            <summary>
            读取自定义数据列
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.MSSQL.ConnectionCreator2000">
            <summary>
            创建数据库连接（适合2005以下版本）
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator2000.#ctor(System.String)">
            <summary>
            创建数据库连接 MSSQL2000
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator2000.GetSelectTableColumnRemarkStatement(System.String)">
            <summary>
            获取表格列备注信息 SQL 语句
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.MSSQL.TableIndex">
            <summary>
            数据库表格索引
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableIndex.indid">
            <summary>
            索引编号
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.MSSQL.DecimalDigits">
            <summary>
            decimal 小数位数
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.DecimalDigits.xprec">
            <summary>
            decimal 有效位数
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.DecimalDigits.xscale">
            <summary>
            decimal 小数位数
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.MSSQL.DecimalDigits.Integer">
            <summary>
            整数位数
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.MSSQL.TableColumn">
            <summary>
            数据库表格列信息
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.colid">
            <summary>
            列编号
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.name">
            <summary>
            数据列名称
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.xusertype">
            <summary>
            数据库表格列类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.length">
            <summary>
            数据字节长度，NChar 与 NVarChar 要 /2
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.DecimalDigits">
            <summary>
            decimal 小数位数
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.isnullable">
            <summary>
            是否允许空值，1 表示允许空值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.isidentity">
            <summary>
            是否自增字段，1 表示自增
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.defaultvalue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumn.remark">
            <summary>
            备注说明
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.TableColumn.Match(AutoCSer.ORM.Member,AutoCSer.ORM.TableWriter)">
            <summary>
            成员信息匹配
            </summary>
            <param name="member"></param>
            <param name="tableWriter"></param>
        </member>
        <member name="T:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum">
            <summary>
            数据库表格列类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Text">
            <summary>
            ASCII 文本 string，尽量使用 varchar(max)
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.UniqueIdentifier">
            <summary>
            唯一标识符 Guid
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Date">
            <summary>
            日期 yyyy/MM/dd
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Time">
            <summary>
            时间 HH:mm:ss
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.DateTime2">
            <summary>
            高精度日期时间 DateTime yyyy/MM/dd HH:mm:ss.fffffff
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.DateTimeOffset">
            <summary>
            UTC 时间点 DateTimeOffset yyyy/MM/dd HH:mm:ss.fffffff
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.TinyInt">
            <summary>
            整数 byte
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.SmallInt">
            <summary>
            整数 short
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Int">
            <summary>
            整数 int
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.SmallDateTime">
            <summary>
            日期时间 DateTime 1900/1/1~2079/6/6
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Real">
            <summary>
            浮点数 float
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Money">
            <summary>
            货币 decimal
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.DateTime">
            <summary>
            日期时间 DateTime 1753/1/1~9999/12/31 DateTime yyyy/MM/dd HH:mm:ss.fff
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Float">
            <summary>
            浮点数 double
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.NText">
            <summary>
            文本 string，尽量使用 nvarchar(max)
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Bit">
            <summary>
            逻辑值 bool
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Decimal">
            <summary>
            小数 decimal
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.SmallMoney">
            <summary>
            货币 decimal
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.BigInt">
            <summary>
            整数 long
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.VarChar">
            <summary>
            ASCII 字符串 string，最大长度 8000，varchar(max) 则不受限制
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.Char">
            <summary>
            ASCII 字符串 string，最大长度 8000
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.NVarChar">
            <summary>
            字符串 string，最大长度 4000，nvarchar(max) 则不受限制
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableColumnDbTypeEnum.NChar">
            <summary>
            字符串 string，最大长度 4000
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.MSSQL.TableIndexColumn">
            <summary>
            数据库表格索引列
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableIndexColumn.indid">
            <summary>
            索引编号
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableIndexColumn.colid">
            <summary>
            列编号
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableIndexColumn.status">
            <summary>
            索引类型
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.TableIndexColumn.MatchPrimaryKey(AutoCSer.ORM.Member,AutoCSer.LeftArray{AutoCSer.ORM.MSSQL.TableIndexColumn}@,System.Collections.Generic.Dictionary{System.Int16,AutoCSer.ORM.MSSQL.TableColumn})">
            <summary>
            匹配关键字
            </summary>
            <param name="primaryKey"></param>
            <param name="indexs"></param>
            <param name="columnIDs"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.MSSQL.TableIndexStateEnum">
            <summary>
            索引类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableIndexStateEnum.Unique">
            <summary>
            唯一索引
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableIndexStateEnum.Clustered">
            <summary>
            聚簇索引
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableIndexStateEnum.PrimaryKeyConstraint">
            <summary>
            强制主键约束索引
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.TableIndexStateEnum.UniqueConstraint">
            <summary>
            强制唯一约束索引
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.MSSQL.ConnectionCreator">
            <summary>
            创建数据库连接（适合2005以及以上版本）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.ConnectionCreator.connectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.#ctor(System.String)">
            <summary>
            创建数据库连接
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.CreateConnection">
            <summary>
            创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.FormatName(System.String)">
            <summary>
            名称格式化
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.FormatName(AutoCSer.Memory.CharStream,System.String)">
            <summary>
            名称格式化
            </summary>
            <param name="charStream"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.GetSelectTableColumnRemarkStatement(System.String)">
            <summary>
            获取表格列备注信息 SQL 语句
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.AutoCreateTable(AutoCSer.ORM.TableWriter)">
            <summary>
            自动创建数据库表格
            </summary>
            <param name="tableWriter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.createTable(AutoCSer.ORM.TableWriter)">
            <summary>
            创建表格
            </summary>
            <param name="tableWriter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.appendColumn(AutoCSer.Memory.CharStream,AutoCSer.ORM.CustomColumnName,System.Boolean)">
            <summary>
            写入列信息
            </summary>
            <param name="charStream">SQL语句流</param>
            <param name="name"></param>
            <param name="isCreateTable"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.appendRemark(AutoCSer.Memory.CharStream,System.String,AutoCSer.ORM.CustomColumnName)">
            <summary>
            写入备注信息
            </summary>
            <param name="charStream"></param>
            <param name="tableName"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.createColumn(AutoCSer.ORM.TableWriter,AutoCSer.LeftArray{AutoCSer.ORM.CustomColumnName})">
            <summary>
            自动补全创建数据列
            </summary>
            <param name="tableWriter"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.createPrimaryKey(AutoCSer.ORM.TableWriter)">
            <summary>
            自动不全创建主键
            </summary>
            <param name="tableWriter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.CreateIndex(AutoCSer.ORM.TableWriter,AutoCSer.ORM.CustomColumnName[],System.String,System.Boolean,System.Int32)">
            <summary>
            创建表格索引
            </summary>
            <param name="tableWriter"></param>
            <param name="columns"></param>
            <param name="indexNameSuffix"></param>
            <param name="isUnique"></param>
            <param name="timeoutSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.GetQueryStatement``1(AutoCSer.ORM.QueryBuilder{``0},AutoCSer.Metadata.MemberMap{``0},System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="memberMap"></param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="skipCount">跳过记录数量</param>
            <param name="isSubQuery">如果是子查询则在前后增加小括号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.GetQueryStatement``1(AutoCSer.ORM.QueryBuilder{``0},AutoCSer.Metadata.MemberMap{``0},System.UInt32,System.UInt64,AutoCSer.Memory.CharStream)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="memberMap"></param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="skipCount">跳过记录数量</param>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.GetQueryStatement``1(AutoCSer.ORM.QueryBuilder{``0},AutoCSer.ORM.ExtensionQueryData@,System.UInt32,System.Boolean)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="extensionQueryData"></param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="isSubQuery">如果是子查询则在前后增加小括号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.GetQueryStatement``1(AutoCSer.ORM.QueryBuilder{``0},AutoCSer.ORM.ExtensionQueryData@,System.UInt32,AutoCSer.Memory.CharStream)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="extensionQueryData"></param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.writeColumnName``1(AutoCSer.Memory.CharStream,AutoCSer.ORM.TableWriter,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            写入查询列名称集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="tableWriter"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.writeConcatName(AutoCSer.Memory.CharStream,AutoCSer.ORM.Member)">
            <summary>
            写入数据列名称
            </summary>
            <param name="charStream"></param>
            <param name="member"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.writeWithLock(AutoCSer.Memory.CharStream,AutoCSer.ORM.QueryBuilder)">
            <summary>
            写入 WITH LOCK 表达式
            </summary>
            <param name="charStream"></param>
            <param name="query"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.wirteWhere(AutoCSer.Memory.CharStream,AutoCSer.ORM.QueryBuilder)">
            <summary>
            写入 WHERE 表达式
            </summary>
            <param name="charStream"></param>
            <param name="query"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.writeOrder(AutoCSer.Memory.CharStream,AutoCSer.ORM.QueryBuilder)">
            <summary>
            写入 ORDER BY 子表达式
            </summary>
            <param name="charStream"></param>
            <param name="query"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.write(AutoCSer.Memory.CharStream,AutoCSer.ORM.OrderItem)">
            <summary>
            写入 ORDER BY 子项
            </summary>
            <param name="charStream"></param>
            <param name="orderItem"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.writeConcat(AutoCSer.Memory.CharStream,AutoCSer.LeftArray{System.String}@)">
            <summary>
            写入字符串集合
            </summary>
            <param name="charStream"></param>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.writeConcatCondition(AutoCSer.Memory.CharStream,AutoCSer.LeftArray{System.String}@)">
            <summary>
            写入条件字符串集合
            </summary>
            <param name="charStream"></param>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.String)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.ConvertLike(AutoCSer.Memory.CharStream,System.String,System.Boolean,System.Boolean)">
            <summary>
            LIKE 字符串转义
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <param name="isStart"></param>
            <param name="isEnd"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.GetInsertStatement``1(AutoCSer.ORM.TableWriter{``0},``0)">
            <summary>
            获取添加数据 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableWriter"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.writeColumnName(AutoCSer.Memory.CharStream,AutoCSer.ORM.TableWriter)">
            <summary>
            写入所有列名称集合
            </summary>
            <param name="charStream"></param>
            <param name="tableWriter"></param>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.GetUpdateStatement``1(AutoCSer.ORM.QueryBuilder{``0},``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            获取更新数据 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.GetDeleteStatement(AutoCSer.ORM.QueryBuilder)">
            <summary>
            获取删除数据 SQL 语句
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.Import``1(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.TableWriter{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            导入数据
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <param name="connectionPool"></param>
            <param name="tableWriter"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.MSSQL.ConnectionCreator.versionRegex">
            <summary>
            SQL Server 版本正则
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.Create(System.String)">
            <summary>
            根据 SQL Server 版本创建数据库连接
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.MSSQL.ConnectionCreator.CreateConnectionPool(System.String,System.String)">
            <summary>
            根据 SQL Server 版本创建数据库连接池
            </summary>
            <param name="connectionString"></param>
            <param name="autoIdentityTableName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.AssociatedTableExistsCondition`3">
            <summary>
            模拟关联表格 EXISTS 查询条件
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTableExistsCondition`3.associatedTable">
            <summary>
            模拟关联表格
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.AssociatedTableExistsCondition`3.isLeft">
            <summary>
            是否子表格 EXISTS 查询条件
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTableExistsCondition`3.#ctor(AutoCSer.ORM.AssociatedTable{`0,`1,`2},System.Boolean)">
            <summary>
            模拟关联表格 EXISTS 查询条件
            </summary>
            <param name="associatedTable"></param>
            <param name="isLeft"></param>
        </member>
        <member name="M:AutoCSer.ORM.AssociatedTableExistsCondition`3.AutoCSer#ORM#ICondition#WriteCondition(AutoCSer.Memory.CharStream)">
            <summary>
            写入条件
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="T:AutoCSer.ORM.ExpressionCondition`1">
            <summary>
            表达式条件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCondition`1.tableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCondition`1.expression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionCondition`1.#ctor(AutoCSer.ORM.TableWriter{`0},System.Linq.Expressions.Expression)">
            <summary>
            表达式条件
            </summary>
            <param name="tableWriter"></param>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionCondition`1.AutoCSer#ORM#ICondition#WriteCondition(AutoCSer.Memory.CharStream)">
            <summary>
            写入条件
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="T:AutoCSer.ORM.ICondition">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ICondition.WriteCondition(AutoCSer.Memory.CharStream)">
            <summary>
            写入条件
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="T:AutoCSer.ORM.OnJoinQuery`3">
            <summary>
            被连接模拟查询信息 
            </summary>
            <typeparam name="LT">连接数据类型</typeparam>
            <typeparam name="RT">被连接表格模型类型</typeparam>
            <typeparam name="KT">连接关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.OnJoinQuery`3.Query">
            <summary>
            SQL 查询创建器
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.OnJoinQuery`3.associatedTable">
            <summary>
            模拟关联表格
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.OnJoinQuery`3.leftValues">
            <summary>
            连接数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.OnJoinQuery`3.keyCount">
            <summary>
            查询关键字数量
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.OnJoinQuery`3.#ctor(AutoCSer.ORM.AssociatedTable{`0,`1,`2},AutoCSer.ORM.QueryBuilder{`1},System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            被连接模拟查询信息
            </summary>
            <param name="associatedTable">模拟关联表格</param>
            <param name="query">SQL 查询创建器</param>
            <param name="leftValues">连接数据集合</param>
            <param name="keyCount">查询关键字数量</param>
        </member>
        <member name="M:AutoCSer.ORM.OnJoinQuery`3.OnJoin``1(System.Func{`1,`2},System.Action{`0,``0},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            模拟被连接操作
            </summary>
            <typeparam name="VT">被连接数据类型</typeparam>
            <param name="getJoinKey">获取被连接数据关键字委托</param>
            <param name="join">设置查询数据结果连接操作</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.OnJoinQuery`3.OnJoin``1(System.Func{`1,`2},System.Action{`0,System.Collections.Generic.List{``0}},System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            模拟被连接操作
            </summary>
            <typeparam name="VT">被连接数据类型</typeparam>
            <param name="getJoinKey">获取被连接数据关键字委托</param>
            <param name="join">设置查询数据结果连接操作</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.TablePersistence`2">
            <summary>
            数据库表格持久化
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.TablePersistence`2.Query">
            <summary>
            数据库表格持久化查询
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TablePersistence`2.Writer">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TablePersistence`2.#ctor(AutoCSer.ORM.TableQuery{`0,`1})">
            <summary>
            数据库表格持久化
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:AutoCSer.ORM.ValueResult`1">
            <summary>
            单值查询结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.ValueResult`1.Value">
            <summary>
            记录总数
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumnName">
            <summary>
            自定义数据列名称
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumnName.Member">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumnName.Name">
            <summary>
            数据列名称
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumnName.#ctor(AutoCSer.ORM.Member,System.String)">
            <summary>
            自定义数据列名称
            </summary>
            <param name="member"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.ORM.CustomColumnName.Set(AutoCSer.ORM.Member,System.String)">
            <summary>
            设置自定义数据列名称
            </summary>
            <param name="member"></param>
            <param name="name"></param>
        </member>
        <member name="T:AutoCSer.ORM.IVerify">
            <summary>
            仅用于快速判断是否可能实现接口 IVerify{T}
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.IVerify`1">
            <summary>
            自定义数据验证
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.ORM.IVerify`1.Verify">
            <summary>
            自定义验证，验证失败需要抛出异常
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.IQueryBuilder">
            <summary>
            SQL 查询创建器
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.IQueryBuilder.IsQuery">
            <summary>
            是否需要查询
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.IQueryBuilder.Statement">
            <summary>
             获取查询语句
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.IQueryBuilder.GetStatement(AutoCSer.Memory.CharStream)">
            <summary>
            获取查询语句
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="T:AutoCSer.ORM.DateTimeAttribute">
            <summary>
            日期时间列自定义配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeAttribute.Type">
            <summary>
            日期时间类型
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.DateTimeAttribute.Verify(System.DateTime)">
            <summary>
            自定义验证，验证失败需要抛出异常
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeAttribute.MinDateTime">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeAttribute.MinSmallDateTime">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeAttribute.MaxSmallDateTime">
            <summary>
            最大时间
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeAttribute.Default">
            <summary>
            默认日期时间列自定义配置
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.DateTimeTypeEnum">
            <summary>
            日期时间类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeTypeEnum.DateTime">
            <summary>
            默认日期时间 1753/1/1~9999/12/31 DateTime yyyy/MM/dd HH:mm:ss.fff
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeTypeEnum.DateTime2">
            <summary>
            高精度日期时间 DateTime yyyy/MM/dd HH:mm:ss.fffffff
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeTypeEnum.SmallDateTime">
            <summary>
            日期时间 DateTime 1900/1/1~2079/6/6
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DateTimeTypeEnum.Date">
            <summary>
            日期 yyyy/MM/dd
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.DecimalAttribute">
            <summary>
            decimal 列自定义配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DecimalAttribute.MaxPrecision">
            <summary>
            最大有效位数 38
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DecimalAttribute.Precision">
            <summary>
            有效位数，默认为 18 位，最大值 38 位
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.DecimalAttribute.Scale">
            <summary>
            小数点后有效位数，默认为 2 位
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.DecimalAttribute.Integer">
            <summary>
            整数位数
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.DecimalAttribute.Verify(System.Decimal)">
            <summary>
            自定义验证，验证失败需要抛出异常
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.DecimalAttribute.Default">
            <summary>
            默认 decimal 列自定义配置
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.MoneyAttribute">
            <summary>
            money 列自定义配置（decimal）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MoneyAttribute.IsSmall">
            <summary>
            默认为 false 有效范围（-922337203685477.5808 ~ 9223372036854775807）+ decimal(19,4) ，否则有效范围（-214748.3648 ~ 214748.3647）+ decimal(10,4)
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.MoneyAttribute.Verify(System.Decimal)">
            <summary>
            自定义验证，验证失败需要抛出异常
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.MoneyAttribute.MinSmallMoney">
            <summary>
            最小金额
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MoneyAttribute.MaxSmallMoney">
            <summary>
            最大金额
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MoneyAttribute.Default">
            <summary>
            默认 money 列自定义配置
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.StringAttribute">
            <summary>
            字符串列自定义配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.StringAttribute.IsAscii">
            <summary>
            字符串是否ASCII
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.StringAttribute.IsFixed">
            <summary>
            是否固定长度
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.StringAttribute.IsNullable">
            <summary>
            是否允许空值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.StringAttribute.IsEmpty">
            <summary>
            是否允许空字符串，默认为 允许
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.StringAttribute.Size">
            <summary>
            数据长度，ASCII 最大 8000，否则最大 4000，默认为 0 表示 max
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.StringAttribute.Verify(System.String)">
            <summary>
            自定义验证，验证失败需要抛出异常
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.StringAttribute.Default">
            <summary>
            默认字符串列自定义配置
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.MemberColumnIndex">
            <summary>
            数据列序号
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MemberColumnIndex.Member">
            <summary>
            字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MemberColumnIndex.Index">
            <summary>
            自定义数据列序号
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.MemberColumnIndex.IsColumn">
            <summary>
            判断是否数据列
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.ORM.MemberColumnIndex.ColumnName">
            <summary>
            获取数据列名称
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.ORM.MemberColumnIndex.IsMember">
            <summary>
            判断是否模型成员
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.MemberColumnIndex.#ctor(AutoCSer.ORM.Member,System.Int32)">
            <summary>
            数据列序号
            </summary>
            <param name="member"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.ORM.MemberColumnIndex.Set(AutoCSer.ORM.Member,System.Int32)">
            <summary>
            设置数据列序号
            </summary>
            <param name="member"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.ExpressionConverter">
            <summary>
            表达式转换
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionConverter.CharStream">
            <summary>
            SQL 字符串流
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionConverter.TableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionConverter.conditionConverter">
            <summary>
            条件表达式重组
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionConverter.dateTimeMember">
            <summary>
            最后转换表达式的 DateTime 成员
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.#ctor(AutoCSer.ORM.TableWriter,AutoCSer.Memory.CharStream)">
            <summary>
            表达式转换
            </summary>
            <param name="tableWriter"></param>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.#ctor(AutoCSer.ORM.TableWriter)">
            <summary>
            表达式转换
            </summary>
            <param name="tableWriter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.FreeCharStream">
            <summary>
            释放 SQL 字符流
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.ConvertAnd(System.Linq.Expressions.Expression)">
            <summary>
            AND 条件子项转换
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.Convert(System.Linq.Expressions.Expression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertIsSimple(System.Linq.Expressions.Expression)">
            <summary>
            简单表达式转换
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertConcatLogic(System.Linq.Expressions.BinaryExpression)">
            <summary>
            连接逻辑表达式
            </summary>
            <param name="binaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertConcatLogic(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            连接逻辑表达式
            </summary>
            <param name="expression"></param>
            <param name="logicType"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertEqual(System.Linq.Expressions.BinaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertNotEqual(System.Linq.Expressions.BinaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.getCustomColumnMemberAccessConstantValue(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            检查自定义列成员
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.getCustomColumnMemberAccessValues(System.Linq.Expressions.MemberExpression,System.Object)">
            <summary>
            获取自定义列信息与数值
            </summary>
            <param name="memberExpression"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertAdd(System.Linq.Expressions.BinaryExpression,System.Char)">
            <summary>
            转换表达式
            </summary>
            <param name="binaryExpression">表达式</param>
            <param name="char1">操作字符1</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertBinaryExpression(System.Linq.Expressions.BinaryExpression,System.Char)">
            <summary>
            转换表达式
            </summary>
            <param name="binaryExpression">表达式</param>
            <param name="char1">操作字符1</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertBinaryExpression(System.Linq.Expressions.BinaryExpression,System.Char,System.Char)">
            <summary>
            转换表达式
            </summary>
            <param name="binaryExpression">表达式</param>
            <param name="char1">操作字符1</param>
            <param name="char2">操作字符2</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.getMember(System.Linq.Expressions.MemberExpression@,AutoCSer.LeftArray{System.Linq.Expressions.MemberExpression}@)">
            <summary>
            获取成员
            </summary>
            <param name="memberExpression"></param>
            <param name="memberExpressions"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="memberExpression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCoalesce(System.Linq.Expressions.BinaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="binaryExpression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertNegate(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="unaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertIsTrue(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="unaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertIsFalse(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="unaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertConvert(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.ConditionConvert(System.Linq.Expressions.Expression)">
            <summary>
            表达式重组以后再转换
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallIn(System.Linq.Expressions.MethodCallExpression,System.Boolean)">
            <summary>
            IN 转换表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="isIn"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallLike(System.Linq.Expressions.MethodCallExpression,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            转换 LIKE 表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="isNot"></param>
            <param name="isStart"></param>
            <param name="isEnd"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallLikeOr(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallContains(System.Linq.Expressions.MethodCallExpression,System.Boolean)">
            <summary>
            CONTAINS 转换表达式
            </summary>
            <param name="expression"></param>
            <param name="isNot"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallReplace(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            转换 REPLACE 表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallExists(System.Linq.Expressions.MethodCallExpression,System.Boolean)">
            <summary>
            EXISTS 表达式
            </summary>
            <param name="expression"></param>
            <param name="isNot"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallDateDiff(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            转换 DATEDIFF 表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallCase(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            转换 CASE 表达式
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertCallCompareTo(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            转换比较操作
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.ConditionConvertIsSimple(System.Linq.Expressions.Expression)">
            <summary>
            表达式重组以后再转换
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertQueryBuilder(AutoCSer.ORM.IQueryBuilder)">
            <summary>
            子查询转换
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExpressionConverter.convertConstant(System.Object)">
            <summary>
            转换表达式
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.ORM.Extensions.TypeExtension">
            <summary>
            类型扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Extensions.TypeExtension.CSharpToDbTypes">
            <summary>
            C#类型转SQL数据类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Extensions.TypeExtension.getDbType(System.Type)">
            <summary>
            根据C#类型获取SQL数据类型
            </summary>
            <param name="type">C#类型</param>
            <returns>SQL数据类型</returns>
        </member>
        <member name="T:AutoCSer.ORM.Extensions.ExpressionExtension">
            <summary>
            表达式扩展
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Extensions.ExpressionExtension.isSimple(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            是否简单表达式（不需要括号）
            </summary>
            <param name="expression"></param>
            <param name="isAddCalculateRight">是否加减运算右侧表达式</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Extensions.ExpressionExtension.isSimpleNotLogic(System.Linq.Expressions.Expression)">
            <summary>
            是否非逻辑的简单表达式（不需要括号）
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Extensions.ExpressionExtension.getConstantValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式常量值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Extensions.ExpressionExtension.isConstantNull(System.Linq.Expressions.Expression)">
            <summary>
            判断是否常量表达式 null 值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.ModelReader`1">
            <summary>
            读取数据模型对象委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.ModelReader`1.Reader">
            <summary>
            读取数据模型对象委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ModelReader`1.columnIndexs">
            <summary>
            数据列名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ModelReader`1.columnIndexCache">
            <summary>
            数据列索引集合 临时缓存
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ModelReader`1.GetColumnIndexCache(System.Data.Common.DbDataReader)">
            <summary>
            获取数据列索引集合
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ModelReader`1.FreeColumnIndexCache(System.Int32[])">
            <summary>
            释放数据列索引集合
            </summary>
            <param name="indexs"></param>
        </member>
        <member name="T:AutoCSer.ORM.ModelSelectEnumerator`1">
            <summary>
            异步查询枚举器
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.ModelSelectEnumerator`1.connectionPool">
            <summary>
            数据库连接池
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ModelSelectEnumerator`1.columnIndexs">
            <summary>
            数据列索引集合
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.ModelSelectEnumerator`1.Current">
            <summary>
            当前读取数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ModelSelectEnumerator`1.#ctor(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.Transaction)">
            <summary>
            异步查询枚举器
            </summary>
            <param name="connectionPool"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:AutoCSer.ORM.ModelSelectEnumerator`1.GetReader(System.String,System.Int32)">
            <summary>
            获取数据读取器
            </summary>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ModelSelectEnumerator`1.System#Collections#Generic#IAsyncEnumerator{T}#MoveNextAsync">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ModelSelectEnumerator`1.DisposeAsync">
            <summary>
            释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.PageResult`1">
            <summary>
            分页查询结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.PageResult`1.PageIndex">
            <summary>
            查询分页号，从 1 开始
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.PageResult`1.PageSize">
            <summary>
            查询分页记录数量
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.PageResult`1.SkipCount">
            <summary>
            查询跳过记录数量
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.PageResult`1.TotalCount">
            <summary>
            查询记录总数
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.PageResult`1.PageCount">
            <summary>
            分页总数
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.PageResult`1.Result">
            <summary>
             分页查询结果
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.PageResult`1.#ctor(System.Int32,System.Int32)">
            <summary>
            分页查询结果
            </summary>
            <param name="pageIndex">查询分页号，从 1 开始</param>
            <param name="pageSize">查询分页记录数量</param>
        </member>
        <member name="M:AutoCSer.ORM.PageResult`1.Set(AutoCSer.ORM.ValueResult{System.Int64})">
            <summary>
            设置记录总数
            </summary>
            <param name="count"></param>
            <returns>是否需要查询分页数据</returns>
        </member>
        <member name="T:AutoCSer.ORM.ExtensionQueryBuilder">
            <summary>
            扩展查询 SQL 信息
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExtensionQueryBuilder.ExtensionData">
            <summary>
            扩展查询 SQL 信息
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.ExtensionQueryBuilder.Statement">
            <summary>
             获取查询语句
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.ExtensionQueryBuilder.IsQuery">
            <summary>
            是否需要查询
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder.#ctor">
            <summary>
            扩展查询 SQL 信息
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder.GetStatement(AutoCSer.Memory.CharStream)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="T:AutoCSer.ORM.ExtensionQueryBuilder`1">
            <summary>
            扩展查询 SQL 信息
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.ExtensionQueryBuilder`1.QueryBuilder">
            <summary>
            SQL 查询创建器
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.ExtensionQueryBuilder`1.IsQuery">
            <summary>
            是否需要查询
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.ExtensionQueryBuilder`1.Statement">
            <summary>
             获取查询语句
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.#ctor(AutoCSer.ORM.QueryBuilder{`0})">
            <summary>
            扩展查询 SQL 信息
            </summary>
            <param name="builder">SQL 查询创建器</param>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.op_Implicit(AutoCSer.ORM.QueryBuilder{`0})~AutoCSer.ORM.ExtensionQueryBuilder{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.Clear">
            <summary>
            清除查询信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            添加 GROUP BY 子项
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
            <param name="queryName">添加查询名称，默认为 null 表示不添加到查询</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加 HAVING 条件子项
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.Query(System.String)">
            <summary>
            添加查询名称
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.Query``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            添加查询名称
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
            <param name="queryName">查询返回列名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.call(System.String,System.String,System.String)">
            <summary>
            添加函数调用查询项
            </summary>
            <param name="member"></param>
            <param name="queryName"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.QueryCount(System.String,System.String)">
            <summary>
            添加 COUNT 查询项
            </summary>
            <param name="member">统计字段默认为 *</param>
            <param name="queryName">查询返回列名称，默认 null 表格表示和查询列名称一致</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.QuerySum(System.String,System.String)">
            <summary>
            添加 SUM 查询项
            </summary>
            <param name="member">求和字段</param>
            <param name="queryName">查询返回列名称，默认 null 表格表示和查询列名称一致</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.QueryMax(System.String,System.String)">
            <summary>
            添加 MAX 查询项
            </summary>
            <param name="member">取最大值字段</param>
            <param name="queryName">查询返回列名称，默认 null 表格表示和查询列名称一致</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.QueryMin(System.String,System.String)">
            <summary>
            添加 MIN 查询项
            </summary>
            <param name="member">取最小值字段</param>
            <param name="queryName">查询返回列名称，默认 null 表格表示和查询列名称一致</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.ClearQueryNames">
            <summary>
            清除查询列名称集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.GetStatement(AutoCSer.Memory.CharStream)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryBuilder`1.GetStatement(System.Int32,System.Boolean)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="isSubQuery">如果是子查询则在前后增加小括号</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.ExtensionQueryData">
            <summary>
            扩展查询 SQL 信息
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExtensionQueryData.QueryNames">
            <summary>
            查询列名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExtensionQueryData.GroupBys">
            <summary>
            分组名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExtensionQueryData.Havings">
            <summary>
            分组条件集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryData.SetEmpty">
            <summary>
            置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ExtensionQueryData.GroupBy(System.String,System.String)">
            <summary>
            添加 GROUP BY 子项
            </summary>
            <param name="groupBy"></param>
            <param name="queryName"></param>
        </member>
        <member name="F:AutoCSer.ORM.ExtensionQueryData.Count">
            <summary>
            默认 COUNT(*) 查询
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.QueryCondition`1">
            <summary>
            查询条件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.QueryCondition`1.tableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryCondition`1.memberParameter">
            <summary>
            查询参数成员匹配数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryCondition`1.fieldValue">
            <summary>
            查询参数字段值
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.QueryCondition`1.#ctor(AutoCSer.ORM.TableWriter{`0},AutoCSer.ORM.QueryParameter.MemberParameter,System.Object)">
            <summary>
            添加条件
            </summary>
            <param name="tableWriter"></param>
            <param name="memberParameter"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryCondition`1.AutoCSer#ORM#ICondition#WriteCondition(AutoCSer.Memory.CharStream)">
            <summary>
            写入条件
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryCondition`1.writeIn(AutoCSer.Memory.CharStream,AutoCSer.ORM.ConnectionCreator,System.Boolean)">
            <summary>
            写入 IN 条件
            </summary>
            <param name="charStream"></param>
            <param name="connectionCreator"></param>
            <param name="isNot"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryCondition`1.writeCompareTo(AutoCSer.Memory.CharStream,AutoCSer.ORM.ConnectionCreator,System.Char)">
            <summary>
            写入比较条件
            </summary>
            <param name="charStream"></param>
            <param name="connectionCreator"></param>
            <param name="compareTo"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryCondition`1.writeCompareTo(AutoCSer.Memory.CharStream,AutoCSer.ORM.ConnectionCreator,System.Char,System.Char)">
            <summary>
            写入比较条件
            </summary>
            <param name="charStream"></param>
            <param name="connectionCreator"></param>
            <param name="char1"></param>
            <param name="char2"></param>
        </member>
        <member name="T:AutoCSer.ORM.QueryParameter.FieldParameter">
            <summary>
            查询参数字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.FieldParameter.Field">
            <summary>
            查询参数字段
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.FieldParameter.ElementType">
            <summary>
            列表成员类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.FieldParameter.GenericType">
            <summary>
            值类型泛型对象
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.FieldParameter.Attribute">
            <summary>
            查询参数属性
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.FieldParameter.Index">
            <summary>
            查询参数字段序号
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.QueryParameter.FieldParameter`1">
            <summary>
            查询参数
            </summary>
            <typeparam name="T">查询参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.FieldParameter`1.FieldDictionary">
            <summary>
            查询字段集合
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.QueryParameter.MemberParameter">
            <summary>
            成员参数匹配数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.MemberParameter.ColumnIndex">
            <summary>
            数据列序号
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.MemberParameter.Field">
            <summary>
            查询参数字段信息
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.QueryParameter.MemberParameter.#ctor(AutoCSer.ORM.MemberColumnIndex@,AutoCSer.ORM.QueryParameter.FieldParameter)">
            <summary>
            成员参数匹配数据
            </summary>
            <param name="columnIndex"></param>
            <param name="field"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryParameter.MemberParameter.Match(AutoCSer.ORM.MemberColumnIndex@,AutoCSer.ORM.QueryParameter.FieldParameter)">
            <summary>
            匹配查询成员
            </summary>
            <param name="columnIndex"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.QueryParameter.MemberParameter`2">
            <summary>
            查询参数匹配表格模型
            </summary>
            <typeparam name="T">查询参数类型</typeparam>
            <typeparam name="MT">表格模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.ORM.QueryParameter.MemberParameter`2.Set(AutoCSer.ORM.QueryBuilder{`1},`0)">
            <summary>
            添加查询参数条件
            </summary>
            <param name="query"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.MemberParameter`2.memberParameters">
            <summary>
            成员参数匹配数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.MemberParameter`2.memberParameterLock">
            <summary>
            成员参数匹配数据集合 访问锁
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum">
            <summary>
            查询匹配类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.Default">
            <summary>
            默认匹配类型，大多数情况为 Equal
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.LessOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.GreaterOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.In">
            <summary>
            IN 表达式
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.NotIn">
            <summary>
            NOT IN 表达式
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.Like">
            <summary>
            LIKE %value%（查询参数字段必须为 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.NotLike">
            <summary>
            NOT LIKE %value%（查询参数字段必须为 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.StartsWith">
            <summary>
            LIKE value%（查询参数字段必须为 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.NotStartsWith">
            <summary>
            NOT LIKE value%（查询参数字段必须为 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.EndsWith">
            <summary>
            LIKE %value（查询参数字段必须为 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.NotEndsWith">
            <summary>
            NOT LIKE %value（查询参数字段必须为 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.Contains">
            <summary>
            CONTAINS(value,matchValue)（查询参数字段必须为 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameter.QueryMatchTypeEnum.NotContains">
            <summary>
            NOT CONTAINS(value,matchValue)（查询参数字段必须为 string）
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.QueryParameterAttribute">
            <summary>
            查询参数配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.MatchType">
            <summary>
            查询匹配类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.CheckPrefixSuffix">
            <summary>
            OperationName 为 null 并且 MatchType 为默认值时是否检查前后缀
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.CheckNull">
            <summary>
            检查空值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.Index">
            <summary>
            查询条件顺序
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.TableMemberName">
            <summary>
            数据库表格字段名称，null 表示查询参数属性名称
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.QueryParameterAttribute.GetCheckPrefixSuffix">
            <summary>
            是否检查前后缀
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.Default">
            <summary>
            默认查询参数属性
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.GreaterOrEqual">
            <summary>
            默认查询参数属性
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.Less">
            <summary>
            默认查询参数属性
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryParameterAttribute.In">
            <summary>
            默认查询参数属性
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.WithLockTypeEnum">
            <summary>
            锁类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.None">
            <summary>
            默认锁
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.NoLock">
            <summary>
            NOLOCK 不加锁，不添加共享锁和排它锁，允许脏读
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.ReadPast">
            <summary>
            READPAST 跳过已经加锁的数据行，仅应用于 READ COMMITTED 隔离性级别下事务操作中的 SELECT
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.Row">
            <summary>
            ROWLOCK 行级锁
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.Page">
            <summary>
            PAGLOCK 页锁（否则通常可能添加表锁）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.Table">
            <summary>
            TABLOCK 表级锁，如果同时指定了HOLDLOCK，该锁一直保持到这个事务结束
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.TableExclusive">
            <summary>
            TABLOCKX 在表上使用排它锁
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.Update">
            <summary>
            UPDLOCK 在读表中数据时设置更新锁，允许先读取数据（不阻塞其他用户读数据），并且保证在后来更新数据时，这一段时间内这些数据没有被其他用户修改
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.Exclusive">
            <summary>
            XLOCK 排它锁（DELELTE 锁）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.WithLockTypeEnum.Hold">
            <summary>
            HOLDLOCK 在该表上保持共享锁，直到整个事务结束
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.SQLExpression">
            <summary>
            SQL 表达式与函数
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Call``1(System.String,System.Object[])">
            <summary>
            SQL 函数调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fucntionName">调用函数名称</param>
            <param name="parameters">调用参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Count">
            <summary>
            COUNT(*) 计数
            </summary>
            <returns>计数</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Count``1(``0)">
            <summary>
            COUNT(value) 计数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>计数</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Sum``1(``0)">
            <summary>
            SUM(value) 求和
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>求和</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Max``1(``0)">
            <summary>
            MAX(value) 最大值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>最大值</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Min``1(``0)">
            <summary>
            MIN(value) 最小值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>最小值</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Distinct``1(``0)">
            <summary>
            DISTINCT(value) 去重
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.GetDate">
            <summary>
            GETDATE() 获取当前时间
            </summary>
            <returns>当前时间</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.SysDateTime">
            <summary>
            SYSDATETIME() 获取当前高精度时间
            </summary>
            <returns>当前时间</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.In``1(``0,``0[])">
            <summary>
            value IN (values)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="values">数值集合</param>
            <returns>是否包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.In``1(System.Nullable{``0},``0[])">
            <summary>
            value IN (values)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="values">数值集合</param>
            <returns>是否包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            value IN (values)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="values">数值集合</param>
            <returns>是否包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.In``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            value IN (values)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="values">数值集合</param>
            <returns>是否包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.In``1(``0,AutoCSer.ORM.IQueryBuilder)">
            <summary>
            value IN (query
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="query">子查询</param>
            <returns>是否包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotIn``1(``0,``0[])">
            <summary>
            value NOT IN (values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="values">数值集合</param>
            <returns>是否不包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotIn``1(System.Nullable{``0},``0[])">
            <summary>
            value NOT IN (values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="values">数值集合</param>
            <returns>是否不包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            value NOT IN (values)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="values">数值集合</param>
            <returns>是否不包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotIn``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            value NOT IN (values)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="values">数值集合</param>
            <returns>是否不包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotIn``1(``0,AutoCSer.ORM.IQueryBuilder)">
            <summary>
            value NOT IN (query)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据</param>
            <param name="query">子查询</param>
            <returns>是否不包含数据</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Len(System.String)">
            <summary>
            LEN(value) 获取字符串长度
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Like(System.String,System.String)">
            <summary>
            value LIKE %matchValue%
            </summary>
            <param name="value"></param>
            <param name="matchValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotLike(System.String,System.String)">
            <summary>
            value NOT LIKE %matchValue%
            </summary>
            <param name="value"></param>
            <param name="matchValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.StartsWith(System.String,System.String)">
            <summary>
            value LIKE matchValue%
            </summary>
            <param name="value"></param>
            <param name="matchValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotStartsWith(System.String,System.String)">
            <summary>
            value NOT LIKE matchValue%
            </summary>
            <param name="value"></param>
            <param name="matchValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.EndsWith(System.String,System.String)">
            <summary>
            value LIKE %matchValue
            </summary>
            <param name="value"></param>
            <param name="matchValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotEndsWith(System.String,System.String)">
            <summary>
            value NOT LIKE %matchValue
            </summary>
            <param name="value"></param>
            <param name="matchValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.LikeOr(System.String,System.String[])">
            <summary>
            value LIKE %matchValue% OR value LIKE %matchValue% ...
            </summary>
            <param name="value">数值</param>
            <param name="matchValueArray">匹配字符串集合</param>
            <returns>是否包含数值</returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Contains(System.String,System.String)">
            <summary>
            CONTAINS(value,matchValue) 全文索引
            </summary>
            <param name="value"></param>
            <param name="matchValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotContains(System.String,System.String)">
            <summary>
            NOT CONTAINS(value,matchValue) 全文索引
            </summary>
            <param name="value"></param>
            <param name="matchValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Replace(System.String,System.String,System.String)">
            <summary>
            REPLACE(value,oldValue,newValue) 替换字串
            </summary>
            <param name="value"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.IsNull``1(``0,``0)">
            <summary>
            ISNULL(value,nullValue) 空值判断
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="nullValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Exists(AutoCSer.ORM.IQueryBuilder)">
            <summary>
            EXISTS(query) 存在子查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.NotExists(AutoCSer.ORM.IQueryBuilder)">
            <summary>
            NOT EXISTS(query) 不存在子查询
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.DateDiff(AutoCSer.ORM.ExpressionCallDateDiffType,System.DateTime,System.DateTime)">
            <summary>
            DATEDIFF(dateDiffType,startTime,endTime) 计算时间差
            </summary>
            <param name="dateDiffType"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.DateDiff(AutoCSer.ORM.ExpressionCallDateDiffType,System.Nullable{System.DateTime},System.DateTime)">
            <summary>
            DATEDIFF(dateDiffType,startTime,endTime) 计算时间差
            </summary>
            <param name="dateDiffType"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.DataLength(System.Byte[])">
            <summary>
            DATALENGTH(value) 计算长度
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.Case``1(System.Boolean,``0,``0)">
            <summary>
            CASE WHEN condition THEN trueValue ELSE falseValue END
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition"></param>
            <param name="trueValue"></param>
            <param name="falseValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.CompareTo``1(``0,``0,System.Linq.Expressions.ExpressionType)">
            <summary>
            比较操作，比如字符串比较，仅支持 大于 GreaterThan、大于等于 GreaterThanOrEqual、小于 LessThan、小于等于 LessThanOrEqual
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SQLExpression.CompareTo``1(``0,AutoCSer.ORM.IQueryBuilder,System.Linq.Expressions.ExpressionType)">
            <summary>
            比较操作，比如字符串比较，仅支持 等于 Equal、不等于 NotEqual、大于 GreaterThan、大于等于 GreaterThanOrEqual、小于 LessThan、小于等于 LessThanOrEqual
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.ConditionExpression.ConvertTypeEnum">
            <summary>
            表达式类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.ConvertTypeEnum.Expression">
            <summary>
            原始表达式
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.ConvertTypeEnum.ConvertExpression">
            <summary>
            转换表达式
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.ConvertTypeEnum.NotSupport">
            <summary>
            不支持的表达式
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.ConditionExpression.ExceptionTypeEnum">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.ExceptionTypeEnum.TargetIsNull">
            <summary>
            目标对象为 null
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.ExceptionTypeEnum.ArrayNotConstant">
            <summary>
            数组不是常量
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.ExceptionTypeEnum.TargetNotArray">
            <summary>
            目标对象不是数组
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.ExceptionTypeEnum.ArrayIndexNotInt">
            <summary>
            数组索引不是 int 常量
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.ExceptionTypeEnum.ArrayIndexOutOfRange">
            <summary>
            数组索引超出范围
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.ConditionExpression.LogicTypeEnum">
            <summary>
            逻辑值类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.LogicTypeEnum.False">
            <summary>
            逻辑真值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.LogicTypeEnum.True">
            <summary>
            逻辑假值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.LogicTypeEnum.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConditionExpression.LogicTypeEnum.NotSupport">
            <summary>
            不支持的表达式
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumnAttribute">
            <summary>
            自定义数据列配置（只支持 struct 可嵌套）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumnAttribute.MemberFilters">
            <summary>
            成员选择类型，默认为字段 InstanceField
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumnAttribute.NameConcatType">
            <summary>
            自定义数据列名称连接类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumnAttribute.NameConcatSplit">
            <summary>
            名称连接分割符，默认为空字符串
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.ConnectionCreator">
            <summary>
            创建数据库连接
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionCreator.constantConvertToString">
            <summary>
            常量转换字符串处理
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionCreator.constantConverters">
            <summary>
            常量转换处理集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionCreator.constantConverterLock">
            <summary>
            常量转换处理集合 访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionCreator.charStreamCache">
            <summary>
            SQL 字符流 临时缓存
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionCreator.AutoIdentityWriter">
            <summary>
            自增ID 数据库表格持久化写入
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.#ctor">
            <summary>
            创建数据库连接
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetCharStreamCache">
            <summary>
            获取 SQL 字符流
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.FreeCharStreamCache(AutoCSer.Memory.CharStream)">
            <summary>
            释放 SQL 字符流
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.CreateConnection">
            <summary>
            创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.FormatName(System.String)">
            <summary>
            名称格式化
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.FormatName(AutoCSer.Memory.CharStream,System.String)">
            <summary>
            名称格式化
            </summary>
            <param name="charStream"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.AutoCreateTable(AutoCSer.ORM.TableWriter)">
            <summary>
            自动创建数据库表格
            </summary>
            <param name="tableWriter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.CreateIndex(AutoCSer.ORM.TableWriter,AutoCSer.ORM.CustomColumnName[],System.String,System.Boolean,System.Int32)">
            <summary>
            创建表格索引
            </summary>
            <param name="tableWriter"></param>
            <param name="columns"></param>
            <param name="indexNameSuffix"></param>
            <param name="isUnique"></param>
            <param name="timeoutSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetQueryStatement``1(AutoCSer.ORM.QueryBuilder{``0},AutoCSer.Metadata.MemberMap{``0},System.UInt32,System.UInt64,System.Boolean)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="memberMap"></param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="skipCount">跳过记录数量</param>
            <param name="isSubQuery">如果是子查询则在前后增加小括号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetQueryStatement``1(AutoCSer.ORM.QueryBuilder{``0},AutoCSer.Metadata.MemberMap{``0},System.UInt32,System.UInt64,AutoCSer.Memory.CharStream)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="memberMap"></param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="skipCount">跳过记录数量</param>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetQueryStatement``1(AutoCSer.ORM.QueryBuilder{``0},AutoCSer.ORM.ExtensionQueryData@,System.UInt32,System.Boolean)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="extensionQueryData"></param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="isSubQuery">如果是子查询则在前后增加小括号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetQueryStatement``1(AutoCSer.ORM.QueryBuilder{``0},AutoCSer.ORM.ExtensionQueryData@,System.UInt32,AutoCSer.Memory.CharStream)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="extensionQueryData"></param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.WriteCustomColumnCondition(AutoCSer.Memory.CharStream,AutoCSer.ORM.TableWriter,AutoCSer.ORM.Member,System.Object)">
            <summary>
            写入自定义数据列查询条件
            </summary>
            <param name="charStream"></param>
            <param name="tableWriter"></param>
            <param name="member"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.WriteCondition(AutoCSer.Memory.CharStream,AutoCSer.ORM.CustomColumnName,System.Object)">
            <summary>
            写入查询条件
            </summary>
            <param name="charStream"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetInsertStatement``1(AutoCSer.ORM.TableWriter{``0},``0)">
            <summary>
            获取添加数据 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableWriter"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetUpdateStatement``1(AutoCSer.ORM.QueryBuilder{``0},``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            获取更新数据 SQL 语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetDeleteStatement(AutoCSer.ORM.QueryBuilder)">
            <summary>
            获取删除数据 SQL 语句
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetConstantConverter(System.Type,AutoCSer.ORM.Member)">
            <summary>
            获取常量转换处理委托
            </summary>
            <param name="type"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertBool(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convert(AutoCSer.Memory.CharStream,System.Boolean)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Boolean)">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator">SQL字符流</param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertBoolNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convert(AutoCSer.Memory.CharStream,System.Nullable{System.Boolean})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Nullable{System.Boolean})">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator">SQL字符流</param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertByte(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Byte)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertByteNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.Byte})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertSByte(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.SByte)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertSByteNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.SByte})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertShort(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Int16)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertShortNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.Int16})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertUShort(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.UInt16)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertUShortNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.UInt16})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertInt(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Int32)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertIntNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.Int32})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertUInt(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.UInt32)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertUIntNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.UInt32})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertLong(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Int64)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertLongNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.Int64})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertULong(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.UInt64)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertULongNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.UInt64})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertFloat(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Single)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertFloatNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.Single})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDouble(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Double)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDoubleNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.Double})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDecimal(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Decimal)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDecimalNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.Decimal})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTime(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTime2(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertSmallDateTime(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDate(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convert(AutoCSer.Memory.CharStream,System.DateTime,AutoCSer.ORM.DateTimeTypeEnum)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream"></param>
            <param name="parameter"></param>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTime(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.DateTime)">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTime2(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.DateTime)">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertSmallDateTime(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.DateTime)">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDate(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.DateTime)">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTimeNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTime2Nullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertSmallDateTimeNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convert(AutoCSer.Memory.CharStream,System.Nullable{System.DateTime},AutoCSer.ORM.DateTimeTypeEnum)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
            <param name="type">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTime(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Nullable{System.DateTime})">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTime2(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Nullable{System.DateTime})">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertSmallDateTime(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Nullable{System.DateTime})">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDate(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Nullable{System.DateTime})">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTimeOffset(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convert(AutoCSer.Memory.CharStream,System.DateTimeOffset)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.DateTimeOffset)">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertDateTimeOffsetNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convert(AutoCSer.Memory.CharStream,System.Nullable{System.DateTimeOffset})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Nullable{System.DateTimeOffset})">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertTimeSpan(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.TimeSpan)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertTimeSpanNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.Nullable{System.TimeSpan})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertGuid(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convert(AutoCSer.Memory.CharStream,System.Guid)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Guid)">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertGuidNullable(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convert(AutoCSer.Memory.CharStream,System.Nullable{System.Guid})">
            <summary>
            常量转换字符串
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Nullable{System.Guid})">
            <summary>
            常量转换字符串
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertString(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="charStream">SQL字符流</param>
            <param name="parameter">常量</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.convertToString(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.Memory.CharStream,System.String)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.Convert(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.String)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertToString(AutoCSer.ORM.ConnectionCreator,AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="connectionCreator"></param>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertLike(AutoCSer.Memory.CharStream,System.String,System.Boolean,System.Boolean)">
            <summary>
            LIKE 字符串转义
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <param name="isStart"></param>
            <param name="isEnd"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertByteEnum``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertByteEnum``1(AutoCSer.Memory.CharStream,``0)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertByteEnumNullable``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertByteEnumNullable``1(AutoCSer.Memory.CharStream,System.Nullable{``0})">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertSByteEnum``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertSByteEnum``1(AutoCSer.Memory.CharStream,``0)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertSByteEnumNullable``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertSByteEnumNullable``1(AutoCSer.Memory.CharStream,System.Nullable{``0})">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertShortEnum``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertShortEnum``1(AutoCSer.Memory.CharStream,``0)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertShortEnumNullable``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertShortEnumNullable``1(AutoCSer.Memory.CharStream,System.Nullable{``0})">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertUShortEnum``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertUShortEnum``1(AutoCSer.Memory.CharStream,``0)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertUShortEnumNullable``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertUShortEnumNullable``1(AutoCSer.Memory.CharStream,System.Nullable{``0})">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertIntEnum``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertIntEnum``1(AutoCSer.Memory.CharStream,``0)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertIntEnumNullable``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertIntEnumNullable``1(AutoCSer.Memory.CharStream,System.Nullable{``0})">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertUIntEnum``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertUIntEnum``1(AutoCSer.Memory.CharStream,``0)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertUIntEnumNullable``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertUIntEnumNullable``1(AutoCSer.Memory.CharStream,System.Nullable{``0})">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertLongEnum``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertLongEnum``1(AutoCSer.Memory.CharStream,``0)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertLongEnumNullable``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertLongEnumNullable``1(AutoCSer.Memory.CharStream,System.Nullable{``0})">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertULongEnum``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertULongEnum``1(AutoCSer.Memory.CharStream,``0)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertULongEnumNullable``1(AutoCSer.Memory.CharStream,System.Object)">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.ConvertULongEnumNullable``1(AutoCSer.Memory.CharStream,System.Nullable{``0})">
            <summary>
            枚举常量转换字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.WriteConcat(AutoCSer.Memory.CharStream)">
            <summary>
            写入逗号连接符
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.WriteConcat(AutoCSer.Memory.CharStream,AutoCSer.ORM.TableWriter,System.Int32,System.Boolean)">
            <summary>
            写入更新数据列名称
            </summary>
            <param name="charStream"></param>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="isFirst"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.WriteConcat(AutoCSer.Memory.CharStream,AutoCSer.ORM.TableWriter,System.Int32)">
            <summary>
            写入更新数据列名称
            </summary>
            <param name="charStream"></param>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.WriteConcatCondition(AutoCSer.Memory.CharStream,AutoCSer.ORM.TableWriter,System.Int32,System.Boolean)">
            <summary>
            写入条件数据列名称
            </summary>
            <param name="charStream"></param>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <param name="isFirst"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.WriteConcatCondition(AutoCSer.Memory.CharStream,AutoCSer.ORM.TableWriter,System.Int32)">
            <summary>
            写入条件数据列名称
            </summary>
            <param name="charStream"></param>
            <param name="tableWriter"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.CloseConnection(System.Data.Common.DbConnection)">
            <summary>
            关闭并释放连接
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.CloseConnectionAsync(System.Data.Common.DbConnection)">
            <summary>
            关闭并释放连接
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionCreator.constantConvertMethods">
            <summary>
            常量转换处理集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionCreator.constantConvertMethodLock">
            <summary>
            常量转换处理集合 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionCreator.GetConstantConvertMethod(System.Type,AutoCSer.ORM.ReaderDataTypeEnum,AutoCSer.ORM.MemberAttribute,System.Boolean@)">
            <summary>
            获取常量转换处理委托
            </summary>
            <param name="type"></param>
            <param name="readerDataType"></param>
            <param name="attribute"></param>
            <param name="isObjectToString"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.ConnectionPool">
            <summary>
            数据库连接池
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionPool.Creator">
            <summary>
            创建数据库连接
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionPool.connections">
            <summary>
            数据库连接集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ConnectionPool.connectionLock">
            <summary>
            数据库连接集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.#ctor(AutoCSer.ORM.ConnectionCreator)">
            <summary>
            数据库连接池
            </summary>
            <param name="creator">创建数据库连接</param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.FreeConnection(System.Data.Common.DbConnection)">
            <summary>
            释放连接
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.FreeConnection(AutoCSer.ORM.Transaction)">
            <summary>
            释放连接
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.FreeConnectionAsync(AutoCSer.ORM.Transaction)">
            <summary>
            释放连接
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.GetConnection">
            <summary>
            获取数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CreateConnection">
            <summary>
            创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CreateTransaction(System.Data.IsolationLevel,System.Boolean)">
            <summary>
            创建数据库事务
            </summary>
            <param name="level">默认 RepeatableRead</param>
            <param name="isAsyncLocal">是否创建异步上下文，默认为 true</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CreateDefaultTransaction">
            <summary>
            创建默认数据库事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CheckTransaction(AutoCSer.ORM.Transaction@)">
            <summary>
            检查数据库事务连接池是否匹配
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.ExecuteNonQuery(System.String,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            执行 SQL 语句返回受影响数据行数
            </summary>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.ExecuteNonQueryTransaction(System.String,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            执行 SQL 语句返回受影响数据行数
            </summary>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CreateTableQuery``2(AutoCSer.ORM.ITableEvent{``0},AutoCSer.ORM.ModelAttribute)">
            <summary>
            创建数据库表格持久化
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
            <param name="tableEvent">表格操作事件处理</param>
            <param name="attribute">数据表格模型配置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CreateTablePersistence``2(AutoCSer.ORM.ITableEvent{``0},AutoCSer.ORM.ModelAttribute)">
            <summary>
            创建数据库表格持久化
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
            <param name="tableEvent">表格操作事件处理</param>
            <param name="attribute">数据表格模型配置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CreateBusinessPersistence``3(AutoCSer.ORM.BusinessTableEvent{``0,``1},AutoCSer.ORM.ModelAttribute)">
            <summary>
            创建业务表格持久化
            </summary>
            <typeparam name="BT">业务表格模型类型</typeparam>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
            <param name="tableEvent">表格操作事件处理</param>
            <param name="attribute">数据表格模型配置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.SingleOrDefault``1(System.String,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.SingleOrDefaultTransaction``1(System.String,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.singleOrDefault``1(System.Data.Common.DbCommand)">
            <summary>
            查询第一个数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.Query``1(System.String,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.Query``1(System.Data.Common.DbCommand)">
            <summary>
            查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.Select``1(System.String,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.RemoteProxySingleOrDefault(System.String,System.Int32)">
            <summary>
            数据库远程代理访问网络吞吐优化 查询第一个数据（需要 RPC 服务启用压缩）
            </summary>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.RemoteProxyQuery(System.String,System.Int32,AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.ORM.RemoteProxy.DataRow})">
            <summary>
            数据库远程代理访问网络吞吐优化 查询数据（需要 RPC 服务启用压缩）
            </summary>
            <param name="statement">SQL 语句</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="callback">数据行回调委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CheckAutoIdentity(System.String)">
            <summary>
            检查自增ID记录
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.UpdateAutoIdentity(System.String,System.Int64)">
            <summary>
            更新自增ID记录
            </summary>
            <param name="tableName"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.Create(AutoCSer.ORM.ConnectionCreator,System.String)">
            <summary>
            创建带有自增ID的数据库连接池
            </summary>
            <param name="creator"></param>
            <param name="autoIdentityTableName">自增ID记录表格名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.CreateCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            创建命令
            </summary>
            <param name="connection"></param>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ConnectionPool.SetCommand(System.Data.Common.DbCommand,System.String)">
            <summary>
            设置命令
            </summary>
            <param name="command"></param>
            <param name="statement"></param>
        </member>
        <member name="T:AutoCSer.ORM.CustomColumnNameConcatTypeEnum">
            <summary>
            自定义数据列名称连接类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumnNameConcatTypeEnum.Concat">
            <summary>
            分隔符连接
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumnNameConcatTypeEnum.Parent">
            <summary>
            仅父节点名称，仅适应于一个子节点
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.CustomColumnNameConcatTypeEnum.Node">
            <summary>
            仅使用子节点名称
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.ExpressionCallDateDiffType">
            <summary>
            时间差异类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.NONE">
            <summary>
            默认无传参
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.yy">
            <summary>
            年
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.yyyy">
            <summary>
            年
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.qq">
            <summary>
            季度
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.q">
            <summary>
            季度
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.mm">
            <summary>
            月
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.m">
            <summary>
            月
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.dy">
            <summary>
            年中的日
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.y">
            <summary>
            年中的日
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.dd">
            <summary>
            日
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.d">
            <summary>
            日
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.wk">
            <summary>
            周
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.ww">
            <summary>
            周
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.dw">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.w">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.hh">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.mi">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.n">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.ss">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.s">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.ms">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.mcs">
            <summary>
            微妙
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ExpressionCallDateDiffType.ns">
            <summary>
            纳秒
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.MemberAttribute">
            <summary>
            数据列自定义配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MemberAttribute.PrimaryKeyType">
            <summary>
            关键字类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MemberAttribute.DefaultUpdate">
            <summary>
            更新成员位图传参为 null 时，默认为 true 表示更新该成员，否则不更新该成员（关键字不支持更新）
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MemberAttribute.MemberSort">
            <summary>
            成员排序，值越小越靠前
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MemberAttribute.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MemberAttribute.Remark">
            <summary>
            备注说明
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.MemberAttribute.CreateColumnUpdateValue">
            <summary>
            自动补全创建数据列时自动更新列值的表达式
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.ModelAttribute">
            <summary>
            数据表格模型配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ModelAttribute.MemberFilters">
            <summary>
            成员选择类型，默认为公开字段 PublicInstanceField
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ModelAttribute.TableName">
            <summary>
            默认表格名称，null 表示数据表格模型类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ModelAttribute.AutoCreateTable">
            <summary>
            默认为 true 表示自动创建数据库表格
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.ModelAttribute.IsReadOnly">
            <summary>
            表格记录是否只读，否则写操作抛出异常
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.ModelAttribute.GetTableName(System.Type)">
            <summary>
            获取表格名称
            </summary>
            <param name="type">持久化表格模型类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ModelAttribute.Clone">
            <summary>
            复制配置数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.ITableEvent`1">
            <summary>
            表格操作事件接口
            </summary>
            <typeparam name="T">表格模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.BeforeInsert(`0)">
            <summary>
            添加数据之前检查数据
            </summary>
            <param name="value"></param>
            <returns>是否继续执行添加数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnInserted(`0)">
            <summary>
            非事务模式添加数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnInserted(`0,AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行添加数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnInsertedCommited(`0)">
            <summary>
            事务模式添加数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.BeforeUpdate(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            更新数据之前检查操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns>是否继续执行更新数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            非事务模式更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnUpdated(`0,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行更新数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnUpdatedCommited(`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            事务模式更新数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.BeforeDelete(`0)">
            <summary>
            删除数据之前检查数据
            </summary>
            <param name="value"></param>
            <returns>是否继续执行删除数据操作</returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnDeleted(`0)">
            <summary>
            非事务模式删除数据之后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnDeleted(`0,AutoCSer.ORM.Transaction)">
            <summary>
            事务模式执行删除数据之后的操作
            </summary>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns>是否继续执行后续事务，否则中止事务</returns>
        </member>
        <member name="M:AutoCSer.ORM.ITableEvent`1.OnDeletedCommited(`0)">
            <summary>
            事务模式删除数据事务提交以后的操作
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.TableEventTypeEnum">
            <summary>
            表格操作事件类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableEventTypeEnum.Insert">
            <summary>
            添加数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableEventTypeEnum.Update">
            <summary>
            更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableEventTypeEnum.Delete">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.TableModel`1">
            <summary>
            数据表格模型集合委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.Read">
            <summary>
            读取数据表格模型对象委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.Insert">
            <summary>
            写入表格模型数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.Update">
            <summary>
            写入更新数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.ConcatCondition">
            <summary>
            写入条件数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.Copy">
            <summary>
            复制数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.ToArray">
            <summary>
            数据列值转数组
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.memberMap">
            <summary>
            数据库表格模型成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.modelLock">
            <summary>
            读取数据表格模型对象委托访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.model">
            <summary>
            读取数据表格模型对象委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableModel`1.models">
            <summary>
            读取数据表格模型对象委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TableModel`1.get(AutoCSer.Metadata.MemberMapData{`0}@)">
            <summary>
            获取获取数据表格模型集合委托
            </summary>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableModel`1.insertVerifyInterface(System.Reflection.Emit.ILGenerator,AutoCSer.ORM.Member)">
            <summary>
            写入表格模型数据验证接口调用
            </summary>
            <param name="generator"></param>
            <param name="member"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableModel`1.write(System.Reflection.Emit.ILGenerator,AutoCSer.ORM.Member,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            写入列数据
            </summary>
            <param name="generator"></param>
            <param name="member"></param>
            <param name="connectionCreatorLocal"></param>
            <param name="columnIndexLocal"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableModel`1.Get(AutoCSer.ORM.TableWriter{`0})">
            <summary>
            获取数据表格模型集合委托
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableModel`1.GetCopy(AutoCSer.ORM.TableWriter{`0})">
            <summary>
            获取复制数据委托
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableModel`1.GetToArray(AutoCSer.ORM.TableWriter{`0})">
            <summary>
            获取数据列值转数组委托
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.OrderItem">
            <summary>
            排序项
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.OrderItem.Member">
            <summary>
            排序成员字符串
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.OrderItem.IsAscending">
            <summary>
            是否升序
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.OrderItem.Set(System.String,System.Boolean)">
            <summary>
            设置排序项
            </summary>
            <param name="member"></param>
            <param name="isAscending"></param>
        </member>
        <member name="T:AutoCSer.ORM.PrimaryKeyCondition`2">
            <summary>
            关键字条件
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.PrimaryKeyCondition`2.tableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.PrimaryKeyCondition`2.primaryKey">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.PrimaryKeyCondition`2.#ctor(AutoCSer.ORM.TableWriter{`0,`1},`1)">
            <summary>
            关键字条件
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="primaryKey">关键字</param>
        </member>
        <member name="M:AutoCSer.ORM.PrimaryKeyCondition`2.AutoCSer#ORM#ICondition#WriteCondition(AutoCSer.Memory.CharStream)">
            <summary>
            写入关键字条件
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="T:AutoCSer.ORM.QueryBuilder">
            <summary>
            SQL 查询创建器
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryBuilder.TableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.QueryBuilder.ConditionLogicType">
            <summary>
            条件逻辑值类型
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryBuilder.WithLock">
            <summary>
            锁类型，事务查询默认为 NONE，否则为 NOLOCK
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryBuilder.Condition">
            <summary>
            第一个表达式查询条件
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryBuilder.Conditions">
            <summary>
            表达式查询条件集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryBuilder.OrderItem">
            <summary>
            第一个排序项
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryBuilder.OrderByItems">
            <summary>
            排序项集合
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.QueryBuilder.Statement">
            <summary>
             获取查询语句
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.QueryBuilder.IsQuery">
            <summary>
            是否需要查询
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.QueryBuilder.IsCondition">
            <summary>
            是否存在查询条件
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder.#ctor(AutoCSer.ORM.TableWriter,System.Boolean,AutoCSer.ORM.ICondition)">
            <summary>
            SQL 查询创建器
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <param name="primaryKeyCondition">关键字条件</param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder.AndCondition(AutoCSer.ORM.ICondition)">
            <summary>
            添加条件
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder.orderBy(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="member"></param>
            <param name="isAscending"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder.GetStatement(AutoCSer.Memory.CharStream)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="T:AutoCSer.ORM.QueryBuilder`1">
            <summary>
            SQL 查询创建器
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.QueryBuilder`1.TableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.QueryBuilder`1.MemberMap">
            <summary>
            查询表格字段集合
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.QueryBuilder`1.Statement">
            <summary>
             获取查询语句
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.#ctor(AutoCSer.ORM.TableWriter{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            SQL 查询创建器
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="condition">第一个表达式查询条件</param>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.#ctor(AutoCSer.ORM.TableWriter{`0},System.Boolean,AutoCSer.ORM.ICondition,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            SQL 查询创建器
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <param name="primaryKeyCondition">关键字条件</param>
            <param name="memberMap">查询表格字段集合</param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.#ctor(AutoCSer.ORM.TableWriter{`0},System.Boolean,AutoCSer.ORM.ICondition)">
            <summary>
            SQL 查询创建器
            </summary>
            <param name="tableWriter">数据库表格持久化写入</param>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <param name="primaryKeyCondition">关键字条件</param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.And(AutoCSer.ORM.ICondition)">
            <summary>
            添加条件
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加条件
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.IfAnd(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            当指定逻辑值为 true 时添加条件
            </summary>
            <param name="boolean">指定逻辑值</param>
            <param name="condition"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.And(AutoCSer.ORM.QueryParameter.MemberParameter,System.Object)">
            <summary>
            添加条件
            </summary>
            <param name="memberParameter"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.AndQueryParameter``1(``0)">
            <summary>
            添加查询参数条件
            </summary>
            <typeparam name="VT">查询参数对象类型</typeparam>
            <param name="value">查询参数对象</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.OrderBy(System.String,System.Boolean,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="member">排序名称</param>
            <param name="isAscending">是否升序</param>
            <param name="checkMemberName">是否在表格模型中检查排序名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            添加排序
            </summary>
            <typeparam name="VT">排序数据列类型</typeparam>
            <param name="member">排序数据列表达式</param>
            <param name="isAscending">是否升序</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.OrderBy``1(AutoCSer.ORM.QueryBuilder{``0},System.Boolean)">
            <summary>
            添加排序
            </summary>
            <typeparam name="VT">排序子查询表格模型类型</typeparam>
            <param name="query">排序子查询</param>
            <param name="isAscending">是否升序</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.getOrderByMember">
            <summary>
            获取 ORDER BY 子查询字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.ClearOrderBy">
            <summary>
            清除排序
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.GetStatement(AutoCSer.Memory.CharStream)">
            <summary>
            生成查询 SQL 语句
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.GetQuery(System.Int32,System.Int32,System.Int64)">
            <summary>
            获取数据库表格模型 SQL 查询信息
            </summary>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="skipCount">跳过记录数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.GetQueryData(System.Int32,System.Int32,System.Int64)">
            <summary>
            获取查询 SQL 信息
            </summary>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="skipCount">跳过记录数量，比如用于分页</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.SingleOrDefault(System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.SingleOrDefault``1(System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Exists(System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            判断是否存在表格记录（设置查询列为表格主键）
            </summary>
            <param name="timeoutSeconds"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Query(System.Int32,System.Int32,System.Int64,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="skipCount">跳过记录数量，比如用于分页</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Query``1(System.Int32,System.Int32,System.Int64,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="skipCount">跳过记录数量，比如用于分页</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Query``1(System.Func{`0,``0},System.Int32,System.Int32,System.Int64,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="getValue">数据转换委托</param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="skipCount">跳过记录数量，比如用于分页</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Query``2(System.Func{``0,``1},System.Int32,System.Int32,System.Int64,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="getValue">数据转换委托</param>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="skipCount">跳过记录数量，比如用于分页</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Select(System.Int32,System.Int32,System.Int64,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="skipCount">跳过记录数量，比如用于分页</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Select``1(System.Int32,System.Int32,System.Int64,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="readCount">读取数据数量，0 表示不限制</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="skipCount">跳过记录数量，比如用于分页</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.GetPageQuery(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取数据库表格模型 SQL 分页查询信息
            </summary>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.GetQueryPageData``1(AutoCSer.ORM.PageResult{``0}@,System.Int32)">
            <summary>
            获取查询 SQL 信息
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="page">分页查询信息</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Page(System.Int32,System.Int32,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Page``1(System.Int32,System.Int32,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Page``1(System.Func{`0,``0},System.Int32,System.Int32,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="getValue">数据转换委托</param>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Page``2(System.Func{``0,``1},System.Int32,System.Int32,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="getValue">数据转换委托</param>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Count(System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据数量
            </summary>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.call``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,``0,AutoCSer.ORM.Transaction,System.String)">
            <summary>
            调用函数
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
            <param name="timeoutSeconds"></param>
            <param name="defaultValue"></param>
            <param name="transaction"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,``0,AutoCSer.ORM.Transaction)">
            <summary>
            查询字段求和结果
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member">求和字段</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="defaultValue">查询失败返回的默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,``0,AutoCSer.ORM.Transaction)">
            <summary>
            查询字段最大值
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member">取最大值字段</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="defaultValue">查询失败返回的默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,``0,AutoCSer.ORM.Transaction)">
            <summary>
            查询字段最小值
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member">取最小值字段</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="defaultValue">查询失败返回的默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.PageResult(System.Int32,System.Int32,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格分页数据
            </summary>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.PageResult``1(System.Int32,System.Int32,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格分页数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.PageResult``1(System.Func{`0,``0},System.Int32,System.Int32,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格分页数据
            </summary>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="getValue">数据转换委托</param>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.PageResult``2(System.Func{``0,``1},System.Int32,System.Int32,System.Int32,AutoCSer.ORM.Transaction)">
            <summary>
            查询表格分页数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="getValue">数据转换委托</param>
            <param name="pageIndex">分页号，从 1 开始</param>
            <param name="pageSize">分页记录数，最小值为 1</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.GetExtension">
            <summary>
            获取扩展查询 SQL 信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.QueryBuilder`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            添加 GROUP BY 子项
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
            <param name="queryName">添加查询名称，默认为 null 表示不添加到查询</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.ReaderDataTypeEnum">
            <summary>
            数据库读取数据类型
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.SelectEnumerator">
            <summary>
            异步查询枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.SelectEnumerator.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.SelectEnumerator.connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.SelectEnumerator.command">
            <summary>
            查询命令
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.SelectEnumerator.Reader">
            <summary>
            数据读取器
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.SelectEnumerator.errorCount">
            <summary>
            出错次数
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.SelectEnumerator.#ctor(AutoCSer.ORM.Transaction)">
            <summary>
            异步查询枚举器
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:AutoCSer.ORM.SelectEnumerator.getReader(AutoCSer.ORM.ConnectionPool)">
            <summary>
            获取数据读取器
            </summary>
            <param name="connectionPool"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SelectEnumerator.free(AutoCSer.ORM.ConnectionPool)">
            <summary>
            释放资源
            </summary>
            <param name="connectionPool"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.SelectEnumerator`2">
            <summary>
            异步查询枚举器
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="VT">枚举返回数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.SelectEnumerator`2.tableWriter">
            <summary>
            数据库表格持久化
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.SelectEnumerator`2.query">
            <summary>
            数据库表格模型 SQL 查询信息
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.SelectEnumerator`2.Current">
            <summary>
            当前读取数据
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.SelectEnumerator`2.#ctor">
            <summary>
            异步查询枚举器
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.SelectEnumerator`2.#ctor(AutoCSer.ORM.TableWriter{`0},AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            异步查询枚举器
            </summary>
            <param name="tableWriter"></param>
            <param name="query"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:AutoCSer.ORM.SelectEnumerator`2.System#Collections#Generic#IAsyncEnumerator{VT}#MoveNextAsync">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SelectEnumerator`2.GetReader">
            <summary>
            获取数据读取器
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.SelectEnumerator`2.DisposeAsync">
            <summary>
            释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Reflection.Emit.Field">
            <summary>
            字段操作
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Reflection.Emit.Field.UnsafeGetField``2(System.Reflection.FieldInfo,System.String)">
            <summary>
            创建获取字段委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="FT"></typeparam>
            <param name="field"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Reflection.Emit.Property">
            <summary>
            属性操作
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Reflection.Emit.Property.UnsafeSetProperty``2(System.Reflection.PropertyInfo,System.String)">
            <summary>
            创建设置属性委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="PT"></typeparam>
            <param name="property"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Reflection.Emit.Property.UnsafeGetProperty``2(System.Reflection.PropertyInfo,System.String)">
            <summary>
            创建获取属性委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="PT"></typeparam>
            <param name="property"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.Query`1">
            <summary>
            数据库表格模型 SQL 查询信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.ORM.Query`1.Statement">
            <summary>
            SQL 语句
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Query`1.MemberMap">
            <summary>
            查询成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Query`1.ReadCount">
            <summary>
            读取记录数量，0 表示不限制
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Query`1.TimeoutSeconds">
            <summary>
            查询命令超时秒数，0 表示不设置为默认值
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.Query`1.AutoCSer#ORM#IQueryBuilder#IsQuery">
            <summary>
            是否需要查询
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Query`1.#ctor">
            <summary>
            数据库表格模型 SQL 查询信息
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Query`1.#ctor(System.String,AutoCSer.Metadata.MemberMap{`0},System.Int32,System.Int32)">
            <summary>
            数据库表格模型 SQL 查询信息
            </summary>
            <param name="statement"></param>
            <param name="memberMap"></param>
            <param name="readCount"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:AutoCSer.ORM.Query`1.AutoCSer#ORM#IQueryBuilder#GetStatement(AutoCSer.Memory.CharStream)">
            <summary>
            获取查询语句
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.ORM.Query`1.Set(System.Data.Common.DbCommand)">
            <summary>
            设置命令参数
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Query`1.Null">
            <summary>
            查询条件为 false
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.TableQuery">
            <summary>
            数据库表格持久化查询
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableQuery.Writer">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.TableQuery.ConnectionPool">
            <summary>
            数据库连接池
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.TableQuery.TableName">
            <summary>
            表格名称
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery.#ctor(AutoCSer.ORM.TableWriter)">
            <summary>
            数据库表格持久化查询
            </summary>
            <param name="writer">数据库表格持久化写入</param>
        </member>
        <member name="T:AutoCSer.ORM.TableQuery`1">
            <summary>
            数据库表格持久化查询
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.TableQuery`1.Writer">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.#ctor(AutoCSer.ORM.TableWriter{`0})">
            <summary>
            数据库表格持久化查询
            </summary>
            <param name="writer">数据库表格持久化写入</param>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.CreateQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            创建 SQL 查询创建器
            </summary>
            <param name="condition">查询条件</param>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.CreateQuery(AutoCSer.ORM.Transaction@,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            创建 SQL 查询创建器
            </summary>
            <param name="transaction">事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.GetAssociatedTable``2(System.Linq.Expressions.Expression{System.Func{`0,``1}},AutoCSer.ORM.TableWriter{``0,``1},System.Action{AutoCSer.ORM.QueryBuilder{``0}})">
            <summary>
            模拟关联表格
            </summary>
            <typeparam name="RT">被关联表格模型类型</typeparam>
            <typeparam name="KT">关联关键字类型</typeparam>
            <param name="getLeftKey">获取关联表格关键字</param>
            <param name="rightTable">被关联表格</param>
            <param name="setQuery">设置关联查询条件以后的附加查询设置委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.GetAssociatedTable``2(System.Linq.Expressions.Expression{System.Func{`0,``1}},AutoCSer.ORM.TableWriter{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{AutoCSer.ORM.QueryBuilder{``0}})">
            <summary>
            模拟关联表格
            </summary>
            <typeparam name="RT">被关联表格模型类型</typeparam>
            <typeparam name="KT">关联关键字类型</typeparam>
            <param name="getLeftKey">获取关联表格关键字</param>
            <param name="rightTable">被关联表格</param>
            <param name="getRightKey">获取被关联表格关键字</param>
            <param name="setQuery">设置关联查询条件以后的附加查询设置委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.SingleOrDefault(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.SingleOrDefault``1(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.Query(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.Query``1(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.Query``1(AutoCSer.ORM.Query{`0},System.Func{`0,``0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="query"></param>
            <param name="getValue">数据转换委托</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.Query``2(AutoCSer.ORM.Query{`0},System.Func{``0,``1},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CT">转换数据类型</typeparam>
            <param name="query"></param>
            <param name="getValue">数据转换委托</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.Select(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.Select``1(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.CreateDictionaryCache``2(System.Action{System.Func{System.Threading.Tasks.Task}},System.Func{`0,``1},System.Int32,System.Boolean)">
            <summary>
            创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="KT">缓存数据关键字类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="reserveCapacity">字典初始预留容器大小</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.CreateFragmentDictionaryCache``2(System.Action{System.Func{System.Threading.Tasks.Task}},System.Func{`0,``1},System.Boolean)">
            <summary>
            创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="KT">缓存数据关键字类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`1.CreateFifoPriorityQueueCache``2(System.Func{`0,``1},System.Func{``1,System.Threading.Tasks.Task{``0}},System.Int32,System.Boolean)">
            <summary>
            创建先进先出队列缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <typeparam name="KT">缓存数据关键字类型</typeparam>
            <param name="getKey">获取缓存数据关键字委托</param>
            <param name="getValue">从数据库获取数据委托</param>
            <param name="capacity">字典容器大小</param>
            <param name="isClear">默认为 true 表示清理容器数据，否则可能会产生临时性的局部内存泄露</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.TableQuery`2">
            <summary>
            数据库表格持久化查询
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.TableQuery`2.Writer">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.#ctor(AutoCSer.ORM.TableWriter{`0,`1})">
            <summary>
            数据库表格持久化查询
            </summary>
            <param name="writer">数据库表格持久化写入</param>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.GetAssociatedTable``1(AutoCSer.ORM.TableQuery{``0,`1},System.Action{AutoCSer.ORM.QueryBuilder{``0}})">
            /// <summary>
            模拟关联表格
            </summary>
            <typeparam name="RT">被关联表格模型类型</typeparam>
            <param name="rightTable">被关联表格</param>
            <param name="setQuery">设置关联查询条件以后的附加查询设置委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.GetAssociatedTable``1(AutoCSer.ORM.TableQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,`1}},System.Action{AutoCSer.ORM.QueryBuilder{``0}})">
            <summary>
            模拟关联表格
            </summary>
            <typeparam name="RT">被关联表格模型类型</typeparam>
            <param name="rightTable">被关联表格</param>
            <param name="getRightKey">获取被关联表格关键字</param>
            <param name="setQuery">设置关联查询条件以后的附加查询设置委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.GetQueryByPrimaryKey(`1,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字获取数据库表格模型 SQL 查询信息
            </summary>
            <param name="primaryKey"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.GetByPrimaryKey(`1,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <param name="primaryKey"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.GetByPrimaryKey``1(`1,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKey"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.GetDictionary``1(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            获取表格关键字数据字典
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.CreateDictionaryCache``1(System.Action{System.Func{System.Threading.Tasks.Task}},System.Int32,System.Boolean)">
            <summary>
            根据数据库关键字创建字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="reserveCapacity">字典初始预留容器大小</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.CreateFragmentDictionaryCache``1(System.Action{System.Func{System.Threading.Tasks.Task}},System.Boolean)">
            <summary>
            根据数据库关键字创建 256 基分片 字典事件缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <param name="appendQueue">添加队列任务</param>
            <param name="isEventAvailable">默认为 true 缓存对象事件可用</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableQuery`2.CreateFifoPriorityQueueCache``1(System.Int32,System.Boolean)">
            <summary>
            根据数据库关键字创建先进先出队列缓存（缓存操作与表格增删改操作必须在队列中调用）
            </summary>
            <typeparam name="VT">缓存数据类型</typeparam>
            <param name="capacity">字典容器大小</param>
            <param name="isClear">默认为 true 表示清理容器数据，否则可能会产生临时性的局部内存泄露</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.TableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.DefaultAttribute">
            <summary>
            默认空属性
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.ConnectionPool">
            <summary>
            数据库连接池
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.TableName">
            <summary>
            表格名称
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.Attribute">
            <summary>
            数据表格模型配置
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.Members">
            <summary>
            数据表格模型字段成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.PrimaryKey">
            <summary>
            关键字字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.Columns">
            <summary>
            数据库表格字段成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.ColumnNames">
            <summary>
            数据表格模型字段成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter.columnValueCache">
            <summary>
            数据列对象集合 临时缓存
            </summary>
        </member>
        <member name="P:AutoCSer.ORM.TableWriter.AutoIdentity">
            <summary>
            主键是否自增ID
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter.#ctor(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.ModelAttribute,System.String,AutoCSer.ORM.Member[],AutoCSer.ORM.Member)">
            <summary>
            数据库表格持久化写入
            </summary>
            <param name="connectionPool">数据库连接池</param>
            <param name="tableName">表格名称</param>
            <param name="attribute">数据表格模型配置</param>
            <param name="members">数据表格模型字段成员集合</param>
            <param name="primaryKey">关键字字段成员</param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter.GetConnectionCreator(AutoCSer.ORM.TableWriter)">
            <summary>
            获取创建数据库连接
            </summary>
            <param name="tableWriter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter.GetColumnValueCache(System.Int32)">
            <summary>
            获取数据列对象集合
            </summary>
            <param name="columnCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter.FreeColumnValueCache(System.Object[])">
            <summary>
            释放数据列对象集合
            </summary>
            <param name="columnValueCache"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter.GetMember(System.Reflection.MemberInfo)">
            <summary>
            根据成员定义获取成员
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter.IsColumnName(System.String)">
            <summary>
            判断是否存在列名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter.TryFormatColumnName(System.String)">
            <summary>
            数据列名称格式化
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter.CheckReadOnly(AutoCSer.ORM.Transaction@)">
            <summary>
            写操作前检查只读状态与数据库事务连接池是否匹配
            </summary>
        </member>
        <member name="T:AutoCSer.ORM.TableWriter`1">
            <summary>
            数据库表格持久化写入
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.Read">
            <summary>
            设置表格模型对象委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.InsertValue">
            <summary>
            写入表格模型数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.UpdateValue">
            <summary>
            写入更新数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.ConcatCondition">
            <summary>
            写入条件数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.copyTo">
            <summary>
            复制数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.toArray">
            <summary>
            数据列值转数组
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.MemberMap">
            <summary>
            表格模型成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.PrimaryKeyMemberMap">
            <summary>
            关键字成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.DefaultUpdateMemberMap">
            <summary>
            可以更新数据的成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.Events">
            <summary>
            表格操作事件处理集合
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`1.eventLock">
            <summary>
            表格操作事件处理集合 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.#ctor(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.ModelAttribute,AutoCSer.ORM.Member[],AutoCSer.ORM.Member,AutoCSer.ORM.ITableEvent{`0})">
            <summary>
            数据库表格持久化写入
            </summary>
            <param name="connectionPool">数据库连接池</param>
            <param name="attribute">数据表格模型配置</param>
            <param name="members">数据表格模型字段成员集合</param>
            <param name="primaryKey">关键字字段成员</param>
            <param name="tableEvent">表格操作事件处理</param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.GetMemberMap(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            获取查询成员位图
            </summary>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.GetUpdateMemberMap(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            根据指定成员位图匹配创建表格查询字段成员位图
            </summary>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.CopyTo(`0,`0)">
            <summary>
            复制数据
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.CopyTo(`0,`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            复制数据
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.ToArray(`0)">
            <summary>
            数据列值转数组
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.CreateQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            创建 SQL 查询创建器
            </summary>
            <param name="condition">查询条件</param>
            <param name="isTransaction">是否事务查询，事务查询默认锁为 NONE，否则锁为 NOLOCK</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.SetInsertAutoIdentity(`0)">
            <summary>
            设置新增对象自增ID
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.AppendEvent(AutoCSer.ORM.ITableEvent{`0})">
            <summary>
            添加表格操作事件处理对象（表格增删改操作必须在队列中调用）
            </summary>
            <param name="tableEvent"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.RemoveEvent(AutoCSer.ORM.ITableEvent{`0})">
            <summary>
            移除表格操作事件处理对象
            </summary>
            <param name="tableEvent"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.getIndexOfEvent(AutoCSer.ORM.ITableEvent{`0})">
            <summary>
            获取表格操作事件处理对象索引位置
            </summary>
            <param name="tableEvent"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.CreateIndex(System.String[],System.String,System.Boolean,System.Int32)">
            <summary>
            创建表格索引
            </summary>
            <param name="columnNames"></param>
            <param name="indexNameSuffix">索引名称后缀</param>
            <param name="isUnique">是否唯一索引</param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <returns>指定的索引名称已经存在则返回 false</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.SingleOrDefault(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.SingleOrDefault``1(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询第一个表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.singleOrDefault``1(System.Data.Common.DbCommand,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            查询第一个表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="command"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Query``1(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.query``1(System.Data.Common.DbCommand,AutoCSer.Metadata.MemberMap{`0},System.Int32)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="command"></param>
            <param name="memberMap"></param>
            <param name="readCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Query``2(AutoCSer.ORM.Query{`0},System.Func{``0,``1},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CT"></typeparam>
            <param name="query"></param>
            <param name="getValue"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.query``2(System.Data.Common.DbCommand,AutoCSer.Metadata.MemberMap{`0},System.Func{``0,``1},System.Int32)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="CT"></typeparam>
            <param name="command"></param>
            <param name="memberMap"></param>
            <param name="getValue"></param>
            <param name="readCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Select(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Select``1(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Insert(AutoCSer.Memory.CharStream,`0)">
            <summary>
            写入添加数据 SQL 语句
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Convert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            成员表达式转换
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.ConvertIsSimple``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            成员表达式转换
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Update``2(AutoCSer.ORM.ICachePersistence{`0,``0,``1},``0,AutoCSer.Metadata.MemberMap{`0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据（缓存操作必须在队列中调用）
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="cache"></param>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Update``2(AutoCSer.ORM.ICachePersistence{`0,``0,``1},AutoCSer.Metadata.MemberMapValue{`0,``0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存更新数据（缓存操作必须在队列中调用）
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="cache"></param>
            <param name="value"></param>
            <param name="isClone">默认为 true 表示浅复制缓存数据对象，避免缓存数据对象数据被意外修改</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Update``1(``0,AutoCSer.Metadata.MemberMap{`0},``0,AutoCSer.ORM.Transaction)">
            <summary>
            更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="cacheValue"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Delete``2(AutoCSer.ORM.ICachePersistence{`0,``0,``1},``1,AutoCSer.ORM.Transaction)">
            <summary>
            根据缓存关键字删除数据（缓存操作必须在队列中调用）
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`1.Delete``1(``0,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            删除数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="isEventAvailable"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.TableWriter`2">
            <summary>
            数据库表格持久化写入
            </summary>
            <typeparam name="T">持久化表格模型类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`2.GetPrimaryKey">
            <summary>
            获取关键字委托
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TableWriter`2.SetPrimaryKey">
            <summary>
            设置关键字委托
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.#ctor(AutoCSer.ORM.ConnectionPool,AutoCSer.ORM.ModelAttribute,AutoCSer.ORM.Member[],AutoCSer.ORM.Member,AutoCSer.ORM.ITableEvent{`0})">
            <summary>
            数据库表格持久化写入
            </summary>
            <param name="connectionPool">数据库连接池</param>
            <param name="attribute">数据表格模型配置</param>
            <param name="members">数据表格模型字段成员集合</param>
            <param name="primaryKey">关键字字段成员</param>
            <param name="tableEvent">表格操作事件处理</param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.CheckUpdateAutoIdentity(`1)">
            <summary>
            更新自增ID记录
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.PrimaryKeyCondition(AutoCSer.Memory.CharStream,`1)">
            <summary>
            写入关键字查询条件
            </summary>
            <param name="charStream"></param>
            <param name="primaryKey"></param>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.GetByPrimaryKey(`1,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <param name="primaryKey"></param>
            <param name="memberMap"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.GetByPrimaryKey``1(`1,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKey"></param>
            <param name="memberMap"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.GetByPrimaryKey(`1,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <param name="primaryKey"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.GetByPrimaryKey``1(`1,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKey"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.GetByPrimaryKey``1(`1)">
            <summary>
            根据关键字查询表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.GetDictionary``1(AutoCSer.ORM.Query{`0},AutoCSer.ORM.Transaction)">
            <summary>
            获取表格关键字数据字典
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="query"></param>
            <param name="transaction"></param>
            <returns>没有数据时返回 null</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Insert``1(``0,AutoCSer.ORM.Transaction)">
            <summary>
            添加表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.insert``1(``0,AutoCSer.ORM.Transaction)">
            <summary>
            添加表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Insert``1(System.Collections.Generic.IEnumerable{``0},AutoCSer.ORM.Transaction)">
            <summary>
            添加表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="values"></param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Update``1(``0,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            更新表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Update``1(AutoCSer.Metadata.MemberMapValue{`0,``0},AutoCSer.ORM.Transaction)">
            <summary>
            更新表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Update``1(``0,AutoCSer.Metadata.MemberMap{`0},``0,AutoCSer.ORM.Transaction)">
            <summary>
            更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="transaction"></param>
            <param name="cacheValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.update``1(``0,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            更新表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Update``1(System.Collections.Generic.IEnumerable{``0},AutoCSer.Metadata.MemberMap{`0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            更新表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="values"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Update``1(``0,AutoCSer.Metadata.MemberMap{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="condition"></param>
            <param name="transaction"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Update``1(AutoCSer.Metadata.MemberMapValue{`0,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="condition"></param>
            <param name="transaction"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Update``1(``0,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.QueryBuilder{`0},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Update``1(AutoCSer.Metadata.MemberMapValue{`0,``0},AutoCSer.ORM.QueryBuilder{`0},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.update``1(``0,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.QueryBuilder{`0},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件更新数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="memberMap">查询成员位图，默认为所有成员</param>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>更新数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete(`1,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <param name="primaryKey"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete``1(`1,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKey"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.delete``1(`1,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKey"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete``1(``0,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete``1(``0,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            删除数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="transaction"></param>
            <param name="isEventAvailable"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.delete``1(``0,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="isEventAvailable">传参对象是否事件可用</param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.delete``1(``0,`1,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="value"></param>
            <param name="primaryKey"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete(System.Collections.Generic.IEnumerable{`1},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <param name="primaryKeys"></param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete``1(System.Collections.Generic.IEnumerable{`1},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="primaryKeys"></param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据关键字删除表格数据
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="values"></param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="condition"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete(AutoCSer.ORM.QueryBuilder{`0},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.Delete``1(AutoCSer.ORM.QueryBuilder{`0},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.ORM.TableWriter`2.delete``1(AutoCSer.ORM.QueryBuilder{`0},System.Int32,System.Boolean,AutoCSer.ORM.Transaction)">
            <summary>
            根据查询条件删除数据
            </summary>
            <param name="query"></param>
            <param name="timeoutSeconds">查询命令超时秒数，0 表示不设置为默认值</param>
            <param name="ignoreFail">默认表示忽略失败继续执行，否则任意数据删除失败则回滚事务处理</param>
            <param name="transaction"></param>
            <returns>删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.ORM.Transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Transaction.AsyncLocal">
            <summary>
            异步上下文
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Transaction.GetAsyncLocal">
            <summary>
            获取异步上下文数据库事务
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ORM.Transaction.ConnectionPool">
            <summary>
            数据库连接池
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Transaction.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Transaction.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.Transaction.Commiteds">
            <summary>
            事务提交事件集合
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Transaction.#ctor(AutoCSer.ORM.ConnectionPool,System.Data.Common.DbConnection@,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            数据库事务
            </summary>
            <param name="connectionPool">数据库连接池</param>
            <param name="connection">数据库连接</param>
            <param name="transaction">数据库事务</param>
            <param name="isAsyncLocal">是否创建异步上下文</param>
        </member>
        <member name="M:AutoCSer.ORM.Transaction.CreateCommand(System.String)">
            <summary>
            创建命令
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Transaction.Set(System.Data.Common.DbCommand)">
            <summary>
            设置命令参数
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Transaction.ClearConnection">
            <summary>
            获取并清除数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Transaction.CommitAsync">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.Transaction.Dispose">
            <summary>
            释放事务，回滚未提交事务
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.Transaction.DisposeAsync">
            <summary>
            释放事务，回滚未提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.TransactionCommited">
            <summary>
            事务提交事件
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TransactionCommited.eventType">
            <summary>
            表格操作事件类型
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TransactionCommited.#ctor(AutoCSer.ORM.TableEventTypeEnum)">
            <summary>
            事务提交事件
            </summary>
            <param name="eventType"></param>
        </member>
        <member name="M:AutoCSer.ORM.TransactionCommited.OnCommited">
            <summary>
            事务提交后的处理
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ORM.TransactionCommited`1">
            <summary>
            事务提交事件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ORM.TransactionCommited`1.tableWriter">
            <summary>
            数据库表格持久化写入
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TransactionCommited`1.value">
            <summary>
            操作数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.ORM.TransactionCommited`1.memberMap">
            <summary>
            更新操作成员
            </summary>
        </member>
        <member name="M:AutoCSer.ORM.TransactionCommited`1.#ctor(AutoCSer.ORM.TableEventTypeEnum,AutoCSer.ORM.TableWriter{`0},`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            事务提交事件
            </summary>
            <param name="eventType"></param>
            <param name="tableWriter"></param>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.ORM.TransactionCommited`1.OnCommited">
            <summary>
            事务提交后的处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TransactionCommited`1.OnInserted(AutoCSer.ORM.TableWriter{`0},`0,AutoCSer.ORM.Transaction)">
            <summary>
            添加数据
            </summary>
            <param name="tableWriter"></param>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TransactionCommited`1.OnUpdated(AutoCSer.ORM.TableWriter{`0},`0,AutoCSer.Metadata.MemberMap{`0},AutoCSer.ORM.Transaction)">
            <summary>
            更新数据
            </summary>
            <param name="tableWriter"></param>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ORM.TransactionCommited`1.OnDeleted(AutoCSer.ORM.TableWriter{`0},`0,AutoCSer.ORM.Transaction)">
            <summary>
            删除数据
            </summary>
            <param name="tableWriter"></param>
            <param name="value"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.RandomKey`1">
            <summary>
            随机防 HASH 构造关键字
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.RandomKey`1.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.RandomKey`1.op_Implicit(`0)~AutoCSer.RandomKey{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.op_Implicit(AutoCSer.RandomKey{`0})~`0">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.Equals(AutoCSer.RandomKey{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.Equals(`0)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
    </members>
</doc>
