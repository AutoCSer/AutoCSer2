<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.Algorithm.QuickSort">
            <summary>
            指针快速排序
            </summary>
            <summary>
            指针快速排序
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.SortLong(System.Byte*,System.Byte*)">
            <summary>
            快速排序
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="endIndex">结束位置 - sizeof(long)</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.SortInt(System.Byte*,System.Byte*)">
            <summary>
            快速排序
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="endIndex">结束位置 - sizeof(int)</param>
        </member>
        <member name="T:AutoCSer.Algorithm.IntegerDivision">
            <summary>
            31b 整数除法
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntegerDivision.Divisor">
            <summary>
            31b 除数
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntegerDivision.ShiftBit">
            <summary>
            除 divisor 转位移乘法位移数量
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntegerDivision.Multiplier">
            <summary>
            除 divisor 转位移乘法乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntegerDivision.HighBitMod">
            <summary>
            最高位 % divisor 模数（余数）
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntegerDivision.HighBitQuotient">
            <summary>
            最高位 / divisor 商
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.IntegerDivision.#ctor(System.Int32,System.UInt32)">
            <summary>
            31b 整数除法 a/b = a*(s/b)/s
            </summary>
            <param name="divisor">31b 除数，必须大于 0</param>
            <param name="maxValue">最大被除数</param>
        </member>
        <member name="M:AutoCSer.Algorithm.IntegerDivision.Set(System.Int32,System.UInt32)">
            <summary>
            设置计算参数 a/b = a*(s/b)/s
            </summary>
            <param name="divisor">31b 除数，必须大于 0</param>
            <param name="maxValue">最大被除数</param>
        </member>
        <member name="M:AutoCSer.Algorithm.IntegerDivision.GetQuotient(System.UInt32)">
            <summary>
            获取商
            </summary>
            <param name="dividend">被除数</param>
            <returns>商</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.IntegerDivision.GetQuotient(System.Int32)">
            <summary>
            获取商
            </summary>
            <param name="dividend">被除数，必须大于 0</param>
            <returns>商</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.IntegerDivision.GetMod(System.UInt32)">
            <summary>
            获取模数（余数）
            </summary>
            <param name="dividend">被除数</param>
            <returns>模数（余数）</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.IntegerDivision.GetMod(System.Int32)">
            <summary>
            获取模数（余数）
            </summary>
            <param name="dividend">被除数，必须大于 0</param>
            <returns>模数（余数）</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.QuickSort`1">
            <summary>
            排序器
            </summary>
            <typeparam name="T">排序数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Algorithm.QuickSort`1.Array">
            <summary>
            待排序数组
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.QuickSort`1.Comparer">
            <summary>
            排序比较器
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort`1.#ctor(`0[],System.Func{`0,`0,System.Int32})">
            <summary>
            排序器
            </summary>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort`1.Sort(System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort`1.Sort(`0[],System.Func{`0,`0,System.Int32})">
            <summary>
            Array sorting
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="comparer">排序比较器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort`1.Sort(`0[],System.Func{`0,`0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="comparer">排序比较器</param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The quantity of data to be sorted
            排序数据数量</param>
        </member>
        <member name="T:AutoCSer.Algorithm.TopologySort">
            <summary>
            拓扑排序
            </summary>
        </member>
        <member name="T:AutoCSer.Algorithm.TopologySort.Sorter`1">
            <summary>
            拓扑排序器
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.graph">
            <summary>
            图
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.values">
            <summary>
            排序结果
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.index">
            <summary>
            当前排序位置
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.isDesc">
            <summary>
            是否反向排序
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.#ctor(System.Collections.Generic.Dictionary{`0,AutoCSer.ListArray{`0}},AutoCSer.LeftArray{`0}@,System.Boolean)">
            <summary>
            拓扑排序器
            </summary>
            <param name="graph">图</param>
            <param name="points">单点集合</param>
            <param name="isDesc">是否反向排序</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.Sort">
            <summary>
            拓扑排序
            </summary>
            <returns>排序结果</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.pop(`0)">
            <summary>
            排序子节点
            </summary>
            <param name="point">子节点</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.popDesc(`0)">
            <summary>
            排序子节点
            </summary>
            <param name="point">子节点</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sort``1(System.Collections.Generic.ICollection{AutoCSer.KeyValue{``0,``0}},System.Collections.Generic.HashSet{``0},System.Boolean)">
            <summary>
            拓扑排序
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="edges">边集合</param>
            <param name="points">无边点集合</param>
            <param name="isDesc">是否反向排序</param>
            <returns>排序结果</returns>
        </member>
        <member name="T:AutoCSer.ArrayValue`1">
            <summary>
            Array element, used for one-time operations on data element
            数组元素，用于一次性操作数据元素
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ArrayValue`1.Value">
            <summary>
            Array element value
            数组元素值
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayValue`1.Pop">
            <summary>
            Pop out the value of the array element
            弹出数组元素值
            </summary>
            <returns>Array element value
            数组元素值</returns>
        </member>
        <member name="T:AutoCSer.BinaryDeserializer">
            <summary>
            Binary data deserialization
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.DefaultConfig">
            <summary>
            Public default configuration parameters
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.Context">
            <summary>
            Custom context
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.Config">
            <summary>
            Deserialization configuration parameters
            反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.jsonDeserializer">
            <summary>
            JSON deserialization
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.MemberMap">
            <summary>
            Member bitmap
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.MemberMapType">
            <summary>
            Member bitmap type
            成员位图类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.points">
            <summary>
            The position of the historical object pointer
            历史对象指针位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.Buffer">
            <summary>
            Data byte array
            数据字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.bufferFixed">
            <summary>
            Data byte array data starting position
            数据字节数组数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.start">
            <summary>
            The starting position of deserialization data
            反序列化数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.End">
            <summary>
            The end position of deserialization data
            反序列化数据结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.Current">
            <summary>
            The current position for reading data
            当前读取数据位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.realTypeCurrent">
            <summary>
            Real type resolution location
            真实类型解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.objectReference">
            <summary>
            The position of the next object reference
            下一个对象引用位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.fixedCurrent">
            <summary>
            Fix the starting position of the data
            固定数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.StreamPersistenceMemoryDatabaseServiceRequestParameterContext">
            <summary>
            In-memory database request parameter context
            内存数据库请求参数上下文
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.objectReferencePoint">
            <summary>
            The position of the next object reference
            下一个对象引用位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.isCheckRemoteType">
            <summary>
            Whether it is necessary to call AutoCSer.Common.Config.CheckRemoteType to check the validity of the remote type
            是否需要调用 AutoCSer.Common.Config.CheckRemoteType 检查远程类型的合法性
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.State">
            <summary>
            Deserialization status
            反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.jsonState">
            <summary>
            JSON deserialization status
            JSON 反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.customError">
            <summary>
            Customize deserialization error messages
            自定义反序列化错误信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserialize``1(System.Byte[],System.Byte*,System.Byte*,System.Int32,``0@,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="bufferFixed"></param>
            <param name="start"></param>
            <param name="size"></param>
            <param name="value"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.checkHeaderValue(System.UInt32)">
            <summary>
            Check the header data
            检查头部数据
            </summary>
            <param name="headerValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetContext(System.Object,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            Set a custom context
            设置自定义上下文
            </summary>
            <param name="context"></param>
            <param name="config"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetContextNoCheckRemoteType(System.Object,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            Set a custom context
            设置自定义上下文
            </summary>
            <param name="context"></param>
            <param name="config"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.freeThreadStatic">
            <summary>
            Release resources (Thread static instance mode)
            释放资源（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Free">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.FreeContext">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.FreeContextCheckRemoteType">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckNotNull``1(``0@)">
            <summary>
            Check whether the data is null
            检查数据是否为 null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckTryPush``1(``0@,System.Boolean@)">
            <summary>
            Getting a history object
            获取历史对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="isRealType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Constructor``1(``0@)">
            <summary>
            Constructor call
            构造函数调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckNullPoint``1(``0@)">
            <summary>
            Getting a history object
            获取历史对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.getPoint``1(``0@)">
            <summary>
            Getting a history object
            获取历史对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.tryPush(System.Object)">
            <summary>
            Add historical objects
            添加历史对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.TryPush(System.Object)">
            <summary>
            Add historical objects
            添加历史对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.push(System.Object)">
            <summary>
            Add historical objects
            添加历史对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckNullValue">
            <summary>
            Object null value detection
            对象 null 值检测
            </summary>
            <returns>返回 0 表示 null</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CheckMemberCount(System.Int32)">
            <summary>
            Match the number of members
            匹配成员数量
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.GetMemberMap``1">
            <summary>
            Get the member bitmap
            获取成员位图
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize``1(``0@)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.ICustom``1(``0@)">
            <summary>
            Custom deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.ICustom``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Custom deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Json``1(``0@)">
            <summary>
            JSON mixed binary deserialization
            JSON 混杂二进制 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Json``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            JSON mixed binary deserialization
            JSON 混杂二进制 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructJson``1(``0@)">
            <summary>
            JSON mixed binary deserialization
            JSON 混杂二进制 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructJson``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            JSON mixed binary deserialization
            JSON 混杂二进制 反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Simple``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Binary deserialization to simple deserialization (for AOT code generation, not allowed for developers to call)
            二进制反序列化转简单反序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.realTypeObject``1">
            <summary>
            Real type deserialization
            真实类型反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.RealTypeObject``1(AutoCSer.BinaryDeserializer)">
            <summary>
            Real type deserialization
            真实类型反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.RealType``1(``0@)">
            <summary>
            Real type deserialization
            真实类型反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NotSupport``1(``0@)">
            <summary>
            Custom deserialization not supported types
            自定义反序列化不支持的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NotSupport``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Custom deserialization not supported types
            自定义反序列化不支持的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.baseDeserialize``2(``0@)">
            <summary>
            Base type deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Base``2(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Base type deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize``1(System.Nullable{``0}@)">
            <summary>
            Object serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Nullable``1(AutoCSer.BinaryDeserializer,System.Nullable{``0}@)">
            <summary>
            Object serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserializeArray``1(``0[]@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>Array length</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.createArray``1(``0[]@,System.Int32)">
            <summary>
            Create an array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserializeArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>Array length</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.createArray``1(AutoCSer.ListArray{``0}@,System.Int32)">
            <summary>
            Create an array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.createArray``1(AutoCSer.LeftArray{``0}@,System.Int32)">
            <summary>
            Create an array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize``1(``0[]@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Array``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize``1(AutoCSer.ListArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.ListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.LeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructArray``1(``0[]@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructArray``1(AutoCSer.ListArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructArray``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.StructLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableArray``1(System.Nullable{``0}[]@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableArray``1(AutoCSer.BinaryDeserializer,System.Nullable{``0}[]@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableArray``1(AutoCSer.ListArray{System.Nullable{``0}}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Nullable{``0}}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableArray``1(AutoCSer.LeftArray{System.Nullable{``0}}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.NullableLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Nullable{``0}}@)">
            <summary>
            Array deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Collection``2(``0@)">
            <summary>
            Collection deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="collection">Collection object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Collection``2(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Collection deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="deserializer"></param>
            <param name="collection">Collection object</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Dictionary``3(``0@)">
            <summary>
            Dictionary deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Dictionary``3(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Dictionary deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="deserializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserializeJson``1(``0@,System.Int32)">
            <summary>
            JSON deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.checkJsonDeserializeResult(AutoCSer.Json.DeserializeResult)">
            <summary>
            Check the deserialization status of JSON
            检查 JSON 反序列化状态
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeJsonString``1(System.Byte*,System.Int32,``0@)">
            <summary>
            JSON deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start"></param>
            <param name="size">Multiples of 4
            4 的倍数</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.createJsonDeserializer">
            <summary>
            Get JSON deserialization
            获取 JSON 反序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserializeJson``1(System.Char*,System.Int32,``0@)">
            <summary>
            JSON deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start"></param>
            <param name="length"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.deserializeJsonBuffer``1(``0@)">
            <summary>
            JSON deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeJsonBuffer``1(``0@)">
            <summary>
            JSON deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByte``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByte``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShort``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShort``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Boolean@)">
            <summary>
            Logical value deserialization
            逻辑值反序列化
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Boolean@)">
            <summary>
            Logical value deserialization
            逻辑值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Boolean[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Boolean[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Boolean}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Boolean}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Boolean}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Boolean}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Boolean}@)">
            <summary>
            Logical value deserialization
            逻辑值反序列化
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Boolean}@)">
            <summary>
            Logical value deserialization
            逻辑值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Boolean}@)">
            <summary>
            Logical value deserialization
            逻辑值反序列化
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Boolean}@)">
            <summary>
            Logical value deserialization
            逻辑值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Boolean}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Boolean}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Byte@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Byte@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Byte}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Byte}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.SByte@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.SByte@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.SByte}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.SByte}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int16@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int16@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Int16}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int16}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt16@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt16@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.UInt16}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt16}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Char@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Char@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Char}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Char}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Half@)">
            <summary>
            Floating-point number deserialization
            浮点数反序列化
            </summary>
            <param name="value">Floating-point number</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Half@)">
            <summary>
            Floating-point number deserialization
            浮点数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Floating-point number</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Half[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Half[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Half[]},System.Half[]@)">
            <summary>
            Deserialization from the data buffer (reading directly without checking the object reference)
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize(System.Byte*,System.Byte*,System.Char*,System.Int32,System.Int32)">
            <summary>
            String deserialization
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="write">Write position</param>
            <param name="length">Write length</param>
            <param name="lengthSize">Write the byte size of the length data
            写入长度数据的字节大小</param>
            <returns>Return null upon failure</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize(System.String@)">
            <summary>
            String deserialization
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.String@)">
            <summary>
            String deserialization
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.String@)">
            <summary>
            String deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.SubString@)">
            <summary>
            String deserialization
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.SubString@)">
            <summary>
            String deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Type@)">
            <summary>
            Type deserialization
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Type@)">
            <summary>
            Type deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Object@)">
            <summary>
            object deserialization
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Object@)">
            <summary>
            object deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetCustomMemberMapType(System.Type)">
            <summary>
            Get and set the custom deserialization member bitmap type
            获取并设置自定义反序列化成员位图类型
            </summary>
            <param name="memberMapType">The custom deserialization member bitmap type set
            设置的自定义反序列化成员位图类型</param>
            <returns>Deserialize member bitmap type
            反序列化成员位图类型</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.GetCustomMemberMap(System.Type)">
            <summary>
            Gets the custom deserialized member bitmap
            获取自定义反序列化成员位图
            </summary>
            <param name="memberMapType">The custom deserialization member bitmap type set
            设置的自定义反序列化成员位图类型</param>
            <returns>Deserialize member bitmap
            反序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            Get and set the custom deserialization member bitmap
            获取并设置自定义反序列化成员位图
            </summary>
            <param name="memberMap">The custom deserialization member bitmap set
            设置的自定义反序列化成员位图</param>
            <returns>Deserialize member bitmap
            反序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.GetBeforeMove(System.Int32)">
            <summary>
            Move the read data position and return to the position before the move
            移动读取数据位置并返回移动之前的位置
            </summary>
            <param name="size"></param>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.CustomDeserialize``1(``0@)">
            <summary>
            Custom deserialization call
            自定义反序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(AutoCSer.SubArray{System.Byte}@,System.Boolean)">
            <summary>
            Deserialization from the data buffer (reading directly without checking the object reference)
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="buffer"></param>
            <param name="isBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Byte[]@)">
            <summary>
            Deserialization from the data buffer (reading directly without checking the object reference)
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeString(System.Byte*,System.Int32,System.String@)">
            <summary>
            String deserialization
            </summary>
            <param name="start"></param>
            <param name="size">Multiples of 4
            4 的倍数</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.String@)">
            <summary>
            Deserialization from the data buffer (reading directly without checking the object reference)
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeOnly(System.String@)">
            <summary>
            Deserialization from the data buffer (reading directly without checking the object reference)
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBufferStart">
            <summary>
            The custom deserialization data buffer begins processing
            自定义反序列化数据缓冲区开始处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBufferEnd(System.Byte*)">
            <summary>
            The custom deserialization data buffer has completed processing
            自定义反序列化数据缓冲区结束处理
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.IndependentDeserialize``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            Deserialize independent objects from independent data buffers
            从独立数据缓冲区反序列化独立对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.IndependentDeserialize``1(System.Byte[],``0@)">
            <summary>
            Deserialize independent objects from independent data buffers
            从独立数据缓冲区反序列化独立对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.InternalIndependentDeserializeNotReference``1(``0@)">
            <summary>
            Deserialize the internal member object from the independent data buffer (with no reference check on the outer layer)
            从独立数据缓冲区反序列化内部成员对象（外层无引用检查）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.InternalIndependentDeserializeNotReference``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            Deserialize the internal member object from the independent data buffer
            从独立数据缓冲区反序列化内部成员对象
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="buffer">Data buffer</param>
            <param name="value">Target object</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SimpleDeserialize``1(``0@)">
            <summary>
            Deserialize the internal member object from the independent data buffer
            从独立数据缓冲区反序列化内部成员对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SimpleDeserialize``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            Deserialize the internal member object from the independent data buffer
            从独立数据缓冲区反序列化内部成员对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">Data buffer</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SimpleDeserialize``1(System.Byte[],``0@)">
            <summary>
            Deserialize the internal member object from the independent data buffer
            从独立数据缓冲区反序列化内部成员对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">Data buffer</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetCustomError(System.String)">
            <summary>
            Set the custom error status for deserialization
            设置反序列化自定义错误状态
            </summary>
            <param name="customError">Customize deserialization error messages</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetErrorState(AutoCSer.BinarySerialize.DeserializeStateEnum)">
            <summary>
            Set the error status
            设置错误状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetIndexOutOfRange">
            <summary>
            Set the error of insufficient data length
            设置数据长度不足错误
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.FixedFillSize(AutoCSer.BinaryDeserializer,System.Int32)">
            <summary>
            Fix the number of packet padding bytes
            固定分组填充字节数
            </summary>
            <param name="deserializer"></param>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetFixedCurrent(AutoCSer.BinaryDeserializer)">
            <summary>
            Set the starting position of the fixed data
            设置固定数据起始位置
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetFixedCurrentEnd(AutoCSer.BinaryDeserializer)">
            <summary>
            Set the fixed data end position
            设置固定数据结束位置
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeJsonNotNullCheckZore``1(``0@)">
            <summary>
            JSON deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize``1">
            <summary>
            AOT code generation template
            AOT 代码生成模板
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.FixedFillSize(System.Int32)">
            <summary>
            Fixed packet fill byte count (for AOT code generation, not allowed for developers to call)
            固定分组填充字节数（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetFixedCurrent">
            <summary>
            Set the fixed data starting position (for AOT code generation and not allowed for developers to call)
            设置固定数据起始位置（用于 AOT 代码生成，不允许开发者调用）
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SetFixedCurrentEnd">
            <summary>
            Set the fixed data end position (for AOT code generation and not allowed for developers to call)
            设置固定数据结束位置（用于 AOT 代码生成，不允许开发者调用）
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.ReadBuffer(System.Byte*@,System.Byte*@)">
            <summary>
            读取数据缓冲区起始与结束位置信息
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize``1(System.Byte[],AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="buffer">Data buffer</param>
            <param name="config">Configuration parameters</param>
            <returns>Target object</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Deserialize``1(System.Byte[],``0@,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="buffer">Data buffer</param>
            <param name="value">Target object</param>
            <param name="config">Configuration parameters</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.UnsafeDeserialize``1(System.Byte*,System.Int32,``0@,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="size"></param>
            <param name="value"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.IndependentDeserializeBuffer``1(System.Byte[],``0@)">
            <summary>
            Deserialize independent objects from independent data buffers
            从独立数据缓冲区反序列化独立对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.SimpleDeserializeBuffer``1(System.Byte[],``0@)">
            <summary>
            Deserialize independent objects from independent data buffers
            从独立数据缓冲区反序列化独立对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.ThreadStaticDeserialize``1(System.Byte[],AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            Deserialization (Thread static Instance pattern)
            反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="buffer">Data buffer</param>
            <param name="config">Configuration parameters</param>
            <returns>Target object</returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.ThreadStaticDeserialize``1(System.Byte[],``0@,AutoCSer.BinarySerialize.DeserializeConfig)">
            <summary>
            Deserialization (Thread static Instance pattern)
            反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="buffer">Data buffer</param>
            <param name="value">Target object</param>
            <param name="config">Configuration parameters</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinaryDeserializer.DeserializeDelegate`1">
            <summary>
            Deserialization delegation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">Binary data deserialization</param>
            <param name="value">Target data</param>
        </member>
        <member name="F:AutoCSer.BinaryDeserializer.DeserializeDelegates">
            <summary>
            Basic type deserialization delegate collection
            基本类型反序列化委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt128@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt128@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.UInt128@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.UInt128[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt128[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.UInt128[]},System.UInt128[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.UInt16}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt16}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.UInt16[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt16[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.UInt16}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.UInt16}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.UInt16}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.UInt16}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.UInt16}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt16}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.UInt16[]},System.UInt16[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.UInt64[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt64[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.UInt64}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.UInt64}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.UInt64}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.UInt64}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.UInt64}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt64}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.UInt64[]},System.UInt64[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULongMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULong``1(``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULongArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULong``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULongListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULong``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumULongLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.UInt64@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.UInt64@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt64@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt64@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.UInt64}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt64}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.UInt64@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.UInt128@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.UInt128@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int64@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int64@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Int64}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int64}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Int64@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.UInt32@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt32@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.UInt32}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt32}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.UInt32@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int32@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int32@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Int32}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int32}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Int32@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Single@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Single@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Single}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Single}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Single@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Double@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Double@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Double}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Double}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Double@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Decimal@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Decimal@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Decimal}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Decimal}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Decimal@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.DateTime@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.DateTime@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.DateTime}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.DateTime}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.DateTime@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.TimeSpan@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.TimeSpan@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.TimeSpan}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.TimeSpan}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.TimeSpan@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Guid@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Guid@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Guid}@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Guid}@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Guid@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Int128@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int128@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Int128@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Numerics.Complex@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Complex@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Numerics.Complex@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Numerics.Plane@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Plane@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Numerics.Plane@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Numerics.Quaternion@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Quaternion@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Numerics.Quaternion@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Numerics.Matrix3x2@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Matrix3x2@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Numerics.Matrix3x2@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Numerics.Matrix4x4@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Matrix4x4@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Numerics.Matrix4x4@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Numerics.Vector2@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector2@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Numerics.Vector2@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Numerics.Vector3@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector3@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Numerics.Vector3@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Numerics.Vector4@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector4@)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.Read(System.Numerics.Vector4@)">
            <summary>
            读取数据 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Int64[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int64[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Int64}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Int64}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Int64}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Int64}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Int64}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int64}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Int64[]},System.Int64[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.UInt32[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.UInt32[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.UInt32}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.UInt32}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.UInt32}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.UInt32}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.UInt32}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.UInt32}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.UInt32[]},System.UInt32[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Int32[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int32[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Int32}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Int32}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Int32}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Int32}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Int32}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int32}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Int32[]},System.Int32[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Single[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Single[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Single}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Single}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Single}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Single}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Single}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Single}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Single[]},System.Single[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Double[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Double[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Double}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Double}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Double}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Double}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Double}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Double}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Double[]},System.Double[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Decimal[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Decimal[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Decimal}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Decimal}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Decimal}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Decimal}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Decimal}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Decimal}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Decimal[]},System.Decimal[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.DateTime[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.DateTime[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.DateTime}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.DateTime}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.DateTime}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.DateTime}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.DateTime}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.DateTime}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.DateTime[]},System.DateTime[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.TimeSpan[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.TimeSpan[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.TimeSpan}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.TimeSpan}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.TimeSpan}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.TimeSpan}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.TimeSpan}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.TimeSpan}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.TimeSpan[]},System.TimeSpan[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Guid[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Guid[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Guid}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Guid}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Guid}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Guid}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Guid}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Guid}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Guid[]},System.Guid[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Int128[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int128[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Int128[]},System.Int128[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Complex[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Complex[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Numerics.Complex[]},System.Numerics.Complex[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Plane[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Plane[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Numerics.Plane[]},System.Numerics.Plane[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Quaternion[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Quaternion[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Numerics.Quaternion[]},System.Numerics.Quaternion[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Matrix3x2[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Matrix3x2[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Numerics.Matrix3x2[]},System.Numerics.Matrix3x2[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Matrix4x4[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Matrix4x4[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Numerics.Matrix4x4[]},System.Numerics.Matrix4x4[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Vector2[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector2[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Numerics.Vector2[]},System.Numerics.Vector2[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Vector3[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector3[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Numerics.Vector3[]},System.Numerics.Vector3[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Vector4[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector4[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Numerics.Vector4[]},System.Numerics.Vector4[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLongMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLong``1(``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLongArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLong``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLongListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLong``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumLongLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUIntMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUInt``1(``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUIntArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUInt``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUIntListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUInt``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUIntLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumIntMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumInt``1(``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumIntArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumInt``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumIntListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumInt``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumIntLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShortMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShort``1(``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShortArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShort``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShortListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShort``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumUShortLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShortMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShort``1(``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShortArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShort``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShortListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShort``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumShortLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByteMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByte``1(``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByteArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByte``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByteListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByte``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumByteLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByteMember``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            枚举反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByte``1(``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByteArray``1(AutoCSer.BinaryDeserializer,``0[]@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByte``1(AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByteListArray``1(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByte``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.EnumSByteLeftArray``1(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            枚举数组反序列化（用于代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="array">枚举数组反序列化</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Int16}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int16}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Int16[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Int16[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Int16}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Int16}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Int16}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Int16}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Int16}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Int16}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Int16[]},System.Int16[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.SByte}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.SByte}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.SByte[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.SByte[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.SByte}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.SByte}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.SByte}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.SByte}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.SByte}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.SByte}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.SByte[]},System.SByte[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Byte}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Byte}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Byte[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Byte[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Byte}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Byte}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Byte}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Byte}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Byte}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Byte}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Byte[]},System.Byte[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(System.Nullable{System.Char}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Char}@)">
            <summary>
            整数值反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Char[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Char[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.ListArray{System.Char}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.ListArray{System.Char}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(AutoCSer.LeftArray{System.Char}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,AutoCSer.LeftArray{System.Char}@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Nullable{System.Char}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveDeserialize(AutoCSer.BinaryDeserializer,System.Nullable{System.Char}[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="deserializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.DeserializeBuffer(System.Func{System.Int32,System.Char[]},System.Char[]@)">
            <summary>
            从数据缓冲区反序列化（不检查对象引用直接读取）
            </summary>
            <param name="getBuffer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Int64@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Int64@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.UInt32@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.UInt32@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Int32@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Int32@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.UInt16@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.UInt16@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Int16@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Int16@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Byte@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Byte@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.SByte@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.SByte@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Boolean@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Boolean@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Single@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Single@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Double@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Double@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Decimal@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Decimal@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Char@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Char@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.DateTime@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.DateTime@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.TimeSpan@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.TimeSpan@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Guid@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Guid@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Int128@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Int128@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Half@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Half@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Complex@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Complex@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Plane@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Plane@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Quaternion@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Quaternion@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Matrix3x2@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Matrix3x2@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Matrix4x4@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Matrix4x4@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Vector2@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector2@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Vector3@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector3@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.BinaryDeserialize(System.Numerics.Vector4@)">
            <summary>
            成员反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinaryDeserializer.primitiveMemberDeserialize(AutoCSer.BinaryDeserializer,System.Numerics.Vector4@)">
            <summary>
            成员反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.BinarySerializeAttribute">
            <summary>
            Binary data serialization type configuration
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsBaseType">
            <summary>
            The default is true, indicating that it acts on an unknown derived type
            默认为 true 表示作用于未知派生类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsReferenceMember">
            <summary>
            The default is true, indicating that the same object reference is checked
            默认为 true 表示检查相同对象引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsJsonMix">
            <summary>
            By default, false indicates that it will not be converted to JSON mixed binary serialization; otherwise, other binary serialization configurations will be ignored. Use JSON mixed binary serialization to serialize the entire object (Value data is serialized in binary)
            默认为 false 表示不转换为 JSON 混杂二进制序列化，否则忽略其它二进制序列化配置使用 JSON 混杂二进制序列化化整个对象（Value 数据采用二进制序列化）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsJsonMember">
            <summary>
            By default, false indicates that no JSON serialization member tags are reserved, and setting it to true indicates that some members are serialized using JSON(It takes effect when IsMemberMap is true)
            默认为 false 表示不预留 JSON 序列化成员标记，设置为 true 表示部分成员采用 JSON 序列化（IsMemberMap 为 true 时生效）
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializeAttribute.GetIsJsonMember(System.Type)">
            <summary>
            Is reserve the JSON serialization member tag
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.IsMemberMap">
            <summary>
            Is serialize the member bitmap
            是否序列化成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializeAttribute.GetIsMemberMap(System.Type)">
            <summary>
            Is serialize the member bitmap
            是否序列化成员位图
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerializeAttribute.CustomReferenceTypes">
            <summary>
            For the types that require circular reference checking in custom serialization, an array length of 0 indicates no circular reference checking is needed, and null indicates unknown
            自定义序列化需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerializeConfig">
            <summary>
            Serialization configuration parameters
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.DefaultCheckDepth">
            <summary>
            The default maximum node detection depth value is 64
            默认最大节点检测深度值为 64
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.HeaderMapValue">
            <summary>
            Serialize the header data
            序列化头部数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.HeaderMapAndValue">
            <summary>
            Serialize the binary bits of the header data
            序列化头部数据二进制位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.MemberMapValue">
            <summary>
            Is serialize the member bitmap
            是否序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.ObjectReference">
            <summary>
            Whether there is an object reference
            是否存在对象引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.MemberMap">
            <summary>
            Member bitmap (only supports defined fields and anonymous fields for automatically implemented attributes)
            成员位图（仅支持定义字段与自动实现属性的匿名字段）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.CheckReference">
            <summary>
            The default is true, indicating that the same object reference is checked
            默认为 true 表示检查相同对象引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.IsRealType">
            <summary>
            By default, false indicates that the type is not supported and no attempt is made to convert it to a real type for processing. Setting it to true requires the deserialization end configuration to allow this remote type; otherwise, deserialization will fail
            默认为 false 表示不支持类型不尝试转换为真实类型处理，设置为 true 需要反序列化端配置允许该远程类型，否则将导致反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.CheckDepth">
            <summary>
            The default value of the maximum node detection depth is 64. (Excessive depth can cause stack overflow, so this serialization component is not suitable for serializing linked list structures. If there is a similar requirement, please customize the serialization conversion to an array for processing.)
            最大节点检测深度值默认为 64（过大的深度会造成堆栈溢出，所以该序列化组件不适合序列化链表结构，如果存在该类似需求请自定义序列化转换为数组处理）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeConfig.StreamSeek">
            <summary>
            The number of bytes reserved in the serialized output buffer is 0 by default, indicating that no bytes are reserved
            序列化输出缓冲区预留字节数，默认为 0 表示不预留
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializeConfig.Clone">
            <summary>
            Copy the serialization configuration parameters
            复制序列化配置参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializeConfig.WriteHeader(AutoCSer.Memory.UnmanagedStream)">
            <summary>
            Write the serialized header data
            写入序列化头部数据
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerializeMemberAttribute">
            <summary>
            Binary data serialization member configuration
            二进制数据序列化成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberAttribute.IsJsonMember">
            <summary>
            Are there any members that adopt JSON serialization
            是否存在部分成员采用 JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerializeMemberAttribute.GetIsJsonMember">
            <summary>
            Are there any members that adopt JSON serialization
            是否存在部分成员采用 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberAttribute.Null">
            <summary>
            Default empty configuration
            默认空配置
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerializeMemberMap">
            <summary>
            Custom serialization成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberMap.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberMap.CurrentMemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeMemberMap.JsonMemberMap">
            <summary>
            JSON 序列化成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializeMemberMap.#ctor(AutoCSer.Metadata.MemberMap,AutoCSer.Metadata.MemberMap,AutoCSer.Metadata.MemberMap)">
            <summary>
            Custom serialization成员位图
            </summary>
            <param name="memberMap"></param>
            <param name="currentMemberMap"></param>
            <param name="jsonMemberMap"></param>
        </member>
        <member name="T:AutoCSer.BinarySerializer">
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.NullValue">
            <summary>
            null object
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.NotNullValue">
            <summary>
            not null object
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.RealTypeValue">
            <summary>
            Real type
            真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.arraySerializePushType">
            <summary>
            Array reference execution type
            数组引用执行类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.CustomConfig">
            <summary>
            Custom global configuration
            自定义全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.DefaultAttribute">
            <summary>
            Default binary data serialization type configuration
            默认二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.DefaultConfig">
            <summary>
            Public default configuration parameters
            公共默认配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CloneDefaultConfig">
            <summary>
            Copy the public default configuration parameters
            复制公共默认配置参数
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerializer.Stream">
            <summary>
            Output buffer stream
            序列化输出缓冲区流
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.Context">
            <summary>
            Custom context
            自定义上下文
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.Config">
            <summary>
            Serialization configuration parameters
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.MemberMap">
            <summary>
            Member bitmap
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.CurrentMemberMap">
            <summary>
            Current member bitmap
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.JsonMemberMap">
            <summary>
            JSON serialization member bitmap
            JSON 序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.jsonSerializer">
            <summary>
            JSON serialization
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.points">
            <summary>
            Historically reference the position of the object pointer
            历史引用对象指针位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.CurrentDepth">
            <summary>
            Node nesting depth counting
            节点嵌套层级计数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.streamStartIndex">
            <summary>
            The starting position of the data stream
            数据流起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.notReferenceCount">
            <summary>
            Non-reference counting
            增加非引用计数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.isObjectReference">
            <summary>
            Is any object that are referenced
            是否存在对象被引用
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerializer.Warning">
            <summary>
            Warning prompt status
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializer.isProcessing">
            <summary>
            Is serialization operations are being processed
            是否正在处理序列化操作
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.#ctor(System.Boolean)">
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
            <param name="isThreadStatic">Is static instance mode of the thread
            是否线程静态实例模式</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serialize``1(``0@,AutoCSer.BinarySerializeConfig,AutoCSer.BinarySerialize.SerializeWarningEnum@)">
            <summary>
            Object serialization
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <param name="warning"></param>
            <returns>Serialized data
            序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serialize``1(AutoCSer.BinarySerializer,``0@)">
            <summary>
            Object serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serializeThreadStatic``1(``0@,AutoCSer.BinarySerializeConfig,AutoCSer.BinarySerialize.SerializeWarningEnum@)">
            <summary>
            Object serialization (Thread static Instance pattern)
            对象序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <param name="warning"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.serialize``1(``0@)">
            <summary>
            Object serialization
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.writePoints">
            <summary>
            Write the pointer to the historical object
            写入历史对象指针
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SetContext(System.Object,System.Boolean@)">
            <summary>
            Set the custom context
            设置自定义上下文
            </summary>
            <param name="context"></param>
            <param name="isSerializeCopyString"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SetDefaultContext(System.Object,System.Boolean@)">
            <summary>
            Set the custom context
            设置自定义上下文
            </summary>
            <param name="context"></param>
            <param name="isSerializeCopyString"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.System#IDisposable#Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.freeThreadStatic">
            <summary>
            Release resources (Thread static instance mode)
            释放资源（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Free">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FreeContext(System.Boolean)">
            <summary>
            Release resources
            </summary>
            <param name="isSerializeCopyString"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CheckDepth(AutoCSer.BinarySerialize.SerializePushTypeEnum)">
            <summary>
            Gets the serialization reference check type
            获取序列化引用检查类型
            </summary>
            <param name="pushType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CheckDepthWriteNotNull(AutoCSer.BinarySerialize.SerializePushTypeEnum)">
            <summary>
            Gets the serialization reference check type
            获取序列化引用检查类型
            </summary>
            <param name="pushType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ClearNotReferenceCount">
            <summary>
            Clear the non-reference count
            清除非引用计数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CheckTryReference">
            <summary>
            Gets the serialization reference check type
            获取序列化引用检查类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CheckPoint``1(``0)">
            <summary>
            Add historical objects
            添加历史对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>Is continues to serialize objects
            是否继续序列化对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeMemberMap``1">
            <summary>
            Gets the serialization member bitmap
            获取序列化成员位图
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ICustom``1(AutoCSer.BinarySerialize.ICustomSerialize{``0})">
            <summary>
            Custom serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ICustom``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Custom serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.createJsonSerializer">
            <summary>
            Get the JSON serialization
            获取 JSON 序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.JsonSerializeBufferNotNull``1(``0@)">
            <summary>
            JSON serialization to the buffer
            JSON 序列化到缓冲区
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.JsonSerializeBuffer``1(``0@)">
            <summary>
            JSON serialization to the buffer
            JSON 序列化到缓冲区
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.JsonSerialize``1(``0@,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            JSON mixed binary serialization
            JSON 混杂二进制序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Json``1(``0)">
            <summary>
            JSON mixed binary serialization
            JSON 混杂二进制序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Json``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            JSON mixed binary serialization
            JSON 混杂二进制序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.StructJson``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            JSON mixed binary serialization
            JSON 混杂二进制序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Simple``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Binary serialization to simple serialization (for AOT code generation, not allowed for developers to call)
            二进制序列化转简单序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NotSupport``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Custom serialization does not support types
            自定义序列化不支持的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.realTypeObject``1(``0)">
            <summary>
            Real type serialization
            真实类型序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.RealTypeObject``1(AutoCSer.BinarySerializer,System.Object)">
            <summary>
            Real type serialization
            真实类型序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.baseSerialize``2(``0)">
            <summary>
            Base type serialization
            基类序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Base``2(AutoCSer.BinarySerializer,``0)">
            <summary>
            Base type serialization
            基类序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Nullable``1(AutoCSer.BinarySerializer,System.Nullable{``0})">
            <summary>
            Object serialization
            </summary>
            <param name="binarySerializer">Binary data serialization</param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.arrayOnly``1(``0[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize``1(``0[])">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Array``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize``1(AutoCSer.ListArray{``0})">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.LeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.structArrayOnly``1(``0[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.structArray``1(``0[])">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.StructArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.structArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.StructListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.StructLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.nullableArrayOnly``1(System.Nullable{``0}[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NullableArray``1(System.Nullable{``0}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NullableArray``1(AutoCSer.BinarySerializer,System.Nullable{``0}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NullableArray``1(AutoCSer.ListArray{System.Nullable{``0}})">
            <summary>
            Array serialization
            </summary>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NullableListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Nullable{``0}})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.NullableLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Nullable{``0}})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.collectionOnly``2(``0)">
            <summary>
            Collection serialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="collection">Collection object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Collection``2(``0)">
            <summary>
            Collection serialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="collection">Collection object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Collection``2(AutoCSer.BinarySerializer,``0)">
            <summary>
            Collection serialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="binarySerializer"></param>
            <param name="collection">Collection object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.dictionaryOnly``3(``0)">
            <summary>
            Dictionary serialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Dictionary``3(``0)">
            <summary>
            Dictionary serialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Dictionary``3(AutoCSer.BinarySerializer,``0)">
            <summary>
            Dictionary serialization
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="binarySerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByte``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByte``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShort``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShort``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumInt``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUInt``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLong``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULong``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Boolean)">
            <summary>
            Logical value serialization
            逻辑值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Boolean})">
            <summary>
            Logical value serialization
            逻辑值序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Boolean[],System.Int32)">
            <summary>
            Serialization of logical value arrays
            逻辑值数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Boolean}[])">
            <summary>
            Serialization of logical value arrays
            逻辑值数组序列化
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Byte)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Byte})">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.SByte)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.SByte})">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int16)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int16})">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt16)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt16})">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Char)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Char})">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Half)">
            <summary>
            Serialization of floating-point numbers
            浮点数序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Half[],System.Int32)">
            <summary>
            Serialization of floating-point number groups
            浮点数数组序列化
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Guid)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Guid)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.String)">
            <summary>
            String serialization
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.String)">
            <summary>
            String serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.SubString)">
            <summary>
            String serialization
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.SubString)">
            <summary>
            String serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Type)">
            <summary>
            Type serialization
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Type)">
            <summary>
            Type serialization
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Type)">
            <summary>
            Type serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Object)">
            <summary>
            object serialization
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Object)">
            <summary>
            object serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            Get and set the custom serialization member bitmap
            </summary>
            <param name="memberMap">The custom serialization member bitmap set</param>
            <returns>Serialization member bitmap</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SetCustomMemberMap(AutoCSer.BinarySerializeMemberMap@)">
            <summary>
            Restore the custom serialization member bitmap
            恢复自定义序列化成员位图
            </summary>
            <param name="memberMap">Serialization member bitmap</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CustomSerialize``1(``0)">
            <summary>
            Custom serialization calls
            自定义序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CustomSerialize``1(``0@)">
            <summary>
            Custom serialization calls
            自定义序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.String)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="value"></param>
            <returns>Excluding the number of bytes for padding, 0 indicates a serialization failure
            不包括补白的字节数，0 表示序列化失败</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeOnly(System.String)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="value"></param>
            <returns>Excluding the number of bytes for padding, 0 indicates a serialization failure
            不包括补白的字节数，0 表示序列化失败</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBufferStart">
            <summary>
            The custom serialization data buffer begins processing
            自定义序列化数据缓冲区开始处理
            </summary>
            <returns>Starting position. Return -1 if failed
            起始位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBufferEnd(System.Int32,System.Int32)">
            <summary>
            The custom serialization data buffer has completed processing
            自定义序列化数据缓冲区结束处理
            </summary>
            <param name="index"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.IndependentSerialize``1(``0@)">
            <summary>
            Independent objects are serialization into a piece of data that can be deserialization independently
            独立对象序列化为一个可独立反序列化的数据（需确定为非简单序列化类型）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型（需确定为非简单序列化类型）</typeparam>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.InternalIndependentSerializeNotNull``1(``0@)">
            <summary>
            The internal member object is serialization into an independently deserializable data (with no reference check on the outer layer) (used for AOT code generation and not allowed for developers to call)
            内部成员对象序列化为一个可独立反序列化的数据（外层无引用检查）（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T">需确定为非简单序列化类型</typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SimpleSerialize``1(``0@)">
            <summary>
            The internal member object is serialization into an independently deserializable data (for AOT code generation and not allowed for developers to call)
            内部成员对象序列化为一个可独立反序列化的数据（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetSize4(System.Int64)">
            <summary>
            Recalculate the serialization byte length (4-byte alignment)
            重新计算序列化字节长度（4字节对齐）
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetSize4(System.Int32)">
            <summary>
            Recalculate the serialization byte length (4-byte alignment)
            重新计算序列化字节长度（4字节对齐）
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetSize(System.Int64)">
            <summary>
            Recalculate the serialization byte length (4-byte alignment)
            重新计算序列化字节长度（4字节对齐）
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetSize(System.Int32)">
            <summary>
            Recalculate the serialization byte length (4-byte alignment)
            重新计算序列化字节长度（4字节对齐）
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FillSize(System.Byte*,System.Int32)">
            <summary>
            Serialize and fill the blank bytes
            序列化填充空白字节
            </summary>
            <param name="write"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FillSize2(System.Byte*,System.Int32)">
            <summary>
            short/ushort serialization padding blank bytes (4-byte alignment)
            short / ushort 序列化填充空白字节（4字节对齐）
            </summary>
            <param name="write"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FillSize4(System.Byte*,System.Int32)">
            <summary>
            byte/sbyte serialization fills blank bytes (4-byte alignment)
            byte / sbyte 序列化填充空白字节（4字节对齐）
            </summary>
            <param name="write"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.CustomWriteFree(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write as much data as possible into the serialization output buffer
            在序列化输出缓存区尽可能写入多的数据
            </summary>
            <param name="data">Output data</param>
            <param name="startIndex">Output the starting position of the data
            输出数据起始位置</param>
            <param name="count">The maximum number of bytes written
            最大写入字节数量</param>
            <returns>Write the number of bytes. Return -1 in case of write failure
            写入字节数量，写入失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetBufferMoveSize">
            <summary>
            Gets the serialization buffer move position
            获取序列化缓冲区移动位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Boolean})">
            <summary>
            Serialization of logical value members
            逻辑值成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Byte})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.SByte})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int16})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt16})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Char})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Guid})">
            <summary>
            Guid member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FixedFillSize(AutoCSer.BinarySerializer,System.Int32)">
            <summary>
            Fill the blank bytes
            填充空白字节
            </summary>
            <param name="serializer"></param>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetStreamCurrentIndex(AutoCSer.BinarySerializer)">
            <summary>
            Gets the current stream location
            获取当前流位置
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeFill(AutoCSer.BinarySerializer,System.Int32)">
            <summary>
            Align the blank space by 4 bytes
            补白对齐 4 字节
            </summary>
            <param name="serializer"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.GetJsonMemberMap``1(AutoCSer.Metadata.MemberMap{``0},AutoCSer.Memory.Pointer@)">
            <summary>
            Get the JSON member bitmap
            获取 JSON 成员位图
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberMap"></param>
            <param name="memberIndexs"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeFill(System.Int32)">
            <summary>
            Align the blank space by 4 bytes (for AOT code generation and not allowed for developers to call)
            补白对齐 4 字节（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.FixedFillSize(System.Int32)">
            <summary>
            Fill the blank bytes (for AOT code generation and not allowed for developers to call)
            填充空白字节（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.WriteMemberCountVerify(System.Int32,System.Int32)">
            <summary>
            Write the number of serialized members (for AOT code generation and not allowed for developers to call)
            写入序列化成员数量（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <param name="prepSize"></param>
            <param name="memberCountVerify"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(``0,AutoCSer.BinarySerializeConfig)">
            <summary>
            Serialization
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(``0@,AutoCSer.BinarySerializeConfig)">
            <summary>
            Serialization
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(``0,AutoCSer.BinarySerialize.SerializeWarningEnum@,AutoCSer.BinarySerializeConfig)">
            <summary>
            Serialization
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="warning">Warning prompt status
            警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.Serialize``1(``0@,AutoCSer.BinarySerialize.SerializeWarningEnum@,AutoCSer.BinarySerializeConfig)">
            <summary>
            Serialization
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="warning">Warning prompt status
            警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ThreadStaticSerialize``1(``0,AutoCSer.BinarySerializeConfig)">
            <summary>
            Serialization (Thread static instance pattern)
            序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ThreadStaticSerialize``1(``0@,AutoCSer.BinarySerializeConfig)">
            <summary>
            Serialization (Thread static instance pattern)
            序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ThreadStaticSerialize``1(``0,AutoCSer.BinarySerialize.SerializeWarningEnum@,AutoCSer.BinarySerializeConfig)">
            <summary>
            Serialization (Thread static instance pattern)
            序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="warning">Warning prompt status
            警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>Serialized data</returns>
        </member>
        <member name="M:AutoCSer.BinarySerializer.ThreadStaticSerialize``1(``0@,AutoCSer.BinarySerialize.SerializeWarningEnum@,AutoCSer.BinarySerializeConfig)">
            <summary>
            Serialization (Thread static instance pattern)
            序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="warning">Warning prompt status
            警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>Serialized data</returns>
        </member>
        <member name="F:AutoCSer.BinarySerializer.SerializeDelegates">
            <summary>
            Basic type serialized delegate collection
            基本类型序列化委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt128)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.UInt64[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.UInt64}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.UInt128[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.UInt64[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt64[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.UInt64})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.UInt64})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.UInt64})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.UInt64}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt64}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt64[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt64[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.UInt128[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt128[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt128[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt128[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.UInt16[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.UInt16}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt64)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt64})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.UInt64)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumULongArrayOnly``1(``0[],System.Int32)">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULong``1(``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULongArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumULongArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULongListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumULongLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.UInt128)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int64)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int64})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt32)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt32})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int32)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int32})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Single)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Single})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Double)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Double})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Decimal)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Decimal})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.DateTime)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.DateTime})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.TimeSpan)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveMemberSerialize(AutoCSer.BinarySerializer,System.Nullable{System.TimeSpan})">
            <summary>
            Integer member serialization
            整数成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int128)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Complex)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Plane)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Quaternion)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Matrix3x2)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Matrix4x4)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector2)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector3)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector4)">
            <summary>
            Integer value serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Int64[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Int64}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.UInt32[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.UInt32}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Int32[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Int32}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Single[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Single}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Double[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Double}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Decimal[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Decimal}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.DateTime[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.DateTime}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.TimeSpan[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.TimeSpan}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Guid[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Guid}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Int128[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Numerics.Complex[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Numerics.Plane[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Numerics.Quaternion[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Numerics.Matrix3x2[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Numerics.Matrix4x4[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Numerics.Vector2[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Numerics.Vector3[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Numerics.Vector4[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Int64[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int64[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Int64})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Int64})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Int64})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Int64}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int64}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int64[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int64[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.UInt32[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt32[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.UInt32})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.UInt32})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.UInt32})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.UInt32}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt32}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt32[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt32[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Int32[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int32[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Int32})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Int32})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Int32})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Int32}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int32}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int32[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int32[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.UInt16[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.UInt16[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.UInt16})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.UInt16})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.UInt16})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.UInt16}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.UInt16}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt16[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.UInt16[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Int16[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int16[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Int16})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Int16})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Int16})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Int16}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Int16}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int16[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int16[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Byte[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Byte[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Byte})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Byte})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Byte})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Byte}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Byte}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Byte[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Byte[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.SByte[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.SByte[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.SByte})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.SByte})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.SByte})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.SByte}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.SByte}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.SByte[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.SByte[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Boolean[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Boolean[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Boolean})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Boolean})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Boolean})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Boolean}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Boolean}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Boolean[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Boolean[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Single[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Single[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Single})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Single})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Single})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Single}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Single}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Single[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Single[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Double[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Double[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Double})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Double})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Double})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Double}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Double}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Double[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Double[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Decimal[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Decimal[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Decimal})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Decimal})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Decimal})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Decimal}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Decimal}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Decimal[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Decimal[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Char[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Char[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Char})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Char})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Char})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Char}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Char}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Char[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Char[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.DateTime[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.DateTime[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.DateTime})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.DateTime})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.DateTime})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.DateTime}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.DateTime}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.DateTime[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.DateTime[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.TimeSpan[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.TimeSpan[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.TimeSpan})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.TimeSpan})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.TimeSpan})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.TimeSpan}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.TimeSpan}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.TimeSpan[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.TimeSpan[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Guid[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Guid[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(AutoCSer.ListArray{System.Guid})">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.ListArray{System.Guid})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,AutoCSer.LeftArray{System.Guid})">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Nullable{System.Guid}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Nullable{System.Guid}[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Guid[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Guid[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Int128[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Int128[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int128[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Int128[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Half[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Half[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Half[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Half[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Numerics.Complex[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Complex[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Complex[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Complex[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Numerics.Plane[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Plane[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Plane[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Plane[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Numerics.Quaternion[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Quaternion[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Quaternion[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Quaternion[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Numerics.Matrix3x2[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Matrix3x2[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Matrix3x2[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Matrix3x2[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Numerics.Matrix4x4[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Matrix4x4[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Matrix4x4[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Matrix4x4[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Numerics.Vector2[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector2[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Vector2[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Vector2[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Numerics.Vector3[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector3[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Vector3[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Vector3[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.BinarySerialize(System.Numerics.Vector4[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector4[])">
            <summary>
            Array serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Vector4[])">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.SerializeBuffer(System.Numerics.Vector4[],System.Int32)">
            <summary>
            Serialize into a data buffer (write directly without checking the object reference)
            序列化为数据缓冲区（不检查对象引用直接写入）
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumLongArrayOnly``1(``0[],System.Int32)">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLong``1(``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLongArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumLongArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLongListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumLongLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUIntArrayOnly``1(``0[],System.Int32)">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUInt``1(``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUIntArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUIntArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUIntListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUIntLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumIntArrayOnly``1(``0[],System.Int32)">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumInt``1(``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumIntArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumIntArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumIntListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumIntLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUShortArrayOnly``1(``0[],System.Int32)">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShort``1(``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShortArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumUShortArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShortListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumUShortLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumShortArrayOnly``1(``0[],System.Int32)">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShort``1(``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShortArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumShortArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShortListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumShortLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumByteArrayOnly``1(``0[],System.Int32)">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByte``1(``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByteArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumByteArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByteListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumByteLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumSByteArrayOnly``1(``0[],System.Int32)">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByte``1(``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByteArray``1(AutoCSer.BinarySerializer,``0[])">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.enumSByteArray``1(AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByteListArray``1(AutoCSer.BinarySerializer,AutoCSer.ListArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.EnumSByteLeftArray``1(AutoCSer.BinarySerializer,AutoCSer.LeftArray{``0})">
            <summary>
            Serialization of enumeration arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="array">Enumeration value array</param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Int16[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Int16}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.SByte[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.SByte}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Byte[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Byte}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Char[],System.Int32)">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.primitiveSerializeOnly(System.Nullable{System.Char}[])">
            <summary>
            Array serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Int64)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.UInt32)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Int32)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.UInt16)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Int16)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Byte)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.SByte)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Boolean)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Single)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Double)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Decimal)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Char)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.DateTime)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.TimeSpan)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Int128)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Half)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Numerics.Complex)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Numerics.Plane)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Numerics.Quaternion)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Numerics.Matrix3x2)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Numerics.Matrix4x4)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector2)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector3)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerializer.PrimitiveMemberSerialize(AutoCSer.BinarySerializer,System.Numerics.Vector4)">
            <summary>
            Member serialization
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.CustomSerializeGenericType">
            <summary>
            自定义二进制序列化泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomSerializeGenericType.SerializeDelegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomSerializeGenericType.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomSerializeGenericType.create``1">
            <summary>
            创建自定义二进制序列化泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.CustomSerializeGenericType.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomSerializeGenericType.Get(System.Type)">
            <summary>
            获取自定义二进制序列化泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.CustomSerializeGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomSerializeGenericType`1.SerializeDelegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomSerializeGenericType`1.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeArrayMap">
            <summary>
            数组位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeArrayMap.Bit">
            <summary>
            当前位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeArrayMap.Map">
            <summary>
            当前位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeArrayMap.Read">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeArrayMap.#ctor(System.Byte*)">
            <summary>
            数组位图
            </summary>
            <param name="read">当前读取位置</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeArrayMap.#ctor(System.Byte*,System.UInt32)">
            <summary>
            数组位图
            </summary>
            <param name="read">当前读取位置</param>
            <param name="bit">当前位</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeArrayMap.Next">
            <summary>
            获取位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeArrayMap.NextBool">
            <summary>
            获取位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeResult">
            <summary>
            二进制反序列化状态结果
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeResult.JsonState">
            <summary>
            JSON 解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeResult.CustomError">
            <summary>
            自定义错误
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeResult.#ctor(AutoCSer.Metadata.MemberMap)">
            <summary>
            二进制反序列化状态结果
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeResult.#ctor(AutoCSer.BinarySerialize.DeserializeStateEnum,AutoCSer.Json.DeserializeStateEnum,System.String)">
            <summary>
            二进制反序列化状态结果
            </summary>
            <param name="state"></param>
            <param name="jsonState"></param>
            <param name="customError"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeResult.op_Implicit(AutoCSer.BinarySerialize.DeserializeResult)~System.Boolean">
            <summary>
            Implicit conversion是否成功
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeStateEnum">
            <summary>
            Deserialization status
            反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.UnknownData">
            <summary>
            The data is not identifiable
            数据不可识别
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.HeaderError">
            <summary>
            The header data does not match
            头部数据不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ObjectReferenceError">
            <summary>
            The object reference data does not match
            对象引用数据不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.EndVerify">
            <summary>
            End verification error
            结束验证错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.MemberMap">
            <summary>
            Member bitmap detection failed
            成员位图检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.MemberMapType">
            <summary>
            The member bitmap type is incorrect
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.MemberMapVerify">
            <summary>
            The verification of the number of member bitmaps failed
            成员位图数量验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.JsonError">
            <summary>
            JSON deserialization failed
            JSON 反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.NoPoint">
            <summary>
            The historical object was not hit
            没有命中历史对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.IndexOutOfRange">
            <summary>
            Insufficient data length
            数据长度不足
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ArraySizeOutOfRange">
            <summary>
            The size of the array is out of range
            数组大小超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ErrorDataType">
            <summary>
            Unidentifiable data type
            不可识别的数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ErrorType">
            <summary>
            Type resolution error, or the generic type does not meet the AutoCSer.Common.Config.CheckRemoteType validity check conditions
            类型解析错误，或者泛型类型不满足 AutoCSer.Common.Config.CheckRemoteType 合法性检查条件
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.NotSupport">
            <summary>
            Unsupported types
            不支持的类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.CustomBufferError">
            <summary>
            The custom buffer creation failed
            自定义缓冲区创建失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.CustomError">
            <summary>
            Custom deserialization failed
            自定义反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.ConstructorNull">
            <summary>
            The constructor returns a null value
            构造函数返回 null 值
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeStateEnum.NotObject">
            <summary>
            Non-object value
            非 object 值
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ICustomSerialize">
            <summary>
            Only used for quickly determining whether it is possible to implement the interface ICustomSerialize{T}
            仅用于快速判断是否可能实现接口 ICustomSerialize{T}
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ICustomSerialize`1">
            <summary>
            Custom serialization
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ICustomSerialize`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ICustomSerialize`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.MoveSize">
            <summary>
            序列化缓冲区移动位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.MoveSize.stream">
            <summary>
            序列化输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.MoveSize.StartIndex">
            <summary>
            移动以后的当前位置，失败为 0
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.MoveSize.#ctor(AutoCSer.Memory.UnmanagedStream,System.Int32)">
            <summary>
            序列化缓冲区移动位置
            </summary>
            <param name="stream"></param>
            <param name="moveSize"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.MoveSize.WriteSize">
            <summary>
            写入缓冲区字节数
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializePushTypeEnum">
            <summary>
            序列化循环引用检查类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.Primitive">
            <summary>
            内部类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.DepthCount">
            <summary>
            仅做层级计数操作
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.NotReferenceCount">
            <summary>
            增加非引用计数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.TryReference">
            <summary>
            尝试添加引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializePushTypeEnum.DepthOutOfRange">
            <summary>
            深度超出范围
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeWarningEnum">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.DepthOutOfRange">
            <summary>
            深度超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.BufferSize">
            <summary>
            自定义缓冲序列化返回字节数与写入流字节数不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarningEnum.ResizeError">
            <summary>
            在不允许扩展缓存区大小的情况下产生了扩展操作
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ThreadStaticDeserializer">
            <summary>
            反序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticDeserializer.Deserializer">
            <summary>
            二进制反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticDeserializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticDeserializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ThreadStaticDeserializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ThreadStaticDeserializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.Common">
            <summary>
            公共调用
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetBaseAttribute(System.Type,AutoCSer.BinarySerializeAttribute@)">
            <summary>
            获取二进制数据序列化类型配置
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Common.memberSerializeDelegateLock">
            <summary>
            成员序列化委托集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Common.memberDeserializeDelegateLock">
            <summary>
            成员反序列化委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetTypeSerializeDelegate(System.Type,AutoCSer.Metadata.GenericType@,AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetTypeSerializeDelegate(AutoCSer.Metadata.GenericType,AutoCSer.BinarySerialize.SerializeDelegateReference@,AutoCSer.BinarySerializeAttribute@,System.Type@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <param name="attribute"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Common.memberSerializeDelegates">
            <summary>
            成员序列化委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetMemberSerializeDelegate(System.Type)">
            <summary>
            获取成员序列化委托
            </summary>
            <param name="type">成员类型</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetMemberSerializeDelegate(System.Type,System.Type@)">
            <summary>
            获取成员序列化委托
            </summary>
            <param name="type">成员类型</param>
            <param name="baseType"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.getTypeDeserializeDelegate(System.Type,AutoCSer.Metadata.GenericType@,AutoCSer.BinarySerialize.DeserializeDelegate@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="deserializeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetTypeDeserializeDelegate(AutoCSer.Metadata.GenericType,AutoCSer.BinarySerialize.DeserializeDelegate@,AutoCSer.BinarySerializeAttribute@,System.Type@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="deserializeDelegate"></param>
            <param name="attribute"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Common.memberDeserializeDelegates">
            <summary>
            成员反序列化委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.GetMemberDeserializeDelegate(System.Type)">
            <summary>
            获取成员反序列化委托
            </summary>
            <param name="type">成员类型</param>
            <returns>成员反序列化委托</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Common.getMemberDeserializeDelegate(System.Type)">
            <summary>
            获取成员反序列化委托
            </summary>
            <param name="type">成员类型</param>
            <returns>成员反序列化委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.CustomConfig">
            <summary>
            自定义全局配置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.GetCustomSerializeDelegate(System.Type)">
            <summary>
            根据类型获取自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.BinarySerializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.CustomConfig.customSerializeDelegate">
            <summary>
            Custom serialization委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.CustomConfig.customSerializeDelegateLock">
            <summary>
            Custom serialization委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.AppendCustomSerializeDelegate(System.Type,AutoCSer.BinarySerialize.SerializeDelegate,AutoCSer.BinarySerialize.DeserializeDelegate)">
            <summary>
            添加自定义序列化委托（应该在该类型的静态构造函数中调用，否则可能无法生效）
            </summary>
            <param name="type"></param>
            <param name="serializeDelegate"></param>
            <param name="deserializeDelegate"></param>
            <returns>如果已经存在该类型的自定义序列化委托则添加失败并返回 false</returns>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomConfig.PrimitiveSerializeDelegates">
            <summary>
            获取自定义类型序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.BinarySerializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.CustomConfig.PrimitiveDeserializeDelegates">
            <summary>
            获取自定义类型序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.BinaryDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.IsJsonSerialize(System.Type)">
            <summary>
            判断类型是否采用 JSON 序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.GetCustomDeserializeDelegate(System.Type)">
            <summary>
            根据类型获取自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.BinaryDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.NotSupport``1(AutoCSer.BinarySerializer,``0)">
            <summary>
            Custom serialization不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="binarySerializer"></param>
            <param name="value"></param>
            <returns>未写入字节数量</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.CustomConfig.NotSupport``1(AutoCSer.BinaryDeserializer,``0@)">
            <summary>
            Custom serialization不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeConfig">
            <summary>
            反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeConfig.MaxArraySize">
            <summary>
            最大数组长度
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeDelegate.Delegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeDelegate.MemberDelegate">
            <summary>
            成员自定义反序列化委托（需要判断是否为 null）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeDelegate.IsPrimitive">
            <summary>
            是否内部类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.#ctor(System.Delegate)">
            <summary>
            自定义二进制反序列化委托
            </summary>
            <param name="delegateValue">二进制反序列化委托，必须是静态方法，第一个参数类型为 AutoCSer.BinaryDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.#ctor(System.Delegate,System.Boolean)">
            <summary>
            自定义二进制反序列化委托
            </summary>
            <param name="delegateValue">二进制反序列化委托</param>
            <param name="isPrimitive">是否内部类型</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.op_Implicit(System.Delegate)~AutoCSer.BinarySerialize.DeserializeDelegate">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">自定义反序列化委托</param>
            <returns>自定义反序列化委托</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.Set(System.Delegate,System.Boolean)">
            <summary>
            自定义反序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="isPrimitive"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.#ctor(System.Delegate,System.Delegate)">
            <summary>
            自定义二进制反序列化委托
            </summary>
            <param name="delegateValue">二进制序反列化委托</param>
            <param name="memberDelegateValue">二进制反序列化委托</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.Set(System.Delegate,System.Delegate,System.Boolean)">
            <summary>
            自定义反序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegate"></param>
            <param name="isPrimitive"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.GetMemberDelegate">
            <summary>
            获取成员反序列化委托
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.Check(System.Type)">
            <summary>
            判断自定义反序列化委托数据类型是否与委托匹配
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeDelegate.Check">
            <summary>
            获取自定义反序列化委托数据类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.#ctor(System.Type,System.String)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.FixedFillSize(System.Int32)">
            <summary>
            固定分组填充字节数
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberDynamicMethod.fixedFillSizeDelegate">
            <summary>
            固定分组填充字节数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.isFixedFillSize">
            <summary>
            是否需要补全字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.#ctor(AutoCSer.Metadata.GenericType,System.String,System.Boolean)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
            <param name="name"></param>
            <param name="isFixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.SetFixedCurrentEnd">
            <summary>
            设置固定数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.setFixedCurrentDelegate">
            <summary>
            设置固定数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeserializeMemberMapDynamicMethod.setFixedCurrentEndDelegate">
            <summary>
            设置固定数据结束位置
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.FieldSize">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.FieldIndex">
            <summary>
            字段索引
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.FieldSize.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.FieldSize.MemberIndex">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.FieldSize.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.FixedSize">
            <summary>
            固定分组排序字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.#ctor(AutoCSer.Metadata.FieldIndex)">
            <summary>
            字段信息
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.FixedSizeSort(AutoCSer.BinarySerialize.FieldSize,AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            固定分组排序字节数排序比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.fixedSizes">
            <summary>
            固定类型字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.IsFixedSize(System.Type)">
            <summary>
            是否固定字节数类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.FieldSizeArray">
            <summary>
            字段集合信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.FixedFields">
            <summary>
            固定序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.FieldArray">
            <summary>
            非固定序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.JsonFields">
            <summary>
            JSON 混合序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.FixedSize">
            <summary>
            固定序列化字段字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSizeArray.AnyFixedSize">
            <summary>
            固定序列化字段字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSizeArray.#ctor(AutoCSer.LeftArray{AutoCSer.Metadata.FieldIndex},System.Boolean,System.Int32@)">
            <summary>
            字段成员集合
            </summary>
            <param name="fieldIndexs"></param>
            <param name="isJson"></param>
            <param name="memberCountVerify"></param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSizeArray.IsSimpleSerialize(System.Type,System.Boolean)">
            <summary>
            判断是否支持简单序列化
            </summary>
            <param name="type"></param>
            <param name="isReferenceMember"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.#ctor(System.Type,System.String)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.FixedFillSize(System.Int32)">
            <summary>
            填充空白字节
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.fixedFillSizeDelegate">
            <summary>
            填充空白字节
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.startIndexLocalBuilder">
            <summary>
            开始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.isFixedFillSize">
            <summary>
            是否需要补全字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.#ctor(AutoCSer.Metadata.GenericType,System.String,System.Boolean)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
            <param name="name"></param>
            <param name="isFixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.SerializeFill">
            <summary>
            补白对齐 4 字节
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.getStreamCurrentIndexDelegate">
            <summary>
            获取当前流位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.serializeFillDelegate">
            <summary>
            补白对齐 4 字节
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ThreadStaticSerializer">
            <summary>
            序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticSerializer.Serializer">
            <summary>
            二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticSerializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.ThreadStaticSerializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ThreadStaticSerializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ThreadStaticSerializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeserializer`1">
            <summary>
            二进制数据反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeserializer`1.memberMapDeserialize">
            <summary>
            二进制数据反序列化委托
            </summary>
            <param name="memberMap">成员位图</param>
            <param name="deserializer">二进制数据反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.memberDeserializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.memberMapDeserializer">
            <summary>
            成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.jsonMemberMap">
            <summary>
            JSON混合序列化位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.jsonMemberIndexs">
            <summary>
            JSON混合序列化成员索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.isJson">
            <summary>
            当没有 JSON 序列化成员时是否预留 JSON 序列化标记
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.memberCountVerify">
            <summary>
            序列化成员数量
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.nullMember(AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            成员反序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.nullMemberMap(AutoCSer.Metadata.MemberMap{`0},AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            成员位图反序列化
            </summary>
            <param name="memberMap"></param>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.attribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.DefaultDeserializer">
            <summary>
            反序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.pushType">
            <summary>
            引用执行类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeserializer`1.isMemberMap">
            <summary>
            是否处理成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.Deserialize(AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeserializer`1.MemberDeserialize(AutoCSer.BinaryDeserializer,`0@)">
            <summary>
            Object serialization
            </summary>
            <param name="deserializer">二进制数据反序列化</param>
            <param name="value">Data object</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeArrayMap">
            <summary>
            数组位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.stream">
            <summary>
            序列化数据流
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Bit">
            <summary>
            当前位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Map">
            <summary>
            当前位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.WriteIndex">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.#ctor(AutoCSer.Memory.UnmanagedStream,System.Int32)">
            <summary>
            数组位图
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="arrayLength">数组长度</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.#ctor(AutoCSer.Memory.UnmanagedStream,System.Int32,System.Int32)">
            <summary>
            数组位图
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="arrayLength">数组长度</param>
            <param name="prepLength">附加长度</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.Next(System.Boolean)">
            <summary>
            Add data
            </summary>
            <param name="value">是否写位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.NextFalse">
            <summary>
            移动到下一个二进制位
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.NextTrue">
            <summary>
            Add data
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.Next(System.Nullable{System.Boolean})">
            <summary>
            Add data
            </summary>
            <param name="value">是否写位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.End">
            <summary>
            位图写入结束
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeDelegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegate.Delegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegate.MemberDelegate">
            <summary>
            成员自定义序列化委托（需要判断是否为 null）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegate.ReferenceTypes">
            <summary>
            需要检查引用的类型（包含当前类型），数组长度为 0 表示无需检查引用，null 表示未知
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegate.IsCollection">
            <summary>
            是否集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.#ctor(System.Delegate,System.Type[])">
            <summary>
            自定义二进制序列化委托
            </summary>
            <param name="delegateValue">二进制序列化委托必须是静态方法，第一个参数类型为 AutoCSer.BinarySerializer，第二参数类型为具体数据类型，返回值类型为 void</param>
            <param name="referenceTypes">需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.#ctor(System.Delegate,System.Type[],System.Boolean)">
            <summary>
            自定义二进制序列化委托
            </summary>
            <param name="delegateValue">二进制序列化委托</param>
            <param name="referenceTypes">需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知</param>
            <param name="isCollection">是否集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.#ctor(System.Delegate,System.Delegate,System.Type[],System.Boolean)">
            <summary>
            自定义二进制序列化委托
            </summary>
            <param name="delegateValue">二进制序列化委托</param>
            <param name="memberDelegateValue">二进制序列化委托</param>
            <param name="referenceTypes">需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知</param>
            <param name="isCollection">是否集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.op_Implicit(System.Delegate)~AutoCSer.BinarySerialize.SerializeDelegate">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">自定义序列化委托，第一个参数类型为 AutoCSer.BinarySerializer，第二参数类型为具体数据类型，返回值类型为 void</param>
            <returns>自定义序列化委托</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Set(System.Delegate,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Set(System.Delegate,System.Delegate,System.Type[],System.Boolean)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegateValue"></param>
            <param name="referenceTypes"></param>
            <param name="isCollection"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.GetMemberDelegate">
            <summary>
            获取成员自定义序列化委托（需要判断是否为 null）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Check(System.Type,AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            检查自定义二进制序列化委托
            </summary>
            <param name="type"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Check(System.Type@,AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="type"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegate.Check(AutoCSer.BinarySerialize.SerializeDelegateReference@,System.Type@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeDelegateReference">
            <summary>
            序列化委托引用检查信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.PushType">
            <summary>
            引用执行类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.NotReferenceCount">
            <summary>
            作为根节点时是否需要添加屏蔽引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.isReferenceMember">
            <summary>
            子节点存在引用检查需求
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.IsCompleted">
            <summary>
            状态是否计算完成
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.Delegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeDelegateReference.ReferenceTypes">
            <summary>
            需要循环引用检查的类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.#ctor(System.Delegate,System.Delegate)">
            <summary>
            序列化委托循环引用信息
            </summary>
            <param name="delegateValue">序列化委托</param>
            <param name="memberDelegateValue">序列化委托</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetPrimitive(System.Delegate,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.#ctor(System.Delegate,AutoCSer.Metadata.GenericType)">
            <summary>
            序列化委托循环引用信息
            </summary>
            <param name="delegateValue">JSON 序列化委托</param>
            <param name="referenceType">需要循环引用检查的类型</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetPrimitive(System.Delegate,AutoCSer.Metadata.GenericType)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="referenceType"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetUnknown(System.Type,System.Delegate,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="type"></param>
            <param name="delegateValue"></param>
            <param name="memberDelegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetMember(System.Delegate,System.Type[],AutoCSer.BinarySerialize.SerializePushTypeEnum,System.Boolean)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="referenceTypes"></param>
            <param name="pushType"></param>
            <param name="isCollection"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetNotReference(System.Delegate,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="memberDelegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetTryReference(System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.SetMember(AutoCSer.BinarySerialize.SerializeDelegate@)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.setReferenceMember(System.Type)">
            <summary>
            子节点存在引用检查需求
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.CheckCompleted(AutoCSer.Metadata.GenericType)">
            <summary>
            计算状态完成检查
            </summary>
            <param name="genericType"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.checkCompleted(AutoCSer.Metadata.GenericType,System.Boolean)">
            <summary>
            计算状态完成检查
            </summary>
            <param name="genericType"></param>
            <param name="notReferenceCount"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeDelegateReference.completed(System.Boolean)">
            <summary>
            计算状态完成
            </summary>
            <param name="notReferenceCount"></param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeSerializer`1">
            <summary>
            二进制数据序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.DefaultSerializer">
            <summary>
            序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberSerializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.SerializeDelegateReference">
            <summary>
            序列化委托引用检查信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.jsonMemberMap">
            <summary>
            JSON混合序列化位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.jsonMemberIndexs">
            <summary>
            JSON混合序列化成员索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedSize">
            <summary>
            固定分组字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberCountVerify">
            <summary>
            序列化成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.isJson">
            <summary>
            当没有 JSON 序列化成员时是否预留 JSON 序列化标记
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.isMemberMap">
            <summary>
            是否处理成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.Serialize(AutoCSer.BinarySerializer,`0@)">
            <summary>
            序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.Serialize(AutoCSer.BinarySerializer,`0)">
            <summary>
            序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.SerializeNullable(AutoCSer.BinarySerializer,`0)">
            <summary>
            序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.MemberSerialize(AutoCSer.BinarySerializer,`0)">
            <summary>
            Object serialization
            </summary>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.SerializeCommandServer(AutoCSer.BinarySerializer,`0@)">
            <summary>
            命令服务序列化
            </summary>
            <param name="serializer">Binary data serialization</param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.nullMember(AutoCSer.BinarySerializer,`0)">
            <summary>
            成员序列化
            </summary>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.nullMemberMap(AutoCSer.Metadata.MemberMap{`0},AutoCSer.BinarySerializer,`0)">
            <summary>
            成员位图序列化
            </summary>
            <param name="memberMap"></param>
            <param name="binarySerializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.AwaitResultTypeAttribute">
            <summary>
            代码生成模板支持 await 泛型申明
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CombinationTemplateConfig">
            <summary>
            Customize simple combination template parameters
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CombinationTemplateConfig.DefaultTemplatePath">
            <summary>
            The default custom template relative to the project path CombinationTemplate
            默认自定义模板相对项目路径 CombinationTemplate
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.CombinationTemplateConfig.TemplatePath">
            <summary>
            Custom template relative to project path
            自定义模板相对项目路径
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CombinationTemplateConfig.GetCodeFileName(System.String)">
            <summary>
            Get the name of the target code file (default is the project namespace)
            获取目标代码文件名称（默认为项目命名空间）
            </summary>
            <param name="defaultNamespace"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Common">
            <summary>
            公共配置参数
            </summary>
            <summary>
            Public parameters and pre-encapsulated apis
            公共参数与预封装 API
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
            <summary>
            公共配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.UInt64[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="F:AutoCSer.Common.NamePrefix">
            <summary>
            AutoCSer name prefix
            AutoCSer 名称前缀
            </summary>
        </member>
        <member name="F:AutoCSer.Common.Config">
            <summary>
            Public configuration parameters
            公共配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Common.DefaultConstructor">
            <summary>
            Default constructor
            默认构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Common.Culture">
            <summary>
            Default system language and culture configuration
            默认系统语言文化配置
            </summary>
        </member>
        <member name="F:AutoCSer.Common.IsLittleEndian">
            <summary>
            Whether it is little-endian storage mode (serialization operations only support little-endian mode)
            是否小端储存模式（序列化操作仅支持小端模式）
            </summary>
        </member>
        <member name="F:AutoCSer.Common.CurrentProcess">
            <summary>
            Current process information
            当前进程信息
            </summary>
        </member>
        <member name="F:AutoCSer.Common.ProcessorCount">
            <summary>
            Number of CPU logical processors (number of threads)
            CPU 逻辑处理器数量（线程数量）
            </summary>
        </member>
        <member name="M:AutoCSer.Common.SetCurrentProcessAffinity(System.Byte)">
            <summary>
            Set the CPU affinity of the current process
            设置当前进程的 CPU 亲缘性
            </summary>
            <param name="processorIndex">The logical processor number starts from 0
            逻辑处理器编号，从 0 开始</param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Common.SetCurrentProcessAffinity(System.Byte[])">
            <summary>
            Set the CPU affinity of the current process
            设置当前进程的 CPU 亲缘性
            </summary>
            <param name="processorIndexs">A collection of logical processor numbers, starting from 0
            逻辑处理器编号集合，从 0 开始</param>
            <returns>Return false on failure</returns>
        </member>
        <member name="F:AutoCSer.Common.UnicodeCodePage">
            <summary>
            Encoding.Unicode.CodePage
            </summary>
        </member>
        <member name="F:AutoCSer.Common.ApplicationDirectory">
            <summary>
            The program executes the main directory
            程序执行主目录
            </summary>
        </member>
        <member name="F:AutoCSer.Common.IsCodeGenerator">
            <summary>
            Whether it is a code generation environment
            是否代码生成环境
            </summary>
        </member>
        <member name="M:AutoCSer.Common.CheckDeserializeType(System.Type,System.Delegate)">
            <summary>
            Get the custom deserialization delegate data type
            获取自定义反序列化委托数据类型
            </summary>
            <param name="deserializerType"></param>
            <param name="deserializeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDefault``1">
            <summary>
            Get the default value (used to eliminate IDE warnings)
            获取默认值（用于消除 IDE 警告）
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Common.EmptyObject">
            <summary>
            Default empty object
            默认空对象
            </summary>
        </member>
        <member name="M:AutoCSer.Common.EmptyFunction">
            <summary>
            The default empty function is used to eliminate the empty statement warning in the IDE
            默认空函数，用于消除 IDE 空语句警告
            </summary>
        </member>
        <member name="F:AutoCSer.Common.EmptyAction">
            <summary>
            Default empty delegate
            默认空委托
            </summary>
        </member>
        <member name="F:AutoCSer.Common.NullMethodInfo">
            <summary>
            Default empty method information
            默认空方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Common.NullAutoResetEvent">
            <summary>
            Default empty event
            默认空事件
            </summary>
        </member>
        <member name="M:AutoCSer.Common.emptyEventHandler(System.Object,System.EventArgs)">
            <summary>
            Default empty event
            默认空事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:AutoCSer.Common.EmptyEventHandler">
            <summary>
            Default empty event
            默认空事件
            </summary>
        </member>
        <member name="F:AutoCSer.Common.TrueCompletedTask">
            <summary>
            The completed task that returns true
            返回 true 的已完成任务
            </summary>
        </member>
        <member name="M:AutoCSer.Common.GetCompletedTask(System.Boolean)">
            <summary>
            Get completed tasks based on logical value
            根据逻辑值获取已完成任务
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetCompletedTask``1(``0[])">
            <summary>
            Get the completed task
            获取已完成任务
            </summary>
            <typeparam name="T">Return value type</typeparam>
            <param name="value">Task return value
            任务返回值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetCompletedTask``1(``0)">
            <summary>
            Get the completed task
            获取已完成任务
            </summary>
            <typeparam name="T">Return value type</typeparam>
            <param name="value">Task return value
            任务返回值</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Common.CompletedTask">
            <summary>
            The task is completed by default
            默认已完成任务
            </summary>
        </member>
        <member name="P:AutoCSer.Common.CompletedValueTask">
            <summary>
            The task is completed by default
            默认已完成任务
            </summary>
        </member>
        <member name="P:AutoCSer.Common.AsyncDisposableCompletedTask">
            <summary>
            Completed tasks for asynchronously releasing resources
            异步释放资源的已完成任务
            </summary>
        </member>
        <member name="M:AutoCSer.Common.GetCompletedValueTask``1(``0)">
            <summary>
            Get the completed task
            获取已完成任务
            </summary>
            <typeparam name="T">Return value type</typeparam>
            <param name="value">Task return value
            任务返回值</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Common.TrueCompletedAwaiter">
            <summary>
            Return true for the completed awaiter
            返回 true 的已完成 awaiter
            </summary>
        </member>
        <member name="M:AutoCSer.Common.GetCompletedAwaiter(System.Boolean)">
            <summary>
            Get the completed awaiter based on the logical value
            根据逻辑值获取已完成 awaiter
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetUninitializedArray``1(System.Int32)">
            <summary>
            Get an array, allowing uninitialized entries(Reference type members are not allowed in data types)
            获取数组，允许存在未初始化数组项（数据类型不允许存在引用类型成员）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetUninitializedArray``1(``0[])">
            <summary>
            Copy the array and allow the existence of uninitialized array items(Reference type members are not allowed in data types)
            复制数组，允许存在未初始化数组项（数据类型不允许存在引用类型成员）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetUninitializedArray``1(``0[],System.Int32)">
            <summary>
            Copy the array and allow the existence of uninitialized array items(Reference type members are not allowed in data types)
            复制数组，允许存在未初始化数组项（数据类型不允许存在引用类型成员）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetUninitializedArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Copy the array and allow the existence of uninitialized array items(Reference type members are not allowed in data types)
            复制数组，允许存在未初始化数组项（数据类型不允许存在引用类型成员）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="capacity"></param>
            <param name="copyCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetCopyArray``1(``0[],System.Int32)">
            <summary>
            Copy the array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.CopyTo``1(``0[],``0[])">
            <summary>
            Copy the array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo``1(``0[],``0[],System.Int32,System.Int32)">
            <summary>
            Copy the array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="destinationArray"></param>
            <param name="destinationIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Common.Clear(System.UInt64*,System.Int32)">
            <summary>
            Fill in integers
            填充整数
            </summary>
            <param name="src">The starting address cannot be null
            起始地址，不能为null</param>
            <param name="count">ulong integer quantity
            ulong 整数数量</param>
        </member>
        <member name="M:AutoCSer.Common.Clear(System.Void*,System.Int32)">
            <summary>
            All the data are set to 0
            数据全部设置为 0
            </summary>
            <param name="src">The starting address cannot be null
            起始地址，不能为null</param>
            <param name="size">Number of bytes
            字节数量</param>
        </member>
        <member name="M:AutoCSer.Common.Fill(System.Void*,System.Int32,System.UInt64)">
            <summary>
            Fill in the data
            填充数据
            </summary>
            <param name="src">The starting address cannot be null
            起始地址，不能为null</param>
            <param name="count">ulong integer quantity
            ulong 整数数量</param>
            <param name="value">Filled integer values
            填充的整数值</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Void*,System.Int32)">
            <summary>
            Copy data
            </summary>
            <param name="source">The starting address of the original data cannot be null
            原数据起始地址，不能为null</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
            <param name="size">Byte length
            字节长度</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Void*,System.Int64)">
            <summary>
            Copy data
            </summary>
            <param name="source">The starting address of the original data cannot be null
            原数据起始地址，不能为null</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
            <param name="size">Byte length
            字节长度</param>
        </member>
        <member name="M:AutoCSer.Common.GetArray(System.Void*,System.Int32)">
            <summary>
            Memory data is converted into a byte array
            内存数据转换成字节数组
            </summary>
            <param name="source">The starting address cannot be null
            起始地址，不能为 null</param>
            <param name="size">The byte length must be greater than 0
            字节长度，必须大于 0</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy data
            </summary>
            <param name="source">The starting address of the original data
            原数据起始地址</param>
            <param name="destination">Target data
            目标数据</param>
            <param name="destinationIndex">The starting position of the target data
            目标数据起始位置</param>
            <param name="size">Byte length
            字节长度</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Byte[],System.Int32,System.Void*,System.Int32)">
            <summary>
            Copy data
            </summary>
            <param name="source">Original data
            原数据</param>
            <param name="sourceIndex">The starting position of the original data
            原数据起始位置</param>
            <param name="destination">The starting address of the target data
            目标数据起始地址</param>
            <param name="size">Byte length
            字节长度</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.String,System.Void*)">
            <summary>
            Copy data
            </summary>
            <param name="source">The length must be greater than 0
            长度必须大于 0</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(AutoCSer.SubString@,System.Void*)">
            <summary>
            Copy data
            </summary>
            <param name="source">The length must be greater than 0
            长度必须大于 0</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.String,System.Int32,System.Void*,System.Int32)">
            <summary>
            Copy data
            </summary>
            <param name="source">The length must be greater than 0
            长度必须大于 0</param>
            <param name="index">The starting position of the string
            字符串起始位置</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
            <param name="size">The number of copied characters
            复制字符数量</param>
        </member>
        <member name="M:AutoCSer.Common.Fill``1(``0[],``0)">
            <summary>
            Fill the entire array with data
            用数据填充整个数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value">Data to be filled
            待填充数据</param>
        </member>
        <member name="M:AutoCSer.Common.Fill``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position
            用数据填充数组指定位置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value">Data to be filled
            待填充数据</param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The number of filled data
            填充数据数量</param>
        </member>
        <member name="M:AutoCSer.Common.SequenceEqual(System.Void*,System.Void*,System.Int32)">
            <summary>
            Comparison of byte arrays
            字节数组比较
            </summary>
            <param name="left">null is not allowed
            不允许为 null</param>
            <param name="right">null is not allowed
            不允许为 null</param>
            <param name="size">The number of bytes for comparison
            比较字节数</param>
            <returns>Is it equal
            是否相等</returns>
        </member>
        <member name="M:AutoCSer.Common.SequenceEqual(System.Byte[],System.Byte[])">
            <summary>
            Comparison of byte arrays
            字节数组比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.SequenceEqual(AutoCSer.SubArray{System.Byte}@,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Comparison of byte arrays
            字节数组比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileExists(System.String)">
            <summary>
            Determine whether the file exists
            判断文件是否存在
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileExists(System.IO.FileInfo,System.Boolean)">
            <summary>
            Determine whether the file exists
            判断文件是否存在
            </summary>
            <param name="file"></param>
            <param name="isRefresh">Is refresh file information
            是否刷新文件信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DeleteFile(System.IO.FileInfo)">
            <summary>
            Delete the file
            删除文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryDeleteFile(System.IO.FileInfo)">
            <summary>
            Delete the file if it exists
            如果文件存在则删除文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.RefreshFileInfo(System.IO.FileInfo)">
            <summary>
            Refresh the file status data
            刷新文件状态数据
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileMove(System.String,System.String)">
            <summary>
            Move the file
            移动文件
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileMove(System.IO.FileInfo,System.String)">
            <summary>
            Move the file
            移动文件
            </summary>
            <param name="sourceFile"></param>
            <param name="destFileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.CreateFileStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            Create a file stream
            创建文件流
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="bufferSize"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.Seek(System.IO.FileStream,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Move the file stream location
            移动文件流位置
            </summary>
            <param name="fileStream"></param>
            <param name="seekIndex"></param>
            <param name="seekOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.SetLength(System.IO.FileStream,System.Int64)">
            <summary>
            Set the file stream length
            设置文件流长度
            </summary>
            <param name="fileStream"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryDeleteFile(System.String)">
            <summary>
            Delete the file if it exists
            如果文件存在则删除文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetMoveBakFileName(System.String)">
            <summary>
            Get the name of the backup file
            获取备份文件名称
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.ReadFileAllBytes(System.String)">
            <summary>
            Read all bytes of the file and return the file data
            读取文件所有字节并返回文件数据
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.ReadFileAllText(System.String,System.Text.Encoding)">
            <summary>
            Read the file and return the text content of the file
            读取文件并返回文件文本内容
            </summary>
            <param name="fileName"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.WriteFileAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Write the text to the file. If the file does not exist, create it
            将文本写入文件，文件不存在则创建文件
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Write data to a file. If the file does not exist, create a file
            将数据写入文件，文件不存在则创建文件
            </summary>
            <param name="fileName"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileCopyTo(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Copy the file
            复制文件
            </summary>
            <param name="file"></param>
            <param name="destFileName"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.FileCopyTo(System.String,System.String,System.Boolean)">
            <summary>
            Copy the file
            复制文件
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.SetFileAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
            <summary>
            Set file attributes
            设置文件属性
            </summary>
            <param name="file"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryExists(System.String)">
            <summary>
            Determine whether the directory exists
            判断目录是否存在
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryExists(System.IO.DirectoryInfo)">
            <summary>
            Determine whether the directory exists
            判断目录是否存在
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryMove(System.IO.DirectoryInfo,System.String)">
            <summary>
            Move the directory
            移动目录
            </summary>
            <param name="sourceDirectory"></param>
            <param name="destDirectoryName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryMove(System.String,System.String)">
            <summary>
            Move the directory
            移动目录
            </summary>
            <param name="sourceDirectoryName"></param>
            <param name="destDirectoryName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.IO.DirectoryInfo)">
            <summary>
            Get file collection
            获取文件集合
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.IO.DirectoryInfo,System.String)">
            <summary>
            Get file collection
            获取文件集合
            </summary>
            <param name="directory"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
            Get file collection
            获取文件集合
            </summary>
            <param name="directory"></param>
            <param name="searchPattern"></param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Get file name collection
            获取文件名称集合
            </summary>
            <param name="path"></param>
            <param name="searchPattern"></param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.DirectoryGetFiles(System.String)">
            <summary>
            Get file name collection
            获取文件名称集合
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDirectories(System.IO.DirectoryInfo)">
            <summary>
            Get directory collection
            获取目录集合
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDirectories(System.IO.DirectoryInfo,System.String)">
            <summary>
            Get directory collection
            获取目录集合
            </summary>
            <param name="directory"></param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDirectories(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
            Get directory collection
            获取目录集合
            </summary>
            <param name="directory"></param>
            <param name="searchPattern"></param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.GetDirectories(System.String)">
            <summary>
            Get directory name collection
            获取目录名称集合
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryCreateDirectory(System.String)">
            <summary>
            Create a directory
            创建目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryCreateDirectory(System.IO.DirectoryInfo)">
            <summary>
            Create a directory
            创建目录
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryDeleteDirectory(System.String,System.Boolean)">
            <summary>
            Delete the directory
            删除目录
            </summary>
            <param name="path"></param>
            <param name="recursive">Whether to delete the files in subdirectories and folders
            是否删除子目录与文件夹中的文件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.TryDeleteDirectory(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Delete the directory
            删除目录
            </summary>
            <param name="directory"></param>
            <param name="recursive">Whether to delete the files in subdirectories and folders
            是否删除子目录与文件夹中的文件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Common.allocateString(System.Int32)">
            <summary>
            Apply for string space
            申请字符串空间
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Common.AllocateString">
            <summary>
            Apply for string space
            申请字符串空间
            </summary>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Int64[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.UInt32[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Int32[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.UInt16[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Int16[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Byte[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.SByte[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Boolean[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Single[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Double[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Decimal[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Char[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.DateTime[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.TimeSpan[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Guid[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.UInt128[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Int128[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Half[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Numerics.Complex[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Numerics.Plane[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Numerics.Quaternion[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Numerics.Matrix3x2[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Numerics.Matrix4x4[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Numerics.Vector2[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Numerics.Vector3[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="M:AutoCSer.Common.CopyTo(System.Void*,System.Numerics.Vector4[])">
            <summary>
            Copy data
            </summary>
            <param name="source">原串起始地址，长度必须大于0</param>
            <param name="destination">目标数据</param>
        </member>
        <member name="T:AutoCSer.DictionaryCreator">
            <summary>
            Create the dictionary
            创建字典
            </summary>
            <summary>
            Create the dictionary
            创建字典
            </summary>
            <summary>
            Create the dictionary
            创建字典
            </summary>
            <summary>
            Create the dictionary
            创建字典
            </summary>
            <summary>
            Create the dictionary
            创建字典
            </summary>
            <summary>
            Create the dictionary
            创建字典
            </summary>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateULong``1">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateULong``1(System.Int32)">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashObject``2">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="T">Data type</typeparam>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashObject``2(System.Int32)">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="T">Data type</typeparam>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateLong``1">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateLong``1(System.Int32)">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateUInt``1">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateUInt``1(System.Int32)">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateInt``1">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateInt``1(System.Int32)">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateDateTime``1">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateDateTime``1(System.Int32)">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Dictionary</returns>
        </member>
        <member name="T:AutoCSer.CompletedTask`1">
            <summary>
            The default value has completed the task
            默认值已完成任务
            </summary>
            <typeparam name="T">Return value type</typeparam>
        </member>
        <member name="F:AutoCSer.CompletedTask`1.Default">
            <summary>
            The default value has completed the task
            默认值已完成任务
            </summary>
        </member>
        <member name="T:AutoCSer.Culture.Chinese">
            <summary>
            中文配置
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.TopologySortLoopError">
            <summary>
            拓扑排序循环错误信息
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.NotAllowDisposeSerializer">
            <summary>
            该实例正在序列化对象操作，不允许释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandClientControllerNameRepeatedly(System.String)">
            <summary>
            RPC 客户端命令控制器名称重复冲突
            </summary>
            <param name="controllerName">重复的控制器名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandClientControllerCountLimit(System.Int32,System.Int32)">
            <summary>
            RPC 客户端命令控制器数量超出上限
            </summary>
            <param name="controllerCount">控制器数量</param>
            <param name="maxControllerCount">控制器数量最大限制</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetNotInterfaceType(System.Type)">
            <summary>
            不支持非接口类型
            </summary>
            <param name="type">不支持的类型</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.CommandClientControllerEmptyName">
            <summary>
            RPC 客户端缺少控制器名称
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandClientControllerCreateFailed(System.Type,System.Type)">
            <summary>
            RPC 客户端控制器创建器创建失败
            </summary>
            <param name="clientInterfaceType">客户端控制器接口类型</param>
            <param name="serverInterfaceType">服务端控制器接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandServerControllerMethodCountLimit(System.Int32,System.Int32)">
            <summary>
            RPC 命令控制器最大命令序号超出限制
            </summary>
            <param name="methodIndex">控制器最大命令序号</param>
            <param name="maxCommandCount">最大命令数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandServerControllerMethodCountLimit(System.String,System.Int32,System.Int32)">
            <summary>
            RPC 命令控制器命令数量超出限制
            </summary>
            <param name="controllerName">控制器名称</param>
            <param name="methodCount">控制器命令数量</param>
            <param name="maxCommandCount">最大命令数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandServerControllerCountLimit(System.Int32)">
            <summary>
            RPC 命令控制器数量已经达到上限
            </summary>
            <param name="maxControllerCount">最大控制器数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandServerControllerNameRepeatedly(System.String)">
            <summary>
            RPC 服务端命令控制器名称重复冲突
            </summary>
            <param name="controllerName">重复的控制器名称</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.CommandServerControllerEmptyName">
            <summary>
            RPC 服务端缺少控制器名称
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandServerTaskQueueKeyTypeRepeatedly(System.String,System.String,System.Type)">
            <summary>
            RPC 服务端 Task 队列服务控制器关键字类型重复冲突
            </summary>
            <param name="controllerName">控制器名称</param>
            <param name="otherControllerName">冲突的控制器名称</param>
            <param name="keyTye">冲突的关键字类型</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.CommandServerControllerBound">
            <summary>
            RPC 服务端控制器实例已经绑定套接字上下文
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.CommandServerControllerNotFoundConstructDelegate">
            <summary>
            RPC 服务端套接字上下文绑定控制器实例必须传入构造委托
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.CommandServerControllerServerNotMatch">
            <summary>
            RPC 服务端控制器服务不匹配
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.CommandServerMissingControllerParameter">
            <summary>
            RPC 服务端缺少控制器参数
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandServerControllerMethodIndexLimit(System.Int32,System.Int32)">
            <summary>
            RPC 命令控制器命令序号超出限制
            </summary>
            <param name="methodIndex">控制器命令序号</param>
            <param name="methodCount">命令数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetCommandServerNotFoundPort(System.String)">
            <summary>
            RPC 服务缺少监听端口号
            </summary>
            <param name="serverName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetReverseCommandServerNotFoundController(System.String)">
            <summary>
            反向 RPC 服务缺少控制器信息
            </summary>
            <param name="serverName">服务名称</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.Chinese.GetStateSearcherEmptyState">
            <summary>
            状态机查找数据不能为空
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Chinese.GetStateSearcherStateRepetition(System.String)">
            <summary>
            状态机查找数据重复
            </summary>
            <param name="errorValue">重复数据</param>
        </member>
        <member name="F:AutoCSer.Culture.Chinese.Default">
            <summary>
            默认中文配置
            </summary>
        </member>
        <member name="T:AutoCSer.Culture.Configuration">
            <summary>
            系统语言文化配置
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.TopologySortLoopError">
            <summary>
            拓扑排序循环错误信息
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.NotAllowDisposeSerializer">
            <summary>
            该实例正在序列化对象操作，不允许释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandClientControllerNameRepeatedly(System.String)">
            <summary>
            RPC 客户端命令控制器名称重复冲突
            </summary>
            <param name="controllerName">重复的控制器名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandClientControllerCountLimit(System.Int32,System.Int32)">
            <summary>
            RPC 客户端命令控制器数量超出上限
            </summary>
            <param name="controllerCount">控制器数量</param>
            <param name="maxControllerCount">控制器数量最大限制</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetNotInterfaceType(System.Type)">
            <summary>
            不支持非接口类型
            </summary>
            <param name="type">不支持的类型</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.CommandClientControllerEmptyName">
            <summary>
            RPC 客户端缺少控制器名称
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandClientControllerCreateFailed(System.Type,System.Type)">
            <summary>
            RPC 客户端控制器创建器创建失败
            </summary>
            <param name="clientInterfaceType">客户端控制器接口类型</param>
            <param name="serverInterfaceType">服务端控制器接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandServerControllerMethodCountLimit(System.Int32,System.Int32)">
            <summary>
            RPC 命令控制器最大命令序号超出限制
            </summary>
            <param name="methodIndex">控制器最大命令序号</param>
            <param name="maxCommandCount">最大命令数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandServerControllerMethodCountLimit(System.String,System.Int32,System.Int32)">
            <summary>
            RPC 命令控制器命令数量超出限制
            </summary>
            <param name="controllerName">控制器名称</param>
            <param name="methodCount">控制器命令数量</param>
            <param name="maxCommandCount">最大命令数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandServerControllerCountLimit(System.Int32)">
            <summary>
            RPC 命令控制器数量已经达到上限
            </summary>
            <param name="maxControllerCount">最大控制器数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandServerControllerNameRepeatedly(System.String)">
            <summary>
            RPC 服务端命令控制器名称重复冲突
            </summary>
            <param name="controllerName">重复的控制器名称</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.CommandServerControllerEmptyName">
            <summary>
            RPC 服务端缺少控制器名称
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandServerTaskQueueKeyTypeRepeatedly(System.String,System.String,System.Type)">
            <summary>
            RPC 服务端 Task 队列服务控制器关键字类型重复冲突
            </summary>
            <param name="controllerName">控制器名称</param>
            <param name="otherControllerName">冲突的控制器名称</param>
            <param name="keyTye">冲突的关键字类型</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.CommandServerControllerBound">
            <summary>
            RPC 服务端控制器实例已经绑定套接字上下文
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.CommandServerControllerNotFoundConstructDelegate">
            <summary>
            RPC 服务端套接字上下文绑定控制器实例必须传入构造委托
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.CommandServerControllerServerNotMatch">
            <summary>
            RPC 服务端控制器服务不匹配
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.CommandServerMissingControllerParameter">
            <summary>
            RPC 服务端缺少控制器参数
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandServerControllerMethodIndexLimit(System.Int32,System.Int32)">
            <summary>
            RPC 命令控制器命令序号超出限制
            </summary>
            <param name="methodIndex">控制器命令序号</param>
            <param name="methodCount">命令数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetCommandServerNotFoundPort(System.String)">
            <summary>
            RPC 服务缺少监听端口号
            </summary>
            <param name="serverName">Server name
            服务名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetReverseCommandServerNotFoundController(System.String)">
            <summary>
            反向 RPC 服务缺少控制器信息
            </summary>
            <param name="serverName">Server name
            服务名称</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.Configuration.GetStateSearcherEmptyState">
            <summary>
            状态机查找数据不能为空
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetStateSearcherStateRepetition(System.String)">
            <summary>
            状态机查找数据重复
            </summary>
            <param name="errorValue">重复数据</param>
        </member>
        <member name="M:AutoCSer.Culture.Configuration.GetDefault">
            <summary>
            获取默认系统语言文化配置
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Culture.Configuration.IsChinese">
            <summary>
            是否中文环境
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Culture.English">
            <summary>
            English configuration
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.English.TopologySortLoopError">
            <summary>
            Topology sort loop error message
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.English.NotAllowDisposeSerializer">
            <summary>
            This instance is serializing object operations and does not allow resource release
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandClientControllerNameRepeatedly(System.String)">
            <summary>
            The RPC client command controller name conflicts repeatedly
            </summary>
            <param name="controllerName">Duplicate controller name</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandClientControllerCountLimit(System.Int32,System.Int32)">
            <summary>
            The number of RPC client command controllers exceeds the upper limit
            </summary>
            <param name="controllerCount">Number of controllers</param>
            <param name="maxControllerCount">Maximum number of controllers</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.English.GetNotInterfaceType(System.Type)">
            <summary>
            Non-interface types are not supported
            </summary>
            <param name="type">Unsupported type</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.English.CommandClientControllerEmptyName">
            <summary>
            The RPC client lacks a controller name
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandClientControllerCreateFailed(System.Type,System.Type)">
            <summary>
            Description Failed to create the RPC client controller creator
            </summary>
            <param name="clientInterfaceType">Type of the client controller interface</param>
            <param name="serverInterfaceType">Server controller interface type</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandServerControllerMethodCountLimit(System.Int32,System.Int32)">
            <summary>
            The maximum command number of the RPC command controller exceeds the limit
            </summary>
            <param name="methodIndex">Maximum command number of the controller</param>
            <param name="maxCommandCount">Maximum number of commands</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandServerControllerMethodCountLimit(System.String,System.Int32,System.Int32)">
            <summary>
            The number of RPC command controller commands exceeds the limit
            </summary>
            <param name="controllerName">Controller name</param>
            <param name="methodCount">Number of controller commands</param>
            <param name="maxCommandCount">Maximum number of commands</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandServerControllerCountLimit(System.Int32)">
            <summary>
            The number of RPC command controllers reached the upper limit
            </summary>
            <param name="maxControllerCount">Maximum number of controllers</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandServerControllerNameRepeatedly(System.String)">
            <summary>
            The name of the RPC server command controller conflicts repeatedly
            </summary>
            <param name="controllerName">Duplicate controller name</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.English.CommandServerControllerEmptyName">
            <summary>
            The RPC server lacks a controller name
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandServerTaskQueueKeyTypeRepeatedly(System.String,System.String,System.Type)">
            <summary>
            The keyword type of the Task queue service controller on the RPC server repeatedly conflicts
            </summary>
            <param name="controllerName">Controller name</param>
            <param name="otherControllerName">Conflicting controller name</param>
            <param name="keyTye">The keyword type of the conflict</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.English.CommandServerControllerBound">
            <summary>
            The RPC server controller instance has been bound to the socket context
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.English.CommandServerControllerNotFoundConstructDelegate">
            <summary>
            The RPC server socket context binding controller instance must be passed in the construct delegate
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.English.CommandServerControllerServerNotMatch">
            <summary>
            The RPC server controller services do not match
            </summary>
        </member>
        <member name="P:AutoCSer.Culture.English.CommandServerMissingControllerParameter">
            <summary>
            Missing controller parameter
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandServerControllerMethodIndexLimit(System.Int32,System.Int32)">
            <summary>
            The command number of the RPC command controller exceeds the limit
            </summary>
            <param name="methodIndex">Controller command sequence number</param>
            <param name="methodCount">Number of commands</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.English.GetCommandServerNotFoundPort(System.String)">
            <summary>
            The RPC service lacks a listening port number
            </summary>
            <param name="serverName">Server name</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Culture.English.GetReverseCommandServerNotFoundController(System.String)">
            <summary>
            The reverse RPC service lacks controller information
            </summary>
            <param name="serverName">Server name</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Culture.English.GetStateSearcherEmptyState">
            <summary>
            State machine lookup data cannot be empty
            </summary>
        </member>
        <member name="M:AutoCSer.Culture.English.GetStateSearcherStateRepetition(System.String)">
            <summary>
            The state machine finds data duplicates
            </summary>
            <param name="errorValue">Duplicate data</param>
        </member>
        <member name="F:AutoCSer.Culture.English.Default">
            <summary>
            Default English configuration
            </summary>
        </member>
        <member name="T:AutoCSer.EmptyArrayCompletedTask`1">
            <summary>
            0 长度空数组已完成任务
            </summary>
            <typeparam name="T">Return value type</typeparam>
        </member>
        <member name="F:AutoCSer.EmptyArrayCompletedTask`1.EmptyArray">
            <summary>
            0 长度空数组已完成任务
            </summary>
        </member>
        <member name="T:AutoCSer.EmptyLeftArrayCompletedTask`1">
            <summary>
            0 长度空数组已完成任务
            </summary>
            <typeparam name="T">Return value type</typeparam>
        </member>
        <member name="F:AutoCSer.EmptyLeftArrayCompletedTask`1.EmptyArray">
            <summary>
            0 长度空数组已完成任务
            </summary>
        </member>
        <member name="T:AutoCSer.ConsoleWriteMessage">
            <summary>
            Console output message
            控制台输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteMessage.message">
            <summary>
            Output message
            输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteMessage.foregroundColor">
            <summary>
            Text color
            文字颜色
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteMessage.backgroundColor">
            <summary>
            Background color
            背景颜色
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteMessage.restoreColor">
            <summary>
            Whether to restore the text and background color after outputting the message
            输出信息以后是否恢复文字与背景颜色
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteMessage.isWriteLine">
            <summary>
            Whether to add a line break after outputting the message
            输出信息之后是否添加换行
            </summary>
        </member>
        <member name="M:AutoCSer.ConsoleWriteMessage.#ctor(System.String,System.ConsoleColor,System.ConsoleColor,System.Boolean,System.Boolean)">
            <summary>
            Console output message
            控制台输出信息
            </summary>
            <param name="message">Output message
            输出信息</param>
            <param name="foregroundColor">Text color
            文字颜色</param>
            <param name="backgroundColor">Background color
            背景颜色</param>
            <param name="restoreColor">Whether to restore the text and background color after outputting the message
            输出信息以后是否恢复文字与背景颜色</param>
            <param name="isWriteLine">Whether to add a line break after outputting the message
            输出信息之后是否添加换行</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteMessage.Write">
            <summary>
            Console output
            控制台输出
            </summary>
        </member>
        <member name="T:AutoCSer.ConsoleWriteQueue">
            <summary>
            Console output queue
            控制台输出队列
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.outputQueue">
            <summary>
            Current output queue
            当前输出队列
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.appendQueue">
            <summary>
            The queue for the current added output
            当前添加输出队列
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.writeLock">
            <summary>
            Queue access lock
            队列访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.ConsoleWriteQueue.isThread">
            <summary>
            Whether the output thread has been started
            是否已经启动输出线程
            </summary>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.write">
            <summary>
            Output thread processing
            输出线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.append(AutoCSer.ConsoleWriteMessage)">
            <summary>
            Add to the output queue
            添加到输出队列
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Write(System.String,System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            Add to the output queue
            添加到输出队列
            </summary>
            <param name="message">Output message
            输出信息</param>
            <param name="foregroundColor">Text color
            文字颜色</param>
            <param name="backgroundColor">Background color
            背景颜色</param>
            <param name="restoreColor">Whether to restore the text and background color after outputting the message
            输出信息以后是否恢复文字与背景颜色</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.WriteLine(System.String,System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            Add to the output queue (finally add line break output)
            添加到输出队列（最后增加换行输出）
            </summary>
            <param name="message">Output message
            输出信息</param>
            <param name="foregroundColor">Text color
            文字颜色</param>
            <param name="backgroundColor">Background color
            背景颜色</param>
            <param name="restoreColor">Whether to restore the text and background color after outputting the message
            输出信息以后是否恢复文字与背景颜色</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Breakpoint(System.String,System.String,System.String,System.Int32)">
            <summary>
            Test breakpoint information is added to the output queue
            测试断点信息添加到输出队列
            </summary>
            <param name="message">Breakpoint message
            断点信息</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.BreakpointLog(System.String,System.String,System.String,System.Int32)">
            <summary>
            Test breakpoint information is added to the output queue
            测试断点信息添加到输出队列
            </summary>
            <param name="message">Breakpoint message
            断点信息</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Breakpoint(AutoCSer.Net.CommandClientReturnValue,System.String,System.String,System.Int32)">
            <summary>
            If the return value status is not successful, add the test breakpoint message
            返回值状态非成功则添加测试断点信息
            </summary>
            <param name="returnValue">Return value</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>Return whether the value status is successful
            返回值状态是否成功</returns>
        </member>
        <member name="M:AutoCSer.ConsoleWriteQueue.Breakpoint``1(AutoCSer.Net.CommandClientReturnValue{``0},System.String,System.String,System.Int32)">
            <summary>
            If the return value status is not successful, add the test breakpoint message
            返回值状态非成功则添加测试断点信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnValue">Return value</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>Return whether the value status is successful
            返回值状态是否成功</returns>
        </member>
        <member name="T:AutoCSer.Extensions.CommandServerKeepCallbackExtension">
            <summary>
            TCP 服务器端异步保持回调扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.CommandServerKeepCallbackExtension.Callback``1(AutoCSer.Net.CommandServerKeepCallback{``0},``0,System.Int32,``0@,System.Int32@,System.Boolean)">
            <summary>
            返回数据链表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <param name="head">Head node
            头节点</param>
            <param name="getCount">Get the quantity
            获取数量</param>
            <param name="end">End node
            结束节点</param>
            <param name="endCount">Actual end number
            实际结束数量</param>
            <param name="isCancel">Whether to close the callback after the callback is completed
            回调完成之后是否关闭回调</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.DictionaryExtension">
            <summary>
            字典相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryExtension.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            当关键字不存在时添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>返回 false 表示已经存在关键字添加失败</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryExtension.Remove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            当关键字存在时删除数据并返回
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value">被删除数据</param>
            <returns>返回 false 表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.Extensions.DirectoryInfoExtension">
            <summary>
            目录相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.DirectoryInfoExtension.Separator">
            <summary>
            目录分隔符
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.DirectoryInfoExtension.fullName(System.IO.DirectoryInfo)">
            <summary>
            取以\结尾的路径全名
            </summary>
            <param name="path">目录</param>
            <returns>\结尾的路径全名</returns>
        </member>
        <member name="T:AutoCSer.Extensions.EventWaitHandleExtension">
            <summary>
            事件扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.EventWaitHandleExtension.setDispose(System.Threading.EventWaitHandle)">
            <summary>
            调用 Set
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Extensions.FieldInfoExtension">
            <summary>
            字段扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.FieldInfoExtension.getAnonymousName(System.Reflection.FieldInfo,System.String@)">
            <summary>
            获取匿名字段名称（如果是属性生成则转换为属性名称）
            </summary>
            <param name="field"></param>
            <param name="name">字段名称或者属性名称</param>
            <returns>是否属性</returns>
        </member>
        <member name="T:AutoCSer.Extensions.IDisposableExtension">
            <summary>
            资源释放操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.IDisposableExtension.DisposeAsync(System.IDisposable)">
            <summary>
            Release resources
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.LogExtension">
            <summary>
            日志扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Info(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加普通日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">普通日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.InfoIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加普通日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">普通日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.DebugIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.ExceptionIgnoreException(AutoCSer.ILog,System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Error(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加一般错误日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.ErrorIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加一般错误日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Warn(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.WarnIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Fatal(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加致命错误日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.FatalIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加致命错误日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.Breakpoint(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加测试断点日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.BreakpointIgnoreException(AutoCSer.ILog,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加测试断点日志
            </summary>
            <param name="log">日志处理接口</param>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.LogExtension.FlushIgnoreException(AutoCSer.ILog)">
            <summary>
            等待写入完成
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.TaskExtension">
            <summary>
            Task expansion operation
            任务扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.AutoCSerNotWait(System.Threading.Tasks.Task)">
            <summary>
            A warning used to clear an await inside async without waiting for the task to execute
            不等待任务执行的情况下，用于清除 async 内部提示 await 的警告
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.AutoCSerNotWait(System.Threading.Tasks.ValueTask)">
            <summary>
            A warning used to clear an await inside async without waiting for the task to execute
            不等待任务执行的情况下，用于清除 async 内部提示 await 的警告
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.Catch(System.Threading.Tasks.Task,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Capture and output the exception log
            捕获并输出异常日志
            </summary>
            <param name="task"></param>
            <param name="isQueue">The default is false, indicating that the unfinished queue will not be added
            默认为 false 表示不加入未完成队列</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.Catch(System.Threading.Tasks.ValueTask,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Capture and output the exception log
            捕获并输出异常日志
            </summary>
            <param name="task"></param>
            <param name="isQueue">The default is false, indicating that the unfinished queue will not be added
            默认为 false 表示不加入未完成队列</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.getResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Getting the Result from the new thread prevents subsequent operations from blocking the Task scheduler thread synchronously
            从新线程中获取 Result 防止后续操作出现同步阻塞 Task 调度线程
            </summary>
            <typeparam name="T">Return value type
            返回值类型</typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.wait(System.Threading.Tasks.Task)">
            <summary>
            Getting the Result from the new thread prevents subsequent operations from blocking the Task scheduler thread synchronously
            从新线程中获取 Result 防止后续操作出现同步阻塞 Task 调度线程
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TaskExtension.wait(System.Threading.Tasks.ValueTask)">
            <summary>
            Getting the Result from the new thread prevents subsequent operations from blocking the Task scheduler thread synchronously
            从新线程中获取 Result 防止后续操作出现同步阻塞 Task 调度线程
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.NullableReferenceExtension">
            <summary>
            Nullable reference type extension operation (Used to eliminate IDE warnings)
            可空引用类型扩展操作（用于消除 IDE 警告）
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castClass``1(System.Object)">
            <summary>
            The object is converted to a specified nullable reference type
            object 转换为指定可空引用类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castType``1(System.Object)">
            <summary>
            The object is converted to a specified nullable type
            object 转换为指定可空类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castValue``1(System.Object)">
            <summary>
            Convert object to a value type
            object 转换为值类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.notNullCastType``1(System.Object)">
            <summary>
            Non-empty object conversion type
            非空 object 转换类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.notNull``1(``0)">
            <summary>
            Non-empty object type conversion
            非空对象类型转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castArray``1(``0)">
            <summary>
            Convert an array of nullable reference types to an array
            可空引用类型数组转换为数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.castObject``1(``0)">
            <summary>
            Generic values are converted to object
            泛型值转换为 object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.setDefault``1(``0[],System.Int32)">
            <summary>
            Set the array elements to the default values
            设置数组元素为默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Extensions.NullableReferenceExtension.getSetDefault``1(``0[],System.Int32)">
            <summary>
            Set the array elements as default values and return the original values
            设置数组元素为默认值并返回原始值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="T:AutoCSer.Extensions.ParameterInfoExtension">
            <summary>
            方法参数相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ParameterInfoExtension.elementType(System.Reflection.ParameterInfo)">
            <summary>
            获取参数真实类型
            </summary>
            <param name="parameter">参数信息</param>
            <returns>参数真实类型</returns>
        </member>
        <member name="T:AutoCSer.Extensions.SubArrayExtension">
            <summary>
            Array substring expansion operation
            数组子串扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.SubArrayExtension.createMemoryStream(AutoCSer.SubArray{System.Byte})">
            <summary>
            Create a memory byte stream
            创建内存字节流
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.TypeBuilderExtension">
            <summary>
            Emit 类型创建器扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.TypeBuilderExtension.CreateType(System.Reflection.Emit.TypeBuilder)">
            <summary>
            创建类型
            </summary>
            <param name="typeBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.ArrayExtension">
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.isEmpty``1(``0[])">
            <summary>
            数组是否为空或者长度为0
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">数组数据</param>
            <returns>数组是否为空或者长度为0</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.copy``1(``0[])">
            <summary>
            复制数组
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">待复制数组</param>
            <returns>复制后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.getArray``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.getConcatArray``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.concat``1(``0[],``0[])">
            <summary>
            合并数组
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">数组集合</param>
            <param name="otherArray">追加的数组</param>
            <returns>合并后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.concat``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.getFind``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">Determine whether the data match
            判断数据是否匹配</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.sort``1(``0[],System.Func{``0,``0,System.Int32})">
            <summary>
            排序
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">待排序数组</param>
            <param name="comparer">Data sorting comparator
            数据排序比较器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.joinString``1(``0[],System.Char,System.Func{``0,System.String})">
            <summary>
            Connect string
            连接字符串
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">Data collection
            数据集合</param>
            <param name="toString">The delegate that gets the string
            获取字符串的委托</param>
            <param name="join">连接字符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.JoinString(System.String[],System.Char)">
            <summary>
            连接字符串集合
            </summary>
            <param name="array">字符串集合，长度必须大于 0</param>
            <param name="join">字符连接</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ArrayExtension.AsReadOnly``1(``0[])">
            <summary>
            转换为只读集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.CollectionExtension">
            <summary>
            集合相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.toGeneric``1(System.Collections.ICollection)">
            <summary>
            ICollection泛型转换
            </summary>
            <param name="value">数据集合</param>
            <returns>泛型数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.count``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">数据集合</param>
            <returns>null为0</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="values">Data collection
            数据集合</param>
            <returns>Array</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getLeftArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="T">枚举值类型</typeparam>
            <typeparam name="VT">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>Array</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="T">枚举值类型</typeparam>
            <typeparam name="VT">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>Array</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getListArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            根据集合内容返回单向动态数组
            </summary>
            <typeparam name="T">枚举值类型</typeparam>
            <typeparam name="VT">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>单向动态数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getFindArrayNotNull``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            获取匹配数组
            </summary>
            <typeparam name="T">枚举值类型</typeparam>
            <typeparam name="VT">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.CollectionExtension.getDictionary``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            转换成字典
            </summary>
            <typeparam name="VT">枚举值类型</typeparam>
            <typeparam name="KT">哈希键值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">键值获取器</param>
            <returns>Dictionary</returns>
        </member>
        <member name="T:AutoCSer.Extensions.EmitGenerator">
            <summary>
            MSIL生成
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.int32(System.Reflection.Emit.ILGenerator,System.Boolean)">
            <summary>
            加载 1/0
            </summary>
            <param name="generator"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.int32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载Int32数据
            </summary>
            <param name="generator"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.ldarg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载参数
            </summary>
            <param name="generator"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            函数调用
            </summary>
            <param name="generator"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.ldstr(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            加载字符串
            </summary>
            <param name="generator"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.initobjShort(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            对象初始化
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
            <param name="local"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.initobj(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            对象初始化
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
            <param name="local"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.memberMapObjectIsMember(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32,AutoCSer.Metadata.GenericType)">
            <summary>
            判断成员位图是否匹配成员索引
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
            <param name="genericType"></param>
        </member>
        <member name="M:AutoCSer.Extensions.EmitGenerator.memberMapObjectSetMember(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32,AutoCSer.Metadata.GenericType)">
            <summary>
            设置成员索引
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
            <param name="genericType"></param>
        </member>
        <member name="T:AutoCSer.Extensions.NumberExtension">
            <summary>
            Integer correlation extension operations
            数值相关扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div10_16Mul">
            <summary>
            The multiplier of a 16-bit integer divided by 10
            16 位整数除以 10 转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div10_16Shift">
            <summary>
            The number of shifts in the multiplication method of a 16-bit integer divided by 10
            16 位整数除以 10 转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div10000Mul">
            <summary>
            The multiplier of a 32-bit integer divided by 10,000
            32 位整数除以 10000 转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div10000Shift">
            <summary>
            The number of shifts in the multiplication method of a 32-bit integer divided by 10,000
            32 位整数除以 10000 转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div100000000Mul">
            <summary>
            The multiplier of a 32-bit integer divided by 100,000,000
            32 位整数除以 100000000 转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.Div100000000Shift">
            <summary>
            The number of shifts in the multiplication method of a 32-bit integer divided by 100,000,000
            32 位整数除以 100000000 转乘法的位移
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Byte)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>Integer string
            整数字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.Byte,System.Char*)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.SByte)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>Integer string
            整数字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.SByte,System.Char*)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.UInt16)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>Integer string
            整数字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.UInt16,System.Char*)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Int16)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>Integer string
            整数字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.Int16,System.Char*)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.UInt32)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>Integer string
            整数字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.UInt32,System.Char*)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString99999999U(System.UInt32,System.Char*)">
            <summary>
            Convert positive integers less than 100,000,000 to strings
            小于 100000000 的正整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Int32)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>Integer string
            整数字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Int32,System.Char)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="prefix">Prefix
            前缀字符</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.Int32,System.Char*)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString99999999S(System.UInt32,System.Char*)">
            <summary>
            Convert a negative integer with an absolute value less than 100,000,000 to a string
            绝对值小于 100000000 的负整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString4(System.UInt32,System.Char*)">
            <summary>
            Convert 4-digit decimal values to strings
            4 位十进制数值转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString8(System.UInt32,System.Char*)">
            <summary>
            8-digit decimal value to string
            8 位十进制数值转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.UInt64)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>Integer string
            整数字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.UInt64,System.Char*)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString(System.Int64)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>Integer string
            整数字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToString(System.Int64,System.Char*)">
            <summary>
            Integer to string conversion
            整数转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toString16(System.UInt64,System.Char*)">
            <summary>
            Convert 16-digit decimal values to strings
            16 位十进制数值转字符串
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="chars">String output buffer
            字符串输出缓冲区</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toHex(System.UInt64)">
            <summary>
            Convert to a string of 16 hexadecimal characters (capital letters)
            转换为 16 个十六进制字符的字符串（大写字母）
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>A string of 16 hexadecimal characters
            16 个十六进制字符的字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toHex(System.UInt64,System.Char*)">
            <summary>
            Convert to a string of 16 hexadecimal characters (capital letters)
            转换为 16 个十六进制字符的字符串（大写字母）
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="hexs">A string of 16 hexadecimal characters
            16 个十六进制字符的字符串</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toHex(System.UInt32)">
            <summary>
            Convert to a string of 8 hexadecimal characters (capital letters)
            转换为 8 个十六进制字符的字符串（大写字母）
            </summary>
            <param name="value">Integer value
            整数值</param>
            <returns>A string of 8 hexadecimal characters
            8 个十六进制字符的字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toHex(System.UInt32,System.Char*)">
            <summary>
            Convert to a string of 8 hexadecimal characters (capital letters)
            转换为 8 个十六进制字符的字符串（大写字母）
            </summary>
            <param name="value">Integer value
            整数值</param>
            <param name="hexs">A string of 8 hexadecimal characters
            8 个十六进制字符的字符串</param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToHex(System.UInt32)">
            <summary>
            4-bit to hexadecimal characters (capital letters)
            4 位转十六进制字符（大写字母）
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.ToHex4(System.UInt32,System.Char*)">
            <summary>
            Convert 16 bits to 4 hexadecimal strings (capital letters)
            16 位转换成 4 个 16进制字符串（大写字母）
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.GetToHex(System.UInt32,System.Char*)">
            <summary>
            Convert to a hexadecimal string (capital letters)
            转换成 16 进制字符串（大写字母）
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.fromHex(System.Char)">
            <summary>
            Hexadecimal string to integer conversion
            十六进制字符串转整数
            </summary>
            <param name="hex"></param>
            <returns>Return uint.MaxValue in case of failure
            失败返回 uint.MaxValue</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.fromHex4(System.Char*)">
            <summary>
            Hexadecimal string to integer conversion
            十六进制字符串转整数
            </summary>
            <param name="chars"></param>
            <returns>If the high 16 bits are not 0, it indicates failure
            高 16 位 不为 0 表示失败</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.FromHex(System.Char*,System.UInt32@)">
            <summary>
            Hexadecimal string to integer conversion
            十六进制字符串转整数
            </summary>
            <param name="chars"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.fromHex6(System.Char*)">
            <summary>
            Hexadecimal string to integer conversion
            十六进制字符串转整数
            </summary>
            <param name="chars"></param>
            <returns>If the high 8 bits are not 0, it indicates failure
            高 8 位 不为 0 表示失败</returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.FromHex(System.Char*,System.UInt64@)">
            <summary>
            Hexadecimal string to integer conversion
            十六进制字符串转整数
            </summary>
            <param name="chars"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.logicalInversion(System.Int32)">
            <summary>
            Logical inversion: 0 to 1, non-0 to 0
            逻辑取反，0 转 1，非 0 转 0
            </summary>
            <param name="value">Negative numbers are not allowed
            不允许负数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.toLogical(System.Int32)">
            <summary>
            Convert logical values, converting non-0 to 1
            转逻辑值，非 0 转 1
            </summary>
            <param name="value">Negative numbers are not allowed
            不允许负数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.logicalInversion(System.UInt32)">
            <summary>
            Logical inversion: 0 to 1, non-0 to 0
            逻辑取反，0 转 1，非 0 转 0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.fullBit(System.UInt32)">
            <summary>
            Fill the empty space after the first valid binary bit
            填充第一个有效二进制位后面的空位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.upToPower2(System.UInt32)">
            <summary>
            Take the power of 2 upwards
            向上取 2 的幂次方
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.bits(System.UInt32)">
            <summary>
            Get the number of valid bits
            获取有效位数量
            </summary>
            <param name="value">data</param>
            <returns>Number of valid bits
            有效位数量</returns>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.DeBruijn32">
            <summary>
            A collection of 2^n related 32-bit deBruijn sequences
            2^n 相关 32 位 deBruijn 序列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.NumberExtension.DeBruijn32Number">
            <summary>
            2^n related 32-bit deBruijn sequence
            2^n 相关 32位 deBruijn 序列
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.NumberExtension.deBruijnLog2(System.UInt32)">
            <summary>
            Find 2 to the power of x
            求 2 的 x 次方
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.StringExtension">
            <summary>
            字符串相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.toLower(System.String)">
            <summary>
            大写转小写
            </summary>
            <param name="value">大写字符串</param>
            <returns>小写字符串(原引用)</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.toLowerNotEmpty(System.String)">
            <summary>
            大写转小写
            </summary>
            <param name="value">大写字符串</param>
            <returns>小写字符串(原引用)</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.ToLower(System.Char*,System.Char*)">
            <summary>
            大写转小写
            </summary>
            <param name="start"></param>
            <param name="end">长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.FindNotNull(System.Char*,System.Char*,System.Char)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null,长度必须大于0</param>
            <param name="value">查找值</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.TrimStartNotEmpty(System.Char*,System.Char*)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.TrimEndNotEmpty(System.Char*,System.Char*)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.replaceNotNull(System.String,System.Char,System.Char)">
            <summary>
            字符替换
            </summary>
            <param name="value"></param>
            <param name="oldChar">原字符</param>
            <param name="newChar">目标字符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.WriteBytes(System.Char*,System.Int32,System.Byte*)">
            <summary>
            获取Ascii字符串原始字节流
            </summary>
            <param name="start">字符串,不能为null</param>
            <param name="length">字符串长度</param>
            <param name="write">写入位置,不能为null</param>
        </member>
        <member name="M:AutoCSer.Extensions.StringExtension.getHashCode64(System.String)">
            <summary>
            计算 64 位稳定 HASH 值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.TypeExtension">
            <summary>
            类型扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.fullName(System.Type,AutoCSer.Reflection.TypeNameBuildEnum,System.Boolean)">
            <summary>
            根据类型获取代码名称
            </summary>
            <param name="type"></param>
            <param name="buildEnum">类型名称输出类型</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
            <returns>代码名称</returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isSerializeNotSupport(System.Type)">
            <summary>
            类型是否不支持序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isSerializeNotSupportOrArrayRank(System.Type)">
            <summary>
            类型是否不支持序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isIgnoreSerialize(System.Type)">
            <summary>
            成员类型是否忽略序列化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isValueTypeNullable(System.Type)">
            <summary>
            判断是否可空类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isNullable(System.Type)">
            <summary>
            判断是否可空值类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.getNullableType(System.Type)">
            <summary>
            获取可空类型的值类型
            </summary>
            <param name="type">可空类型</param>
            <returns>值类型,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.getGenericInterface(System.Type)">
            <summary>
            获取所有泛型接口类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.getGenericInterfaceType(System.Type,System.Type)">
            <summary>
            根据指定泛型定义接口类型获取泛型接口类型
            </summary>
            <param name="type"></param>
            <param name="genericDefinitionInterfaceType">泛型定义接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.isGenericInterfaceType(System.Type,System.Type)">
            <summary>
            判断是否指定泛型定义接口
            </summary>
            <param name="type"></param>
            <param name="genericDefinitionInterfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeExtension.getGenericTypeDefinition(System.Type)">
            <summary>
            获取泛型定义类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FifoPriorityQueue`2">
            <summary>
            先进先出优先队列
            </summary>
            <typeparam name="KT">键值类型</typeparam>
            <typeparam name="VT">数据类型</typeparam>
        </member>
        <member name="T:AutoCSer.FifoPriorityQueue`2.Node">
            <summary>
            数据节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Previous">
            <summary>
            前一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Next">
            <summary>
            后一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Node.#ctor(`0,`1,AutoCSer.FifoPriorityQueue{`0,`1}.Node)">
            <summary>
            数据节点
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="previous"></param>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.dictionary">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Keys">
            <summary>
            获取所有关键字
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Values">
            <summary>
            获取所有数据
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.KeyValues">
            <summary>
            获取所有数据
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.header">
            <summary>
            头节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.end">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Item(`0)">
            <summary>
            数据对象
            </summary>
            <param name="key">查询键值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.#ctor(System.Int32)">
            <summary>
            先进先出优先队列
            </summary>
            <param name="dictionaryCapacity">字典初始化容器尺寸</param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Get(`0,`1)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <param name="nullValue">失败空值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryGetValue(`0,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <param name="value">目标数据对象</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.GetNode(`0)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryGetOnly(`0,`1@)">
            <summary>
            获取数据(不调整位置)
            </summary>
            <param name="key">键值</param>
            <param name="value"></param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Set(`0,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key">键值</param>
            <param name="value">数据对象</param>
            <returns>被替换的数据对象,没有返回default(VT)</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.SetOnly(`0,`1)">
            <summary>
            设置数据(不调整位置)
            </summary>
            <param name="key">键值</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafeAdd(`0,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafePopNode">
            <summary>
            弹出一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Pop">
            <summary>
            弹出一个值
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryPopValue(`1@)">
            <summary>
            弹出一个值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryPopNode(AutoCSer.FifoPriorityQueue{`0,`1}.Node@)">
            <summary>
            弹出一个节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafePopValue">
            <summary>
            弹出一个值
            </summary>
            <returns>值</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Remove(`0,`1@)">
            <summary>
            删除一个数据
            </summary>
            <param name="key">键值</param>
            <param name="value">被删除数据对象</param>
            <returns>是否删除了数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryGetHeader(`1@)">
            <summary>
            尝试获取第一个节点数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FragmentDictionary256`2">
            <summary>
            256 基分片 字典
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.FragmentDictionary256`2.dictionarys">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.Item(`0)">
            <summary>
            获取或者设置数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.KeyValues">
            <summary>
            键值对集合
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.Keys">
            <summary>
            关键字集合
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentDictionary256`2.Values">
            <summary>
            The data collection
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Add(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.getIndex(`0)">
            <summary>
            获取分片索引
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.GetOrCreateDictionary(`0)">
            <summary>
            根据关键字获取字典，不存在时创建字典
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.TryAdd(`0,`1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Set(`0,`1,`1@)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="removeValue">被删除数据</param>
            <returns>是否存在替换的被删除数据</returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.Remove(`0,`1@)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.RemoveKeys(`0[])">
            <summary>
            Delete the matching data based on the keyword collection
            根据关键字集合删除匹配数据
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.TryGetValue(`0,`1@)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.TryGetValue(`0,`1@,System.Collections.Generic.Dictionary{`0,`1}@)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentDictionary256`2.GetValueArray(`0[])">
            <summary>
            Get the matching data array based on the keyword collection
            根据关键字集合获取匹配数据数组
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.HashObject`1">
            <summary>
            包装 IEquatable 对象，用于 Hash 比较
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.HashObject`1.Value">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:AutoCSer.HashObject`1.Equals(AutoCSer.HashObject{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashObject`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashObject`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashObject`1.op_Implicit(`0)~AutoCSer.HashObject{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashObject`1.op_Implicit(AutoCSer.HashObject{`0})~`0">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.HeadLeftArray`1">
            <summary>
            带头节点的数组子串
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.HeadLeftArray`1.head">
            <summary>
            Head node
            </summary>
        </member>
        <member name="P:AutoCSer.HeadLeftArray`1.Head">
            <summary>
            Head node
            </summary>
        </member>
        <member name="F:AutoCSer.HeadLeftArray`1.Array">
            <summary>
            其它节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.HeadLeftArray`1.Values">
            <summary>
            返回所有数据
            </summary>
        </member>
        <member name="P:AutoCSer.HeadLeftArray`1.Count">
            <summary>
            节点总数
            </summary>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.#ctor(`0,System.Int32)">
            <summary>
            带头节点的数组子串
            </summary>
            <param name="head">头节点</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.#ctor(`0,AutoCSer.LeftArray{`0}@)">
            <summary>
            带头节点的数组子串
            </summary>
            <param name="head">头节点</param>
            <param name="array">其它节点集合</param>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.Add(`0)">
            <summary>
            添加其它节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.AddHead(`0)">
            <summary>
            设置头节点，并将原头节点添加为其它节点
            </summary>
            <param name="value">新的头节点</param>
        </member>
        <member name="M:AutoCSer.HeadLeftArray`1.ArrayToHead(System.Int32)">
            <summary>
            将数组指定位置元素设置为头节点
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:AutoCSer.JsonDeserializer">
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
            <summary>
            JSON 反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.TryDeserializeEnumULong``1(``0@)">
            <summary>
            枚举数值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.EnumFlagsULong``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            枚举反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Numerics.Vector2@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Numerics.Vector2@)">
            <summary>
            基础类型解析
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.NullStringValue">
            <summary>
            字符串 null
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.AllMemberAttribute">
            <summary>
            默认解析所有成员
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.escapeChars">
            <summary>
            转义字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.endChar">
            <summary>
            最后一个字符
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.Quote">
            <summary>
            当前字符串引号
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.IsBinaryMix">
            <summary>
            是否二进制混杂模式
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isEndSpace">
            <summary>
            是否以空格字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isEndDigital">
            <summary>
            是否以10进制数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isEndHex">
            <summary>
            是否以16进制数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isEndNumber">
            <summary>
            是否以数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.isCheckRemoteType">
            <summary>
            Whether it is necessary to call AutoCSer.Common.Config.CheckRemoteType to check the validity of the remote type
            是否需要调用 AutoCSer.Common.Config.CheckRemoteType 检查远程类型的合法性
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.#ctor">
            <summary>
            JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize``1(AutoCSer.SubString@,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="value">Target data</param>
            <param name="config">Configuration parameters</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize``1(System.String,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="value">Target data</param>
            <param name="config">Configuration parameters</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(System.Char*,System.Int32,``0@)">
            <summary>
            Json解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="length">Json长度</param>
            <param name="value">Target data</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize``1(``0@)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">Target data</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.freeThreadStatic">
            <summary>
            释放 JSON 解析器（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Free">
            <summary>
            释放 JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.FreeBinaryMix">
            <summary>
            释放 JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SetBinaryMix(System.Boolean)">
            <summary>
            设置二进制混杂模式
            </summary>
            <param name="isCheckRemoteType"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.space">
            <summary>
            扫描空格字符
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.spaceNext">
            <summary>
            扫描空格字符
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsNull">
            <summary>
            是否null
            </summary>
            <returns>是否null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.tryNull">
            <summary>
            是否null
            </summary>
            <returns>是否null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ICustom``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            自定义反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NotSupport``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            自定义反序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Constructor``1(``0@)">
            <summary>
            构造函数调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.baseSerialize``2(``0@)">
            <summary>
            基类转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Base``2(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            基类转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMixArrayLength">
            <summary>
            二进制混杂模式反序列化数组长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.arrayIndex``1(``0[]@)">
            <summary>
            数组解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">目标数据</param>
            <returns>数据数量,-1 表示失败</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize``1(``0[]@)">
            <summary>
            数组解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Array``1(AutoCSer.JsonDeserializer,``0[]@)">
            <summary>
            数组解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            数组解析
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.LeftArray``1(AutoCSer.JsonDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            数组解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize``1(AutoCSer.ListArray{``0}@)">
            <summary>
            数组解析
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ListArray``1(AutoCSer.JsonDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            数组解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Nullable``1(AutoCSer.JsonDeserializer,System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchCollection">
            <summary>
            查找数组起始位置
            </summary>
            <returns>返回 0 表示未结束，返回 1 表示已结束，返回 -1 表示 null 或者错误</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize``2(``0@)">
            <summary>
            集合反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="collection"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Collection``2(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            集合反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="collection"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            键值对解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.KeyValuePair``2(AutoCSer.JsonDeserializer,System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            键值对解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Dictionary``2(AutoCSer.JsonDeserializer,System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="dictionary">目标数据</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize``3(``0@)">
            <summary>
            字典反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IDictionary``3(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            字典反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">data</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">data</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.Byte@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMixNull(System.Byte@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Byte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.SByte@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.SByte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.UInt16@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMixNull(System.UInt16@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.UInt16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.Int16@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Int16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.UInt32@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMixNull(System.UInt32@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.UInt32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.Int32@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Int32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.UInt64@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMixNull(System.UInt64@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.UInt64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.Int64@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.getLong(System.UInt64,System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value"></param>
            <param name="sign"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Int64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Int128@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.UInt128@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Half@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Single@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Single}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Double@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Double}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Decimal@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Decimal}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Char@)">
            <summary>
            字符解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Char}@)">
            <summary>
            字符解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.DateTime@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.DateTime@)">
            <summary>
            时间解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.DateTime}@)">
            <summary>
            时间解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMix(System.TimeSpan@)">
            <summary>
            二进制混杂反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.TimeSpan@)">
            <summary>
            时间解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.TimeSpan}@)">
            <summary>
            时间解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeTimeSpan(System.TimeSpan@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns>是否 null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeTimeSpanString(System.TimeSpan@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Guid@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Nullable{System.Guid}@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.binaryMixStringLength">
            <summary>
            二进制混杂模式反序列化字符串长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(AutoCSer.SubString@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Object@)">
            <summary>
            对象解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Type@)">
            <summary>
            类型解析
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(AutoCSer.JsonNode@)">
            <summary>
            JSON节点解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonNode@)">
            <summary>
            JSON节点解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeStringNode(AutoCSer.JsonNode@)">
            <summary>
            解析字符串节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Boolean[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Boolean[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchEscapeEnd">
            <summary>
            查找转义字符串结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsFirstObject">
            <summary>
            判断是否存在第一个成员
            </summary>
            <returns>是否存在第一个成员</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsFirstArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchNameEnd">
            <summary>
            查找名称直到结束
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchColon">
            <summary>
            查找冒号
            </summary>
            <returns>是否找到</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsNextObject">
            <summary>
            判断是否存在下一个成员
            </summary>
            <returns>是否存在下一个成员</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsNextArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
            <summary>
            获取成员名称第一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.isNextArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchArray``1(``0[]@)">
            <summary>
            查找数组起始位置
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="array">目标数组</param>
            <returns>返回 0 表示未结束，返回 1 表示已结束，返回 -1 表示 null 或者错误</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchBinaryMixArraySize``1(``0[]@)">
            <summary>
            Get the array length
            获取数组长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns>返回 true 表示需要继续解析数组, array.Length 为 0 表示未知长度</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchArraySize``1(``0[]@)">
            <summary>
            Get the array length
            获取数组长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns>返回 true 表示需要继续解析数组</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsEnumNumberUnsigned">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsEnumNumberSigned">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.GetFirstName">
            <summary>
            获取成员名称第一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NextStringChar">
            <summary>
            读取下一个字符
            </summary>
            <returns>字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.GetNextName">
            <summary>
            获取成员名称下一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchQuote">
            <summary>
            查找字符串引号并返回第一个字符
            </summary>
            <returns>第一个字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchEnumQuote">
            <summary>
            查找枚举引号并返回第一个字符
            </summary>
            <returns>第一个字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NextEnumChar">
            <summary>
            获取下一个枚举字符
            </summary>
            <returns>下一个枚举字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchNextEnum">
            <summary>
            查找下一个枚举字符
            </summary>
            <returns>下一个枚举字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchStringEnd">
            <summary>
            查找字符串直到结束
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.CheckMatchEnum">
            <summary>
            检查强制匹配枚举值配置
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.CheckMatchEnumIgnore">
            <summary>
            检查强制匹配枚举值配置
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.CheckQuote">
            <summary>
            检查字符串引号
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Ignore">
            <summary>
            忽略对象
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ignoreString">
            <summary>
            忽略字符串
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ignoreNumber">
            <summary>
            忽略数字
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ignoreName">
            <summary>
            忽略成员名称
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SearchObject">
            <summary>
            查找对象起始位置
            </summary>
            <returns>是否查找到</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchDictionary">
            <summary>
            查找字典起始位置
            </summary>
            <returns>是否查找到</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.isDictionaryObjectEnd">
            <summary>
            对象是否结束
            </summary>
            <returns>对象是否结束</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsName(AutoCSer.Memory.Pointer@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.IsName(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NextNameIndex(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer@)">
            <summary>
            移动到下一个名称
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.JsonDeserializer.NameDelegate">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.NoConstructorIgnoreObject">
            <summary>
            找不到构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ignoreObject">
            <summary>
            忽略对象
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value"></param>
            <returns>是否 null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeHex32">
            <summary>
            解析16进制数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeUInt32(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserializeUInt">
            <summary>
            数字解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserializeInt">
            <summary>
            数字解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserializeUIntNull">
            <summary>
            数字解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserializeIntNull">
            <summary>
            数字解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeHex64">
            <summary>
            解析16进制数字
            </summary>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeUInt64(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeHex2">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeHex4">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.isNegativeInfinity">
            <summary>
            是否 -Infinity
            </summary>
            <returns>是否 -Infinity</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.isNaNPositiveInfinity">
            <summary>
            是否非数字 NaN / Infinity
            </summary>
            <returns>是否非数字NaN</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchNumber(System.Char*@)">
            <summary>
            查找数字结束位置
            </summary>
            <param name="numberEnd">数字结束位置</param>
            <returns>数字类型</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchNumberNull(System.Char*@)">
            <summary>
            查找数字结束位置
            </summary>
            <param name="numberEnd">数字结束位置</param>
            <returns>数字类型</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeInt32Next(System.UInt32@)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTime">
            <summary>
            时间片段值解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTimeTicks">
            <summary>
            时间时钟周期解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTimeMillisecond(System.DateTime@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTimeString(System.DateTime@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeDateTime(System.DateTime@)">
            <summary>
            时间值解析
            </summary>
            <param name="value"></param>
            <returns>是否 null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.GetQuoteStringBuffer">
            <summary>
            临时字符串解析（不处理转义）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserialize(AutoCSer.GuidCreator@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.searchEscape">
            <summary>
            查找字符串中的转义符
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeString">
            <summary>
            字符串解析
            </summary>
            <returns>字符串,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeEscapeSize">
            <summary>
            获取转义后的字符串长度
            </summary>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeEscapeUnsafe(System.Char*)">
            <summary>
            字符串转义解析
            </summary>
            <param name="write">当前写入位置</param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeEscape(System.Char*)">
            <summary>
            字符串解析
            </summary>
            <param name="start"></param>
            <returns>字符串,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeEscape">
            <summary>
            字符串转义解析
            </summary>
            <returns>写入结束位置</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.deserializeQuoteString(AutoCSer.SubString@,System.Int32,System.Char,System.Int32)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.DeserializeQuoteString(AutoCSer.SubString@,System.Int32,System.Char,System.Int32)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.DeserializeQuoteString(AutoCSer.SubString@,AutoCSer.Memory.CharStream,System.Int32,System.Char)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="charStream"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.CustomDeserialize``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.SetCustomError(System.String)">
            <summary>
            设置反序列化自定义错误状态
            </summary>
            <param name="customError">自定义错误</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(System.String,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">Configuration parameters</param>
            <returns>Target data
            目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(System.String,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">Target data</param>
            <param name="config">Configuration parameters</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.SubString,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">Configuration parameters</param>
            <returns>Target data
            目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.SubString,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">Target data</param>
            <param name="config">Configuration parameters</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.SubString@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">Configuration parameters</param>
            <returns>Target data
            目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.Deserialize``1(AutoCSer.SubString@,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">Target data</param>
            <param name="config">Configuration parameters</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.UnsafeDeserialize``1(System.Char*,System.Int32,``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">Json 字符串</param>
            <param name="length">Json 长度</param>
            <param name="value">Target data</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.UnsafeDeserializeBinaryMix``1(System.Char*,System.Int32,``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">Json 字符串</param>
            <param name="length">Json 长度</param>
            <param name="value">Target data</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(System.String,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">Configuration parameters</param>
            <returns>Target data
            目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(System.String,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">Target data</param>
            <param name="config">Configuration parameters</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">Configuration parameters</param>
            <returns>Target data
            目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">Target data</param>
            <param name="config">Configuration parameters</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">Configuration parameters</param>
            <returns>Target data
            目标数据</returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString@,``0@,AutoCSer.JsonDeserializeConfig)">
            <summary>
            JSON 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">Target data</param>
            <param name="config">Configuration parameters</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="T:AutoCSer.JsonDeserializer.DeserializeDelegate`1">
            <summary>
            解析委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.deserializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.GetDeserializeDelegate(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.JavaScriptLocalMinTime">
            <summary>
            JSON 转换时间差
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.JavaScriptLocalMinTimeTicks">
            <summary>
             JSON 转换时间差
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.EscapeCharSize">
            <summary>
            转义字符集合尺寸
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.escapeCharData">
            <summary>
            转义字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeNumberBit">
            <summary>
            JSON 解析数字
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeNameBit">
            <summary>
            JSON 解析键值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeNameStartBit">
            <summary>
            JSON 解析键值开始
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeSpaceBit">
            <summary>
            JSON 解析空格[ ,\t,\r,\n,160]
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeEscapeSearchBit">
            <summary>
            JSON 解析转义查找
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.EscapeBit">
            <summary>
            JavaScript 转义位[\0,\b,\t,\f,\r,\n,\\,"]
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeSpaceStartBit">
            <summary>
            JSON 解析空格开始[ ,\t,\r,\n,/,160]
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializer.DeserializeBits">
            <summary>
            JSON 解析字符状态位
            </summary>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.UInt64[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt64[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt64@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.String@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.UInt64}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.TryDeserializeEnumLong``1(``0@)">
            <summary>
            枚举数值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.EnumFlagsLong``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            枚举反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.TryDeserializeEnumUInt``1(``0@)">
            <summary>
            枚举数值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.EnumFlagsUInt``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            枚举反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.TryDeserializeEnumInt``1(``0@)">
            <summary>
            枚举数值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.EnumFlagsInt``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            枚举反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.TryDeserializeEnumUShort``1(``0@)">
            <summary>
            枚举数值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.EnumFlagsUShort``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            枚举反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.TryDeserializeEnumShort``1(``0@)">
            <summary>
            枚举数值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.EnumFlagsShort``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            枚举反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.TryDeserializeEnumByte``1(``0@)">
            <summary>
            枚举数值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.EnumFlagsByte``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            枚举反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.TryDeserializeEnumSByte``1(``0@)">
            <summary>
            枚举数值解析
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.EnumFlagsSByte``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            枚举反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Int64[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int64[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.UInt32[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt32[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Int32[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int32[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.UInt16[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt16[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Int16[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int16[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Byte[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Byte[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.SByte[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.SByte[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.DateTime[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.DateTime[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.TimeSpan[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.TimeSpan[]@)">
            <summary>
            Array deserialization
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Object@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Type@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int64@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt32@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int32@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt16@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int16@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Byte@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.SByte@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Boolean@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Single@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Double@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Decimal@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Guid@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Char@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.DateTime@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.TimeSpan@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,AutoCSer.SubString@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,AutoCSer.JsonNode@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.UInt128@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Int128@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Half@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Numerics.Complex@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Numerics.Complex@)">
            <summary>
            基础类型解析
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Numerics.Plane@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Numerics.Plane@)">
            <summary>
            基础类型解析
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Numerics.Quaternion@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Numerics.Quaternion@)">
            <summary>
            基础类型解析
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Numerics.Matrix3x2@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Numerics.Matrix3x2@)">
            <summary>
            基础类型解析
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Numerics.Matrix4x4@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Numerics.Matrix4x4@)">
            <summary>
            基础类型解析
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Numerics.Vector3@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Numerics.Vector3@)">
            <summary>
            基础类型解析
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Numerics.Vector4@)">
            <summary>
            基础类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.JsonDeserialize(System.Numerics.Vector4@)">
            <summary>
            基础类型解析
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Int64}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.UInt32}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Int32}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.UInt16}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Int16}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Byte}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.SByte}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Boolean}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Single}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Double}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Decimal}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Char}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.DateTime}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.TimeSpan}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonDeserializer.primitiveDeserialize(AutoCSer.JsonDeserializer,System.Nullable{System.Guid}@)">
            <summary>
            可空类型解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Json.EnumULongDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumULongDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumULongDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.Json.CustomSerializeGenericType">
            <summary>
            自定义 JSON 序列化泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Json.CustomSerializeGenericType.SerializeDelegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="P:AutoCSer.Json.CustomSerializeGenericType.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Json.CustomSerializeGenericType.create``1">
            <summary>
            创建自定义 JSON 序列化泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Json.CustomSerializeGenericType.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.CustomSerializeGenericType.Get(System.Type)">
            <summary>
            获取自定义 JSON 序列化泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.CustomSerializeGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Json.CustomSerializeGenericType`1.SerializeDelegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="P:AutoCSer.Json.CustomSerializeGenericType`1.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Json.DateTimeTypeEnum">
            <summary>
            时间序列化输出类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DateTimeTypeEnum.Default">
            <summary>
            yyyy-MM-ddTHH:mm:ss...
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DateTimeTypeEnum.ThirdParty">
            <summary>
            第三方格式 /Date(xxx)/
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DateTimeTypeEnum.JavaScript">
            <summary>
            JS格式 new Date(xxx)
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DateTimeTypeEnum.CustomFormat">
            <summary>
            自定义 ToString("xxx") 格式
            </summary>
        </member>
        <member name="T:AutoCSer.Json.DeserializeStateEnum">
            <summary>
            JSON 解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NullJson">
            <summary>
            JSON 字符串参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.CrashEnd">
            <summary>
            非正常意外结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.UnknownNote">
            <summary>
            未能识别的注释
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NoteNotRound">
            <summary>
            /**/ 注释缺少回合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotNull">
            <summary>
            null 值解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotBool">
            <summary>
            逻辑值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotNumber">
            <summary>
            非数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NumberOutOfRange">
            <summary>
            数字解析超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotHex">
            <summary>
            16 进制数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotDateTime">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotTimeSpan">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotChar">
            <summary>
            字符解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotGuid">
            <summary>
            Guid解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotString">
            <summary>
            字符串解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.StringEnter">
            <summary>
            字符串被换行截断
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.ErrorType">
            <summary>
            类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotArrayValue">
            <summary>
            数组数据解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.ArraySizeError">
            <summary>
            数组长度错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotEnumChar">
            <summary>
            非枚举字符
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NoFoundEnumValue">
            <summary>
            没有找到匹配的枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotFoundName">
            <summary>
            没有找到成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotFoundColon">
            <summary>
            没有找到冒号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotObject">
            <summary>
            对象解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.UnknownValue">
            <summary>
            忽略值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotSupport">
            <summary>
            不支持的类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.ConstructorNull">
            <summary>
            构造函数返回 null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.MemberMap">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotComplex">
            <summary>
            System.Numerics.Complex 混杂解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotVector2">
            <summary>
            System.Numerics.Vector2 混杂解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotVector3">
            <summary>
            System.Numerics.Vector3 混杂解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotVector4">
            <summary>
            System.Numerics.Vector4 混杂解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotPlane">
            <summary>
            System.Numerics.Plane 混杂解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotQuaternion">
            <summary>
            System.Numerics.Quaternion 混杂解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotMatrix3x2">
            <summary>
            System.Numerics.Matrix3x2 混杂解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.NotMatrix4x4">
            <summary>
            System.Numerics.Matrix4x4 混杂解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeStateEnum.CustomError">
            <summary>
            自定义反序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ICustomSerialize">
            <summary>
            Only used for quickly determining whether it is possible to implement the interface ICustomSerialize{T}
            仅用于快速判断是否可能实现接口 ICustomSerialize{T}
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ICustomSerialize`1">
            <summary>
            Custom serialization
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Json.ICustomSerialize`1.Serialize(AutoCSer.JsonSerializer)">
            <summary>
            Serialization
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Json.ICustomSerialize`1.Deserialize(AutoCSer.JsonDeserializer)">
            <summary>
            Deserialization
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.Json.NumberTypeEnum">
            <summary>
            数字类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.NaN">
            <summary>
            NaN
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.Null">
            <summary>
            null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberTypeEnum.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:AutoCSer.Json.BinaryMixTypeEnum">
            <summary>
            二进制混杂类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Byte">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.UShort">
            <summary>
            ushort
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.UInt">
            <summary>
            uint
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.ULong">
            <summary>
            ulong
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Float">
            <summary>
            float
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Double">
            <summary>
            double
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Decimal">
            <summary>
            decimal
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.TimeSpan">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.None">
            <summary>
            无意义数据，用于填充对齐数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.StringByte">
            <summary>
            长度用 1 Byte 表示的字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.StringByte3">
            <summary>
            长度用 3 Byte 表示的字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.String">
            <summary>
            长度用 4 Byte 表示的字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.UInt128">
            <summary>
            Int128
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.ArrayByte">
            <summary>
            长度用 1 Byte 表示的数组
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.ArrayByte3">
            <summary>
            长度用 3 Byte 表示的数组
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Array">
            <summary>
            长度用 4 Byte 表示的数组
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.ArrayFalse">
            <summary>
            bool 数组 false
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.ArrayTrue">
            <summary>
            bool 数组 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.False">
            <summary>
            false
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.True">
            <summary>
            true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Half">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Complex">
            <summary>
            复数 System.Numerics.Complex
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Vector2">
            <summary>
            System.Numerics.Vector2
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Vector3">
            <summary>
            System.Numerics.Vector3
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Vector4">
            <summary>
            System.Numerics.Vector4
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Plane">
            <summary>
            System.Numerics.Plane
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Quaternion">
            <summary>
            System.Numerics.Quaternion
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Matrix3x2">
            <summary>
            System.Numerics.Matrix3x2
            </summary>
        </member>
        <member name="F:AutoCSer.Json.BinaryMixTypeEnum.Matrix4x4">
            <summary>
            System.Numerics.Matrix4x4
            </summary>
        </member>
        <member name="T:AutoCSer.Json.DeserializeDynamicMethod">
            <summary>
            反序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.pointerRefType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.returnLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.index">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.isMemberMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.#ctor(AutoCSer.Metadata.GenericType,System.Boolean)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
            <param name="isMemberMap"></param>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.isNameMethod">
            <summary>
            是否匹配默认顺序名称
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.isName">
            <summary>
            是否匹配默认顺序名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeDynamicMethod.nextNameIndexMethod">
            <summary>
            移动到下一个名称
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.nextIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.CreateDynamicMethod(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeDynamicMethod.CreateDynamicMethod(System.Type,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <param name="propertyMethod"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="T:AutoCSer.Json.DeserializeInt">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeInt.Number">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeInt.Sign">
            <summary>
            正负符号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeInt.IsNull">
            <summary>
            是否 null
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.#ctor(System.UInt32)">
            <summary>
            Integer deserialization
            整数反序列化
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetByteNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetSByte(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetSByteNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetUShortNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetShort(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetShortNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetUIntNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetInt(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.DeserializeInt.GetIntNull(AutoCSer.Json.DeserializeStateEnum@)">
            <summary>
            获取数字
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.DeserializeResult">
            <summary>
            JSON 反序列化状态结果
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.Index">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.Json">
            <summary>
            JSON 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.DeserializeResult.CustomError">
            <summary>
            自定义错误
            </summary>
        </member>
        <member name="M:AutoCSer.Json.DeserializeResult.#ctor(AutoCSer.Metadata.MemberMap)">
            <summary>
            JSON 反序列化状态结果
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeResult.#ctor(AutoCSer.Json.DeserializeStateEnum,System.Int32,System.String,System.String)">
            <summary>
            JSON 反序列化状态结果
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="json"></param>
            <param name="customError"></param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeResult.#ctor(AutoCSer.Json.DeserializeStateEnum,AutoCSer.SubString@,System.Int32,System.String)">
            <summary>
            JSON 反序列化状态结果
            </summary>
            <param name="state"></param>
            <param name="json"></param>
            <param name="index"></param>
            <param name="customError"></param>
        </member>
        <member name="M:AutoCSer.Json.DeserializeResult.op_Implicit(AutoCSer.Json.DeserializeResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.EnumDeserialize`1">
            <summary>
            枚举值解析
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Json.EnumDeserialize`1.enumSearcher">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumDeserialize`1.deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumDeserialize`1.getIndex(AutoCSer.JsonDeserializer,`0@,System.Int32@,System.Int32@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
            <param name="index">第一个枚举索引</param>
            <param name="nextIndex">第二个枚举索引</param>
        </member>
        <member name="T:AutoCSer.Json.MemberNameSearcher">
            <summary>
            成员名称搜索数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.type">
            <summary>
            Type name
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.Names">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.Searcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.MemberNameSearcher.#ctor">
            <summary>
            空成员名称搜索数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.MemberNameSearcher.#ctor(System.Type,System.String[])">
            <summary>
            成员名称搜索数据
            </summary>
            <param name="type"></param>
            <param name="names"></param>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.Null">
            <summary>
            空成员名称搜索数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.cache">
            <summary>
            成员名称查找数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Json.MemberNameSearcher.lastSearcher">
            <summary>
            最后一次访问的搜索数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.MemberNameSearcher.Get(System.Type,System.String[])">
            <summary>
            获取成员名称查找数据
            </summary>
            <param name="type"></param>
            <param name="names"></param>
            <returns>成员名称查找数据</returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberDynamicMethod">
            <summary>
            序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.getCharStreamMethod">
            <summary>
            获取字符串输出缓冲区属性方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.isFirstMember">
            <summary>
            是否第一个字段
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.push(System.String)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,System.Reflection.MethodInfo)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.checkNull(System.Type,System.Reflection.MethodInfo)">
            <summary>
            null 值检查
            </summary>
            <param name="memberType"></param>
            <param name="serializeMethod"></param>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.writeJsonNullMethod">
            <summary>
            输出 null 值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.WriteName(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.String,System.Boolean)">
            <summary>
            写入名称
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="name"></param>
            <param name="isNext"></param>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.#ctor(AutoCSer.Metadata.GenericType)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.push(System.String,System.Int32,System.Reflection.Emit.Label)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
            <param name="memberIndex"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,System.Reflection.MethodInfo)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.checkNull(System.Type,System.Reflection.Emit.Label,System.Reflection.MethodInfo)">
            <summary>
            null 值检查
            </summary>
            <param name="memberType"></param>
            <param name="endLabel"></param>
            <param name="serializeMethod"></param>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.writeJsonNullMethod">
            <summary>
            输出 null 值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Json.Common">
            <summary>
            公共调用
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Common.GetTypeSerializeDelegate(System.Type,AutoCSer.Metadata.GenericType@,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.GetTypeSerializeDelegate(AutoCSer.Metadata.GenericType,AutoCSer.TextSerialize.DelegateReference@,AutoCSer.JsonSerializeAttribute@,System.Type@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <param name="attribute"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Json.Common.memberSerializeDelegates">
            <summary>
            成员序列化委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Common.memberSerializeDelegateLock">
            <summary>
            成员序列化委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Common.GetMemberSerializeDelegate(System.Type)">
            <summary>
            获取成员序列化委托
            </summary>
            <param name="type">成员类型</param>
        </member>
        <member name="M:AutoCSer.Json.Common.getMemberSerializeDelegate(System.Type)">
            <summary>
            获取成员序列化委托
            </summary>
            <param name="type">成员类型</param>
        </member>
        <member name="F:AutoCSer.Json.Common.memberDeserializeDelegates">
            <summary>
            成员反序列化委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Common.memberDeserializeDelegateLock">
            <summary>
            成员反序列化委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Common.GetMemberDeserializeDelegate(System.Type)">
            <summary>
            获取成员反序列化委托
            </summary>
            <param name="type">成员类型</param>
            <returns>成员反序列化委托</returns>
        </member>
        <member name="M:AutoCSer.Json.Common.getMemberDeserializeDelegate(System.Type)">
            <summary>
            获取成员反序列化委托
            </summary>
            <param name="type">成员类型</param>
            <returns>成员反序列化委托</returns>
        </member>
        <member name="M:AutoCSer.Json.Common.getTypeDeserializeDelegate(System.Type,AutoCSer.Metadata.GenericType@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.GetTypeDeserializeDelegate(AutoCSer.Metadata.GenericType,AutoCSer.JsonSerializeAttribute@,System.Type@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="attribute"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.GetBaseAttribute(System.Type,AutoCSer.JsonSerializeAttribute,AutoCSer.JsonSerializeAttribute@)">
            <summary>
            获取 JSON 序列化类型配置
            </summary>
            <param name="type"></param>
            <param name="defaultAttribute"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Common.CheckCompleted(System.Type,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            计算状态完成检查
            </summary>
            <param name="type"></param>
            <param name="reference"></param>
        </member>
        <member name="M:AutoCSer.Json.Common.Check(AutoCSer.TextSerialize.LoopTypeArray@,System.Type,System.Collections.Generic.HashSet{AutoCSer.HashObject{System.Type}})">
            <summary>
            循环引用检查
            </summary>
            <param name="array"></param>
            <param name="type"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.CustomConfig">
            <summary>
            自定义全局配置
            </summary>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.GetCustomSerializeDelegate(System.Type)">
            <summary>
            根据类型获取 JSON 自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.JsonSerializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.GeteCustomDeserializeDelegate(System.Type)">
            <summary>
            根据类型获取 JSON 自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.JsonDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Write(AutoCSer.JsonSerializer,System.Int128)">
            <summary>
            写入整数
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Write(AutoCSer.JsonSerializer,System.UInt128)">
            <summary>
            写入整数
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Write(AutoCSer.JsonSerializer,System.Half)">
            <summary>
            写入浮点数
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Write(AutoCSer.JsonSerializer,System.DateTime)">
            <summary>
            写入时间值
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Write(AutoCSer.JsonSerializer,System.TimeSpan)">
            <summary>
            写入时间值
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.NotSupport``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Custom serialization不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.Int128@,System.Boolean)">
            <summary>
            自定义反序列化整数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <param name="isObject"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.UInt128@,System.Boolean)">
            <summary>
            自定义反序列化整数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <param name="isObject"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.Half@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.Single@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.Double@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,AutoCSer.Memory.Pointer,System.Decimal@)">
            <summary>
            自定义反序列化小数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,System.DateTime@)">
            <summary>
            自定义反序列化时间值
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.Deserialize(AutoCSer.JsonDeserializer,System.TimeSpan@)">
            <summary>
            自定义反序列化时间值
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.CustomConfig.NotSupport``1(AutoCSer.JsonDeserializer,``0@)">
            <summary>
            自定义反序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">JSON 反序列化</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.StateSearcher">
            <summary>
            名称状态查找器
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.#ctor(AutoCSer.Memory.Pointer)">
            <summary>
            名称查找器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchName(AutoCSer.JsonDeserializer,System.Boolean@)">
            <summary>
            获取名称索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="isQuote">名称是否带引号</param>
            <returns>名称索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchString(AutoCSer.JsonDeserializer)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.searchString(AutoCSer.JsonDeserializer,System.Char)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">第一个字符</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchFlagEnum(AutoCSer.JsonDeserializer)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.flagEnum(AutoCSer.JsonDeserializer,System.Char)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">当前字符</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.NextFlagEnum(AutoCSer.JsonDeserializer)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="T:AutoCSer.Json.ThreadStaticDeserializer">
            <summary>
            反序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticDeserializer.Deserializer">
            <summary>
            JSON 反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticDeserializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticDeserializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ThreadStaticDeserializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.ThreadStaticDeserializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.ThreadStaticSerializer">
            <summary>
            序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticSerializer.Serializer">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticSerializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ThreadStaticSerializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ThreadStaticSerializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.ThreadStaticSerializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.TypeDeserializer`1">
            <summary>
            类型反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="T:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter">
            <summary>
            成员解析器过滤
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.Deserialize">
            <summary>
            成员解析器
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.memberMapIndex">
            <summary>
            成员位图索引
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.Set(System.Reflection.MethodInfo,AutoCSer.Metadata.MemberIndexInfo)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="method"></param>
            <param name="member"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.Call(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.TryDeserializeFilter.Call(AutoCSer.JsonDeserializer,AutoCSer.Metadata.MemberMap{`0},`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="memberMap">成员位图</param>
            <param name="value">Target data</param>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberDeserializers">
            <summary>
            成员解析器集合
            </summary>
        </member>
        <member name="T:AutoCSer.Json.TypeDeserializer`1.DeserializeMember">
            <summary>
            默认名称解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <param name="names"></param>
        </member>
        <member name="T:AutoCSer.Json.TypeDeserializer`1.DeserializeMemberMap">
            <summary>
            默认名称解析
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <param name="names"></param>
            <param name="memberMap"></param>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.DefaultDeserializer">
            <summary>
            解析委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberDeserializer">
            <summary>
            默认名称解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberMapDeserializer">
            <summary>
            默认名称解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberSearcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeDeserializer`1.memberNames">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.deserializeValue(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.deserializeClass(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.DeserializeMembers(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            数据成员解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.nullMember(AutoCSer.JsonDeserializer,`0@,AutoCSer.Memory.Pointer@)">
            <summary>
            JSON 反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <param name="names"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.nullMemberMap(AutoCSer.JsonDeserializer,`0@,AutoCSer.Memory.Pointer@,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            JSON 反序列化
            </summary>
            <param name="jsonDeserializer"></param>
            <param name="value"></param>
            <param name="names"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.noMemberValue(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            无成员对象解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.TypeDeserializer`1.noMember(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            无成员对象解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.Json.TypeSerializer`1">
            <summary>
            Type serialization
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.DefaultSerializer">
            <summary>
            转换委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.memberSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.SerializeDelegateReference">
            <summary>
            JSON 序列化委托循环引用信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.SerializeNull(AutoCSer.JsonSerializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Serialize(AutoCSer.JsonSerializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.SerializeNull(AutoCSer.JsonSerializer,`0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Serialize(AutoCSer.JsonSerializer,`0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.MemberSerialize(AutoCSer.JsonSerializer,`0)">
            <summary>
            对象成员序列化
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.SerializeCommandServer(AutoCSer.JsonSerializer,`0@)">
            <summary>
            命令服务对象成员序列化
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Collection(AutoCSer.JsonSerializer,System.Collections.Generic.ICollection{`0})">
            <summary>
            集合序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StringDictionary(AutoCSer.JsonSerializer,System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            字典序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StringDictionaryToArray(AutoCSer.JsonSerializer,System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            字典序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Dictionary``1(AutoCSer.JsonSerializer,System.Collections.Generic.IDictionary{``0,`0})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.DictionaryToArray``1(AutoCSer.JsonSerializer,System.Collections.Generic.IDictionary{``0,`0})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.nullMember(AutoCSer.JsonSerializer,`0)">
            <summary>
            JSON 序列化
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.nullMemberMap(AutoCSer.Metadata.MemberMap{`0},AutoCSer.JsonSerializer,`0,AutoCSer.Memory.CharStream)">
            <summary>
            JSON 序列化
            </summary>
            <param name="memberMap"></param>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.noMemberValue(AutoCSer.JsonSerializer,`0)">
            <summary>
            输出无成员对象
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.noMember(AutoCSer.JsonSerializer,`0)">
            <summary>
            输出无成员对象
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Json.EnumLongDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumLongDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumLongDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.Json.EnumUIntDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumUIntDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumUIntDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.Json.EnumIntDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumIntDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumIntDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.Json.EnumUShortDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumUShortDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumUShortDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.Json.EnumShortDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumShortDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumShortDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.Json.EnumByteDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumByteDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumByteDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.Json.EnumSByteDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.EnumSByteDeserialize`1.Deserialize(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="M:AutoCSer.Json.EnumSByteDeserialize`1.DeserializeFlags(AutoCSer.JsonDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="jsonDeserializer">JSON 反序列化</param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.JsonSerializer">
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Numerics.Vector2)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Numerics.Vector2)">
            <summary>
            基础类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.UInt64[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt64[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt64)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumULong``1(``0)">
            <summary>
            Enumeration value serialization (for AOT code generation, not allowed for developers to call)
            枚举值序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumULong``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.UInt64})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.UInt64})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="F:AutoCSer.JsonSerializer.NullString">
            <summary>
            字符串 "null"
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.MaxInteger">
            <summary>
            最大整数值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.CustomConfig">
            <summary>
            JSON 自定义全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.ConfigurationAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.AllMemberAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.GetCharStream(AutoCSer.JsonSerializer)">
            <summary>
            获取 JSON 字符串输出缓冲区
            </summary>
            <param name="jsonSerializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.#ctor(System.Boolean)">
            <summary>
            JSON 序列化
            </summary>
            <param name="isThreadStatic">是否单线程模式</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serialize``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serialize``1(``0@,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="jsonStream">Json输出缓冲区</param>
            <param name="config">Configuration parameters</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serializeThreadStatic``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换JSON字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serialize``1(``0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeNext``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            JSON 序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="config"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.freeThreadStatic">
            <summary>
            Release resources（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Free">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.FreeBinaryMix">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SetBinaryMix">
            <summary>
            设置二进制混杂模式
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0@,AutoCSer.Memory.UnmanagedStream,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="stream">二进制缓冲区</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serializeNotNull``1(``0@,AutoCSer.Memory.UnmanagedStream)">
            <summary>
            命令服务序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeBufferNotNull``1(``0@,AutoCSer.Memory.UnmanagedStream)">
            <summary>
            命令服务序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="stream"></param>
            <returns>返回不包括补白的字节数</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binarySerializeString(AutoCSer.Memory.UnmanagedStream,System.Int32,System.Int32)">
            <summary>
            字符串二进制序列化
            </summary>
            <param name="stream"></param>
            <param name="index"></param>
            <param name="size"></param>
            <returns>返回不包括补白的字节数</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.WriteLoopReference">
            <summary>
            循环引用对象处理
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.WriteJsonNull(AutoCSer.JsonSerializer)">
            <summary>
            输出 null 值
            </summary>
            <param name="jsonSerializer"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerializeType``1(``0)">
            <summary>
            转换JSON字符串
            </summary>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            转换JSON字符串
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.NotSupport``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Custom serialization不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Base``2(AutoCSer.JsonSerializer,``0)">
            <summary>
            基类序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ICustom``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Custom serialization
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Object``1(``0)">
            <summary>
            object 对象转换JSON字符串
            </summary>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Object``1(AutoCSer.JsonSerializer,System.Object)">
            <summary>
            object 对象转换JSON字符串
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">Data object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize``1(System.Nullable{``0})">
            <summary>
            可空类型序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Nullable``1(AutoCSer.JsonSerializer,System.Nullable{``0})">
            <summary>
            可空类型序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binaryMixArrayLength(System.Int32)">
            <summary>
            二进制混杂序列化数组长度
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize``1(``0[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Array``1(AutoCSer.JsonSerializer,``0[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize``1(AutoCSer.LeftArray{``0})">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize``1(System.Nullable{``0}[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.NullableArray``1(AutoCSer.JsonSerializer,System.Nullable{``0}[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.LeftArray``1(AutoCSer.JsonSerializer,AutoCSer.LeftArray{``0})">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ListArray``1(AutoCSer.JsonSerializer,AutoCSer.ListArray{``0})">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="array">Array object</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            集合序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Collection``2(AutoCSer.JsonSerializer,``0)">
            <summary>
            集合序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.StringDictionary``1(AutoCSer.JsonSerializer,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.StringIDictionary``2(AutoCSer.JsonSerializer,``0)">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Dictionary``2(AutoCSer.JsonSerializer,System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            字典序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.IDictionary``3(AutoCSer.JsonSerializer,``0)">
            <summary>
            字典序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize``2(System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            键值对序列化
            </summary>
            <param name="keyValue"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.KeyValuePair``2(AutoCSer.JsonSerializer,System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            键值对序列化
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="keyValue"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Boolean)">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binaryMix(System.Byte)">
            <summary>
            二进制混杂序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binaryMix(System.UInt16)">
            <summary>
            二进制混杂序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binaryMix(System.UInt32)">
            <summary>
            二进制混杂序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binaryMix(System.UInt64)">
            <summary>
            二进制混杂序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Int128)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.UInt128)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Half)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Single)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Double)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Decimal)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binaryMix(System.DateTime)">
            <summary>
            二进制混杂序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeDateTime(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binaryMix(System.TimeSpan)">
            <summary>
            二进制混杂序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.TimeSpan)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeTimeSpan(System.TimeSpan)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Guid)">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Guid)">
            <summary>
            数字转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerializeNull(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.binaryMixStringLength(System.Int32)">
            <summary>
            二进制混杂序列化字符串长度
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerializeNotEmpty(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value">长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(AutoCSer.SubString)">
            <summary>
            字符串转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerializeObject(System.Object)">
            <summary>
            object 转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Object)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Type)">
            <summary>
            类型转换
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(AutoCSer.JsonNode)">
            <summary>
            JSON 节点转换
            </summary>
            <param name="value">JSON节点</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,AutoCSer.JsonNode)">
            <summary>
            JSON 节点转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.serialize(AutoCSer.JsonNode@)">
            <summary>
            JSON 节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Boolean[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Boolean[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.DateTime[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.DateTime[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.TimeSpan[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.TimeSpan[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.CustomSerialize``1(``0)">
            <summary>
            Custom serialization调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeObject(System.Object,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeObject(System.Object,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <param name="value">Data object</param>
            <param name="warning">警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(System.Object,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="objectValue">数据对象</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串 + 警告提示状态</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.SerializeObject(System.Object,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <param name="value">Data object</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">Configuration parameters</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(System.Object,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="objectValue">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">Configuration parameters</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="warning">警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0@,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="warning">警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">Configuration parameters</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.Serialize``1(``0@,AutoCSer.Memory.CharStream,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">Configuration parameters</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ThreadStaticSerialize``1(``0,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ThreadStaticSerialize``1(``0@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ThreadStaticSerialize``1(``0,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="warning">警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonSerializer.ThreadStaticSerialize``1(``0@,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.JsonSerializeConfig)">
            <summary>
            对象转换 JSON 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">Target data type
            目标数据类型</typeparam>
            <param name="value">Data object</param>
            <param name="warning">警告提示状态</param>
            <param name="config">Configuration parameters</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="F:AutoCSer.JsonSerializer.SerializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Int64[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int64[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.UInt32[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt32[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Int32[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int32[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.UInt16[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt16[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Int16[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int16[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Byte[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Byte[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.SByte[])">
            <summary>
            数组转换 
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.SByte[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int64)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt32)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int32)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt16)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int16)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Byte)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.SByte)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Boolean)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Single)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Double)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Decimal)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Char)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.DateTime)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.TimeSpan)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.String)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,AutoCSer.SubString)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Type)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.UInt128)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Int128)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Half)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumLong``1(``0)">
            <summary>
            Enumeration value serialization (for AOT code generation, not allowed for developers to call)
            枚举值序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumLong``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumUInt``1(``0)">
            <summary>
            Enumeration value serialization (for AOT code generation, not allowed for developers to call)
            枚举值序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumUInt``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumInt``1(``0)">
            <summary>
            Enumeration value serialization (for AOT code generation, not allowed for developers to call)
            枚举值序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumInt``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumUShort``1(``0)">
            <summary>
            Enumeration value serialization (for AOT code generation, not allowed for developers to call)
            枚举值序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumUShort``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumShort``1(``0)">
            <summary>
            Enumeration value serialization (for AOT code generation, not allowed for developers to call)
            枚举值序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumShort``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumByte``1(``0)">
            <summary>
            Enumeration value serialization (for AOT code generation, not allowed for developers to call)
            枚举值序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumByte``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumSByte``1(``0)">
            <summary>
            Enumeration value serialization (for AOT code generation, not allowed for developers to call)
            枚举值序列化（用于 AOT 代码生成，不允许开发者调用）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.EnumSByte``1(AutoCSer.JsonSerializer,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Numerics.Complex)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Numerics.Complex)">
            <summary>
            基础类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Numerics.Plane)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Numerics.Plane)">
            <summary>
            基础类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Numerics.Quaternion)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Numerics.Quaternion)">
            <summary>
            基础类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Numerics.Matrix3x2)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Numerics.Matrix3x2)">
            <summary>
            基础类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Numerics.Matrix4x4)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Numerics.Matrix4x4)">
            <summary>
            基础类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Numerics.Vector3)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Numerics.Vector3)">
            <summary>
            基础类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Numerics.Vector4)">
            <summary>
            基础类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Numerics.Vector4)">
            <summary>
            基础类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Int64})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Int64})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.UInt32})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.UInt32})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Int32})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Int32})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.UInt16})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.UInt16})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Int16})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Int16})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Byte})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Byte})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.SByte})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.SByte})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Boolean})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Boolean})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Single})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Single})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Double})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Double})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Decimal})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Decimal})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Char})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Char})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.DateTime})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.DateTime})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.TimeSpan})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.TimeSpan})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.primitiveSerialize(AutoCSer.JsonSerializer,System.Nullable{System.Guid})">
            <summary>
            可空类型转换
            </summary>
            <param name="jsonSerializer"></param>
            <param name="value">可空值</param>
        </member>
        <member name="M:AutoCSer.JsonSerializer.JsonSerialize(System.Nullable{System.Guid})">
            <summary>
            可空类型转换
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="T:AutoCSer.JsonDeserializeConfig">
            <summary>
            JSON 反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.JsonDeserializeConfig.IsEndSpace">
            <summary>
            对象解析结束后是否检测最后的空格符，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.JsonNode">
            <summary>
            JSON 节点
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNode.Int64">
            <summary>
            64位整数值
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.String">
            <summary>
            JSON 节点隐式转换为字符串
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.JsonNode.checkQuoteString">
            <summary>
            检测未解析字符串
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.toString(AutoCSer.Memory.CharStream,AutoCSer.JsonDeserializer@)">
            <summary>
            输出字符串
            </summary>
            <param name="charStream"></param>
            <param name="jsonDeserializer"></param>
        </member>
        <member name="P:AutoCSer.JsonNode.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.Boolean">
            <summary>
            JSON 节点隐式转换为逻辑值
            </summary>
            <param name="value">JSON 节点</param>
            <returns>逻辑值</returns>
        </member>
        <member name="P:AutoCSer.JsonNode.Number">
            <summary>
            数值
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.Double">
            <summary>
            JSON 节点隐式转换为数值
            </summary>
            <param name="value">JSON 节点</param>
            <returns>数值</returns>
        </member>
        <member name="P:AutoCSer.JsonNode.DateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.DateTime">
            <summary>
            JSON 节点隐式转换为时间
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="P:AutoCSer.JsonNode.TimeSpan">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.op_Implicit(AutoCSer.JsonNode)~System.TimeSpan">
            <summary>
            JSON 节点隐式转换为时间
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="F:AutoCSer.JsonNode.DictionaryArray">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Values">
            <summary>
            字典数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNode.ListArray">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.LeftArray">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Array">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNode.SubString">
            <summary>
            字符串
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.IsNull">
            <summary>
            是否空节点
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Count">
            <summary>
            字典 / 列表节点数量
            </summary>
        </member>
        <member name="P:AutoCSer.JsonNode.Item(System.Int32)">
            <summary>
            获取列表节点数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.JsonNode.Item(System.String)">
            <summary>
            获取字典数据
            </summary>
            <param name="key">keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.JsonNode.SetNumberString(System.Char)">
            <summary>
            设置数字字符串
            </summary>
            <param name="quote"></param>
        </member>
        <member name="M:AutoCSer.JsonNode.SetQuoteString(System.Int32,System.Char,System.Boolean)">
            <summary>
            未解析字符串
            </summary>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
        </member>
        <member name="M:AutoCSer.JsonNode.SetList(AutoCSer.LeftArray{AutoCSer.JsonNode}@)">
            <summary>
            设置列表
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:AutoCSer.JsonNode.SetList">
            <summary>
            设置列表
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.SetDictionary(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.JsonNode,AutoCSer.JsonNode}}@)">
            <summary>
            设置字典
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.JsonNode.SetDictionary">
            <summary>
            设置字典
            </summary>
        </member>
        <member name="M:AutoCSer.JsonNode.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.JsonNodeTypeEnum">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.QuoteString">
            <summary>
            未解析字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.ErrorQuoteString">
            <summary>
            解析错误的字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.NumberString">
            <summary>
            数字字符串
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.NaN">
            <summary>
            非数值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.DateTimeTick">
            <summary>
            时间周期值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.Array">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:AutoCSer.JsonNodeTypeEnum.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberGroup">
            <summary>
            成员分组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberGroup.PublicFields">
            <summary>
            公有动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberGroup.NonPublicFields">
            <summary>
            非公有动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberGroup.PublicProperties">
            <summary>
            公有动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberGroup.NonPublicProperties">
            <summary>
            非公有动态属性
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberGroup.#ctor">
            <summary>
            成员分组
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapIndex`1">
            <summary>
            成员位图索引
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapIndex`1.MemberIndex">
            <summary>
            成员位图索引，负数为无效索引
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapIndex`1.#ctor(System.String)">
            <summary>
            成员位图索引
            </summary>
            <param name="memberName">成员名称</param>
        </member>
        <member name="T:AutoCSer.Metadata.DefaultConstructorTypeEnum">
            <summary>
            默认构造函数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.None">
            <summary>
            没有构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.Constructor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.Custom">
            <summary>
            自定义构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.Default">
            <summary>
            值类型返回默认值
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructorTypeEnum.UninitializedObjectClone">
            <summary>
            未初始化对象浅克隆，仅用户数据反序列化
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.EquatableGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType.ServerCallTaskQueueSetType">
            <summary>
            服务端异步调用队列集合类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType.CommandListenerGetServerCallTaskQueueSetDelegate">
            <summary>
            获取服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EquatableGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.EquatableGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EquatableGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.EquatableGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType`1.ServerCallTaskQueueSetType">
            <summary>
            服务端异步调用队列集合类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EquatableGenericType`1.CommandListenerGetServerCallTaskQueueSetDelegate">
            <summary>
            获取服务端异步调用队列
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.UnderlyingTypeEnum">
            <summary>
            枚举类型映射基本类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.Int">
            <summary>
            int
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.UInt">
            <summary>
            uint
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.Byte">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.ULong">
            <summary>
            ulong
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.UShort">
            <summary>
            ushort
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.Long">
            <summary>
            long
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.Short">
            <summary>
            short
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.UnderlyingTypeEnum.SByte">
            <summary>
            sbyte
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DictionaryGenericType2">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2.JsonSerializeDictionaryDelegate">
            <summary>
            JSON 字典序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2.JsonDeserializeDictionaryDelegate">
            <summary>
            JSON 字典反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType2.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.DictionaryGenericType2.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType2.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType2.Get(System.Type[])">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.DictionaryGenericType2`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2`2.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2`2.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2`2.JsonSerializeDictionaryDelegate">
            <summary>
            JSON 字典序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType2`2.JsonDeserializeDictionaryDelegate">
            <summary>
            JSON 字典反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFiltersEnum">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Unknown">
            <summary>
            未知成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicInstanceField">
            <summary>
            公共动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicInstanceField">
            <summary>
            非公共动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicInstanceProperty">
            <summary>
            公共动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicInstanceProperty">
            <summary>
            非公共动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicStaticField">
            <summary>
            公共静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicStaticField">
            <summary>
            非公共静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicStaticProperty">
            <summary>
            公共静态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicStaticProperty">
            <summary>
            非公共静态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicInstance">
            <summary>
            公共动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicInstance">
            <summary>
            非公共动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.PublicStatic">
            <summary>
            公共静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublicStatic">
            <summary>
            非公共静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.InstanceField">
            <summary>
            动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.InstanceProperty">
            <summary>
            动态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.StaticField">
            <summary>
            静态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.StaticProperty">
            <summary>
            静态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Public">
            <summary>
            公共成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.NonPublic">
            <summary>
            非公共成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Instance">
            <summary>
            动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Static">
            <summary>
            静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFiltersEnum.Property">
            <summary>
            属性
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapData`1">
            <summary>
            成员位图
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.map64">
            <summary>
            64 位成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.map">
            <summary>
            超过 64 位的成员位图，null 表示默认全部成员有效
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMapData`1.IsDefault">
            <summary>
            是否默认全部成员有效
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMapData`1.IsAnyMember">
            <summary>
            是否存在成员（未初始化表示不存在成员）
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.#ctor(System.UInt64,System.UInt64[])">
            <summary>
            成员位图
            </summary>
            <param name="map64"></param>
            <param name="map"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Equals(AutoCSer.Metadata.MemberMapData{`0})">
            <summary>
            成员位图比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Equals(System.Object)">
            <summary>
            成员位图比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.GetHashCode">
            <summary>
            Calculate the hash value
            计算哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.GetHashCode64">
            <summary>
            Calculate the hash value
            计算哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.setMap(System.UInt64)">
            <summary>
            设置成员数组值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Empty">
            <summary>
            清空所有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Full">
            <summary>
            添加所有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.IsMember(System.Int32)">
            <summary>
            判断成员索引是否有效
            </summary>
            <param name="memberIndex">成员索引</param>
            <returns>成员索引是否有效</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.SetMember(System.Int32)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.SetMember(System.String)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberName">成员名称</param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.ClearMember(System.Int32)">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.ClearMember(System.String)">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Copy">
            <summary>
            成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.And(AutoCSer.Metadata.MemberMapData{`0})">
            <summary>
            成员交集运算
            </summary>
            <param name="other">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Serialize(AutoCSer.Memory.UnmanagedStream)">
            <summary>
            二进制序列化
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            二进制反序列化
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapData`1.GetMemberIndex(System.String)">
            <summary>
            获取成员位图索引
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.nameIndexSearcher">
            <summary>
            名称索引查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.MemberCount">
            <summary>
            成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.fieldCount">
            <summary>
            字段成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.memberMapSize">
            <summary>
            成员位图字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapData`1.memberMapArraySize">
            <summary>
            成员位图数组大小
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap">
            <summary>
            Member bitmap
            成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Binary deserialization
            二进制反序列化
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.GetMemberName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Get the member name
            获取成员名称
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap`1">
            <summary>
            Member bitmap
            成员位图
            </summary>
            <typeparam name="T">Data type
            数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap`1.MemberMapData">
            <summary>
            Member bitmap data
            成员位图数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap`1.IsDefault">
            <summary>
            Is all members are valid by default
            是否默认全部成员有效
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor">
            <summary>
            Member bitmap
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor(AutoCSer.Metadata.MemberMapData{`0})">
            <summary>
            Member bitmap
            </summary>
            <param name="memberMap">Member bitmap</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor(AutoCSer.Metadata.MemberMapData{`0}@)">
            <summary>
            Member bitmap
            </summary>
            <param name="memberMap">Member bitmap</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            Copy the member bitmap
            复制成员位图
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.GetMemberIndex(System.String)">
            <summary>
            Get member bitmap index
            获取成员位图索引
            </summary>
            <param name="memberName">Member name</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.GetMemberIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get member bitmap index
            获取成员位图索引
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.ClearMember(AutoCSer.Metadata.MemberMapIndex{`0})">
            <summary>
            Clear the member index and ignore the default members
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">Member index
            成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.ClearMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Clear the member index and ignore the default members
            清除成员索引,忽略默认成员
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.SetMember(AutoCSer.Metadata.MemberMapIndex{`0})">
            <summary>
            Clear the member index and ignore the default members
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">Member index
            成员索引</param>
            <returns>Whether the setting is successful
            设置是否成功</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.SetMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Clear the member index and ignore the default members
            设置成员索引,忽略默认成员
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="member"></param>
            <returns>Whether the setting is successful
            设置是否成功</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.IsMember(AutoCSer.Metadata.MemberMapIndex{`0})">
            <summary>
            Determine whether the member index is valid
            判断成员索引是否有效
            </summary>
            <param name="memberIndex">Member index
            成员索引</param>
            <returns>Whether the member index is valid
            成员索引是否有效</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.IsMember(AutoCSer.Metadata.MemberMap{`0},System.Int32)">
            <summary>
            Determine whether the member index is valid
            判断成员索引是否有效
            </summary>
            <param name="memberMap">Member bitmap</param>
            <param name="memberIndex">Member index
            成员索引</param>
            <returns>Whether the member index is valid
            成员索引是否有效</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.SetMember(AutoCSer.Metadata.MemberMap{`0},System.Int32)">
            <summary>
            Clear the member index and ignore the default members
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberMap"></param>
            <param name="memberIndex"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Binary deserialization
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.NewFull">
            <summary>
            Create a bitmap of all members
            创建所有成员的位图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.NewEmpty">
            <summary>
            Create a bitmap without members
            创建没有成员的位图
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap`1.Default">
            <summary>
            Default public default deserialization member bitmap
            默认公共缺省反序列化成员位图
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapValue`1">
            <summary>
            Member bitmap object binding
            成员位图对象绑定
            </summary>
            <typeparam name="T">Target data object type
            目标数据对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`1.MemberMap">
            <summary>
            Member bitmap
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`1.Value">
            <summary>
            Target data
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Member bitmap object binding custom binary serialization
            成员位图对象绑定自定义二进制序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T}}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Member bitmap object binding custom binary deserialization
            成员位图对象绑定自定义二进制反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.AutoCSer#Json#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T}}#Serialize(AutoCSer.JsonSerializer)">
            <summary>
            Member bitmap object binding custom JSON serialization
            成员位图对象绑定自定义 JSON 序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.AutoCSer#Json#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T}}#Deserialize(AutoCSer.JsonDeserializer)">
            <summary>
            Member bitmap object binding custom JSON deserialization
            成员位图对象绑定自定义 JSON 反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.op_Implicit(`0)~AutoCSer.Metadata.MemberMapValue{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapValue`2">
            <summary>
            Member bitmap object binding
            成员位图对象绑定
            </summary>
            <typeparam name="T">Member bitmap data type
            成员位图数据类型</typeparam>
            <typeparam name="VT">Target data object type
            目标数据对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`2.MemberMap">
            <summary>
            Member bitmap
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`2.Value">
            <summary>
            Target data
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T,VT}}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Member bitmap object binding custom binary serialization
            成员位图对象绑定自定义二进制序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T,VT}}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Member bitmap object binding custom binary deserialization
            成员位图对象绑定自定义二进制反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.AutoCSer#Json#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T,VT}}#Serialize(AutoCSer.JsonSerializer)">
            <summary>
            Member bitmap object binding custom JSON serialization
            成员位图对象绑定自定义 JSON 序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.AutoCSer#Json#ICustomSerialize{AutoCSer#Metadata#MemberMapValue{T,VT}}#Deserialize(AutoCSer.JsonDeserializer)">
            <summary>
            Member bitmap object binding custom JSON deserialization
            成员位图对象绑定自定义 JSON 反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.Metadata.TestMethodAttribute">
            <summary>
            测试函数
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DefaultConstructor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DefaultConstructor.GetConstructor``1">
            <summary>
            获取自定义创建对象的默认构造函数，用于反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <returns>委托返回值的 T 类型对象不允许为 null</returns>
        </member>
        <member name="M:AutoCSer.Metadata.DefaultConstructor.LeftArrayDefaultConstructor``1">
            <summary>
            数组字串构造函数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor``1">
            <summary>
            是否存在默认构造函数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructor.CallMemberwiseClone">
            <summary>
            对象浅复制
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DefaultConstructor`1">
            <summary>
            默认构造函数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructor`1.Constructor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructor`1.uninitializedObject">
            <summary>
            未初始化对象，用于Clone
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DefaultConstructor`1.cloneUninitializedObject">
            <summary>
            获取未初始化对象，用于Clone
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.DefaultConstructor`1.Type">
            <summary>
            是否存在默认构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.FieldIndex">
            <summary>
            字段索引
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.FieldIndex.AnonymousProperty">
            <summary>
            匿名字段绑定属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.FieldIndex.AnonymousName">
            <summary>
            匿名字段名称（如果是属性生成则转换为属性名称）
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.FieldIndex.#ctor(System.Reflection.FieldInfo,AutoCSer.Metadata.MemberFiltersEnum,System.Int32,System.String)">
            <summary>
            字段信息
            </summary>
            <param name="field">字段信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
            <param name="anonymousName">匿名字段名称</param>
        </member>
        <member name="M:AutoCSer.Metadata.FieldIndex.#ctor(System.Reflection.FieldInfo,AutoCSer.Metadata.MemberFiltersEnum,System.Int32,AutoCSer.Metadata.PropertyIndex)">
            <summary>
            字段信息
            </summary>
            <param name="field">字段信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
            <param name="anonymousProperty">匿名字段绑定属性</param>
        </member>
        <member name="M:AutoCSer.Metadata.FieldIndex.GetValue(System.Object)">
            <summary>
            获取字段值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.BaseGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.GetJsonSerializeBaseDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 基类序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType.JsonDeserializeBaseDelegate">
            <summary>
            JSON 基类反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.GetBinarySerializeBaseDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取基类二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType.BinarySerializeBaseDelegate">
            <summary>
            获取基类二进制序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType.BinaryDeserializeBaseDelegate">
            <summary>
            获取基类二进制反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.GetCommandServerInterfaceControllerCreator(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.GetCommandServerInterfaceControllerCreatorWithCommandListener(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.BaseGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.BaseGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.BaseGenericType`2.ReferenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType`2.GetJsonSerializeBaseDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 基类序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType`2.JsonDeserializeBaseDelegate">
            <summary>
            JSON 基类反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType`2.GetBinarySerializeBaseDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取基类二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType`2.BinarySerializeBaseDelegate">
            <summary>
            获取基类二进制序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.BaseGenericType`2.BinaryDeserializeBaseDelegate">
            <summary>
            获取基类二进制反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType`2.GetCommandServerInterfaceControllerCreator(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.BaseGenericType`2.GetCommandServerInterfaceControllerCreatorWithCommandListener(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.ClassGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.CreateConfigObject(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.CreateConfigObjectTask(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.GetConfigObjectTask(System.Object)">
            <summary>
            获取配置对象
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.GetBinarySerializeArrayDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            二进制序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinarySerializeLeftArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinarySerializeListArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinaryDeserializeLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinaryDeserializeListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType.BinaryDeserializeArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.ClassGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.ClassGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.ClassGenericType`1.referenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType`1.CreateConfigObject(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType`1.CreateConfigObjectTask(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType`1.GetConfigObjectTask(System.Object)">
            <summary>
            获取配置对象
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.ClassGenericType`1.GetBinarySerializeArrayDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            二进制序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinarySerializeLeftArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinarySerializeListArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinaryDeserializeLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinaryDeserializeListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.ClassGenericType`1.BinaryDeserializeArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.CollectionGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType.ElementType">
            <summary>
            元素类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType.GetJsonSerializeCollectionDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 集合序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType.JsonDeserializeCollectionDelegate">
            <summary>
            JSON 集合反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType.GetBinarySerializeCollectionDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取集合二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType.BinaryDeserializeCollectionDelegate">
            <summary>
            获取集合二进制反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.CollectionGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">ICollection 类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.CollectionGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.CollectionGenericType`2.ReferenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType`2.ElementType">
            <summary>
            元素类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType`2.GetJsonSerializeCollectionDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 集合序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType`2.JsonDeserializeCollectionDelegate">
            <summary>
            JSON 集合反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.CollectionGenericType`2.GetBinarySerializeCollectionDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取集合二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.CollectionGenericType`2.BinaryDeserializeCollectionDelegate">
            <summary>
            获取集合二进制反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.DictionaryGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType.KeyType">
            <summary>
            关键字类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType.ValueType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType.GetJsonSerializeDictionaryDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 字典序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType.JsonDeserializeDictionaryDelegate">
            <summary>
            JSON 字典反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType.GetBinarySerializeDictionaryDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取字典二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType.BinaryDeserializeDictionaryDelegate">
            <summary>
            获取字典二进制反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType.create``3">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.DictionaryGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">IDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.DictionaryGenericType`3">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.DictionaryGenericType`3.valueReferenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.DictionaryGenericType`3.referenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType`3.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType`3.KeyType">
            <summary>
            关键字类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType`3.ValueType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType`3.GetJsonSerializeDictionaryDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 字典序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType`3.JsonDeserializeDictionaryDelegate">
            <summary>
            JSON 字典反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.DictionaryGenericType`3.GetBinarySerializeDictionaryDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取字典二进制序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.DictionaryGenericType`3.BinaryDeserializeDictionaryDelegate">
            <summary>
            获取字典二进制反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.EnumGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.SimpleSerializeEnumDelegate">
            <summary>
            获取简单序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.SimpleDeserializeEnumDelegate">
            <summary>
            获取简单反序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinarySerializeEnumArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinarySerializeEnumLeftArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinarySerializeEnumListArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinaryDeserializeEnumLeftArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinaryDeserializeEnumListArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.BinaryDeserializeEnumArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.JsonSerializeEnumDelegate">
            <summary>
            获取 JSON 序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.JsonDeserializeEnumDelegate">
            <summary>
            获取 JSON 反序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType.JsonDeserializeEnumFlagsDelegate">
            <summary>
            获取 JSON 反序列化枚举委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.GetBinarySerializeEnumDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取获取二进制序列化枚举委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.GetBinaryDeserializeEnumDelegate(AutoCSer.BinarySerialize.DeserializeDelegate@)">
            <summary>
            获取二进制反序列化枚举委托
            </summary>
            <param name="deserializeDelegate"></param>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.EnumGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType.GetUnderlyingType(System.Type)">
            <summary>
            枚举类型映射基本类型
            </summary>
            <param name="underlyingType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.EnumGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.SimpleSerializeEnumDelegate">
            <summary>
            获取简单序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.SimpleDeserializeEnumDelegate">
            <summary>
            获取简单反序列化枚举委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType`2.GetBinarySerializeEnumDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            获取获取二进制序列化枚举委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinarySerializeEnumArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinarySerializeEnumLeftArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinarySerializeEnumListArrayDelegate">
            <summary>
            获取二进制序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinaryDeserializeEnumLeftArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinaryDeserializeEnumListArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.BinaryDeserializeEnumArrayDelegate">
            <summary>
            获取二进制反序列化枚举数组委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType`2.GetBinaryDeserializeEnumDelegate(AutoCSer.BinarySerialize.DeserializeDelegate@)">
            <summary>
            获取二进制反序列化枚举委托
            </summary>
            <param name="deserializeDelegate"></param>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.JsonSerializeEnumDelegate">
            <summary>
            获取 JSON 序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.JsonDeserializeEnumDelegate">
            <summary>
            获取 JSON 反序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.EnumGenericType`2.JsonDeserializeEnumFlagsDelegate">
            <summary>
            获取 JSON 反序列化枚举委托
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.EnumGenericType`2.UnderlyingType">
            <summary>
            枚举类型映射基本类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.EnumGenericType`2.ToInt">
            <summary>
            枚举转数字
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.EnumGenericType`2.FromInt">
            <summary>
            枚举转数字
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType`2.toInt(`0)">
            <summary>
            枚举转数字（不支持）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.EnumGenericType`2.fromInt(`1)">
            <summary>
            枚举转数字（不支持）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetMemberMapIsMemberDelegate">
            <summary>
            判断成员索引是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetMemberMapSetMemberDelegate">
            <summary>
            设置成员索引
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetMemberMapType">
            <summary>
            获取成员委托类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.IsSerializeConstructor">
            <summary>
            判断构造函数是否支持数据反序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.LeftArrayDefaultConstructorDelegate">
            <summary>
            数组字串构造函数
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeDelegateReference">
            <summary>
            JSON 序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeObjectDelegate">
            <summary>
            获取 JSON 序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeNotSupportDelegate">
            <summary>
            JSON 自定义序列化不支持类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.GetJsonSerializeArrayDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 JSON 序列化数组委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeNotSupportDelegate">
            <summary>
            JSON 自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeDelegate">
            <summary>
            JSON 反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeLeftArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeListArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeLeftArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonDeserializeListArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeDelegateReference">
            <summary>
            二进制序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeDelegate">
            <summary>
            二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeStructLeftArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeStructListArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeNotSupportDelegate">
            <summary>
            二进制自定义序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinaryDeserializeNotSupportDelegate">
            <summary>
            二进制自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinaryDeserializeStructJsonDelegate">
            <summary>
            JSON 混杂二进制 反序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinaryDeserializeJsonDelegate">
            <summary>
            JSON 混杂二进制 反序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinaryDeserializeDelegate">
            <summary>
            二进制反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeObjectGenericDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.JsonSerializeStreamObjectDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.GetBinarySerializeStructArrayDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            二进制序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeJsonDelegate">
            <summary>
             JSON 混杂二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeMemberJsonDelegate">
            <summary>
             JSON 混杂二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeStructJsonDelegate">
            <summary>
             JSON 混杂二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeMemberStructJsonDelegate">
            <summary>
             JSON 混杂二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinarySerializeRealTypeObjectDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.BinaryDeserializeRealTypeObjectDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientReturnValueDelegate">
            <summary>
            获取客户端返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientReturnTypeDelegate">
            <summary>
            获取客户端错误返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerCallbackDelegate">
            <summary>
            命令客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerKeepCallbackDelegate">
            <summary>
            命令客户端保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerCallbackQueueDelegate">
            <summary>
            命令客户端队列回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerKeepCallbackQueueDelegate">
            <summary>
            命令客户端队列保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerReturnValueDelegate">
            <summary>
            命令客户端返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientReturnCommandGetTaskDelegate">
            <summary>
            获取 Task 委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerReturnValueQueueDelegate">
            <summary>
            命令客户端队列返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerEnumeratorDelegate">
            <summary>
            命令客户端枚举返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandClientControllerEnumeratorQueueDelegate">
            <summary>
            命令客户端队列枚举返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientCallbackDelegate">
            <summary>
            Get the client callback delegate
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientKeepCallbackDelegate">
            <summary>
            Get the client keep callback delegate
            获取客户端保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientCallbackQueueDelegate">
            <summary>
            Get the client queue callback task node
            获取客户端队列回调任务节点
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandClientKeepCallbackQueueDelegate">
            <summary>
            Get the client queue keep callback delegate
            获取客户端队列保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.TaskType">
            <summary>
            Task 类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.GetCommandServerInterfaceControllerCreator(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controller"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerSocketSendReturnValueDelegate">
            <summary>
            发送返回值数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.GetCommandServerCallbackType(AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调类型
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallbackDelegate">
            <summary>
            TCP 服务器端异步成功回调
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerSynchronousCallbackDelegate">
            <summary>
            TCP 服务器端异步成功回调
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackCountDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackReadWriteQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackConcurrencyReadQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackCountQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackCountReadWriteQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackCountConcurrencyReadQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateServerKeepCallbackTaskDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateServerKeepCallbackCountTaskDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateServerEnumerableKeepCallbackCountTaskDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackTaskQueueDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CreateCommandServerKeepCallbackCountTaskQueueDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallQueueSendReturnValueDelegate">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallReadWriteQueueSendReturnValueDelegate">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallConcurrencyReadQueueSendReturnValueDelegate">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallSendDelegate">
            <summary>
            Send data
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerReturnValueType">
            <summary>
            命令服务返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallTaskQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallTaskQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerSocketCheckTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallbackTaskCheckTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackTaskCheckTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackTaskCheckTaskAutoCancelKeepDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackTaskCheckCountTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackTaskCheckCountTaskAutoCancelKeepDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackQueueTaskGetSocketDelegate">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallbackRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallbackRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerCallbackRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackRunTaskAutoCancelKeepIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackCountRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackCountRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackCountRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackCountRunTaskAutoCancelKeepIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerEnumerableKeepCallbackCountRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerEnumerableKeepCallbackCountRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerEnumerableKeepCallbackCountRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.GetCommandServerReturnValueDelegate">
            <summary>
            客户端获取命令服务返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.SetCommandServerReturnValueDelegate">
            <summary>
            设置客户端命令服务返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType.CommandServerKeepCallbackQueueTaskGetTaskQueueDelegate">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.GenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.GenericType`1.ReferenceTypes">
            <summary>
            引用类型数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetMemberMapIsMemberDelegate">
            <summary>
            判断成员索引是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetMemberMapSetMemberDelegate">
            <summary>
            设置成员索引
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetMemberMapType">
            <summary>
            获取成员委托类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.IsSerializeConstructor">
            <summary>
            是否存在默认构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetIsSerializeConstructor">
            <summary>
            是否存在默认构造函数
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.LeftArrayDefaultConstructorDelegate">
            <summary>
            数组字串构造函数
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeDelegateReference">
            <summary>
            JSON 序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeObjectDelegate">
            <summary>
            获取 JSON 序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeDelegate">
            <summary>
            JSON 自定义序列化引用类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeNotSupportDelegate">
            <summary>
            JSON 自定义序列化不支持类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetJsonSerializeArrayDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            JSON 序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeNotSupportDelegate">
            <summary>
            JSON 自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeDelegate">
            <summary>
            JSON 反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeLeftArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeListArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeLeftArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonDeserializeListArrayDelegate">
            <summary>
            JSON 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeDelegateReference">
            <summary>
            二进制序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeDelegate">
            <summary>
            二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeStructLeftArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeStructListArrayDelegate">
            <summary>
            二进制序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeNotSupportDelegate">
            <summary>
            二进制自定义序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinaryDeserializeNotSupportDelegate">
            <summary>
            二进制自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinaryDeserializeStructJsonDelegate">
            <summary>
            JSON 混杂二进制 反序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinaryDeserializeJsonDelegate">
            <summary>
            JSON 混杂二进制 反序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinaryDeserializeDelegate">
            <summary>
            二进制反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeObjectGenericDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.JsonSerializeStreamObjectDelegate">
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetBinarySerializeStructArrayDelegate(AutoCSer.BinarySerialize.SerializeDelegateReference@)">
            <summary>
            二进制序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeJsonDelegate">
            <summary>
             JSON 混杂二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeMemberJsonDelegate">
            <summary>
             JSON 混杂二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeStructJsonDelegate">
            <summary>
             JSON 混杂二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeMemberStructJsonDelegate">
            <summary>
             JSON 混杂二进制序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinarySerializeRealTypeObjectDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.BinaryDeserializeRealTypeObjectDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientReturnValueDelegate">
            <summary>
            获取命令客户端返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientReturnTypeDelegate">
            <summary>
            获取命令客户端错误返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerCallbackDelegate">
            <summary>
            命令客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerKeepCallbackDelegate">
            <summary>
            命令客户端保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerCallbackQueueDelegate">
            <summary>
            命令客户端队列回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerKeepCallbackQueueDelegate">
            <summary>
            命令客户端队列保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerReturnValueDelegate">
            <summary>
            命令客户端返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientReturnCommandGetTaskDelegate">
            <summary>
            获取 Task 委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerReturnValueQueueDelegate">
            <summary>
            命令客户端队列返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerEnumeratorDelegate">
            <summary>
            命令客户端枚举返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandClientControllerEnumeratorQueueDelegate">
            <summary>
            命令客户端队列枚举返回值委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientCallbackDelegate">
            <summary>
            Get the client callback delegate
            获取客户端回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientKeepCallbackDelegate">
            <summary>
            Get the client keep callback delegate
            获取客户端保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientCallbackQueueDelegate">
            <summary>
            Get the client queue callback task node
            获取客户端队列回调任务节点
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandClientKeepCallbackQueueDelegate">
            <summary>
            Get the client queue keep callback delegate
            获取客户端队列保持回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.TaskType">
            <summary>
            Task 类型
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetCommandServerInterfaceControllerCreator(System.Object,System.String)">
            <summary>
            获取控制器创建器
            </summary>
            <param name="controller"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerSocketSendReturnValueDelegate">
            <summary>
            发送返回值数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType`1.GetCommandServerCallbackType(AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步回调类型
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallbackDelegate">
            <summary>
            TCP 服务器端异步成功回调
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerSynchronousCallbackDelegate">
            <summary>
            TCP 服务器端异步成功回调
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackCountDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackReadWriteQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackConcurrencyReadQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackCountQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackCountReadWriteQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackCountConcurrencyReadQueueNodeDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateServerKeepCallbackTaskDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateServerKeepCallbackCountTaskDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateServerEnumerableKeepCallbackCountTaskDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackTaskQueueDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CreateCommandServerKeepCallbackCountTaskQueueDelegate">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallQueueSendReturnValueDelegate">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallReadWriteQueueSendReturnValueDelegate">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallConcurrencyReadQueueSendReturnValueDelegate">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallSendDelegate">
            <summary>
            Send data
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerReturnValueType">
            <summary>
            命令服务返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallTaskQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackQueueTaskType">
            <summary>
            服务端异步调用队列任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallTaskQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerSocketCheckTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallbackTaskCheckTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackTaskCheckTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackTaskCheckTaskAutoCancelKeepDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackTaskCheckCountTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackTaskCheckCountTaskAutoCancelKeepDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackQueueTaskGetSocketDelegate">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackQueueTaskCheckCallTaskDelegate">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallbackRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallbackRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerCallbackRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackRunTaskAutoCancelKeepIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackCountRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackCountRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackCountRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackCountRunTaskAutoCancelKeepIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerEnumerableKeepCallbackCountRunTaskType">
            <summary>
            Task.Run 异步任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerEnumerableKeepCallbackCountRunTaskSetIsDeserializeDelegate">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerEnumerableKeepCallbackCountRunTaskIsDeserializeDelegate">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.GetCommandServerReturnValueDelegate">
            <summary>
            命令客户端获取命令服务返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.SetCommandServerReturnValueDelegate">
            <summary>
            设置客户端命令服务返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType`1.CommandServerKeepCallbackQueueTaskGetTaskQueueDelegate">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType2">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2.JsonSerializeKeyValuePairDelegate">
            <summary>
            JSON 键值对序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2.JsonDeserializeKeyValuePairDelegate">
            <summary>
            JSON 键值对序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType2.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.GenericType2.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType2.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericType2.Get(System.Type[])">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.GenericType2`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2`2.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2`2.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2`2.JsonSerializeKeyValuePairDelegate">
            <summary>
            JSON 键值对序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericType2`2.JsonDeserializeKeyValuePairDelegate">
            <summary>
            JSON 键值对序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.GenericTypeCache`1">
            <summary>
            泛型类型元数据 基类
            </summary>
            <typeparam name="T">泛型类型元数据类型</typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.GenericTypeCache`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache`1.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache`1.cache">
            <summary>
            泛型类型元数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache`1.cacheLock">
            <summary>
            泛型类型元数据缓存 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.getEnum(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.getDictionary(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">IDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.getCollection(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">IDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.clearCache">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache`1.clearCacheTask">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.GenericTypeCache2`1">
            <summary>
            泛型类型元数据 基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.GenericTypeCache2`1.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.GenericTypeCache2`1.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache2`1.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache2`1.cache">
            <summary>
            泛型类型元数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.GenericTypeCache2`1.cacheLock">
            <summary>
            泛型类型元数据缓存 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache2`1.get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache2`1.clearCache">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.GenericTypeCache2`1.clearCacheTask">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.StructGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.JsonSerializeNullableArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.JsonSerializeNullableDelegate">
            <summary>
            JSON 序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.JsonDeserializeNullableDelegate">
            <summary>
            JSON 反序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeNullableDelegate">
            <summary>
            二进制序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeNullableArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeNullableLeftArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeNullableListArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinarySerializeSimpleDelegate">
            <summary>
            二进制序列化转简单序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeNullableLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeStructLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeNullableListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeStructListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeNullableArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeStructArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeSimpleDelegate">
            <summary>
            二进制反序列化转简单反序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.BinaryDeserializeNullableDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.CommandServerCallQueueSend">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.CommandServerCallReadWriteQueueSend">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType.CommandServerCallConcurrencyReadQueueSend">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.StructGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.StructGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.StructGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.StructGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.JsonSerializeNullableArrayDelegate">
            <summary>
            JSON 序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.JsonSerializeNullableDelegate">
            <summary>
            JSON 序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.JsonDeserializeNullableDelegate">
            <summary>
            JSON 反序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeNullableDelegate">
            <summary>
            二进制序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeNullableArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeNullableLeftArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeNullableListArrayDelegate">
            <summary>
            获取二进制序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinarySerializeSimpleDelegate">
            <summary>
            二进制序列化转简单序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeNullableLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeStructLeftArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeNullableListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeStructListArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeNullableArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeStructArrayDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeSimpleDelegate">
            <summary>
            二进制反序列化转简单反序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.BinaryDeserializeNullableDelegate">
            <summary>
            获取二进制反序列化函数信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.StructGenericType`1.CommandServerCallQueueSendDelegate">
            <summary>
            Send data
            </summary>
            <param name="node"></param>
            <param name="queue"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.CommandServerCallQueueSend">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.StructGenericType`1.CommandServerCallReadWriteQueueSendDelegate">
            <summary>
            Send data
            </summary>
            <param name="node"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.CommandServerCallReadWriteQueueSend">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.StructGenericType`1.CommandServerCallConcurrencyReadQueueSendDelegate">
            <summary>
            Send data
            </summary>
            <param name="node"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="P:AutoCSer.Metadata.StructGenericType`1.CommandServerCallConcurrencyReadQueueSend">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.IgnoreAttribute">
            <summary>
            全局忽略
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.IgnoreMemberAttribute">
            <summary>
            Ignore the members
            忽略成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.IgnoreMemberAttribute.IsIgnoreCurrent">
            <summary>
            Is ignore the current member
            是否忽略当前成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            Is ignore the current member
            是否忽略当前成员
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute">
            <summary>
            Member selection
            成员选择
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.MemberFilters">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.IsAttribute">
            <summary>
            Whether the member matches the custom attribute type, the default is false, indicating that all members are selected.
            成员是否匹配自定义属性类型，默认为 false 表示选择所有成员。
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.IsBaseTypeAttribute">
            <summary>
            Specify whether to search the inheritance chain of this member to find these characteristics. Refer to System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)
            指定是否搜索该成员的继承链以查找这些特性，参考 System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.Instance">
            <summary>
            Default public dynamic member
            默认公有动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.Instance.Filter">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.Instance.MemberFilters">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.NonPublic">
            <summary>
            Default non-public member
            默认非公有成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.NonPublic.Filter">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.NonPublic.MemberFilters">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance">
            <summary>
            Default public dynamic member
            默认公有动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance.Filter">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance.MemberFilters">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField">
            <summary>
            Default public dynamic field member
            默认公有动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField.Filter">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField.MemberFilters">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.InstanceField">
            <summary>
            Default dynamic field member
            默认动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.InstanceField.Filter">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.InstanceField.MemberFilters">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty">
            <summary>
            Default dynamic property member
            默认动态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty.Filter">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty.MemberFilters">
            <summary>
            Member selection type
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup">
            <summary>
            成员索引分组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.PublicFields">
            <summary>
            公有字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.NonPublicFields">
            <summary>
            非公有字段
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.FieldCount">
            <summary>
            字段成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.PublicProperties">
            <summary>
            公有属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.NonPublicProperties">
            <summary>
            非公有属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.MemberCount">
            <summary>
            所有成员数量
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.#ctor(System.Type)">
            <summary>
            成员索引分组
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.GetAllMembers">
            <summary>
            成员集合
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.get(System.Func{AutoCSer.Metadata.MemberIndexInfo,System.Boolean})">
            <summary>
            获取成员索引集合
            </summary>
            <param name="isValue">成员匹配委托</param>
            <returns>成员索引集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Find(AutoCSer.Metadata.MemberFiltersEnum,System.Boolean)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <param name="filter">选择类型</param>
            <param name="isFilter">是否完全匹配选择类型</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.GetFields(System.Type,AutoCSer.Metadata.MemberFiltersEnum)">
            <summary>
            获取字段集合
            </summary>
            <param name="type"></param>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.GetAnonymousFields(System.Type,AutoCSer.Metadata.MemberFiltersEnum)">
            <summary>
            获取字段集合（包括匿名字段）
            </summary>
            <param name="type"></param>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.GetProperties(System.Type,AutoCSer.Metadata.MemberFiltersEnum)">
            <summary>
            获取属性集合
            </summary>
            <param name="type"></param>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Compare(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.fieldCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.compare(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.propertyCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.groups">
            <summary>
            成员索引分组缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.groupLock">
            <summary>
            成员索引分组缓存访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.GetGroup(System.Type)">
            <summary>
            获取成员索引分组
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.declaredOnlyAnonymousFields">
            <summary>
            匿名字段集合缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.declaredOnlyAnonymousFieldLock">
            <summary>
            匿名字段集合缓存访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.getDeclaredOnlyAnonymousFields(System.Type)">
            <summary>
            获取匿名字段集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.clearCache">
            <summary>
            清除缓存信息
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexInfo">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.MemberSystemType">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.TemplateMemberType">
            <summary>
            模板成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.MemberIndex">
            <summary>
            成员编号
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.MemberFilters">
            <summary>
            选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.IsField">
            <summary>
            是否字段
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.CanSet">
            <summary>
            是否可赋值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.CanGet">
            <summary>
            是否可读取
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.isIgnore">
            <summary>
            是否忽略该成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.IsIgnore">
            <summary>
            是否忽略该成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.attributes">
            <summary>
            自定义属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.baseAttributes">
            <summary>
            自定义属性集合(包括基类成员属性)
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.#ctor(System.Reflection.MemberInfo,System.Type,AutoCSer.Metadata.MemberFiltersEnum,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
            <param name="memberType">成员类型</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.Attributes``1(System.Boolean)">
            <summary>
            获取自定义属性集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.GetAttribute``1(System.Boolean)">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="T">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.GetValue(System.Object)">
            <summary>
            获取数据值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexInfo`1">
            <summary>
            成员索引
            </summary>
            <typeparam name="T">成员类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo`1.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo`1.#ctor(`0,System.Type,AutoCSer.Metadata.MemberFiltersEnum,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
            <param name="memberType">成员类型</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="T:AutoCSer.Metadata.PropertyIndex">
            <summary>
            属性索引
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.PropertyIndex.AnonymousField">
            <summary>
            匿名字段
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.PropertyIndex.#ctor(System.Reflection.PropertyInfo,AutoCSer.Metadata.MemberFiltersEnum,System.Int32,System.Reflection.FieldInfo)">
            <summary>
            属性信息
            </summary>
            <param name="property">属性信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
            <param name="anonymousField">匿名字段</param>
        </member>
        <member name="M:AutoCSer.Metadata.PropertyIndex.GetValue(System.Object)">
            <summary>
            获取数据值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ComplexUnion">
            <summary>
            System.Numerics.Complex
            </summary>
        </member>
        <member name="F:AutoCSer.ComplexUnion.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.ComplexUnion.Complex">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.HalfUnion">
            <summary>
            Half / ushort
            </summary>
        </member>
        <member name="F:AutoCSer.HalfUnion.Half">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.HalfUnion.UShort">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Int128Union">
            <summary>
            Int128 / UInt128
            </summary>
        </member>
        <member name="F:AutoCSer.Int128Union.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Int128Union.UInt128">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Int128Union.Int128">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Matrix3x2Union">
            <summary>
            Matrix3x2
            </summary>
        </member>
        <member name="F:AutoCSer.Matrix3x2Union.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Matrix3x2Union.Matrix3x2">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Matrix4x4Union">
            <summary>
            Matrix4x4
            </summary>
        </member>
        <member name="F:AutoCSer.Matrix4x4Union.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Matrix4x4Union.Matrix4x4">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.PlaneUnion">
            <summary>
            Plane
            </summary>
        </member>
        <member name="F:AutoCSer.PlaneUnion.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.PlaneUnion.Plane">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.QuaternionUnion">
            <summary>
            Quaternion
            </summary>
        </member>
        <member name="F:AutoCSer.QuaternionUnion.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.QuaternionUnion.Quaternion">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.SerializeComplex">
            <summary>
            System.Numerics.Complex
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeComplex.Real">
            <summary>
            实数
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeComplex.Imaginary">
            <summary>
            虚数
            </summary>
        </member>
        <member name="T:AutoCSer.SerializeInt128">
            <summary>
            Int128 / UInt128
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeInt128.Lower">
            <summary>
            低 64b
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeInt128.Upper">
            <summary>
            高 64b
            </summary>
        </member>
        <member name="T:AutoCSer.SerializeMatrix3x2">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix3x2.M11">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix3x2.M12">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix3x2.M21">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix3x2.M22">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix3x2.M31">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix3x2.M32">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.SerializeMatrix4x4">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M11">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M12">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M13">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M14">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M21">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M22">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M23">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M24">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M31">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M32">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M33">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M34">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M41">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M42">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M43">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeMatrix4x4.M44">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.SerializePlane">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:AutoCSer.SerializePlane.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializePlane.D">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.SerializeQuaternion">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeQuaternion.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeQuaternion.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeQuaternion.Z">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeQuaternion.W">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.SerializeVector2">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector2.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector2.Y">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.SerializeVector3">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector3.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector3.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector3.Z">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.SerializeVector4">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector4.X">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector4.Y">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector4.Z">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SerializeVector4.W">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Vector2Union">
            <summary>
            Vector2
            </summary>
        </member>
        <member name="F:AutoCSer.Vector2Union.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Vector2Union.Vector2">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Vector3Union">
            <summary>
            Vector3
            </summary>
        </member>
        <member name="F:AutoCSer.Vector3Union.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Vector3Union.Vector3">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Vector4Union">
            <summary>
            Vector4
            </summary>
        </member>
        <member name="F:AutoCSer.Vector4Union.SerializeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Vector4Union.Vector4">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallConcurrencyReadQueue">
            <summary>
            A synchronous queue on the server side that supports parallel reading (mainly used in scenarios where in-memory database nodes support parallel reading when obtaining persistent data)
            服务端支持并行读的同步队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueue.#ctor">
            <summary>
            Empty queue
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueue.#ctor(AutoCSer.Net.CommandListener,AutoCSer.Net.CommandServerController)">
            <summary>
            A synchronous queue on the server side that supports parallel reading (mainly used in scenarios where in-memory database nodes support parallel reading when obtaining persistent data)
            服务端支持并行读的同步队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景）
            </summary>
            <param name="server"></param>
            <param name="controller"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadQueue.Null">
            <summary>
            Empty queue
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode">
            <summary>
            Synchronous queue nodes that support parallel reading on the server side
            服务端支持并行读的同步队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.Socket">
            <summary>
            Command server socket
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.OfflineCount">
            <summary>
            The server side goes offline to count the object
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.CallbackIdentity">
            <summary>
            Current session callback identity
            当前会话回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.#ctor">
            <summary>
            Synchronous queue nodes that support parallel reading on the server side
            服务端支持并行读的同步队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerMethodTypeEnum)">
            <summary>
            Synchronous queue nodes that support parallel reading on the server side
            服务端支持并行读的同步队列节点
            </summary>
            <param name="socket"></param>
            <param name="methodType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.checkOfflineCount">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.CheckOfflineCount(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.OnException(AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Exception)">
            <summary>
            Queue task execution exception
            队列任务执行异常
            </summary>
            <param name="queue"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.SocketIsClose(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            Determine whether the socket has been closed
            判断套接字是否已经关闭
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.SetIsDeserialize(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="node"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.GetSocket(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.CloseShortLink(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            Close the short connection
            关闭短连接
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.send">
            <summary>
            Send the return type successfully
            发送成功返回类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.Send(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            Send the return type successfully
            发送成功返回类型
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.send``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.Send``1(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="node"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.sendReturnValue``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.SendReturnValue``1(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="node"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode.SetVerifyState(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
            <param name="node"></param>
            <param name="verifyState"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue">
            <summary>
            A synchronous queue for write operations supported by parallel reads on the server side (mainly used in scenarios where in-memory database nodes support parallel reads when obtaining persistent data)
            服务端支持并行读的写操作同步队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.ConcurrencyReadThread">
            <summary>
            Concurrent read operation thread
            并发读操作线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.currentTask">
            <summary>
            The current task execution node
            当前执行任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.runSeconds">
            <summary>
            The time of the last task run
            最后一次运行任务时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.isConcurrencyRead">
            <summary>
            The current status of concurrent read operations allows concurrent reads without being restricted by write operations
            当前并发读操作状态，允许并发读取不受写操作限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.IsClose">
            <summary>
            Has the queue been closed
            是否已经关闭队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.#ctor">
            <summary>
            Empty queue
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.#ctor(AutoCSer.Net.CommandListener,AutoCSer.Net.CommandServerController)">
            <summary>
            A synchronous queue for write operations supported by parallel reads on the server side (mainly used in scenarios where in-memory database nodes support parallel reads when obtaining persistent data)
            服务端支持并行读的写操作同步队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景）
            </summary>
            <param name="server"></param>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.Close">
            <summary>
            Close the queue
            关闭队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.run">
            <summary>
            Task allocation thread
            任务分配线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.Free(AutoCSer.Net.CommandServer.ConcurrencyReadQueueThread)">
            <summary>
            The concurrent read operation task processing has been completed
            并发读操作任务处理结束
            </summary>
            <param name="thread"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.CloseReadThread">
            <summary>
            Close the read operation thread
            关闭读取操作线程
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue.OnTimerAsync">
            <summary>
            Timeout check
            超时检查
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ConcurrencyReadQueueThread">
            <summary>
            并发读操作线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ConcurrencyReadQueueThread.#ctor(AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Boolean)">
            <summary>
            并发读操作线程
            </summary>
            <param name="queue"></param>
            <param name="isNull"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ConcurrencyReadQueueThread.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread`1">
            <summary>
            读写队列读操作线程
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread`1.queue">
            <summary>
            服务端同步读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread`1.threadHandle">
            <summary>
            Thread handle
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread`1.WaitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread`1.node">
            <summary>
            当前分配任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread`1.#ctor(`0,System.Boolean)">
            <summary>
            读写队列读操作线程
            </summary>
            <param name="queue"></param>
            <param name="isNull"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread`1.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread`1.Set(AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            分配任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread">
            <summary>
            并发读操作线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread.#ctor(AutoCSer.Net.CommandServerCallWriteQueue,System.Boolean)">
            <summary>
            读写队列读操作线程
            </summary>
            <param name="queue"></param>
            <param name="isNull"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.NullReadWriteQueueNode">
            <summary>
            服务端同步读写队列空节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullReadWriteQueueNode.RunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullReadWriteQueueNode.#ctor">
            <summary>
            空节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.NullReadWriteQueueNode.Null">
            <summary>
            空节点
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReadQueueThread">
            <summary>
            读写队列读操作线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadQueueThread.queue">
            <summary>
            服务端同步读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadQueueThread.threadHandle">
            <summary>
            Thread handle
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadQueueThread.WaitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadQueueThread.node">
            <summary>
            当前分配任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadQueueThread.#ctor(AutoCSer.Net.CommandServerCallWriteQueue)">
            <summary>
            读写队列读操作线程
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadQueueThread.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadQueueThread.Set(AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            分配任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReadWriteNodeTypeEnum">
            <summary>
            Synchronous read and write queue node types
            同步读写队列节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadWriteNodeTypeEnum.Read">
            <summary>
            Read operation
            读操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadWriteNodeTypeEnum.ConcurrencyRead">
            <summary>
            Concurrent read operations are used to concurrently execute read request operations during the acquisition of snapshot data in an in-memory database
            并发读操作，用于内存数据库获取快照数据期间并发执行读请求操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadWriteNodeTypeEnum.Write">
            <summary>
            Write operation
            写操作
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReadWriteQueueNode">
            <summary>
            The server synchronously reads and writes the queue nodes
            服务端同步读写队列节点
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ReadWriteQueueNode.Type">
            <summary>
            Synchronous read and write queue node types
            同步读写队列节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadWriteQueueNode.MethodType">
            <summary>
            Server-side method call types
            服务端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadWriteQueueNode.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReadWriteQueueNode.isQueue">
            <summary>
            Has it been added to the queue
            是否已经添加到队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadWriteQueueNode.#ctor">
            <summary>
            自定义节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadWriteQueueNode.#ctor(AutoCSer.Net.CommandServer.ServerMethodTypeEnum)">
            <summary>
            服务端同步读写队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadWriteQueueNode.CheckSet(AutoCSer.Net.CommandServer.ReadWriteNodeTypeEnum)">
            <summary>
            自定义节点设置服务端同步读写队列
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadWriteQueueNode.RunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadWriteQueueNode.OnException(AutoCSer.Net.CommandServerCallWriteQueue,System.Exception)">
            <summary>
            Queue task execution exception
            队列任务执行异常
            </summary>
            <param name="queue"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadWriteQueueNode.OnException(AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Exception)">
            <summary>
            Queue task execution exception
            队列任务执行异常
            </summary>
            <param name="queue"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReadWriteQueueNode.OnTimeout(AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64)">
            <summary>
            Server-side queue timeout notification
            服务端队列超时通知
            </summary>
            <param name="queue"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum">
            <summary>
            服务端异步调用队列等待类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum.Concurrent">
            <summary>
            当可增加并发任务数量为 0 时，等待增加并发任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum.LowPriority">
            <summary>
            等待所有未完成任务执行完以后执行低优先级任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum.RunLowPriority">
            <summary>
            等待低优先级任务完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallTaskQueueWaitTypeEnum.Queue">
            <summary>
            当没有新任务并且存在未完成任务时，等待新任务继续执行，或者等待未完成任务执行完以后释放执行任务标志
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteMetadataCommand">
            <summary>
            获取远程元数据命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            获取远程元数据命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerQueueTypeEnum">
            <summary>
            队列类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerQueueTypeEnum.None">
            <summary>
            无队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerQueueTypeEnum.TaskQueue">
            <summary>
            异步队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerQueueTypeEnum.Queue">
            <summary>
            同步线程队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerQueueTypeEnum.ConcurrencyReadQueue">
            <summary>
            并行并发读的同步队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerQueueTypeEnum.ReadWriteQueue">
            <summary>
            读写队列
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.CallDelegate">
            <summary>
            调用表达式委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.CallDelegate.Create(AutoCSer.BinaryDeserializer)">
            <summary>
            创建表达式委托
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata">
            <summary>
            Remote expression client metadata information
            远程表达式客户端元数据信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.Stream">
            <summary>
            Output buffer stream
            序列化输出缓冲区流
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serializer">
            <summary>
            Binary data serialization
            二进制数据序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.parameterTypes">
            <summary>
            委托泛型参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.parameters">
            <summary>
            表达式参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.typeIndexs">
            <summary>
            未知类型编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.constantParameterIndexs">
            <summary>
            常量参数编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.constantParameters">
            <summary>
            常量参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.State">
            <summary>
            Remote expression serialization status
            远程表达式序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.isMetadataIndex">
            <summary>
            是否所有元数据都是编号方式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.isCheckConstant">
            <summary>
            是否需要检查常量表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.isCommand">
            <summary>
            是否已经发送获取远程元数据命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.callbacks">
            <summary>
            远程表达式元数据信息编号回调委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.types">
            <summary>
            远程类型编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.typeArray">
            <summary>
            远程类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.methods">
            <summary>
            远程方法编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.methodArray">
            <summary>
            远程方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.properties">
            <summary>
            远程属性编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.propertyArray">
            <summary>
            远程属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.fields">
            <summary>
            远程字段编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.fieldArray">
            <summary>
            远程字段集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.#ctor(System.Boolean)">
            <summary>
            Remote expression client metadata information
            远程表达式客户端元数据信息
            </summary>
            <param name="isNull"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.GetIsCommand">
            <summary>
            是否发送获取远程元数据命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.Callback(AutoCSer.Net.CommandServer.RemoteMetadataOutputData@)">
            <summary>
            Remote metadata callback
            远程元数据回调
            </summary>
            <param name="remoteMetadataOutputData"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.GetType(System.Int32,AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Int32}}@)">
            <summary>
            获取类型信息
            </summary>
            <param name="typeIndex"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.GetTypeArray(System.Int32[],AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Int32}}@)">
            <summary>
            获取类型数组
            </summary>
            <param name="typeIndexs"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.Callback(AutoCSer.Net.CommandServer.RemoteMetadataCallback)">
            <summary>
            Remote metadata callback
            远程元数据回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.callback">
            <summary>
            执行远程表达式元数据信息编号回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.getTypeIndex(System.Type)">
            <summary>
            获取远程类型编号
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.AppendTypeIndex(System.Type)">
            <summary>
            添加未知类型编号
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.Serialize(System.Type)">
            <summary>
            序列化类型信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.getMethodIndex(System.Reflection.MethodInfo)">
            <summary>
            获取远程方法编号
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.getPropertyIndex(System.Reflection.PropertyInfo)">
            <summary>
            获取远程属性编号
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.getFieldIndex(System.Reflection.FieldInfo)">
            <summary>
            获取远程字段编号
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.Serialize(AutoCSer.BinarySerializer,System.Type[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            序列化表达式
            </summary>
            <param name="serializer"></param>
            <param name="expression"></param>
            <param name="parameters"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.writeHashCode(System.Int32)">
            <summary>
            写入表达式序列化数据的哈希值
            </summary>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serializeNode(System.Linq.Expressions.Expression)">
            <summary>
            序列化表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            方法调用参数序列化节点
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.ConstantExpression)">
            <summary>
            序列化常量表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Type,System.Object)">
            <summary>
            序列化常量表达式节点
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serializeCheckConversion(System.Linq.Expressions.BinaryExpression)">
            <summary>
            序列化二元表达式节点（检查 Lambda 转换参数）
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.BinaryExpression)">
            <summary>
            序列化二元表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serializeArrayIndex(System.Linq.Expressions.BinaryExpression)">
            <summary>
            序列化数组索引调用节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.UnaryExpression,System.Boolean,System.Boolean)">
            <summary>
            序列化一元表达式节点
            </summary>
            <param name="expression"></param>
            <param name="isMethod"></param>
            <param name="isType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            序列化类型判断表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            序列化方法调用表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.IndexExpression)">
            <summary>
            序列化索引调用节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.InvocationExpression)">
            <summary>
            序列化 Invoke 节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.DefaultExpression)">
            <summary>
            序列化类型默认值表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            序列化条件表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serialize(System.Linq.Expressions.MemberExpression)">
            <summary>
            序列化成员表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.getConstantParameter(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取常量参数值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.getConstantParameter(System.Reflection.MemberInfo,System.Object)">
            <summary>
            获取常量参数值
            </summary>
            <param name="member"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.GetConstantParameter(System.Reflection.MemberInfo,System.Object)">
            <summary>
            获取常量参数
            </summary>
            <param name="member"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.write(System.Linq.Expressions.MemberExpression)">
            <summary>
            序列化成员表达式节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.serializeParameter(System.Linq.Expressions.Expression)">
            <summary>
            序列化参数节点
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.Serialize(System.String)">
            <summary>
            常量序列化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.GetConstantParameterValue``1(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata,System.Int32)">
            <summary>
            获取常量参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="metadata"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.SimpleSerializeConstantParameter``1(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata,``0@)">
            <summary>
            常量参数序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="metadata"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.SerializeConstantParameter``1(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata,``0@)">
            <summary>
            常量参数序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="metadata"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata.Serialize(AutoCSer.BinarySerializer,System.Type[],System.Linq.Expressions.LambdaExpression)">
            <summary>
            序列化表达式
            </summary>
            <param name="serializer"></param>
            <param name="parameterTypes"></param>
            <param name="expression"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter">
            <summary>
            远程表达式常量参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter.Type">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter.Value">
            <summary>
            常量值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter.#ctor(System.Type)">
            <summary>
            远程表达式常量参数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter.#ctor(System.Type,System.Object)">
            <summary>
            远程表达式常量参数
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter.Equals(AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey">
            <summary>
            远程表达式常量参数关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey.types">
            <summary>
            参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey.#ctor(AutoCSer.LeftArray{AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter}@)">
            <summary>
            远程表达式常量参数关键字
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey.#ctor(AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey)">
            <summary>
            远程表达式常量参数关键字
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey.Equals(AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer">
            <summary>
            远程表达式常量参数序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer.Serializer">
            <summary>
            常量参数序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer.#ctor(System.Type,AutoCSer.LeftArray{AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameter}@)">
            <summary>
            远程表达式常量参数序列化
            </summary>
            <param name="type">参数类型</param>
            <param name="parameters"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer.serializers">
            <summary>
            远程表达式常量参数序列化集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer.typeIndex">
            <summary>
            远程表达式常量参数序列化编号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer.Get(AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterKey)">
            <summary>
            获取远程表达式常量参数序列化
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer.GetConstantParameterValueMethod">
            <summary>
            获取常量参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer.SimpleSerializeConstantParameterMethod">
            <summary>
            常量参数序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ConstantParameterSerializer.SerializeConstantParameterMethod">
            <summary>
            常量参数序列化
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum">
            <summary>
            远程表达式委托类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Func">
            <summary>
            Func{T}
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Func1">
            <summary>
            Func{T1, T}
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Func2">
            <summary>
            Func{T1, T2, T}
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Func3">
            <summary>
            Func{T1, T2, T3, T}
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Action1">
            <summary>
            Action{T1}
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Action2">
            <summary>
            Action{T1, T2}
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Action3">
            <summary>
            Action{T1, T2, T3}
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.DelegateTypeEnum.Count">
            <summary>
            保留，用于计数
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.FieldIndex">
            <summary>
            远程表达式字段编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FieldIndex.index">
            <summary>
            字段编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FieldIndex.NodeHeader">
            <summary>
            默认头部标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FieldIndex.field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FieldIndex.#ctor(System.Int32)">
            <summary>
            远程表达式字段编号
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FieldIndex.#ctor(System.Reflection.FieldInfo)">
            <summary>
            远程表达式字段编号
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FieldIndex.Serialize(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata)">
            <summary>
            序列化
            </summary>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize">
            <summary>
            Format the remote expression deserialization data
            格式化远程表达式反序列化数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.metadata">
            <summary>
            Remote expression server metadata information
            远程表达式服务端元数据信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.NewTypes">
            <summary>
            新增类型编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.NewMethods">
            <summary>
            新增方法编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.NewProperties">
            <summary>
            新增属性编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.NewFields">
            <summary>
            新增字段编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.parameterTypes">
            <summary>
            A collection of generic parameter types
            泛型参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.deserializer">
            <summary>
            Binary data deserialization
            二进制数据反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.write">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.read">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.end">
            <summary>
            当前结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.state">
            <summary>
            远程表达式序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.parameter">
            <summary>
            参数表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.parameterFields">
            <summary>
            委托参数字段信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.constantParameterFields">
            <summary>
            常量参数字段信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.#ctor(AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata)">
            <summary>
            Format the remote expression deserialization data
            格式化远程表达式反序列化数据
            </summary>
            <param name="metadata">emote expression server metadata information
            远程表达式服务端元数据信息</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.Format(AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo@,AutoCSer.BinaryDeserializer,System.Type[])">
            <summary>
            格式化表达式序列化数据
            </summary>
            <param name="serializeInfo"></param>
            <param name="deserializer"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeNode">
            <summary>
            格式化表达式节点序列化数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeHeader(System.UInt32)">
            <summary>
            格式化节点头部数据
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeIndex">
            <summary>
            读取并写入元数据索引位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeIndex(System.Int32)">
            <summary>
            写入元数据索引位置
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readType">
            <summary>
            读取类型信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readRemoteType">
            <summary>
            读取远程类型信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.apppendType(AutoCSer.HashObject{System.Type})">
            <summary>
            添加新类型编号
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readString">
            <summary>
            读取字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readTypeArray(System.Int32,System.Int32[]@)">
            <summary>
            读取类型数组
            </summary>
            <param name="count"></param>
            <param name="indexs"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeMethod(System.UInt32)">
            <summary>
            格式化方法信息
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeType(System.UInt32)">
            <summary>
            格式化类型信息
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeType">
            <summary>
            格式化类型信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeProperty(System.UInt32)">
            <summary>
            格式化属性信息
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeField(System.UInt32)">
            <summary>
            格式化字段信息
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeValue(System.UInt32)">
            <summary>
            写入 object 表达式数据
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.writeArguments">
            <summary>
            写入参数集合信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.SetExpression(System.Byte*,System.Reflection.FieldInfo[])">
            <summary>
            设置表达式反序列化位置
            </summary>
            <param name="data"></param>
            <param name="constantParameterFields"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.CreateExpression(System.Linq.Expressions.ParameterExpression,System.Reflection.FieldInfo[])">
            <summary>
            创建表达式
            </summary>
            <param name="parameter"></param>
            <param name="parameterFields"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.createNode">
            <summary>
            创建表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readArguments">
            <summary>
            读取参数集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readValue(System.UInt32)">
            <summary>
            读取 object 表达式
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readType(System.UInt32)">
            <summary>
            读取类型信息
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readMethod(System.UInt32)">
            <summary>
            读取方法信息
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readProperty(System.UInt32)">
            <summary>
            读取属性信息
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize.readMember(System.UInt32)">
            <summary>
            读取成员信息
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.MethodIndex">
            <summary>
            远程表达式方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.MethodIndex.index">
            <summary>
            方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.MethodIndex.NodeHeader">
            <summary>
            默认头部标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.MethodIndex.Method">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.MethodIndex.#ctor(System.Int32)">
            <summary>
            远程表达式方法编号
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.MethodIndex.#ctor(System.Reflection.MethodInfo)">
            <summary>
            远程表达式方法编号
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.MethodIndex.Serialize(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata)">
            <summary>
            序列化
            </summary>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum">
            <summary>
            远程表达式节点序列化头部默认值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.TypeIndex">
            <summary>
            类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.Type">
            <summary>
            类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.MethodIndex">
            <summary>
            方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.Method">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.PropertyIndex">
            <summary>
            属性编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.Property">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.FieldIndex">
            <summary>
            字段编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.NullValue">
            <summary>
            null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.ConstantNotEnum">
            <summary>
            非枚举类型常量值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.NodeHeaderEnum.IsArray">
            <summary>
            是否数组类型
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.PropertyIndex">
            <summary>
            远程表达式属性编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.PropertyIndex.index">
            <summary>
            属性编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.PropertyIndex.NodeHeader">
            <summary>
            默认头部标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.PropertyIndex.Property">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.PropertyIndex.#ctor(System.Int32)">
            <summary>
            远程表达式属性编号
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.PropertyIndex.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            远程表达式属性编号
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.PropertyIndex.Serialize(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata)">
            <summary>
            序列化
            </summary>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo">
            <summary>
            远程表达式序列化信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo.ConstantParameterCount">
            <summary>
            常量参数数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo.HashCode">
            <summary>
            序列化数据哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo.Key">
            <summary>
            远程表达式关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo.End">
            <summary>
            数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo.#ctor(AutoCSer.BinaryDeserializer)">
            <summary>
            远程表达式序列化信息
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo.Set(System.Byte*,System.Int32)">
            <summary>
            设置关键字数据
            </summary>
            <param name="start"></param>
            <param name="size"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata">
            <summary>
            Remote expression server metadata information
            远程表达式服务端元数据信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.server">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.sockets">
            <summary>
            命令服务套接字集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.socketLock">
            <summary>
            命令服务套接字集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.ExpressionArray">
            <summary>
            远程表达式集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.TypeIndexs">
            <summary>
            远程类型编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.TypeArray">
            <summary>
            远程类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.methodIndexs">
            <summary>
            远程方法编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.MethodArray">
            <summary>
            远程方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.propertyIndexs">
            <summary>
            远程属性编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.PropertyArray">
            <summary>
            远程属性集合 + 类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.fieldIndexs">
            <summary>
            远程字段编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.FieldArray">
            <summary>
            远程字段集合 + 类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Types">
            <summary>
            远程 Lambda 表达式反序列化类型缓存集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Methods">
            <summary>
            远程 Lambda 表达式反序列化方法缓存集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Properties">
            <summary>
            远程 Lambda 表达式反序列化属性缓存集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Fields">
            <summary>
            远程 Lambda 表达式反序列化属性缓存集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.#ctor(AutoCSer.Net.CommandListener)">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Append(AutoCSer.Net.CommandServerSocket)">
            <summary>
            添加命令服务套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Append(AutoCSer.HashObject{System.Reflection.MethodInfo},AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex@,AutoCSer.LeftArray{System.Int32}@)">
            <summary>
            添加新方法信息
            </summary>
            <param name="method"></param>
            <param name="methodIndex"></param>
            <param name="newMethods"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Append(AutoCSer.HashObject{System.Reflection.PropertyInfo},System.Int32,AutoCSer.LeftArray{System.Int32}@)">
            <summary>
            添加新属性信息
            </summary>
            <param name="property"></param>
            <param name="typeIndex"></param>
            <param name="newProperties"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Append(AutoCSer.HashObject{System.Reflection.FieldInfo},System.Int32,System.Reflection.BindingFlags,AutoCSer.LeftArray{System.Int32}@)">
            <summary>
            添加新字段信息
            </summary>
            <param name="field"></param>
            <param name="typeIndex"></param>
            <param name="bindingFlags"></param>
            <param name="newFields"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Output(AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize)">
            <summary>
            输出远程元数据
            </summary>
            <param name="formatDeserialize"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.GetConstantParameterType(AutoCSer.Net.CommandServer.RemoteExpression.SerializeInfo@)">
            <summary>
            获取常量参数类型信息
            </summary>
            <param name="serializeInfo"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.constantParameterTypes">
            <summary>
            远程表达式常量参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.constantParameterTypeIndex">
            <summary>
            远程表达式常量参数类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata.Default">
            <summary>
            非服务全局元数据信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpression.TypeIndex">
            <summary>
            远程表达式类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.TypeIndex.index">
            <summary>
            类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.TypeIndex.NodeHeader">
            <summary>
            默认头部标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpression.TypeIndex.Type">
            <summary>
            类型信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.TypeIndex.#ctor(System.Int32)">
            <summary>
            远程表达式类型编号
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.TypeIndex.#ctor(System.Type)">
            <summary>
            远程表达式类型编号
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteExpression.TypeIndex.Serialize(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata)">
            <summary>
            序列化
            </summary>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ConstantTypeEnum">
            <summary>
            远程表达式序列化常量类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Unknown">
            <summary>
            未知类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Bool">
            <summary>
            false
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Byte">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.SByte">
            <summary>
            sbyte
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Short">
            <summary>
            short
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.UShort">
            <summary>
            ushort
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Int">
            <summary>
            int
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.UInt">
            <summary>
            uint
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Long">
            <summary>
            long
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.ULong">
            <summary>
            ulong
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Float">
            <summary>
            float
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Double">
            <summary>
            double
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Decimal">
            <summary>
            decimal
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Char">
            <summary>
            char
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.TimeSpan">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableBool">
            <summary>
            bool? false
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableByte">
            <summary>
            byte?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableSByte">
            <summary>
            sbyte?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableShort">
            <summary>
            short?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableUShort">
            <summary>
            ushort?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableInt">
            <summary>
            int?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableUInt">
            <summary>
            uint?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableLong">
            <summary>
            long?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableULong">
            <summary>
            ulong?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableFloat">
            <summary>
            float?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableDouble">
            <summary>
            double?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableDecimal">
            <summary>
            decimal?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableChar">
            <summary>
            char?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableDateTime">
            <summary>
            DateTime?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableTimeSpan">
            <summary>
            TimeSpan?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableGuid">
            <summary>
            Guid?
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Complex">
            <summary>
            System.Numerics.Complex
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Plane">
            <summary>
            System.Numerics.Plane
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Quaternion">
            <summary>
            System.Numerics.Quaternion
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Matrix3x2">
            <summary>
            System.Numerics.Matrix3x2
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Matrix4x4">
            <summary>
            System.Numerics.Matrix4x4
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Vector2">
            <summary>
            System.Numerics.Vector2
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Vector3">
            <summary>
            System.Numerics.Vector3
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Vector4">
            <summary>
            System.Numerics.Vector4
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Half">
            <summary>
            Half
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.Int128">
            <summary>
            Int128
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.UInt128">
            <summary>
            UInt128
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.ByteArray">
            <summary>
            byte[]
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.String">
            <summary>
            string
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullString">
            <summary>
            string null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.EmptyString">
            <summary>
            string[0]
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.CharString">
            <summary>
            string[1]
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullByteArray">
            <summary>
            byte[] null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.EmptyByteArray">
            <summary>
            byte[0]
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.ByteArray1">
            <summary>
            byte[1]
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.ByteArray2">
            <summary>
            byte[2]
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.True">
            <summary>
            true
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullableBoolTrue">
            <summary>
            bool? true
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullBool">
            <summary>
            bool? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullByte">
            <summary>
            byte? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullSByte">
            <summary>
            sbyte? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullShort">
            <summary>
            short? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullUShort">
            <summary>
            ushort? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullInt">
            <summary>
            int? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullUInt">
            <summary>
            uint? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullLong">
            <summary>
            long? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullULong">
            <summary>
            ulong? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullFloat">
            <summary>
            float? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullDouble">
            <summary>
            double? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullDecimal">
            <summary>
            decimal? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullChar">
            <summary>
            char? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullDateTime">
            <summary>
            DateTime? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullTimeSpan">
            <summary>
            TimeSpan? null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ConstantTypeEnum.NullGuid">
            <summary>
            Guid? null
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum">
            <summary>
            Remote expression serialization status
            远程表达式序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.Unknown">
            <summary>
            Unknown state
            未知状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.Success">
            <summary>
            Serialization successful
            序列化成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NullExpression">
            <summary>
            The expression is null
            表达式为 null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportClient">
            <summary>
            The client does not support remote expressions
            客户端不支持远程表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.UnknownNodeType">
            <summary>
            Unknown node type
            未知节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportNew">
            <summary>
            The new operation on nodes is not supported
            不支持 new 操作节点 
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportLambda">
            <summary>
            Lambda nodes are not supported
            不支持 Lambda 节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportBlock">
            <summary>
            Code block nodes are not supported
            不支持代码块节点 Block
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportDynamic">
            <summary>
            Dynamic type nodes are not supported
            不支持动态类型节点 Dynamic
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportLabel">
            <summary>
            goto tag nodes are not supported
            不支持 goto 标签节点 Label
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportExtension">
            <summary>
            Expansion nodes are not supported
            不支持扩展节点 Extension
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportDebugInfo">
            <summary>
            Debugging information nodes are not supported
            不支持调试信息节点 DebugInfo
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotSupportArrayIndex">
            <summary>
            Multidimensional array indexing is not supported
            不支持多维数组索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.ConstantNullReference">
            <summary>
            A null reference exception occurred in the calculation of constant values
            常量值计算发生空引用异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.TooManyConstant">
            <summary>
            The number of constant parameters exceeds the maximum value of 65535
            常量参数数量超过最大值 65535
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.TooManyGenericArguments">
            <summary>
            The number of parameters of the generic type exceeds the maximum value of 255
            泛型类型参数数量超过最大值 255
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.TooManyParameters">
            <summary>
            The number of method parameters exceeds the maximum value of 255
            方法参数数量超过最大值 255
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotFoundParameter">
            <summary>
            No matching parameter expression was found
            没有找到匹配参数表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.DeserializeFailed">
            <summary>
            Server deserialization failed
            服务端反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotFoundCommandServerSocket">
            <summary>
            The server deserialization did not find the socket context
            服务端反序列化没有找到套接字上下文
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotFoundRemoteMetadata">
            <summary>
            The server deserialization did not find the remote metadata information, indicating that the server is missing configuration AutoCSer.Net.CommandServerConfig.IsRemoteExpression
            服务端反序列化没有找到远程元数据信息，说明服务端缺少配置 AutoCSer.Net.CommandServerConfig.IsRemoteExpression
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.UnknownSerializeInfo">
            <summary>
            The server is unaware of the serialization information
            服务端未知序列化信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.FormatWriteIndexOutOfRange">
            <summary>
            The server formatted data write address is out of range
            服务端格式化数据写入地址超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.FormatReadIndexOutOfRange">
            <summary>
            The server formatted the data reading address is out of range
            服务端格式化数据读取地址超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotFoundType">
            <summary>
            The server did not find the remote type information
            服务端没有找到远程类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotFoundMethod">
            <summary>
            The server did not find the remote method information
            服务端没有找到远程方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotFoundProperty">
            <summary>
            The server did not find the remote property information
            服务端没有找到远程属性信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NotFoundField">
            <summary>
            The server did not find the remote field information
            服务端没有找到远程字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.ConstantError">
            <summary>
            Constant value deserialization failed
            常量值反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteExpressionSerializeStateEnum.NullParameter">
            <summary>
            The deserialization of the necessary parameters for generating the expression failed
            生成表达式的必要参数反序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteMetadataCallback">
            <summary>
            远程元数据信息编号回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataCallback.Types">
            <summary>
            远程类型编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataCallback.Methods">
            <summary>
            远程方法编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataCallback.Properties">
            <summary>
            远程属性编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataCallback.Fields">
            <summary>
            远程字段编号集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataCallback.#ctor(AutoCSer.KeyValue{System.Type,System.Int32}[],AutoCSer.KeyValue{System.Reflection.MethodInfo,System.Int32}[],AutoCSer.KeyValue{System.Reflection.PropertyInfo,System.Int32}[],AutoCSer.KeyValue{System.Reflection.FieldInfo,System.Int32}[])">
            <summary>
            远程元数据信息编号回调
            </summary>
            <param name="types"></param>
            <param name="methods"></param>
            <param name="properties"></param>
            <param name="fields"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataCallback.Callback(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata)">
            <summary>
            远程元数据信息编号回调
            </summary>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteMetadataMemberIndex">
            <summary>
            远程元数据成员编号信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMemberIndex.Index">
            <summary>
            成员编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMemberIndex.TypeIndex">
            <summary>
            类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMemberIndex.MemberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMemberIndex.BindingFlags">
            <summary>
            成员选择标记
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataMemberIndex.#ctor(System.String,System.Int32,System.Int32,System.Reflection.BindingFlags)">
            <summary>
            远程元数据成员编号信息
            </summary>
            <param name="memberName"></param>
            <param name="index"></param>
            <param name="typeIndex"></param>
            <param name="bindingFlags"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataMemberIndex.GetProperty(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata,AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Int32}}@)">
            <summary>
            获取属性信息
            </summary>
            <param name="metadata"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataMemberIndex.GetField(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata,AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Int32}}@)">
            <summary>
            获取字段信息
            </summary>
            <param name="metadata"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex">
            <summary>
            远程元数据方法编号信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.Index">
            <summary>
            方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.TypeIndex">
            <summary>
            类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.ParameterTypes">
            <summary>
            参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.GenericTypes">
            <summary>
            A collection of generic parameter types
            泛型参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.BindingFlags">
            <summary>
            方法选择标记
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.#ctor(System.String,System.Int32,System.Reflection.BindingFlags,System.Int32[],System.Int32[])">
            <summary>
            远程元数据方法编号信息
            </summary>
            <param name="methodName"></param>
            <param name="typeIndex"></param>
            <param name="bindingFlags"></param>
            <param name="parameterTypes"></param>
            <param name="genericTypes"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.GetMethod(AutoCSer.Net.CommandServer.RemoteExpression.ClientMetadata,AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Int32}}@)">
            <summary>
            获取方法信息
            </summary>
            <param name="metadata"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataMethodIndex.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[],System.Type[])">
            <summary>
            获取方法信息
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="bindingFlags"></param>
            <param name="types"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteMetadataOutputData">
            <summary>
            远程元数据输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataOutputData.TypeIndexs">
            <summary>
            远程类型编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataOutputData.MethodIndexs">
            <summary>
            远程方法编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataOutputData.PropertyIndexs">
            <summary>
            远程属性编号集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataOutputData.FieldIndexs">
            <summary>
            远程字段编号集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataOutputData.#ctor(AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata)">
            <summary>
            远程元数据输出数据
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataOutputData.#ctor(AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata,AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize)">
            <summary>
            远程元数据输出数据
            </summary>
            <param name="metadata"></param>
            <param name="formatDeserialize"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteMetadataTypeIndex">
            <summary>
            远程元数据类型编号信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataTypeIndex.AssemblyName">
            <summary>
            Assembly name
            程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataTypeIndex.TypeName">
            <summary>
            Type name
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.RemoteMetadataTypeIndex.Index">
            <summary>
            类型编号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataTypeIndex.Set(AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            设置远程元数据类型编号信息
            </summary>
            <param name="type"></param>
            <param name="typeIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataTypeIndex.GetType">
            <summary>
            获取远程类型信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackFlagsEnum">
            <summary>
            回调参数标志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackFlagsEnum.None">
            <summary>
            缺省空参数标志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackFlagsEnum.SendData">
            <summary>
            是否发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackFlagsEnum.Error">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackIdentity">
            <summary>
            Session callback identifier
            会话回调标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackIdentity.CallbackIndexBits">
            <summary>
            会话索引有效位
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackIdentity.CallbackIndexAnd">
            <summary>
            会话索引最大值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackIdentity.Index">
            <summary>
            会话序号 + 输出标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CallbackIdentity.CallbackIndex">
            <summary>
            会话序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackIdentity.Identity">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.#ctor(System.UInt32)">
            <summary>
            Session callback identifier
            会话回调标识
            </summary>
            <param name="index">会话序号</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Session callback identifier
            会话回调标识
            </summary>
            <param name="index">会话序号</param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.SetNull">
            <summary>
            设置未知回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.Set(System.Int32,System.UInt32)">
            <summary>
            设置会话回调标识
            </summary>
            <param name="index"></param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.CallbackEquals(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            客户端保持回调比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.Equals(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackIdentity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CancelKeepCallbackData">
            <summary>
            取消异步保持回调数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCallbackData.Index">
            <summary>
            会话序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCallbackData.Identity">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCallbackData.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCallbackData.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCallbackData.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity@)">
            <summary>
            取消异步保持回调数据
            </summary>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCallbackData.Set(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消异步保持回调数据
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientBuildInfo">
            <summary>
            客户端输出创建参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.SendBufferSize">
            <summary>
            发送数据缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.FreeCount">
            <summary>
            当前释放输出数量，包括错误输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.Count">
            <summary>
            当前已经创建输出数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.IsFullSend">
            <summary>
            数据是否需要发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.IsError">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.IsNewBuffer">
            <summary>
            是否创建了新的缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientBuildInfo.IsCallback">
            <summary>
            客户端最后一个命令是否设置了回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientBuildInfo.GetFreeCount">
            <summary>
            获取并重置当前释放输出数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientBuildInfo.Clear">
            <summary>
            Clear the data
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientBuildInfo.AddCount">
            <summary>
            增加输出计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientBuildInfo.SetIsCallback">
            <summary>
            设置是否设置了回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum">
            <summary>
            The client's await awaits the return value callback thread mode
            客户端 await 等待返回值回调线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.CheckRunTask">
            <summary>
            By default, if it is an I/O thread, the callback operation will call Task.Run to prevent blocking the I/O thread. If it is confirmed that the subsequent operation does not have Synchronous blocking, it is recommended to use the synchronous call mode synchronous to avoid unnecessary thread context switching
            默认值，默认如果是 IO 线程则回调操作调用 Task.Run 防止阻塞 IO 线程，如果确认后续操作不存在同步阻塞推荐采用同步调用模式 Synchronous 避免不必要的线程上下文切换
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.Synchronous">
            <summary>
            If there is a synchronization callback for the IO thread and subsequent synchronization blocking occurs, the default CheckRunTask mode should be adopted to prevent the IO thread from being blocked and potentially causing a deadlock
            IO 线程同步回调，后续存在同步阻塞的情况应该采用默认的 CheckRunTask 模式防止 IO 线程被阻塞可能造成死锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.RunTask">
            <summary>
            The callback operation calls Task.Run
            回调操作调用 Task.Run
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.TinyBackground">
            <summary>
            The AutoCSer.Threading.ThreadPool.TinyBackground thread pool mode is suitable for scenarios with low concurrency; otherwise, it may result in a large number of threads being started
            AutoCSer.Threading.ThreadPool.TinyBackground 线程池模式，适合并发度低的场景，否则可能造成启动大量线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.ThreadPool">
            <summary>
            The default thread pool mode of the system
            系统默认线程池模式
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientCheckTimer">
            <summary>
            Client heart rate detection timing
            客户端心跳检测定时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientCheckTimer.socket">
            <summary>
            TCP 服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientCheckTimer.#ctor(AutoCSer.Net.CommandClientSocket,System.Int32)">
            <summary>
            Client heart rate detection timing
            客户端心跳检测定时
            </summary>
            <param name="socket"></param>
            <param name="seconds">超时秒数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientCheckTimer.OnTimer">
            <summary>
            定时器触发
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientCheckTimer.Cancel">
            <summary>
            取消心跳检测
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientInterfaceController">
            <summary>
            控制器接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandControllerConstructorInfo">
            <summary>
            命令客户端控制器构造函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSynchronous">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSendOnly">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallback">
            <summary>
            保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackQueue">
            <summary>
            队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackQueue">
            <summary>
            队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnType">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.ReturnCommandGetTask">
            <summary>
            Convert to a Task object
            转换为 Task 对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnTypeQueue">
            <summary>
            队列返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumerator">
            <summary>
            枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorQueue">
            <summary>
            队列枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.GetCommandClientCallback">
            <summary>
            Get the client callback delegate
            获取客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.GetCommandClientKeepCallback">
            <summary>
            Get the client keep callback delegate
            获取客户端保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.GetCommandClientCallbackQueue">
            <summary>
            Get the client queue callback task node
            获取客户端队列回调任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.GetCommandClientKeepCallbackQueue">
            <summary>
            Get the client queue keep callback delegate
            获取客户端队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientReturnValueGetIsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientReturnValueCheckThrowException">
            <summary>
            检查状态并抛出异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.ClientInterfaceMethodThrowException">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSynchronousInputMethod">
            <summary>
            同步等待命令方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSynchronousOutputMethod">
            <summary>
            同步等待命令方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSynchronousInputOutputMethod">
            <summary>
            同步等待命令方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerSendOnlyInputMethod">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackInputMethod">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackOutputMethod">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackOutputReturnValueMethod">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackInputMethod">
            <summary>
            保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackOutputMethod">
            <summary>
            保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackOutputReturnValueMethod">
            <summary>
            保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackQueueInputMethod">
            <summary>
            队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackQueueOutputMethod">
            <summary>
            队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerCallbackQueueOutputReturnValueMethod">
            <summary>
            队列回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackQueueInputMethod">
            <summary>
            队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackQueueOutputMethod">
            <summary>
            队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerKeepCallbackQueueOutputReturnValueMethod">
            <summary>
            队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnTypeInputMethod">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnValueOutputMethod">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnValueOutputReturnValueMethod">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnTypeQueueInputMethod">
            <summary>
            队列返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnValueQueueOutputMethod">
            <summary>
            队列返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerReturnValueQueueOutputReturnValueMethod">
            <summary>
            队列返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorInputMethod">
            <summary>
            枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorOutputMethod">
            <summary>
            枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorOutputReturnValueMethod">
            <summary>
            枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorQueueInputMethod">
            <summary>
            队列枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorQueueOutputMethod">
            <summary>
            队列枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientControllerEnumeratorQueueOutputReturnValueMethod">
            <summary>
            队列枚举返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandDefaultControllerConstructorParameterTypes">
            <summary>
            客户端默认初始化控制器构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandDefaultControllerConstructorInfo">
            <summary>
            客户端默认初始化控制器构造函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerSynchronous">
            <summary>
            Synchronous return
            同步返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerSendOnly">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerCallback">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerCallbackAction">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerCallbackQueue">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerCallbackActionQueue">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerKeepCallback">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerKeepCallbackAction">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerKeepCallbackQueue">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerKeepCallbackActionQueue">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerReturnType">
            <summary>
            Return value command
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerReturnTypeQueue">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerEnumerator">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerEnumeratorQueue">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerThrow">
            <summary>
            Throw an exception
            抛出异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerSynchronousMethod">
            <summary>
            Synchronous return
            同步返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerCallbackMethod">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerCallbackActionMethod">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerCallbackQueueMethod">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerCallbackActionQueueMethod">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerKeepCallbackMethod">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerKeepCallbackActionMethod">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerKeepCallbackQueueMethod">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerKeepCallbackActionQueueMethod">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerReturnValueMethod">
            <summary>
            Return value command
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerReturnValueQueueMethod">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerEnumeratorMethod">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController.CommandClientDefaultControllerEnumeratorQueueMethod">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientInterfaceController`1">
            <summary>
            控制器接口默认初始化信息
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceController`1.Create(AutoCSer.Net.CommandClient,System.String)">
            <summary>
            创建客户端默认初始化控制器
            </summary>
            <param name="client"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`1.callConstructor">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`1.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`1.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientInterfaceController`2">
            <summary>
            控制器接口信息
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="ST">服务端接口类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceController`2.Create(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,System.String[])">
            <summary>
            创建命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="serverMethodNames"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`2.Methods">
            <summary>
            客户端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`2.callConstructor">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`2.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceController`2.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceController`2.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum">
            <summary>
            客户端接收数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.LessVerifyMethod">
            <summary>
            缺少验证函数逻辑，需要重载实现 AutoCSer.Net.CommandServerAttribute.ClientVerifyMethod
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.ControllerDataError">
            <summary>
            命令控制器查询回调数据解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CallbackIdentityLess">
            <summary>
            回调标识接收不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CallbackIdentityError">
            <summary>
            回调标识解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.DataSizeError">
            <summary>
            数据长度解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.DataSizeLess">
            <summary>
            接收数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.BigDataSizeLess">
            <summary>
            临时接收数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.DataDecodeError">
            <summary>
            数据解码失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.BigDataDecodeError">
            <summary>
            临时数据解码失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.OnReceiveInvalidOperation">
            <summary>
            不允许的接收数据回调操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CustomDataError">
            <summary>
            自定义命令回调数据解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CustomCommandError">
            <summary>
            自定义命令处理错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.RemoteMetadataDataError">
            <summary>
            远程元数据回调数据解析失败
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum">
            <summary>
            命令服务客户端接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum.CallbackIdentity">
            <summary>
            Get the command callback number
            获取命令回调序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum.CallbackIdentityAgain">
            <summary>
            继续获取命令回调序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum.Data">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientReceiveTypeEnum.BigData">
            <summary>
            获取临时数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3">
            <summary>
            控制器接口信息
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="ST">服务端接口类型</typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.Create(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,System.String[])">
            <summary>
            创建命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="serverMethodNames"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.create(AutoCSer.Net.CommandServer.TaskQueueClientController{`0,`2},`2)">
            <summary>
            创建命令客户端控制器
            </summary>
            <param name="controller"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.methods">
            <summary>
            客户端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.callConstructor">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientTaskQueueInterfaceController`3.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod">
            <summary>
            设置客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.#ctor(System.Type)">
            <summary>
            设置客户端控制器
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.Push(System.Reflection.PropertyInfo,System.String)">
            <summary>
            添加客户端控制器属性 this.ClientController = this.GetController("controllerName");
            </summary>
            <param name="property"></param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.Create(System.Type)">
            <summary>
            创建web表单委托
            </summary>
            <param name="type">委托类型</param>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SetClientControllerDynamicMethod.commandClientSocketEventGetControllerMethodInfo">
            <summary>
            获取命令客户端控制器方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandControllerOutputData">
            <summary>
            命令控制器查询输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandControllerOutputData.ControllerName">
            <summary>
            命令控制器名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandControllerOutputData.ControllerIndex">
            <summary>
            命令控制器序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandControllerOutputData.MethodNames">
            <summary>
            方法名称集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandControllerOutputData.Set(System.Int32,AutoCSer.Net.CommandServerController)">
            <summary>
            命令控制器查询输出数据
            </summary>
            <param name="controllerIndex"></param>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandFlagsEnum">
            <summary>
            命令参数标志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandFlagsEnum.None">
            <summary>
            缺省空参数标志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandFlagsEnum.SendData">
            <summary>
            是否发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandFlagsEnum.Callback">
            <summary>
            是否需要回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandMethodAttribute">
            <summary>
            Command service method configuration
            命令服务方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandMethodAttribute.MethodIndex">
            <summary>
            Custom command sequence numbers are used for the client to identify the routes of the server API. Repetition is not allowed in the same controller interface. By default, a sequence number less than 0 indicates the use of the automatic matching mode. The automatic matching mode cannot guarantee that the old client call routes will match the new server routes after the server modifies and upgrades. When there are custom requirements, do not use huge data. It is recommended to start from 0 because it will be the size of a certain array
            自定义命令序号，用于客户端识别服务端 API 的路由，同一个控制器接口中不允许重复，默认小于 0 表示采用自动匹配模式，自动匹配模式不能保证服务端修改升级以后旧的客户端调用路由能与新的服务端路由匹配。存在自定义需求时不要使用巨大的数据，建议从 0 开始，因为它会是某个数组的大小。
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackCountCallbackAwaiter">
            <summary>
            TCP 服务器端异步保持回调计数回调 Awaiter
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCountCallbackAwaiter.count">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCountCallbackAwaiter.output">
            <summary>
            服务端套接字输出信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.KeepCallbackCountCallbackAwaiter.Exception">
            <summary>
            不支持，直接抛出异常
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCountCallbackAwaiter.#ctor(AutoCSer.Net.CommandServerKeepCallbackCount,AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            TCP 服务器端异步保持回调计数回调 Awaiter
            </summary>
            <param name="count">TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数</param>
            <param name="output"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCountCallbackAwaiter.onCompleted">
            <summary>
            输出数据访问锁申请完成
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc">
            <summary>
            服务端异步调用队列委托包装
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc.getTask">
            <summary>
            队列委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <param name="getTask">队列委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc.GetTask(AutoCSer.Net.CommandServerCallTaskQueue)">
            <summary>
            队列委托包装
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc`1">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc`1.getTask">
            <summary>
            队列委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <param name="getTask">队列委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueFunc`1.GetTask(AutoCSer.Net.CommandServerCallTaskQueue)">
            <summary>
            队列委托包装
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1.getTask">
            <summary>
            队列委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},`0)">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <param name="getTask">队列委托</param>
            <param name="key">keyword</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`1.GetTask(AutoCSer.Net.CommandServerCallTaskQueue)">
            <summary>
            队列委托包装
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2.getTask">
            <summary>
            队列委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{`1}},`0)">
            <summary>
            服务端异步调用队列委托包装
            </summary>
            <param name="getTask">队列委托</param>
            <param name="key">keyword</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandServerCallTaskQueueKeyFunc`2.GetTask(AutoCSer.Net.CommandServerCallTaskQueue)">
            <summary>
            队列委托包装
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.BaseCommand">
            <summary>
            基本命令，和控制器无关
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseCommand.Socket">
            <summary>
            Command client socket
            命令客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseCommand.#ctor(AutoCSer.Net.CommandClientSocket,AutoCSer.Net.CommandServer.ClientInterfaceMethod)">
            <summary>
            基本命令，和控制器无关
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseCommand.Push">
            <summary>
            添加命令到队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseCommand.CheckWaitPush">
            <summary>
            The command waiting for idle output attempts to be added to the output queue again
            等待空闲输出的命令再次尝试添加到输出队列
            </summary>
            <returns>Is it necessary to keep waiting
            是否需要继续等待</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CancelKeepCallbackCommand">
            <summary>
            取消异步保持回调回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CancelKeepCallbackCommand.IsKeepCallback">
            <summary>
            Keep callback command returning true
            保持回调命令返回 true
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            取消异步保持回调回调命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CancelKeepCommand">
            <summary>
            取消异步保持回调回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CancelKeepCommand.callbackIdentity">
            <summary>
            取消保持回调的会话回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCommand.#ctor(AutoCSer.Net.CommandClientSocket,AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            心跳检测命令
            </summary>
            <param name="socket"></param>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CancelKeepCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CheckCommand">
            <summary>
            心跳检测命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CheckCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            心跳检测命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CheckCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ControllerCallbackCommand">
            <summary>
            服务命令控制器查询回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ControllerCallbackCommand.IsKeepCallback">
            <summary>
            Keep callback command returning true
            保持回调命令返回 true
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ControllerCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            服务命令控制器查询回调命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ControllerCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ControllerCommand">
            <summary>
            服务命令控制器查询命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ControllerCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            服务命令控制器查询命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ControllerCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CustomDataCallbackCommand">
            <summary>
            自定义数据包回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CustomDataCallbackCommand.IsKeepCallback">
            <summary>
            Keep callback command returning true
            保持回调命令返回 true
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CustomDataCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            自定义数据包回调命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CustomDataCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.MergeCallbackCommand">
            <summary>
            合并处理命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.MergeCallbackCommand.IsKeepCallback">
            <summary>
            Keep callback command returning true
            保持回调命令返回 true
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.MergeCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            合并处理命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.MergeCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.RemoteMetadataCallbackCommand">
            <summary>
            远程元数据回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.RemoteMetadataCallbackCommand.IsKeepCallback">
            <summary>
            Keep callback command returning true
            保持回调命令返回 true
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataCallbackCommand.#ctor(AutoCSer.Net.CommandClientSocket)">
            <summary>
            远程元数据回调命令
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.RemoteMetadataCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.BaseReturnCommand">
            <summary>
            The return value command
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseReturnCommand.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.BaseReturnCommand.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseReturnCommand.ReturnType">
            <summary>
            The return type of the call
            调用返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.BaseReturnCommand.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.#ctor">
            <summary>
            The return value command
            返回值命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.#ctor(AutoCSer.Net.CommandClientController)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.BuildQueue(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.Push">
            <summary>
            Add commands to the output queue
            添加命令到输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.CheckWaitPush">
            <summary>
            The command waiting for idle output attempts to be added to the output queue again
            等待空闲输出的命令再次尝试添加到输出队列
            </summary>
            <returns>Is it necessary to keep waiting
            是否需要继续等待</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.SetReturn(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Set the error call return type
            设置错误调用返回类型
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.BaseReturnCommand.SetReturnQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Set the error call return type
            设置错误调用返回类型
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackCommand">
            <summary>
            回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackCommand.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackCommand`1">
            <summary>
            回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback,`0@)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackOutputCommand`1">
            <summary>
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.returnValue">
            <summary>
            The initial return value
            初始返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{`0})">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{`0},`0@)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackOutputCommand`2">
            <summary>
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackOutputCommand`2.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{`1},`0@)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{`1},`0@,`1@)">
            <summary>
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackOutputCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackQueueCommand">
            <summary>
            队列回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueCommand.callback">
            <summary>
            客户端队列回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.#ctor(AutoCSer.Net.CommandClientDefaultController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.appendQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage">Error message</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackQueueCommand`1">
            <summary>
            队列回调委托命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode,`0@)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1">
            <summary>
            队列回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.returnValue">
            <summary>
            The initial return value
            初始返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.callback">
            <summary>
            客户端队列回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{`0})">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{`0},`0@)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.appendQueue(AutoCSer.Net.CommandClientReturnValue{`0})">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.appendQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2">
            <summary>
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{`1},`0@)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{`1},`0@,`1@)">
            <summary>
            队列回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CallbackQueueOutputCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.Command">
            <summary>
            The request command of the client
            客户端请求命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.StreamStartIndex">
            <summary>
            The starting position of the output stream
            输出流起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.MethodIndexBits">
            <summary>
            The number of valid binary bits of the command method number
            命令方法编号有效二进制位数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.MethodIndexAnd">
            <summary>
            The maximum number of the command method
            命令方法编号最大值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.Controller">
            <summary>
            Command the client controller
            命令客户端控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.Command.Socket">
            <summary>
            Command client socket
            命令客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.Method">
            <summary>
            Client interface method information
            客户端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.Command.TimeoutSeconds">
            <summary>
            Timeout second count
            超时秒计数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.Command.IsKeepCallback">
            <summary>
            Is keep callback command
            是否保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.#ctor">
            <summary>
            The request command of the client
            客户端请求命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.#ctor(AutoCSer.Net.CommandServer.ClientInterfaceMethod)">
            <summary>
            The request command of the client
            客户端请求命令
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.#ctor(AutoCSer.Net.CommandClientController)">
            <summary>
            The request command of the client
            客户端请求命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The request command of the client
            客户端请求命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.SetTimeoutSeconds">
            <summary>
            Set the timeout second count
            设置超时秒计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.Build``1(AutoCSer.Net.CommandServer.ClientBuildInfo@,``0@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <param name="inputParameter"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.CheckWaitPush(AutoCSer.Net.CommandServer.Command@)">
            <summary>
            The command waiting for idle output attempts to be added to the output queue again
            等待空闲输出的命令再次尝试添加到输出队列
            </summary>
            <param name="next"></param>
            <returns>Is it necessary to keep waiting
            是否需要继续等待</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.CheckWaitPush">
            <summary>
            The command waiting for idle output attempts to be added to the output queue again
            等待空闲输出的命令再次尝试添加到输出队列
            </summary>
            <returns>Is it necessary to keep waiting
            是否需要继续等待</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.Callback(System.Action)">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.Callback(System.Action,AutoCSer.Net.CommandServer.ClientCallbackTypeEnum,System.Boolean)">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
            <param name="callback"></param>
            <param name="callbackType"></param>
            <param name="isSynchronousThread"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.AppendQueue(System.Action)">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.Command.CancelLink(AutoCSer.Net.CommandServer.Command,AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Cancel the command call
            取消命令调用
            </summary>
            <param name="head"></param>
            <param name="returnType"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandResult`1">
            <summary>
            命令返回值 await T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandResult`1.Command">
            <summary>
            The return value command
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandResult`1.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CommandResult`1.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CommandResult`1.ReturnType">
            <summary>
            The return type of the call
            调用返回类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CommandResult`1.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.CommandResult`1.ReturnValue">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandResult`1.#ctor(AutoCSer.Net.ReturnCommand{`0})">
            <summary>
            命令返回值
            </summary>
            <param name="command">The return value command
            返回值命令</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandResult`1.onCompleted">
            <summary>
            完成回调操作
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandResult`1.OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandResult`1.Wait">
            <summary>
            Wait for the command call to return the result
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandResult`1.GetResult">
            <summary>
            Get the result of the command call, return an error message before the result is returned (Only for supporting await)
            获取命令调用结果，结果未返回之前则返回错误信息（仅用于支持 await）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandResult`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPool">
            <summary>
            Client command pool
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.minArrayBits">
            <summary>
            命令数组最小二进制长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.maxArrayBits">
            <summary>
            命令数组最大二进制长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pad0">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.TimeoutCount">
            <summary>
            超时计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.arrays">
            <summary>
            Client command pool
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.Array">
            <summary>
            第一个客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.arraySizeAnd">
            <summary>
            数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.bitSize">
            <summary>
            数组二进制长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.arrayCount">
            <summary>
            当前数组数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.commandCount">
            <summary>
            命令地址数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pad1">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pushArray">
            <summary>
            客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.freeIndex">
            <summary>
            空闲命令位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pushArrayIndex">
            <summary>
            客户端命令池数组索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pad2">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.keepCallbackIdentity">
            <summary>
            保持回调命令会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.keepCallbackCommand">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.getArray">
            <summary>
            客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.getArrayIndex">
            <summary>
            客户端命令池数组索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.freeEndIndex">
            <summary>
            空闲命令结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.isErrorLog">
            <summary>
            是否输出过错误日志 活动会话数量过多
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.IsDisposed">
            <summary>
            Whether resources have been released
            是否已经释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.freeEndIndexLock">
            <summary>
            空闲命令结束位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPool.pad3">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.#ctor(AutoCSer.Net.CommandClient,AutoCSer.Net.CommandServer.Command)">
            <summary>
            Client command pool
            客户端命令池
            </summary>
            <param name="client"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.#ctor(AutoCSer.Net.CommandClient,System.Int32)">
            <summary>
            Client command pool
            客户端命令池
            </summary>
            <param name="client"></param>
            <param name="freeIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.DisposeTimeout">
            <summary>
            释放超时计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.Push(AutoCSer.Net.CommandServer.Command,System.UInt32@)">
            <summary>
            添加客户端命令
            </summary>
            <param name="command">客户端命令</param>
            <param name="identity">设置客户端命令</param>
            <returns>客户端命令索引位置</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.create(System.Int32)">
            <summary>
            新建客户端命令池
            </summary>
            <param name="currentIndex">当前空闲命令位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.GetCommand(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            获取客户端命令
            </summary>
            <param name="identity">客户端命令索引位置</param>
            <returns>客户端命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.CancelCallback(AutoCSer.Net.CommandServer.CancelKeepCallbackData@)">
            <summary>
            Cancel the keep callback
            取消保持回调
            </summary>
            <param name="cancelKeepCallbackData"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.Free(AutoCSer.Net.CommandServer.Command,AutoCSer.Net.CommandServer.Command,System.Int32)">
            <summary>
            释放所有命令
            </summary>
            <param name="head"></param>
            <param name="end"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPool.OnTimeout(System.UInt32)">
            <summary>
            超时事件
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPoolGetStateEnum">
            <summary>
            客户端获取状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolGetStateEnum.Command">
            <summary>
            普通命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolGetStateEnum.KeepCallback">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolGetStateEnum.IdentityError">
            <summary>
            命令序号标识不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPoolLink">
            <summary>
            客户端命令链表节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolLink.Command">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolLink.Next">
            <summary>
            下一个命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolLink.Identity">
            <summary>
            命令序号标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.Set(AutoCSer.Net.CommandServer.Command,System.UInt32@)">
            <summary>
            设置客户端命令
            </summary>
            <param name="command">客户端命令</param>
            <param name="identity">命令序号标识</param>
            <returns>下一个命令序号</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.CheckTimeout(System.UInt32,System.Int32)">
            <summary>
            超时检测
            </summary>
            <param name="timeoutSeconds"></param>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.Get(System.UInt32,System.Int32,AutoCSer.Net.CommandServer.Command@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="identity"></param>
            <param name="nextIndex"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.CancelCallback(System.UInt32,System.Int32)">
            <summary>
            Cancel the keep callback
            取消保持回调
            </summary>
            <param name="identity"></param>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolLink.Free">
            <summary>
            强行释放命令节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPoolTimeout">
            <summary>
            超时事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolTimeout.commandPool">
            <summary>
            Client command pool
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolTimeout.seconds">
            <summary>
            超时秒计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolTimeout.#ctor(AutoCSer.Net.CommandServer.CommandPool,System.UInt32)">
            <summary>
            超时事件
            </summary>
            <param name="commandPool"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolTimeout.OnTimeout">
            <summary>
            超时事件
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPoolTimeoutCount">
            <summary>
            超时计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPoolTimeoutCount.commandPool">
            <summary>
            Client command pool
            客户端命令池
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolTimeoutCount.#ctor(AutoCSer.Net.CommandServer.CommandPool,System.UInt16)">
            <summary>
            超时计数
            </summary>
            <param name="commandPool"></param>
            <param name="maxSeconds">最大超时秒数，必须大于 0</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.CommandPoolTimeoutCount.OnTimeout(System.UInt32)">
            <summary>
            超时事件（不允许阻塞）
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.CommandPushStateEnum">
            <summary>
            The status of the reqeust command added to the output queue
            请求命令添加到输出队列的状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPushStateEnum.Success">
            <summary>
            Successfully added to the output queue
            成功添加到输出队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPushStateEnum.WaitCount">
            <summary>
            Wait for the number of free outputs
            等待空闲输出数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPushStateEnum.Closed">
            <summary>
            The socket has been closed
            套接字已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.CommandPushStateEnum.WaitConnect">
            <summary>
            The socket is waiting to connect (The controller used for default initialization)
            等待连接中（用于默认初始化的控制器）
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext">
            <summary>
            await bool, the collection enumeration command returns true when the next data exists
            await bool，集合枚举命令存在下一个数据返回 true
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.ReturnCount">
            <summary>
            The number of return values
            返回值数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.IsCanceled">
            <summary>
            Has the callback been cancelled, 0/2
            是否已经取消回调 0/2
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.IsCurrentMoveNext">
            <summary>
            Is currently waiting for data
            当前是否等待数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.IsCompleted">
            <summary>
            Completion status (For reuse requirements, setting IsCompleted = true is not allowed. After the comparison is set, it will be read immediately, resulting in repeated execution.)
            完成状态（重用需求不允许设置 IsCompleted = true 比较设置完以后马上被读取掉导致重复执行）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.isNextValue">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.#ctor">
            <summary>
            Whether the next data exists in the collection enumeration command
            集合枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.#ctor(System.Boolean)">
            <summary>
            Whether the next data exists in the collection enumeration command
            集合枚举命令是否存在下一个数据
            </summary>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.Wait">
            <summary>
            Wait for the next data
            等待下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.GetResult">
            <summary>
            Whether the output queue has been successfully added
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.SetNextValue(AutoCSer.Net.CommandServer.Command,System.Boolean)">
            <summary>
            Set whether the next data exists
            设置是否存在下一个数据
            </summary>
            <param name="command"></param>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.SetNextValueQueue(AutoCSer.Net.CommandServer.Command,System.Boolean)">
            <summary>
            Set whether the next data exists
            设置是否存在下一个数据
            </summary>
            <param name="command"></param>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.SetNextValue(System.Boolean,System.Boolean)">
            <summary>
            Set whether the next data exists
            设置是否存在下一个数据
            </summary>
            <param name="isSynchronousCallback"></param>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.MoveNext">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.Push">
            <summary>
            Add new data
            添加新数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.Close">
            <summary>
            Close keep callback
            关闭保持回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.TryCancel">
            <summary>
            Try to cancel the keep callback
            尝试取消保持回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.Cancel">
            <summary>
            Cancel the keep callback
            取消保持回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.MoveNextValue">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.PushValue">
            <summary>
            Add new data
            添加新数据
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.NextValueTrue">
            <summary>
            The collection enumeration command has the next data
            集合枚举命令存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommandMoveNext.NextValueFalse">
            <summary>
            The collection enumeration command does not have the next data
            集合枚举命令不存在下一个数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorCommand`1">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorCommand`2">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorCommand`2.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1@)">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`1">
            <summary>
            队列枚举命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2">
            <summary>
            队列枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1@)">
            <summary>
            队列枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.EnumeratorQueueCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackCommand">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.NullIndex">
            <summary>
            非法回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.MergeIndex">
            <summary>
            合并回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.CancelKeepCallbackIndex">
            <summary>
            取消异步保持回调回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.CustomDataIndex">
            <summary>
            服务端自定义数据包回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.ControllerIndex">
            <summary>
            控制器信息查询命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.RemoteMetadataIndex">
            <summary>
            远程元数据命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.CommandPoolIndex">
            <summary>
            命令索引起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.KeepCallbackMethod">
            <summary>
            命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand.callback">
            <summary>
            The client keep the callback delegate
            客户端保持回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackCommand`1">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback,`0@)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1">
            <summary>
            队列回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.returnValue">
            <summary>
            The initial return value
            初始返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.callback">
            <summary>
            The client keep the callback delegate
            客户端保持回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{`0})">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{`0},`0@)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`1.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2">
            <summary>
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{`1},`0@)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{`1},`0@,`1@)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackOutputCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.callback">
            <summary>
            The client queue keep the callback delegate
            客户端队列保持回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand.appendQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand`1">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue,`0@)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1">
            <summary>
            队列回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.returnValue">
            <summary>
            The initial return value
            初始返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.callback">
            <summary>
            The client queue keep the callback delegate
            客户端队列保持回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{`0})">
            <summary>
            队列保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{`0},`0@)">
            <summary>
            队列保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.appendQueue(`0)">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`1.appendQueue(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2">
            <summary>
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{`1},`0@)">
            <summary>
            队列保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{`1},`0@,`1@)">
            <summary>
            队列保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCallbackQueueOutputCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.KeepCommand">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCommand.keepCallback">
            <summary>
            Keep callback object of the command
            命令保持回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCommand.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.KeepCommand.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCommand.PushState">
            <summary>
            The status of the reqeust command added to the output queue
            请求命令添加到输出队列的状态
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.KeepCommand.ReturnType">
            <summary>
            Request the return value type
            请求返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.KeepCommand.IsKeepCallback">
            <summary>
            Keep callback command returning true
            保持回调命令返回 true
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.KeepCommand.IsDisposed">
            <summary>
            Whether resources have been released
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.BuildKeep``1(AutoCSer.Net.CommandServer.ClientBuildInfo@,``0@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <param name="inputParameter"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.Push">
            <summary>
            Add commands to the output queue
            添加命令到输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.KeepCommand.CheckWaitPush">
            <summary>
            The command waiting for idle output attempts to be added to the output queue again
            等待空闲输出的命令再次尝试添加到输出队列
            </summary>
            <returns>Is it necessary to keep waiting
            是否需要继续等待</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnCommandQueueNode">
            <summary>
            返回值回调队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnCommandQueueNode.callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnCommandQueueNode.#ctor(System.Action)">
            <summary>
            返回值回调队列节点
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnCommandQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            回调
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnTypeCommand">
            <summary>
            Return the call type command
            返回调用类型命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Return the call type command
            返回调用类型命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Return the call type command
            返回调用类型命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnTypeCommand`1">
            <summary>
            Return the call type command
            返回调用类型命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnTypeCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            Return the call type command
            返回调用类型命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand">
            <summary>
            Return the call type queue command
            返回调用类型队列命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Return the call type queue command
            返回调用类型队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Return the call type queue command
            返回调用类型队列命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand`1">
            <summary>
            Return the call type queue command
            返回调用类型队列命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            Return the call type queue command
            返回调用类型队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnTypeQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnValueCommand`1">
            <summary>
            The return value command
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnValueCommand`1.returnValue">
            <summary>
            The initial return value
            初始返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnValueCommand`2">
            <summary>
            The return value command
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnValueCommand`2.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1@)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.returnValue">
            <summary>
            The initial return value
            初始返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1@)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ReturnValueQueueCommand`2.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SynchronousCommand">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousCommand.WaitLock">
            <summary>
            命令等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousCommand.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousCommand.errorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.SynchronousCommand.ReturnValue">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.Wait">
            <summary>
            等待返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.CheckWaitPush">
            <summary>
            The command waiting for idle output attempts to be added to the output queue again
            等待空闲输出的命令再次尝试添加到输出队列
            </summary>
            <returns>Is it necessary to keep waiting
            是否需要继续等待</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand.OnReceive``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="data"></param>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SynchronousCommand`1">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousCommand`1.Wait">
            <summary>
            等待返回值
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`1.Wait(`0@)">
            <summary>
            等待返回值
            </summary>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@,`1)">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="outputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.SynchronousOutputCommand`2.Wait(`1@)">
            <summary>
            等待返回值
            </summary>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.IgnoreInitobjParameterAttribute">
            <summary>
            参数忽略初始化，允许随机初始化数据以降低反序列化开销
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.InterfaceController">
            <summary>
            控制器接口信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceController.CheckType(System.Type,System.Boolean,System.String@)">
            <summary>
            检查接口类型
            </summary>
            <param name="type"></param>
            <param name="isGenericTypeDefinition"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceController.GetCommandControllerAttribute(System.Type,System.Boolean,System.String@)">
            <summary>
            获取命令控制器配置
            </summary>
            <param name="type"></param>
            <param name="isGenericTypeDefinition"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceController.CheckMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            检查方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns>错误信息</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.InterfaceMethod">
            <summary>
            接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.controllerAttribute">
            <summary>
            命令服务配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethod.MatchMethodName">
            <summary>
            Match the method name
            匹配方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.InputParameterCount">
            <summary>
            有效输入参数数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.OutputParameterCount">
            <summary>
            有效输出参数数量
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethod.OutputParameters">
            <summary>
            输入参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.OutputParameterType">
            <summary>
            输出参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethod.OutputParameterFields">
            <summary>
            输出参数字段集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.#ctor">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.#ctor(System.Type,System.Reflection.MethodInfo,AutoCSer.Net.CommandServerControllerInterfaceAttribute)">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="controllerAttribute"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.checkSynchronousParameter">
            <summary>
            检查同步方法有效参数名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.setParameterCount">
            <summary>
            设置参数数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.Equals(AutoCSer.Net.CommandServer.InterfaceMethod)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethod.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.InterfaceMethodBase">
            <summary>
            接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.Type">
            <summary>
            接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.Method">
            <summary>
            接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.ReturnValueType">
            <summary>
            Return value type
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.MethodIndex">
            <summary>
            自定义命令序号，不能重复，默认小于 0  表示不指定。存在自定义需求时不要使用巨大的数据，建议从 0 开始，因为它会是某个数组的大小。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.equalsParameterCount">
            <summary>
            服务端客户端比较附加参数数量
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethodBase.EqualsParameterCount">
            <summary>
            有效参数数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.Parameters">
            <summary>
            方法参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.ParameterStartIndex">
            <summary>
            有效参数起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.ParameterEndIndex">
            <summary>
            有效参数结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethodBase.ParameterCount">
            <summary>
            有效参数数量
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.InterfaceMethodBase.InputParameters">
            <summary>
            输入参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.InputParameterType">
            <summary>
            输入参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.InputParameterFields">
            <summary>
            输入参数字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.IsSimpleSerializeParamter">
            <summary>
            是否简单序列化输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.IsSimpleDeserializeParamter">
            <summary>
            Whether to simply deserialize the input data
            是否简单反序列化输入数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.IsReturnType">
            <summary>
            返回值类型是否一致
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.isCustomBaseMethod">
            <summary>
            是否自定义基础方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodBase.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.#ctor">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.#ctor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.SetInputParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            设置输入数据
            </summary>
            <param name="methodGenerator"></param>
            <param name="newInputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.CheckMethodIndexs``1(System.Type,AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute,System.Type,AutoCSer.LeftArray{``0}@,AutoCSer.LeftArray{System.String}@,``0[]@,System.Int32)">
            <summary>
            检查方法编号
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="methodIndexAttribute"></param>
            <param name="methodIndexEnumType"></param>
            <param name="methodArray"></param>
            <param name="messages"></param>
            <param name="methods"></param>
            <param name="minCustomMethodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.Compare(AutoCSer.Net.CommandServer.InterfaceMethodBase,AutoCSer.Net.CommandServer.InterfaceMethodBase)">
            <summary>
            服务端接口方法排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.MethodCompare(AutoCSer.Net.CommandServer.InterfaceMethodBase,AutoCSer.Net.CommandServer.InterfaceMethodBase)">
            <summary>
            服务端接口方法排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.InterfaceMethodBase.compare(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            参数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute">
            <summary>
            Interface method number configuration
            接口方法编号配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute.IsAutoMethodIndex">
            <summary>
            By default, false indicates that the runtime does not automatically assign unknown method numbers (excluding the code generation matching logic), and a matching error is generated when encountering an unknown method number
            默认为 false 表示运行时不自动分配未知方法编号（不包括代码生成匹配逻辑），遇到未知方法编号则产生匹配错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.InterfaceMethodIndexAttribute.IsMethodParameterCreator">
            <summary>
            By default, false indicates that no tool for creating the parameters of the calling method is generated. If you need to manually call to trigger a persistence operation, you need to specify this parameter as true
            默认为 false 表示不生成调用方法参数创建工具，如果需要手动调用触发持久化操作则需要指定该参数为 true
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientInterfaceMethod">
            <summary>
            Client interface method information
            客户端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.QueueKeyParameterName">
            <summary>
            队列关键字参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.ServerMethod">
            <summary>
            对应的服务端接口方法信息，非对称定义为 null
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.MethodAttribute">
            <summary>
            Command client method configuration
            命令客户端方法配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ClientInterfaceMethod.MatchMethodName">
            <summary>
            Match the method name
            匹配方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.ReturnValueParameterIndex">
            <summary>
            返回值输出参数索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.MethodType">
            <summary>
            Client method call type
            客户端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.IsCallbackAction">
            <summary>
            是否 Action 回调参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.TimeoutSeconds">
            <summary>
            Timeout seconds
            超时秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.CallbackType">
            <summary>
            The client's await awaits the return value callback thread mode
            客户端 await 等待返回值回调线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.QueueIndex">
            <summary>
            Call back the queue number
            回调队列序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.IsLowPriorityQueue">
            <summary>
            Whether it is a low-priority queue
            是否低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientInterfaceMethod.isDeserializeError">
            <summary>
            Whether deserialization failed
            是否反序列化失败
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.#ctor">
            <summary>
            Client interface method information
            客户端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.#ctor(System.Type,System.Reflection.MethodInfo,AutoCSer.Net.CommandServerControllerInterfaceAttribute,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Client interface method information
            客户端接口方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="controllerAttribute"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="isServer"></param>
            <param name="isDefault"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.DeserializeError(AutoCSer.Net.CommandClientController)">
            <summary>
            反序列化错误
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.SetError(System.String)">
            <summary>
            设置错误信息
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.CheckEquals(AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            与服务端方法比较
            </summary>
            <param name="serverMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.Set(AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            设置服务端接口方法信息
            </summary>
            <param name="serverMethod"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetInputParameterLocalBuilder(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder@)">
            <summary>
            获取输入参数临时变量定义
            </summary>
            <param name="methodGenerator"></param>
            <param name="newInputParameterLocalBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetOutputParameterLocalBuilder(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType@)">
            <summary>
            获取输出参数临时变量定义
            </summary>
            <param name="methodGenerator"></param>
            <param name="returnValueGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetOutputParameterIndex(System.Reflection.ParameterInfo)">
            <summary>
            获取输出参数序号
            </summary>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.CallbackParameter(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType)">
            <summary>
            回调委托参数
            </summary>
            <param name="methodGenerator"></param>
            <param name="returnValueGenericType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.CallController(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType,System.Reflection.Emit.LocalBuilder)">
            <summary>
            控制器调用
            </summary>
            <param name="methodGenerator"></param>
            <param name="returnValueGenericType"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetServerMethodIndexs(System.Int32,AutoCSer.Net.CommandServer.ClientInterfaceMethod[],System.String[])">
            <summary>
            Get the collection of server-side method numbers
            获取服务端方法编号集合
            </summary>
            <param name="methodStartIndex"></param>
            <param name="methods"></param>
            <param name="serverMethodNames"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetServerMethodIndexs(System.Int32,AutoCSer.Net.CommandServer.ClientInterfaceMethod[],System.String[],System.Int32[])">
            <summary>
            Get the collection of server-side method numbers
            获取服务端方法编号集合
            </summary>
            <param name="methodStartIndex"></param>
            <param name="methods"></param>
            <param name="serverMethodNames"></param>
            <param name="serverMethodIndexs"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.ThrowException(System.String)">
            <summary>
            抛出异常
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ClientInterfaceMethod.GetMethod(System.Type,AutoCSer.Net.CommandServerControllerInterfaceAttribute,System.Type,AutoCSer.LeftArray{AutoCSer.Net.CommandServer.ClientInterfaceMethod}@,System.Boolean,System.Boolean)">
            <summary>
            获取客户端接口方法集合
            </summary>
            <param name="type"></param>
            <param name="controllerAttribute"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="methods"></param>
            <param name="isServer"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ClientMethodTypeEnum">
            <summary>
            Client method call type
            客户端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Unknown">
            <summary>
            Unknown, the method definition is illegal
            未知，方法定义不合法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Synchronous">
            <summary>
            Block the calling thread synchronization return data, use is not recommended, including AutoCSer.Net.CommandClientReturnValue{T} and AutoCSer.Net.CommandClientReturnValue
            阻塞调用线程同步返回数据，不推荐使用，包括 AutoCSer.Net.CommandClientReturnValue{T} 与 AutoCSer.Net.CommandClientReturnValue
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.SendOnly">
            <summary>
            Only send data, failure without induction operation, including AutoCSer.Net.SendOnlyCommand
            仅发送数据，失败操作无感应，包括 AutoCSer.Net.SendOnlyCommand
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Callback">
            <summary>
            The callback return data
            回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.KeepCallback">
            <summary>
            Keep the callback returns data
            保持回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.CallbackQueue">
            <summary>
            The queue task callback return data (because it is queue thread synchronization trigger callback, It can ensure the serial execution of callback operations, but cannot guarantee the serial execution of subsequent await operations. No synchronous blocking operations are allowed after the callback; otherwise, it will seriously affect the throughput performance of the callback queue and may even cause a queue scheduling deadlock in complex dependency scenarios)
            队列任务回调返回数据（由于是队列线程同步触发回调，可以保证回调操作的串行执行，但不能保证后续 await 操作的串行执行；回调后续不允许存在同步阻塞操作，否则会严重影响回调队列的吞吐性能，甚至在复杂的依赖场景中可能造成队列调度死锁）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.KeepCallbackQueue">
            <summary>
            The queue task keep the callback to returns data (because it is queue thread synchronization trigger callback, It can ensure the serial execution of callback operations, but cannot guarantee the serial execution of subsequent await operations. No synchronous blocking operations are allowed after the callback; otherwise, it will seriously affect the throughput performance of the callback queue and may even cause a queue scheduling deadlock in complex dependency scenarios)
            队列任务保持回调返回数据（由于是队列线程同步触发回调，可以保证回调操作的串行执行，但不能保证后续 await 操作的串行执行；回调后续不允许存在同步阻塞操作，否则会严重影响回调队列的吞吐性能，甚至在复杂的依赖场景中可能造成队列调度死锁）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.ReturnValue">
            <summary>
            Support await calls, the default using Task. Run trigger await callback, including AutoCSer.Net.ReturnCommand {T} and AutoCSer.Net.ReturnCommand
            支持 await 调用，默认采用 Task.Run 触发 await 回调，包括 AutoCSer.Net.ReturnCommand{T} 与 AutoCSer.Net.ReturnCommand
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Task">
            <summary>
            The transformation of ReturnValue, including System.Threading.Tasks.Task{T} and System.Threading.Tasks.Task
            ReturnValue 的变形，包括 System.Threading.Tasks.Task{T} 与 System.Threading.Tasks.Task
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.ReturnValueQueue">
            <summary>
            Support await calls, trigger await callback queue tasks, including AutoCSer.Net.ReturnQueueCommand{T} or AutoCSer.Net.ReturnQueueCommand (because it is queue thread synchronization trigger callback, It can ensure the serial execution of callback operations, but cannot guarantee the serial execution of subsequent await operations. No synchronous blocking operations are allowed after the callback; otherwise, it will seriously affect the throughput performance of the callback queue and may even cause a queue scheduling deadlock in complex dependency scenarios)
            支持 await 调用，队列任务触发 await 回调，包括 AutoCSer.Net.ReturnQueueCommand{T} 或者 AutoCSer.Net.ReturnQueueCommand（由于是队列线程同步触发回调，可以保证回调操作的串行执行，但不能保证后续 await 操作的串行执行；回调后续不允许存在同步阻塞操作，否则会严重影响回调队列的吞吐性能，甚至在复杂的依赖场景中可能造成队列调度死锁）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.Enumerator">
            <summary>
            It is used to replace IAsyncEnumerable in .NET Satndard 2.0 and has cross-platform compatibility Including AutoCSer.Net.EnumeratorCommand{T} or AutoCSer.Net.EnumeratorCommand
            用于在 .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，包括 AutoCSer.Net.EnumeratorCommand{T} 或者 AutoCSer.Net.EnumeratorCommand
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ClientMethodTypeEnum.EnumeratorQueue">
            <summary>
            It is used to replace IAsyncEnumerable in .NET Satndard 2.0 and has cross-platform compatibility Including AutoCSer.Net.EnumeratorQueueCommand{T} or AutoCSer.Net.EnumeratorQueueCommand (because it is queue thread synchronization trigger callback, It can ensure the serial execution of callback operations, but cannot guarantee the serial execution of subsequent await operations. No synchronous blocking operations are allowed after the callback; otherwise, it will seriously affect the throughput performance of the callback queue and may even cause a queue scheduling deadlock in complex dependency scenarios)
            用于在 .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，包括 AutoCSer.Net.EnumeratorQueueCommand{T} 或者 AutoCSer.Net.EnumeratorQueueCommand（由于是队列线程同步触发回调，可以保证回调操作的串行执行，但不能保证后续 await 操作的串行执行；回调后续不允许存在同步阻塞操作，否则会严重影响回调队列的吞吐性能，甚至在复杂的依赖场景中可能造成队列调度死锁）
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterface">
            <summary>
            服务接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.ControllerAttribute">
            <summary>
            命令控制器配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.GeneratorAttribute">
            <summary>
            The command service controller interface generates configuration
            命令服务控制器接口生成配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.Methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.TaskQueueFieldBuilders">
            <summary>
            异步队列字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.Queues">
            <summary>
            服务共享同步队列标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.QueueCount">
            <summary>
            服务共享同步队列数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.VerifyMethodIndex">
            <summary>
            验证方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.ControllerQueue">
            <summary>
            控制器同步队列标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.ControllerConcurrencyReadQueue">
            <summary>
            控制器读写队列标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.IsConcurrencyReadQueue">
            <summary>
            服务共享读写队列标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.ControllerReadWriteQueue">
            <summary>
            控制器读写队列标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.IsReadWriteQueue">
            <summary>
            服务共享读写队列标记
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.Messages">
            <summary>
            提示信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterface.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterface.#ctor(System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            服务接口信息
            </summary>
            <param name="type"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="clientType"></param>
            <param name="isGenericTypeDefinition"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterface.#ctor(System.Type)">
            <summary>
            客户端默认初始化接口信息
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterface.GetMethodGroup">
            <summary>
            获取方法分组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterface.GetClientMethods(System.Type,System.Type,System.Exception@,System.String[]@,AutoCSer.LeftArray{AutoCSer.Net.CommandServer.ClientInterfaceMethod}@)">
            <summary>
            获取客户端方法集合
            </summary>
            <param name="type"></param>
            <param name="keyType"></param>
            <param name="controllerConstructorException"></param>
            <param name="controllerConstructorMessages"></param>
            <param name="methodArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterface.GetClientDefaultMethods(System.Type,System.Type,System.Exception@,System.String[]@,AutoCSer.LeftArray{AutoCSer.Net.CommandServer.ClientInterfaceMethod}@)">
            <summary>
            获取客户端方法集合
            </summary>
            <param name="type"></param>
            <param name="keyType"></param>
            <param name="controllerConstructorException"></param>
            <param name="controllerConstructorMessages"></param>
            <param name="methodArray"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceMethod">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.maxGetTaskTimestamp">
            <summary>
            获取 async Task 最大时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.MethodFieldBuilder">
            <summary>
            服务端输出信息 字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.TaskQueueKeyType">
            <summary>
            队列关键字类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerInterfaceMethod.TaskQueueKeyField">
            <summary>
            Task 队列关键字字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.MethodAttribute">
            <summary>
            Command service method configuration
            命令服务方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.ReturnParameter">
            <summary>
            返回值参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.AsynchronousType">
            <summary>
            异步回调类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerInterfaceMethod.KeepCallbackOutputCount">
            <summary>
            保持回调输出计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.isMethodRunTask">
            <summary>
            API 独占 Task.Run 操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.runTaskCount">
            <summary>
            async Task 调度计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.isSynchronousCallTask">
            <summary>
            默认为 false 表示系统自动调度 Task，否则使用 IO 线程同步调用 Task
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.isSynchronousCallTaskTimestamp">
            <summary>
            同步调用 async Task 时间戳是否满足需求 
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.MethodType">
            <summary>
            Server-side method call types
            服务端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsOutputInfo">
            <summary>
            是否存在输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsOutputPool">
            <summary>
            服务端输出对象是否采用缓存池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsOfflineCount">
            <summary>
            是否服务下线通知计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsLowPriorityQueue">
            <summary>
            TCP 服务器端同步调用队列是否低优先级
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsWriteQueue">
            <summary>
            读写队列是否调用写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsParameterSocket">
            <summary>
            是否存在 AutoCSer.Net.CommandServerSocket 参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.#ctor">
            <summary>
            默认空服务端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.#ctor(System.Type,System.Reflection.MethodInfo,AutoCSer.Net.CommandServerControllerInterfaceAttribute,System.Type,System.Boolean)">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="controllerAttribute"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="isGetServerMethodParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.IsSynchronousCallTask(AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerSocket)">
            <summary>
            否则使用 IO 线程同步调用 Task
            </summary>
            <param name="method"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.checkIsSynchronousCallTask(AutoCSer.Net.CommandServerSocket)">
            <summary>
            否则使用 IO 线程同步调用 Task
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CheckGetTaskTimestamp(System.Int64)">
            <summary>
            async Task 调度时间检查
            </summary>
            <param name="startTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CheckGetTaskException">
            <summary>
            async Task 调用异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.SetTaskException">
            <summary>
            async Task 调用异常
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CheckGetTaskTimestamp(AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Int64)">
            <summary>
            async Task 调度时间检查
            </summary>
            <param name="method"></param>
            <param name="startTimestamp"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetOutputParameterField(System.String)">
            <summary>
            获取输出参数字段
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetOutputParameterLocalBuilder(System.Reflection.Emit.ILGenerator)">
            <summary>
            获取输出参数临时变量定义
            </summary>
            <param name="doCommandGenerator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            方法调用传参
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="getControllerMethod"></param>
            <param name="controllerLocalBuilder"></param>
            <param name="inputParameterLocalBuilder"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CreateServerCallback(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.ConstructorBuilder)">
            <summary>
            创建回调
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="asynchronousConstructorBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethod(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder@)">
            <summary>
            调用方法
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="controllerType"></param>
            <param name="returnFieldBuilder"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder,System.Reflection.MethodInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.MethodInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.FieldInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            方法调用传参
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="asynchronousControllerFieldBuilder"></param>
            <param name="getQueueNodeControllerMethod"></param>
            <param name="controllerLocalBuilder"></param>
            <param name="getSocketMethod"></param>
            <param name="commandServerSocketLocalBuilder"></param>
            <param name="queueFieldBuilder"></param>
            <param name="queueLocalBuilder"></param>
            <param name="inputParameterFieldBuilder"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            方法调用传参
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="asynchronousControllerFieldBuilder"></param>
            <param name="commandServerSocketLocalBuilder"></param>
            <param name="queueLocalBuilder"></param>
            <param name="inputParameterFieldBuilder"></param>
            <param name="outputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder,System.Reflection.MethodInfo,System.Reflection.Emit.FieldBuilder)">
            <summary>
            方法调用传参
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="asynchronousControllerFieldBuilder"></param>
            <param name="getSocketMethod"></param>
            <param name="inputParameterFieldBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetMethod(System.Type,AutoCSer.Net.CommandServerControllerInterfaceAttribute,System.Type,System.Boolean,AutoCSer.LeftArray{AutoCSer.Net.CommandServer.ServerInterfaceMethod}@)">
            <summary>
            获取服务端接口方法集合
            </summary>
            <param name="type"></param>
            <param name="controllerAttribute"></param>
            <param name="taskQueueControllerKeyType"></param>
            <param name="isGetServerMethodParameter"></param>
            <param name="methods"></param>
            <returns>错误信息</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.Compare(AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            服务端接口方法排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.DoCommandSwitchMethodIndex(System.Reflection.Emit.ILGenerator,AutoCSer.Net.CommandServer.ServerInterfaceMethod[],System.Reflection.Emit.Label@)">
            <summary>
            switch (CommandServerSocket.GetCommandMethodIndex(socket))
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="methods"></param>
            <param name="doCommandReturnDeserializeErrorLabel"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.InputParameterDeserialize(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label@,System.Reflection.Emit.Label@)">
            <summary>
            输入参数反序列化
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="doCommandReturnDeserializeErrorLabel"></param>
            <param name="runTaskLabel"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetCommandServerCallTaskQueueTaskType(System.Boolean,AutoCSer.Metadata.GenericType@)">
            <summary>
            获取 Task 队列调用代理类型
            </summary>
            <param name="isVerifyMethodIndex"></param>
            <param name="returnGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.TaskQueueAsynchronousConstructorBase(System.Reflection.Emit.ConstructorBuilder,AutoCSer.Metadata.GenericType,System.Type,System.Boolean)">
            <summary>
            Task 队列调用代理类型调用基类构造函数
            </summary>
            <param name="asynchronousConstructorBuilder"></param>
            <param name="returnGenericType"></param>
            <param name="commandServerCallTaskQueueTaskType"></param>
            <param name="isVerifyMethodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetTaskQueueControllerFieldBuilder(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Task 队列调用代理类型控制器定义
            </summary>
            <param name="asynchronousTypeBuilder"></param>
            <param name="asynchronousConstructorGenerator"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetTaskQueueInputParameterFieldBuilder(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.ILGenerator)">
            <summary>
            Task 队列调用代理类型输入参数定义
            </summary>
            <param name="asynchronousTypeBuilder"></param>
            <param name="asynchronousConstructorGenerator"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.GetTaskQueueKeepCallbackLocalBuilder(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType)">
            <summary>
            获取 Task 队列调用保持回调
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="returnGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.TaskQueueCallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder)">
            <summary>
            Task 队列方法调用传参
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="inputParameterFieldBuilder"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceMethod.CheckCallTaskQueue(System.Reflection.Emit.ILGenerator,AutoCSer.Metadata.GenericType,System.Boolean)">
            <summary>
            Task 队列方法调用以后检查是否完成
            </summary>
            <param name="asynchronousMethodGenerator"></param>
            <param name="returnGenericType"></param>
            <param name="isVerifyMethodIndex"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerMethodParameter">
            <summary>
            命令服务参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.Type">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.Fields">
            <summary>
            参数字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.isCheckFields">
            <summary>
            是否已经检查参数字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.isSimpleSerialize">
            <summary>
            是否支持简单序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerMethodParameter.IsSimpleSerialize">
            <summary>
            是否支持简单序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.isInitobj">
            <summary>
            是否需要初始化对象
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerMethodParameter.IsInitobj">
            <summary>
            是否需要初始化对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.#ctor(System.Type)">
            <summary>
            命令服务参数类型
            </summary>
            <param name="type">参数类型</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.checkFields">
            <summary>
            检查参数字段集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.GetFields(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.String)">
            <summary>
            根据参数获取字段数据
            </summary>
            <param name="parameters"></param>
            <param name="returnValueName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.GetField(System.String)">
            <summary>
            获取参数字段
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.keyTypes">
            <summary>
            命令服务参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.Types">
            <summary>
            命令服务参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameter.typeIndex">
            <summary>
            命令服务参数类型编号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.getKey(System.Int32,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.Type)">
            <summary>
            获取命令服务参数类型关键字
            </summary>
            <param name="parameterCount"></param>
            <param name="parameters"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.Get(System.Int32,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.Type)">
            <summary>
            获取命令服务参数类型
            </summary>
            <param name="parameterCount"></param>
            <param name="parameters">参数集合</param>
            <param name="returnType">类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.GetOrCreate(System.Int32,System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},System.Type)">
            <summary>
            获取命令服务参数类型
            </summary>
            <param name="parameterCount"></param>
            <param name="parameters">参数集合</param>
            <param name="returnType">类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameter.AppendType(System.Type)">
            <summary>
            添加命令服务参数类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerMethodParameterKey">
            <summary>
            命令服务参数缓存关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameterKey.parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameterKey.returnType">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodParameterKey.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.#ctor(System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            TCP 参数类型
            </summary>
            <param name="parameters">参数集合</param>
            <param name="returnType">类型</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.Equals(AutoCSer.Net.CommandServer.ServerMethodParameterKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerMethodParameterKey.compare(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            参数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerMethodTypeEnum">
            <summary>
            Server-side method call types
            服务端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Unknown">
            <summary>
            Unknown type, the definition is illegal
            未知类型，定义不合法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.VersionExpired">
            <summary>
            Expiration method
            过期方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Synchronous">
            <summary>
            The IO thread synchronously calls and synchronously returns data. (Note: Since it is a data receiving IO thread synchronous call, it is not suitable for tasks with blocking.)
            IO 线程同步调用，同步返回数据（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnly">
            <summary>
            The IO thread synchronous calls does not return data. (Note: Since it is a data receiving IO thread synchronous call, it is not suitable for tasks with blocking.)
            IO 线程同步调用，不返回数据（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Callback">
            <summary>
            I/O thread synchronous calls, callback returns data (Note: Since it is a data receiving I/O thread synchronous call, it is not suitable for tasks with blocking.)
            IO 线程同步调用，回调返回数据（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallback">
            <summary>
            Synchronous calls of IO threads, keep the callback to return data, support automatic release of callbacks (Note that since it is a data receiving IO thread synchronous call, it is not suitable for tasks with blocking).
            IO 线程同步调用，保持回调返回数据，支持自动释放回调（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCount">
            <summary>
            Synchronous calls of IO threads, keep the callback count to return data, automatic release of callbacks is not supported (Note that since it is a data receiving IO thread synchronous call, it is not suitable for tasks with blocking).
            IO 线程同步调用，保持回调计数返回数据，不支持自动释放回调（注意，由于是接收数据 IO 线程同步调用，不适合存在阻塞的任务）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Queue">
            <summary>
            Queue task call, synchronously return data
            队列任务调用，同步返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnlyQueue">
            <summary>
            Queue task calls do not return data
            队列任务调用，不返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.CallbackQueue">
            <summary>
            Queue task calls, callback returns data
            队列任务调用，回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackQueue">
            <summary>
            Queue task calls, keep the callback to return data, support automatic release of callbacks
            队列任务调用，保持回调返回数据，支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCountQueue">
            <summary>
            Queue task calls, keep the callback count to return data, automatic release of callbacks is not supported
            队列任务调用，保持回调计数返回数据，不支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.ConcurrencyReadQueue">
            <summary>
            Queue task calls that support concurrent reading and synchronously return data
            支持并发读的队列任务调用，同步返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnlyConcurrencyReadQueue">
            <summary>
            Queue task calls that support concurrent reading do not return data
            支持并发读的队列任务调用，不返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.CallbackConcurrencyReadQueue">
            <summary>
            Queue task calls that support concurrent reading return data through callbacks
            支持并发读的队列任务调用，回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackConcurrencyReadQueue">
            <summary>
            Queue task calls that support concurrent reading, keep the callback to return data, support automatic release of callbacks
            支持并发读的队列任务调用，保持回调返回数据，支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCountConcurrencyReadQueue">
            <summary>
            Queue task calls that support concurrent reading, keep the callback count to return data, automatic release of callbacks is not supported
            支持并发读的队列任务调用，保持回调计数返回数据，不支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.ReadWriteQueue">
            <summary>
            Read/write queue task calls, synchronous return data
            读写队列任务调用，同步返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnlyReadWriteQueue">
            <summary>
            The read-write queue task calls does not return data
            读写队列任务调用，不返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.CallbackReadWriteQueue">
            <summary>
            Read/write queue task calls, callback returns data
            读写队列任务调用，回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackReadWriteQueue">
            <summary>
            Read/write queue task calls, keep the callback to return data, support automatic release of callbacks
            读写队列任务调用，保持回调返回数据，支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCountReadWriteQueue">
            <summary>
            Read/write queue task calls, keep the callback count to return data, automatic release of callbacks is not supported
            读写队列任务调用，保持回调计数返回数据，不支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.Task">
            <summary>
            await Task calls (Note that since it is a synchronous call by the IO thread receiving data, it is not suitable for tasks where there is blocking before the first asynchronous await. For complex tasks, Socket.IsClose should be judged before core computing to avoid unnecessary overhead)
            await Task 调用（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnlyTask">
            <summary>
            The await Task calls does not return data (Note that since it is a synchronous call by the IO thread receiving data, it is not suitable for tasks where there is blocking before the first asynchronous await. For complex tasks, Socket.IsClose should be judged before core computing to avoid unnecessary overhead)
            await Task 调用，不返回数据（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.CallbackTask">
            <summary>
            await Task calls, callback returns data (Note that since it is a synchronous call by the IO thread receiving data, it is not suitable for tasks where there is blocking before the first asynchronous await. For complex tasks, Socket.IsClose should be judged before core computing to avoid unnecessary overhead)
            await Task 调用，回调返回数据（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackTask">
            <summary>
            It replaces IAsyncEnumerable in.NET Satndard 2.0, has cross-platform compatibility and supports automatic release of callbacks (Note that since it is a synchronous call by the IO thread receiving data, it is not suitable for tasks where there is blocking before the first asynchronous await. For complex tasks, Socket.IsClose should be judged before core computing to avoid unnecessary overhead)
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，支持自动释放回调（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCountTask">
            <summary>
            It replaces IAsyncEnumerable in.NET Satndard 2.0, has cross-platform compatibility and supports automatic release of callbacks (Note that since it is a synchronous call by the IO thread receiving data, it is not suitable for tasks where there is blocking before the first asynchronous await. For complex tasks, Socket.IsClose should be judged before core computing to avoid unnecessary overhead)
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，支持自动释放回调（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.EnumerableKeepCallbackCountTask">
            <summary>
            In.NET Satndard 2.0, collections automatically convert to KeepCallbackCountTask (Note that since it is a synchronous call by the IO thread receiving data, it is not suitable for tasks where there is blocking before the first asynchronous await. For complex tasks, Socket.IsClose should be judged before core computing to avoid unnecessary overhead)
            .NET Satndard 2.0 中集合自动转 KeepCallbackCountTask（注意，由于是接收数据 IO 线程同步调用，不适合第一个异步 await 之前存在阻塞的任务。对于复杂任务，在核心计算之前应判断 Socket.IsClose 以避免不必要开销）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.TaskQueue">
            <summary>
            await Task queue calls
            await Task 队列调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.SendOnlyTaskQueue">
            <summary>
            The await Task queue calls does not return data
            await Task 队列调用，不返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.CallbackTaskQueue">
            <summary>
            The await Task queue calls returns data through the callback
            await Task 队列调用，回调返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackTaskQueue">
            <summary>
            It replaces IAsyncEnumerable in.NET Satndard 2.0, has cross-platform compatibility and supports automatic release of callbacks
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.KeepCallbackCountTaskQueue">
            <summary>
            It replaces IAsyncEnumerable in.NET Satndard 2.0, has cross-platform compatibility and supports automatic release of callbacks
            .NET Satndard 2.0 中替代 IAsyncEnumerable，具有跨平台兼容性，支持自动释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerMethodTypeEnum.EnumerableKeepCallbackCountTaskQueue">
            <summary>
            In.NET Satndard 2.0, collections automatically convert to KeepCallbackCountTaskQueue
            .NET Satndard 2.0 中集合自动转 KeepCallbackCountTaskQueue
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.HostEndPoint">
            <summary>
            The server listens for address information
            服务监听地址信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.HostEndPoint.IPEndPoint">
            <summary>
            Server listening address
            服务监听地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.HostEndPoint.RegisterHost">
            <summary>
            Server registration address information
            服务注册地址信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.HostEndPoint.#ctor(AutoCSer.Net.HostEndPoint)">
            <summary>
            The server listens for address information
            服务监听地址信息
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.HostEndPoint.op_Implicit(AutoCSer.Net.HostEndPoint)~AutoCSer.Net.CommandServer.HostEndPoint">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.NullCommandClientController">
            <summary>
            默认空命令客户端控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullCommandClientController.#ctor(AutoCSer.Net.CommandClientSocket,System.String)">
            <summary>
            默认空命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullCommandClientController.Get(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,AutoCSer.Net.CommandServer.ClientInterfaceMethod[],System.Int32[])">
            <summary>
            获取默认空命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="methods"></param>
            <param name="serverMethodIndexs"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.NullCommandServerController">
            <summary>
            默认空命令服务控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullCommandServerController.#ctor(AutoCSer.Net.CommandListener)">
            <summary>
            默认空命令服务控制器
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.NullCommandServerController.DoCommand(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.OfflineCount">
            <summary>
            The server side goes offline to count the object
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.OfflineCount.count">
            <summary>
            计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.OfflineCount.Get">
            <summary>
            获取计数
            </summary>
            <returns>0 表示需要释放计数</returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.OfflineCount.Null">
            <summary>
            服务端下线计数对象空值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutput">
            <summary>
            服务端套接字输出信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServer.ServerOutput.StreamStartIndex">
            <summary>
            输出流起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <param name="buildInfo">输出创建参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput.CancelLink(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            Cancel output
            取消输出
            </summary>
            <param name="head"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutput`1">
            <summary>
            返回值数据输出
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutput`1.callbackIdentity">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutput`1.method">
            <summary>
            服务端输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutput`1.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput`1.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0@)">
            <summary>
            返回值数据输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput`1.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput`1.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutput`1.Set(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0@)">
            <summary>
            设置输出参数
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputCancelKeepCallback">
            <summary>
            取消异步保持回调输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputCancelKeepCallback.cancelKeepCallbackData">
            <summary>
            取消异步保持回调数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCancelKeepCallback.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消异步保持回调输出数据
            </summary>
            <param name="callbackIdentity">需要取消回调的会话标识</param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCancelKeepCallback.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputController">
            <summary>
            命令控制器数据输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputController.controllerOutputData">
            <summary>
            命令控制器查询输出数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputController.#ctor(System.Int32,AutoCSer.Net.CommandServerController)">
            <summary>
            命令控制器数据输出
            </summary>
            <param name="controllerIndex"></param>
            <param name="controller">命令控制器</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputController.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputCustomData">
            <summary>
            自定义数据输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputCustomData.data">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCustomData.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据输出
            </summary>
            <param name="data">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCustomData.#ctor(System.Byte[])">
            <summary>
            自定义数据输出
            </summary>
            <param name="data">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputCustomData.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputFree`1">
            <summary>
            返回值数据输出
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputFree`1.onFree">
            <summary>
            错误释放处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputFree`1.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0@,System.Action)">
            <summary>
            返回值数据输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
            <param name="onFree"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputFree`1.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1">
            <summary>
            返回值数据输出保持回调计数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.keepCallbackCount">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0,AutoCSer.Net.CommandServerKeepCallbackCount)">
            <summary>
            返回值数据输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
            <param name="keepCallbackCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCount`1.Set(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0,AutoCSer.Net.CommandServerKeepCallbackCount)">
            <summary>
            设置输出参数
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
            <param name="keepCallbackCount"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCountFree`1">
            <summary>
            返回值数据输出保持回调计数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCountFree`1.onFree">
            <summary>
            错误释放处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCountFree`1.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0,AutoCSer.Net.CommandServerKeepCallbackCount,System.Action)">
            <summary>
            返回值数据输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="outputParameter"></param>
            <param name="keepCallbackCount"></param>
            <param name="onFree"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputKeepCallbackCountFree`1.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputRemoteMetadata">
            <summary>
            远程元数据输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputRemoteMetadata.outputData">
            <summary>
            远程元数据输出数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputRemoteMetadata.#ctor(AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata)">
            <summary>
            远程元数据输出
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputRemoteMetadata.#ctor(AutoCSer.Net.CommandServer.RemoteExpression.ServerMetadata,AutoCSer.Net.CommandServer.RemoteExpression.FormatDeserialize)">
            <summary>
            远程元数据输出
            </summary>
            <param name="metadata"></param>
            <param name="formatDeserialize"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputRemoteMetadata.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputRemoteMetadata.Clone">
            <summary>
            复制输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputReturnType">
            <summary>
            无返回值数据输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputReturnType.CallbackIdentity">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputReturnType.returnType">
            <summary>
            The return type of the call
            调用返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputReturnType.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnType.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            无返回值数据输出
            </summary>
            <param name="callbackIdentity">Session callback identifier
            会话回调标识</param>
            <param name="returnType">会话标识</param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnType.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            无返回值数据输出
            </summary>
            <param name="callbackIdentity">Session callback identifier
            会话回调标识</param>
            <param name="returnType">会话标识</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnType.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount">
            <summary>
            无返回值数据输出保持回调计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount.keepCallbackCount">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount.#ctor(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.Net.CommandServerKeepCallbackCount)">
            <summary>
            无返回值数据输出保持回调计数
            </summary>
            <param name="callbackIdentity">Session callback identifier
            会话回调标识</param>
            <param name="returnType">会话标识</param>
            <param name="keepCallbackCount">TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount.Build(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="socket"></param>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerOutputReturnTypeKeepCallbackCount.Free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerBuildInfo">
            <summary>
            服务端输出创建参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.SendBufferSize">
            <summary>
            发送数据缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.Count">
            <summary>
            当前已经创建输出数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsSend">
            <summary>
            是否需要发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.isFullSend">
            <summary>
            数据是否需要发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsClose">
            <summary>
            是否需要关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsError">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsNewBuffer">
            <summary>
            是否创建了新的缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerBuildInfo.IsAsynchronous">
            <summary>
            是否异步操作
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerBuildInfo.Clear">
            <summary>
            Clear the data
            清除数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerControllerInterfaceAttribute">
            <summary>
            The command service controller interface generates configuration
            命令服务控制器接口生成配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerControllerInterfaceAttribute.MethodIndexEnumType">
            <summary>
            Method sequence number maps enumeration type
            方法序号映射枚举类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerControllerInterfaceAttribute.#ctor(System.Type)">
            <summary>
            The command service controller interface generates configuration
            命令服务控制器接口生成配置
            </summary>
            <param name="methodIndexEnumType">Method sequence number maps enumeration type
            方法序号映射枚举类型</param>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerControllerInterfaceAttribute.Default">
            <summary>
            Default configuration
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceController">
            <summary>
            控制器接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ByteSubArrayRefType">
            <summary>
            ref SubArray{byte}
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandControllerConstructorInfo">
            <summary>
            命令服务控制器构造函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.DoCommandParameterTypes">
            <summary>
            执行命令参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketGetCommandMethodIndex">
            <summary>
            获取当前命令方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketSendSuccess">
            <summary>
            同步发送成功返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueAdd">
            <summary>
            Add the task node
            添加任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueAppendRead">
            <summary>
            Add the task node
            添加任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueAppendWrite">
            <summary>
            Add the task node
            添加任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueAddIsDeserialize">
            <summary>
            Add the task node
            添加任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueAppendReadIsDeserialize">
            <summary>
            Add the task node
            添加任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueAppendWriteIsDeserialize">
            <summary>
            Add the task node
            添加任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallQueueNodeSocketIsClose">
            <summary>
            Determine whether the socket has been closed
            判断套接字是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallReadWriteQueueNodeSocketIsClose">
            <summary>
            Determine whether the socket has been closed
            判断套接字是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallConcurrencyReadQueueNodeSocketIsClose">
            <summary>
            Determine whether the socket has been closed
            判断套接字是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallQueueNodeSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallReadWriteQueueNodeSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallConcurrencyReadQueueNodeSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallQueueNodeCheckOfflineCount">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallReadWriteQueueNodeCheckOfflineCount">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallConcurrencyReadQueueNodeCheckOfflineCount">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueLowPriorityLinkAdd">
            <summary>
            Add the task node
            添加任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueLowPriorityLinkAddIsDeserialize">
            <summary>
            Add the task node
            添加任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeGetSocket">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeCloseShortLink">
            <summary>
            Close the short connection
            关闭短连接
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueNodeGetSocket">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueNodeCloseShortLink">
            <summary>
            Close the short connection
            关闭短连接
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallConcurrencyReadQueueNodeGetSocket">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallConcurrencyReadQueueNodeCloseShortLink">
            <summary>
            Close the short connection
            关闭短连接
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueTaskNodeGetSocketDelegate">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueTaskNodeGetSocket">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCommandServerKeepCallbackQueueTaskGetSocketDelegate">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="keepCallback"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackQueueTaskGetSocket">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallbackTaskQueueTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueVerifyStateTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackQueueTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueSendOnlyTaskCheckCallTask">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandListenerGetServerCallQueue">
            <summary>
            获取服务端执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandListenerGetServerCallQueueLowPriority">
            <summary>
            获取服务端执行低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandListenerGetServerCallReadWriteQueue">
            <summary>
            获取服务端读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandListenerGetServerCallConcurrencyReadQueue">
            <summary>
            获取服务端读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerInterfaceMethodIsSynchronousCallTask">
            <summary>
            否则使用 IO 线程同步调用 Task
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerInterfaceMethodCheckGetTaskTimestamp">
            <summary>
            否则使用 IO 线程同步调用 Task
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.StopwatchGetTimestamp">
            <summary>
            获取当前时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerRunTaskSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerRunTaskIsDeserialize">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerVerifyStateRunTaskSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerVerifyStateRunTaskIsDeserialize">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSendOnlyRunTaskSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSendOnlyRunTaskIsDeserialize">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallbackRunTaskSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallbackRunTaskIsDeserialize">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackRunTaskSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackRunTaskIsDeserialize">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackRunTaskAutoCancelKeepIsDeserialize">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackCountRunTaskSetIsDeserialize">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackCountRunTaskIsDeserialize">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackCountRunTaskAutoCancelKeepIsDeserialize">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallGetSocket">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeSendSuccess">
            <summary>
            Send the return type successfully
            发送成功返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueNodeSendSuccess">
            <summary>
            Send the return type successfully
            发送成功返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallConcurrencyReadQueueNodeSendSuccess">
            <summary>
            Send the return type successfully
            发送成功返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallSend">
            <summary>
            Send data
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallSendVerifyState">
            <summary>
            The verification method sends data
            验证方法发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeSetVerifyState">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueNodeSetVerifyState">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallConcurrencyReadQueueNodeSetVerifyState">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketSetVerifyState">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCheckTask">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCheckVerifyStateTask">
            <summary>
            检查认证接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCheckSendOnlyTask">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallbackTaskCheckTask">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackCancelKeep">
            <summary>
            取消保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerAddTaskQueue">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerAddTaskQueueLowPriority">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketDeserializeMethod">
            <summary>
            反序列化方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketSendOutputMethod">
            <summary>
            Send data
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCallTaskQueueAppendQueueMethod">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketCallTaskQueueAppendLowPriorityMethod">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.asynchronousTypeIndex">
            <summary>
            异步回调类型序号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceController.GetAsynchronousTypeName">
            <summary>
            获取异步回调类型名称
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketInterfaceMethodParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerSocketParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueNodeParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallConcurrencyReadQueueNodeParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallConcurrencyReadQueueParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallTaskQueueParameterTypes">
            <summary>
            异步回调类型构造函数参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerCallbackDelegate">
            <summary>
            异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerCallbackTaskDelegate">
            <summary>
            异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerCallbackCallQueueNodeDelegate">
            <summary>
            异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerCallbackCallReadWriteQueueNodeDelegate">
            <summary>
            异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerCallbackCallConcurrencyReadQueueNodeDelegate">
            <summary>
            异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerCallbackCallTaskQueueNodeDelegate">
            <summary>
            异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackCountDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackQueueNodeDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackReadWriteQueueNodeDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackConcurrencyReadQueueNodeDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackCountQueueNodeDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackCountReadWriteQueueNodeDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackCountConcurrencyReadQueueNodeDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerKeepCallbackTaskDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateServerKeepCallbackCountTaskDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackTaskCheckTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackTaskCheckTaskAutoCancelKeepDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackTaskCheckCountTaskDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerKeepCallbackTaskCheckCountTaskAutoCancelKeepDelegate">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackTaskQueueDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CreateCommandServerKeepCallbackCountTaskQueueDelegate">
            <summary>
            保持异步回调类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallQueueNodeConstructor">
            <summary>
            服务端执行队列任务构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallReadWriteQueueNodeConstructor">
            <summary>
            服务端读写队列任务构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerCallConcurrencyReadQueueNodeConstructor">
            <summary>
            服务端支持并发读队列任务构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallbackTaskQueueTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueSendOnlyTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerCallTaskQueueVerifyStateTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.ServerKeepCallbackQueueTaskConstructor">
            <summary>
            服务端异步调用构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerCallQueueField">
            <summary>
            控制器同步调用队列字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerCallQueueLowPriorityField">
            <summary>
            控制器同步调用低优先级队列字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerCallReadWriteQueueField">
            <summary>
            控制器读写队列字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController.CommandServerControllerCallConcurrencyReadQueueField">
            <summary>
            控制器读写队列字段
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerInterfaceController`1">
            <summary>
            控制器接口信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceController`1.Create(AutoCSer.Net.CommandListener,System.String,`0,System.Func{AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerBindContextController})">
            <summary>
            创建命令服务控制器
            </summary>
            <param name="server"></param>
            <param name="controllerName"></param>
            <param name="controller"></param>
            <param name="getBindController"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.ControllerAttribute">
            <summary>
            命令控制器配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.Methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceController`1.GetMethod(System.Int32)">
            <summary>
            获取服务端接口方法信息集合
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.controllerConstructorInfo">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.controllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerInterfaceController`1.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerInterfaceController`1.Check">
            <summary>
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum">
            <summary>
            TCP 服务端接收数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyTimeout">
            <summary>
            验证超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyCommandSizeLess">
            <summary>
            验证命令数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyCommandIdentityError">
            <summary>
            验证命令序号不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataSizeError">
            <summary>
            验证数据长度解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataSizeLess">
            <summary>
            验证数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataSizeLimitError">
            <summary>
            验证数据长度超出最大限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataSizeOutOfRange">
            <summary>
            验证数据长度超出解析长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyDataDecodeError">
            <summary>
            验证数据解码失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.VerifyError">
            <summary>
            验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.ReceiceSizeLess">
            <summary>
            接收数据不完整时连续两次接收数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CommandSizeLess">
            <summary>
            命令数据不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CommandError">
            <summary>
            命令不可识别
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.DataSizeError">
            <summary>
            命令数据长度解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.DataSizeLimitError">
            <summary>
            命令数据超出最大限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.DataDecodeError">
            <summary>
            数据解码失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.BigDataDecodeError">
            <summary>
            临时数据解码失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.MergeDataSizeLimitError">
            <summary>
            合并命令数据超出最大限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.MergeDataSizeLess">
            <summary>
            合并命令数据长度不足
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CustomDataSizeError">
            <summary>
            自定义命令数据长度解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CustomCommandError">
            <summary>
            自定义命令处理错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.ShortLinkCommandError">
            <summary>
            短连接不支持系统命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.ShortLinkDataSizeError">
            <summary>
            短连接接收数据长度超出命令范围（客户端可能是长连接模式并且发送了多个命令数据）
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum">
            <summary>
            TCP 服务端接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.VerifyCommand">
            <summary>
            获取验证命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.VerifyData">
            <summary>
            获取验证数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.VerifyDataAgain">
            <summary>
            继续获取验证数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.Command">
            <summary>
            获取命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.CommandAgain">
            <summary>
            继续获取命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.Data">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.BigData">
            <summary>
            获取临时数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.CompressionData">
            <summary>
            获取压缩数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.CompressionBigData">
            <summary>
            获取临时压缩数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReceiveTypeEnum.ShortLinkClose">
            <summary>
            等待短连接客户端关闭
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerReturnValue`1">
            <summary>
            Return value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerReturnValue`1.ReturnValue">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerReturnValue`1.#ctor(`0)">
            <summary>
            异步返回值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerReturnValue`1.GetReturnValue(AutoCSer.Net.CommandServer.ServerReturnValue{`0})">
            <summary>
            获取返回值
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerReturnValue`1.SetReturnValueDelegate">
            <summary>
            Set the return value
            设置返回值
            </summary>
            <param name="returnValue"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerReturnValue`1.SetReturnValue(AutoCSer.Net.CommandServer.ServerReturnValue{`0}@,`0@)">
            <summary>
            Set the return value
            设置返回值
            </summary>
            <param name="returnValue"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerSendErrorTypeEnum">
            <summary>
            TCP 服务端发送数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSendErrorTypeEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSendErrorTypeEnum.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSendErrorTypeEnum.SendSizeLess">
            <summary>
            发送数据不完整时连续两次发送数据不足
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerSocketSendStateEnum">
            <summary>
            发送数据状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSocketSendStateEnum.Asynchronous">
            <summary>
            异步
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSocketSendStateEnum.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerSocketSendStateEnum.Synchronize">
            <summary>
            同步
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController">
            <summary>
            Task 队列控制器接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController.CommandServerCallTaskQueueNodeGetTaskQueue">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController.CommandServerKeepCallbackQueueTaskGetTaskQueue">
            <summary>
            获取命令服务 Task 队列
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2">
            <summary>
            Task 队列控制器接口信息
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.Create(AutoCSer.Net.CommandListener,System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,`1,`0})">
            <summary>
            创建命令服务控制器
            </summary>
            <param name="server"></param>
            <param name="controllerName"></param>
            <param name="getTaskQueue"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.controllerAttribute">
            <summary>
            命令控制器配置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.GetAttribute">
            <summary>
            获取命令控制器配置
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.GetMethods">
            <summary>
            获取服务端接口方法信息集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.GetMethod(System.Int32)">
            <summary>
            获取服务端接口方法信息集合
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.controllerConstructorInfo">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.controllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.controllerConstructorMessages">
            <summary>
            控制器构造提示信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.ServerTaskQueueInterfaceController`2.Check">
            <summary>
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServer.TaskQueueClientController`2">
            <summary>
            服务端 Task 队列命令客户端控制器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServer.TaskQueueClientController`2.createQueueController">
            <summary>
            创建客户端控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.TaskQueueClientController`2.#ctor(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,AutoCSer.Net.CommandServer.ClientInterfaceMethod[],System.Int32[],System.Int32,System.Func{AutoCSer.Net.CommandServer.TaskQueueClientController{`0,`1},`1,`0})">
            <summary>
            服务端 Task 队列命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="methods"></param>
            <param name="serverMethodIndexs"></param>
            <param name="verifyMethodIndex"></param>
            <param name="createQueueController"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServer.TaskQueueClientController`2.CreateQueueController(`1)">
            <summary>
            创建客户端控制器
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallLowPriorityQueue">
            <summary>
            The low-priority queue of the server synchronization thread
            服务端同步线程低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.Queue">
            <summary>
            The queue of the server synchronization thread
            服务端同步线程队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.nodeQueue">
            <summary>
            Task queue
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.head">
            <summary>
            Head node
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.currentTask">
            <summary>
            The current task execution node
            当前执行任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallLowPriorityQueue.isQueue">
            <summary>
            Has it been added to the queue
            是否已经添加到队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.#ctor(AutoCSer.Net.CommandServerCallQueue)">
            <summary>
            The low-priority queue of the server synchronization thread
            服务端同步线程低优先级队列
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.Add(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.AddOnly(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.add(AutoCSer.Threading.QueueTaskNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.Add(AutoCSer.Net.CommandServerCallLowPriorityQueue,AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.AddIsDeserialize(AutoCSer.Net.CommandServerCallLowPriorityQueue,AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.RunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallLowPriorityQueue.OnTimeout(AutoCSer.Net.CommandServerCallQueue,System.Int64)">
            <summary>
            Server-side queue timeout notification
            服务端队列超时通知
            </summary>
            <param name="queue"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallQueue">
            <summary>
            The queue of the server synchronization thread
            服务端同步线程队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.ContextObject">
            <summary>
            Queue custom context object
            队列自定义上下文对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.queue">
            <summary>
            Task queue
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.Server">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.Controller">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.WaitHandle">
            <summary>
            Queue waiting event
            队列等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.threadHandle">
            <summary>
            Thread handle
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.currentTask">
            <summary>
            The current task execution node
            当前执行任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.runSeconds">
            <summary>
            The time of the last task run
            最后一次运行任务时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.Index">
            <summary>
            Queue number
            队列编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.ThreadId">
            <summary>
            Queue thread ID
            队列线程ID
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.sendSocket">
            <summary>
            Currently sending data socket
            当前发送数据套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.outputHead">
            <summary>
            Output information header node
            输出信息头节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.outputEnd">
            <summary>
            Output information tail node
            输出信息尾节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.#ctor(AutoCSer.Net.CommandListener,AutoCSer.Net.CommandServerController,System.Int32)">
            <summary>
            The queue of the server synchronization thread
            服务端同步线程队列
            </summary>
            <param name="server"></param>
            <param name="controller"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.Close">
            <summary>
            Close the execution queue
            关闭执行队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.Add(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.AddOnly(AutoCSer.Threading.QueueTaskNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.Add(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.AddIsDeserialize(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.run">
            <summary>
            Execute the task thread
            执行任务线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.CreateLink">
            <summary>
            Create a linked list of low-priority task queues
            创建低优先级任务队列链表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.OnTimerAsync">
            <summary>
            Timeout check
            超时检查
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueue.sendTimestamp">
            <summary>
            The timestamp for sending data
            发送数据时间戳
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.send">
            <summary>
            Send data
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueue.Send(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            Send data
            </summary>
            <param name="socket"></param>
            <param name="output"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallQueueNode">
            <summary>
            Server-side queue task nodes
            服务端队列任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.Socket">
            <summary>
            Command server socket
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.OfflineCount">
            <summary>
            The server side goes offline to count the object
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.CallbackIdentity">
            <summary>
            Current session callback identity
            当前会话回调标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.methodType">
            <summary>
            Server-side method call types
            服务端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueNode.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.#ctor">
            <summary>
            Server-side queue task nodes
            服务端队列任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerMethodTypeEnum)">
            <summary>
            Server-side queue task nodes
            服务端队列任务节点
            </summary>
            <param name="socket"></param>
            <param name="methodType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.OnTimeout(AutoCSer.Net.CommandServerCallQueue,System.Int64)">
            <summary>
            Server-side queue timeout notification
            服务端队列超时通知
            </summary>
            <param name="queue"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.checkOfflineCount">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.CheckOfflineCount(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.OnException(System.Exception)">
            <summary>
            Queue task execution exception
            队列任务执行异常
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.SocketIsClose(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Determine whether the socket has been closed
            判断套接字是否已经关闭
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.SetIsDeserialize(AutoCSer.Net.CommandServerCallQueueNode,System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="node"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.GetSocket(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.CloseShortLink(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Close the short connection
            关闭短连接
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.Send(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServerCallQueue)">
            <summary>
            Send the return type successfully
            发送成功返回类型
            </summary>
            <param name="node"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.send``1(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="queue"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.Send``1(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="node"></param>
            <param name="queue"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.sendReturnValue``1(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="queue"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.SendReturnValue``1(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            The server queue task sends data
            服务端队列任务发送数据
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="node"></param>
            <param name="queue"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueNode.SetVerifyState(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
            <param name="node"></param>
            <param name="verifyState"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallReadQueue">
            <summary>
            A read operation queue for synchronous read and write operations on the server side (mainly used in scenarios where in-memory database nodes support parallel reading when obtaining persistent data, and can also be used in scenarios where multiple threads support concurrent reading. It is not suitable for scenarios with high write operation frequencies)
            服务端同步读写的读操作队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景，也可用于支持多线程并发读取的场景，不适合写操作频率高的需求）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadQueue.#ctor">
            <summary>
            Empty queue
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadQueue.#ctor(AutoCSer.Net.CommandListener,AutoCSer.Net.CommandServerController,System.Int32)">
            <summary>
            A read operation queue for synchronous read and write operations on the server side (mainly used in scenarios where in-memory database nodes support parallel reading when obtaining persistent data, and can also be used in scenarios where multiple threads support concurrent reading. It is not suitable for scenarios with high write operation frequencies)
            服务端同步读写的读操作队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景，也可用于支持多线程并发读取的场景，不适合写操作频率高的需求）
            </summary>
            <param name="server"></param>
            <param name="controller"></param>
            <param name="maxConcurrency">The maximum concurrent number of read operations, if less than or equal to 0, indicates the number of processors minus the set value (for example, if the number of processors is 4 and the concurrent number is set to -1, then the concurrent number of reads is 4 -1 = 3)
            最大读取操作并发数量，小于等于 0 表示处理器数量减去设置值（比如处理器数量为 4，并发数量设置为 -1，则读取并发数量为 4 - 1 = 3）</param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadQueue.Null">
            <summary>
            Empty queue
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallReadWriteQueue">
            <summary>
            The server synchronizes the read and write queues
            服务端同步读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueue.Queue">
            <summary>
            The new execution task queue
            新的执行任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueue.ContextObject">
            <summary>
            Queue custom context object
            队列自定义上下文对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueue.Server">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueue.Controller">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueue.threadHandle">
            <summary>
            Thread handle
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueue.QueueWaitHandle">
            <summary>
            The new task queue is waiting for events
            新任务队列等待事件
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.#ctor">
            <summary>
            Empty queue
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.#ctor(AutoCSer.Net.CommandListener,AutoCSer.Net.CommandServerController)">
            <summary>
            A synchronous queue on the server side that supports parallel reading (mainly used in scenarios where in-memory database nodes support parallel reading when obtaining persistent data)
            服务端支持并行读的同步队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景）
            </summary>
            <param name="server"></param>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.push(AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add task nodes
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.ConcurrencyRead(AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add a concurrent read operation task node. If read operations are allowed, the tasks will be executed synchronously
            添加并发读操作任务节点，允许读取操作则同步执行任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.AppendRead(AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add the read operation task node
            添加读操作任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.AppendReadOnly(AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add the read operation task node
            添加读操作任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.AppendRead(AutoCSer.Net.CommandServerCallReadWriteQueue,AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add the read operation task node
            添加读操作任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.AppendWrite(AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add the write operation task node
            添加写操作任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.AppendWriteOnly(AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add the write operation task node
            添加写操作任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.AppendWrite(AutoCSer.Net.CommandServerCallReadWriteQueue,AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add the write operation task node
            添加写操作任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.AppendReadIsDeserialize(AutoCSer.Net.CommandServerCallReadWriteQueue,AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add the read operation task node
            添加读操作任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueue.AppendWriteIsDeserialize(AutoCSer.Net.CommandServerCallReadWriteQueue,AutoCSer.Net.CommandServer.ReadWriteQueueNode)">
            <summary>
            Add the write operation task node
            添加写操作任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallReadWriteQueueNode">
            <summary>
            The server synchronously reads and writes the queue nodes
            服务端同步读写队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueueNode.Socket">
            <summary>
            Command server socket
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueueNode.OfflineCount">
            <summary>
            The server side goes offline to count the object
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallReadWriteQueueNode.CallbackIdentity">
            <summary>
            Current session callback identity
            当前会话回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.#ctor">
            <summary>
            The server synchronously reads and writes the queue nodes
            服务端同步读写队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerMethodTypeEnum)">
            <summary>
            The server synchronously reads and writes the queue nodes
            服务端同步读写队列节点
            </summary>
            <param name="socket"></param>
            <param name="methodType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.checkOfflineCount">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.CheckOfflineCount(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.OnException(AutoCSer.Net.CommandServerCallWriteQueue,System.Exception)">
            <summary>
            Queue task execution exception
            队列任务执行异常
            </summary>
            <param name="queue"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.SocketIsClose(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            Determine whether the socket has been closed
            判断套接字是否已经关闭
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.SetIsDeserialize(AutoCSer.Net.CommandServerCallReadWriteQueueNode,System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="node"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.GetSocket(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.CloseShortLink(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            Close the short connection
            关闭短连接
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.send">
            <summary>
            Send the return type successfully
            发送成功返回类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.Send(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            Send the return type successfully
            发送成功返回类型
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.send``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.Send``1(AutoCSer.Net.CommandServerCallReadWriteQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="node"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.sendReturnValue``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.SendReturnValue``1(AutoCSer.Net.CommandServerCallReadWriteQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            The server queue task sends data
            服务端执行队列任务发送数据
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="node"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallReadWriteQueueNode.SetVerifyState(AutoCSer.Net.CommandServerCallReadWriteQueueNode,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
            <param name="node"></param>
            <param name="verifyState"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallWriteQueue">
            <summary>
            A write operation queue for synchronous read and write operations on the server side (mainly used in scenarios where in-memory database nodes support parallel reading when obtaining persistent data, and can also be used in scenarios where multiple threads support concurrent reading. It is not suitable for scenarios with high write operation frequencies)
            服务端同步读写的写操作队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景，也可用于支持多线程并发读取的场景，不适合写操作频率高的需求）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallWriteQueue.ConcurrencyReadThread">
            <summary>
            Concurrent read operation thread
            并发读操作线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallWriteQueue.writeHead">
            <summary>
            Write the first node of the operation task
            写操作任务首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallWriteQueue.writeWaitHandle">
            <summary>
            Write operation waiting event
            写操作等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallWriteQueue.readQueue">
            <summary>
            The queue of read tasks waiting to be executed
            等待执行的读取任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallWriteQueue.readThreads">
            <summary>
            Idle read operation thread collection
            空闲读操作线程集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallWriteQueue.readCount">
            <summary>
            The current number of read operations
            当前读取操作数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallWriteQueue.isConcurrencyRead">
            <summary>
            The current status of concurrent read operations allows concurrent reads without being restricted by write operations
            当前并发读操作状态，允许并发读取不受写操作限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallWriteQueue.IsClose">
            <summary>
            Has the queue been closed
            是否已经关闭队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.#ctor">
            <summary>
            Empty queue
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.#ctor(AutoCSer.Net.CommandListener,AutoCSer.Net.CommandServerController,System.Int32)">
            <summary>
            A write operation queue for synchronous read and write operations on the server side (mainly used in scenarios where in-memory database nodes support parallel reading when obtaining persistent data, and can also be used in scenarios where multiple threads support concurrent reading. It is not suitable for scenarios with high write operation frequencies)
            服务端同步读写的写操作队列（主要用于支持内存数据库节点获取持久化数据时支持并行读取的场景，也可用于支持多线程并发读取的场景，不适合写操作频率高的需求）
            </summary>
            <param name="server"></param>
            <param name="controller"></param>
            <param name="maxConcurrency">The maximum concurrent number of read operations, if less than or equal to 0, indicates the number of processors minus the set value (for example, if the number of processors is 4 and the concurrent number is set to -1, then the concurrent number of reads is 4 -1 = 3)
            最大读取操作并发数量，小于等于 0 表示处理器数量减去设置值（比如处理器数量为 4，并发数量设置为 -1，则读取并发数量为 4 - 1 = 3）</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.Close">
            <summary>
            Close the queue
            关闭队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.run">
            <summary>
            Task allocation thread
            任务分配线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.GetRead">
            <summary>
            Get the next read task
            获取下一个读取任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.Free(AutoCSer.Net.CommandServer.ReadQueueThread)">
            <summary>
            The read operation thread is added to the idle collection
            读取操作线程添加到空闲集合
            </summary>
            <param name="thread"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.CloseReadThread">
            <summary>
            Close the read operation thread
            关闭读取操作线程
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.Free(AutoCSer.Net.CommandServer.ConcurrencyReadWriteQueueThread)">
            <summary>
            The concurrent read operation task processing has been completed
            并发读操作任务处理结束
            </summary>
            <param name="thread"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallWriteQueue.CloseConcurrencyReadThread">
            <summary>
            Close the read operation thread
            关闭读取操作线程
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallbackTaskQueueTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallbackTaskQueueTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTaskQueueTask.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTaskQueueTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTaskQueueTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTaskQueueTask.checkCallTask(System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTaskQueueTask.CheckCallTask(AutoCSer.Net.CommandServerCallbackTaskQueueTask,System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue">
            <summary>
            The server asynchronously calls the low-priority queue (mainly used for write operations, transaction read operations, and updating the queue memory cache status)
            服务端异步调用低优先级队列（主要用于写操作、事务读操作、更新队列内存缓存状态）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.Queue">
            <summary>
            Task queue
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.LowPriorityQueue">
            <summary>
            Low-priority task queue
            低优先级任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.lowPriorityQueue">
            <summary>
            Low-priority task queue node
            低优先级任务队列节点
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.IsEmptyLowPriorityQueue">
            <summary>
            Whether the queue of low-priority tasks is empty
            低优先级任务队列是否为空
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.timeoutLink">
            <summary>
            Execute timeout to check the task list
            执行超时检查任务链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.Server">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.KeyString">
            <summary>
            Gets the queue keyword string
            获取队列关键字字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.ContextObject">
            <summary>
            Queue custom context object
            队列自定义上下文对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.TaskQueue">
            <summary>
            Task queue controller service
            Task 队列控制器服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.MaxConcurrent">
            <summary>
            The maximum number of concurrent reading tasks
            最大读并发任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.LowPriorityWaitCount">
            <summary>
            Write operations wait for the number of read operation tasks
            写操作等待读取操作任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.canConcurrentCount">
            <summary>
            The number of concurrent tasks can be increased
            可增加并发任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.currentLowPriorityWaitCount">
            <summary>
            The current number of tasks waiting for execution in the low-priority queue is less than or equal to 0 to trigger the execution of tasks in the low-priority queue
            当前低优先级队列等待任务执行数量，小于等于 0 触发低优先级队列任务执行
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.isRunTask">
            <summary>
            Is any task is running
            是否正在运行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.waitLock">
            <summary>
            Wait for the task to end and access the lock
            等待任务结束访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.AppendTaskSeconds">
            <summary>
            The time of the last task addition
            最后添加任务时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.resideCount">
            <summary>
            Queue residency application count
            队列驻留申请计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.WaitType">
            <summary>
            The queue for asynchronous server calls waiting type
            服务端异步调用队列等待类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.checkTimeout">
            <summary>
            Whether it is necessary to check the queue execution timeout
            是否需要检查队列执行超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.isReside">
            <summary>
            Whether the queue resides in memory by default
            队列是否默认驻留内存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.currentTask">
            <summary>
            The current task execution node
            当前执行任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.nextTask">
            <summary>
            The next task ready for execution
            下一个准备执行的任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.#ctor">
            <summary>
            Default empty queue
            默认空队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.#ctor(AutoCSer.Net.CommandServerCallTaskQueueSet,System.Boolean)">
            <summary>
            The queue for asynchronous server calls
            服务端异步调用队列
            </summary>
            <param name="queueSet"></param>
            <param name="isReside"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.#ctor(AutoCSer.Net.CommandServerController)">
            <summary>
            The queue for asynchronous server calls
            服务端异步调用队列
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.run">
            <summary>
            Start executing tasks
            开始执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.runLowPriority">
            <summary>
            Run low-priority tasks
            运行低优先级任务
            </summary>
            <returns>Whether the next task needs to be carried out
            是否需要继续执行下一个任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.wait">
            <summary>
            Release the task ownership and attempt to obtain the task ownership
            释放任务所有权并尝试获取任务所有权
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.checkWait">
            <summary>
            Try to obtain the ownership of the task
            尝试获取任务所有权
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.OnCompleted(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Try to obtain the ownership of the task after it is completed
            任务完成以后尝试获取任务所有权
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.appendRemove">
            <summary>
            Add to the deletion queue
            添加到删除队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.CheckTaskTimeoutAsync(System.Int32)">
            <summary>
            Task execution timeout check
            任务执行超时检查
            </summary>
            <param name="keepSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.popLowPriority">
            <summary>
            Pop up low-priority task
            弹出低优先级任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.AddLowPriority(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add low-priority task
            添加低优先级任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue.AddLowPriorityOnly(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add low-priority task
            添加低优先级任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue`1">
            <summary>
            The server asynchronously calls the low-priority queue
            服务端异步调用低优先级队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue`1.queueSet">
            <summary>
            The collection of asynchronous call queues on the server side
            服务端异步调用队列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue`1.Key">
            <summary>
            Queue keyword
            队列关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue`1.#ctor">
            <summary>
            Default empty queue
            默认空队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskLowPriorityQueue`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueSet{`0},System.Boolean,`0)">
            <summary>
            The queue for asynchronous server calls
            服务端异步调用队列
            </summary>
            <param name="queueSet"></param>
            <param name="isReside"></param>
            <param name="key"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueue">
            <summary>
            The queue for asynchronous server calls (mainly used for reading the queue's memory cache status, except for the initialization of the queue context, try to avoid IO blocking operations as much as possible; Dirty read database operations should be handled using ordinary concurrent tasks instead of read-write queue operations.
            服务端异步调用队列（主要用于读取队列内存缓存状态，除了队列上下文初始化尽量不要有 IO 阻塞操作；脏读数据库操作应该使用普通并发任务处理，不应该使用读写队列操作）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue.contextLock">
            <summary>
            Queue context asynchronous lock
            队列上下文异步锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.#ctor">
            <summary>
            Default empty queue
            默认空队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.#ctor(AutoCSer.Net.CommandServerCallTaskQueueSet,System.Boolean)">
            <summary>
            The queue for asynchronous server calls (mainly used for reading the queue's memory cache status, except for the initialization of the queue context, try to avoid IO blocking operations as much as possible; Dirty read database operations should be handled using ordinary concurrent tasks instead of read-write queue operations.
            服务端异步调用队列（主要用于读取队列内存缓存状态，除了队列上下文初始化尽量不要有 IO 阻塞操作；脏读数据库操作应该使用普通并发任务处理，不应该使用读写队列操作）
            </summary>
            <param name="queueSet"></param>
            <param name="isReside"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.#ctor(AutoCSer.Net.CommandServerController)">
            <summary>
            The queue for asynchronous server calls (mainly used for reading the queue's memory cache status, except for the initialization of the queue context, try to avoid IO blocking operations as much as possible; Dirty read database operations should be handled using ordinary concurrent tasks instead of read-write queue operations.
            服务端异步调用队列（主要用于读取队列内存缓存状态，除了队列上下文初始化尽量不要有 IO 阻塞操作；脏读数据库操作应该使用普通并发任务处理，不应该使用读写队列操作）
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.EnterContext">
            <summary>
            Enter the queue context asynchronous lock (used in the case where multiple read tasks concurrently operate ContextObject)
            进入队列上下文异步锁（用于多个读取任务并发操作 ContextObject 的情况）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.ExitContext">
            <summary>
            Release the asynchronous lock of the queue context (used in the case where multiple read tasks concurrently operate the context object)
            释放队列上下文异步锁（用于多个读取任务并发操作 ContextObject 的情况）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.Add(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.AddOnly(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue.checkQueueWait">
            <summary>
            Try to obtain the ownership of the task
            尝试获取任务所有权
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueue`1">
            <summary>
            The queue for asynchronous server calls
            服务端异步调用队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue`1.RemoveNext">
            <summary>
            The next queue waiting to be deleted
            下一个等待删除队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue`1.RemoveSeconds">
            <summary>
            Waiting time for deletion
            等待删除时间
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskQueue`1.KeyString">
            <summary>
            Gets the queue keyword string
            获取队列关键字字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.#ctor">
            <summary>
            Default empty queue
            默认空队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueSet{`0},System.Boolean,`0)">
            <summary>
            The queue for asynchronous server calls
            服务端异步调用队列
            </summary>
            <param name="queueSet"></param>
            <param name="isReside"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.AddOnlyReside(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.AddLowPriorityOnlyReside(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add low-priority task
            添加低优先级任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.appendRemove">
            <summary>
            Add to the deletion queue
            添加到删除队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.SetRemoveSeconds(System.Int32)">
            <summary>
            Set the waiting time for deletion
            设置等待删除时间
            </summary>
            <param name="timeoutSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.CheckRemove(AutoCSer.Net.CommandServerCallTaskQueue{`0}@)">
            <summary>
            Determine whether the queue can be deleted
            判断队列是否可以删除
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueue`1.CheckRemove">
            <summary>
            Determine whether the queue can be deleted
            判断队列是否可以删除
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueue`1.Null">
            <summary>
            Default empty queue
            默认空队列
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueNode">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.Socket">
            <summary>
            Command server socket
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.OfflineCount">
            <summary>
            The server side goes offline to count the object
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.CallbackIdentity">
            <summary>
            Current session callback identity
            当前会话回调标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.Queue">
            <summary>
            The queue for asynchronous server calls
            服务端异步调用队列
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskQueueNode.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.RunSeconds">
            <summary>
            运行任务时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.methodType">
            <summary>
            Server-side method call types
            服务端方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueNode.autoCancelKeep">
            <summary>
            是否自动取消回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.#ctor">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerMethodTypeEnum)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="socket"></param>
            <param name="methodType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.checkOfflineCount">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.RunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
            <returns>是否同步完成任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.TryRunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.RunTask(AutoCSer.Net.CommandServerCallTaskQueueNode@)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="next"></param>
            <returns>是否同步完成任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.LowPriorityRunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
            <returns>是否同步完成任务</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.GetRunSeconds(AutoCSer.Net.CommandServerCallTaskQueueNode@)">
            <summary>
            获取运行任务时间
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.OnTimeout(System.Int64)">
            <summary>
            Server-side queue timeout notification
            服务端队列超时通知
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.GetSocket(AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.GetSocket(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.getTaskQueue">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueNode.GetTaskQueue(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.checkCallTask(System.Threading.Tasks.Task{AutoCSer.Net.CommandServerSendOnly})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask.CheckCallTask(AutoCSer.Net.CommandServerCallTaskQueueSendOnlyTask,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerSendOnly})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueSet">
            <summary>
            服务端异步调用队列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.queueLock">
            <summary>
            队列集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.controllerCreator">
            <summary>
            Task 队列服务控制器创建器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.QueueMaxConcurrent">
            <summary>
            异步队列最大读并发任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.QueueWaitCount">
            <summary>
            异步队列写操作等待读取操作任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.timeoutSeconds">
            <summary>
            异步队列驻留超时秒数，等待指定时间以后没有新任务再删除，负数表示永久驻留内存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet.CheckTaskTimeout">
            <summary>
            是否检查队列执行超时
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet.#ctor(AutoCSer.Net.CommandListener,System.Boolean,System.Int32)">
            <summary>
            服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="checkTaskTimeout"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet.Close">
            <summary>
            关闭服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet.CheckTaskTimeoutAsync(System.Int32)">
            <summary>
            队列任务执行超时检查
            </summary>
            <param name="keepSeconds"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet.Set(AutoCSer.Net.CommandServerInterfaceControllerCreator)">
            <summary>
            设置 Task 队列服务控制器创建器
            </summary>
            <param name="controllerCreator"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueSet`1">
            <summary>
            服务端异步调用队列集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.queues">
            <summary>
            队列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.lastQueue">
            <summary>
            最后一次访问队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.removeHead">
            <summary>
            等待删除的队列链表首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.removeEnd">
            <summary>
            等待删除的队列链表尾首节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.#ctor(AutoCSer.Net.CommandListener,System.Boolean,System.Int32)">
            <summary>
            服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="checkTaskTimeout">是否检查队列执行超时</param>
            <param name="timeoutSeconds">异步队列驻留超时秒数，等待指定时间以后没有新任务再删除，负数表示永久驻留内存</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.#ctor(AutoCSer.Net.CommandListener,System.Boolean)">
            <summary>
            服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="checkTaskTimeout">是否检查队列执行超时</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.createQueue(`0)">
            <summary>
            创建异步队列
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.get(`0)">
            <summary>
            获取队列
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Add(`0,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Add(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task})">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Add(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task})">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Add(`0,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddTask``1(`0,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddExceptionTask``1(`0,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriority(`0,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriority(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task})">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriority(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task})">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask``1(`0,System.Func{AutoCSer.Net.CommandServerCallTaskQueue,`0,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriority(`0,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityTask``1(`0,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AddLowPriorityExceptionTask``1(`0,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="key"></param>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.Close">
            <summary>
            关闭服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.onClosed">
            <summary>
            关闭队列处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.CheckTaskTimeoutAsync(System.Int32)">
            <summary>
            队列执行超时检查
            </summary>
            <param name="keepSeconds"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.AppendRemove(AutoCSer.Net.CommandServerCallTaskQueue{`0})">
            <summary>
            添加到过期删除队列
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.onRemoved(AutoCSer.Net.CommandServerCallTaskQueue{`0})">
            <summary>
            队列删除以后的处理
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueSet`1.OnTimer">
            <summary>
            队列过期删除检查
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueSet`1.typeAttribute">
            <summary>
            异步任务队列关键字类型自定义属性
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.checkCallTask(System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask.CheckCallTask(AutoCSer.Net.CommandServerCallTaskQueueTask,System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueTask`1">
            <summary>
            服务端异步调用队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTask`1.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTask`1.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.checkCallTask(System.Threading.Tasks.Task{`0})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTask`1.CheckCallTask(AutoCSer.Net.CommandServerCallTaskQueueTask{`0},System.Threading.Tasks.Task{`0})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueTypeAttribute">
            <summary>
            异步任务队列关键字类型自定义属性
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTypeAttribute.TimeoutSeconds">
            <summary>
            异步队列驻留超时秒数，等待指定时间以后没有新任务再删除，负数表示永久驻留内存
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueTypeSet">
            <summary>
            异步任务队列集合管理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.queues">
            <summary>
            队列集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.#ctor(AutoCSer.Net.CommandListener)">
            <summary>
            异步任务队列集合管理
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.TryGet``1">
            <summary>
            获取服务端异步调用队列
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.Get``1">
            <summary>
            获取服务端异步调用队列
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.createQueue``1">
            <summary>
            创建服务端执行队列
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.Close">
            <summary>
            关闭服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.onClosed">
            <summary>
            关闭队列处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueTypeSet.OnTimerAsync">
            <summary>
            队列任务执行超时检查
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.checkCallTask(System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask.CheckCallTask(AutoCSer.Net.CommandServerCallTaskQueueVerifyStateTask,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerControllerCallTaskQueue">
            <summary>
            服务端控制器异步调用队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerCallTaskQueue.controller">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerControllerCallTaskQueue.KeyString">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerControllerCallTaskQueue.#ctor">
            <summary>
            默认空服务端异步调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerControllerCallTaskQueue.#ctor(AutoCSer.Net.CommandServerController)">
            <summary>
            服务端执行队列
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerControllerCallTaskQueue.appendRemove">
            <summary>
            添加到删除队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerCallTaskQueue.Null">
            <summary>
            默认空服务端异步调用队列
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackQueueTask">
            <summary>
            服务端异步调用队列保持回调任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask.keepCallback">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerMethodTypeEnum,System.Boolean)">
            <summary>
            服务端异步调用保持回调队列任务
            </summary>
            <param name="socket"></param>
            <param name="methodType"></param>
            <param name="autoCancelKeep"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.checkCallTask(System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.CheckCallTask(AutoCSer.Net.CommandServerKeepCallbackQueueTask,System.Threading.Tasks.Task)">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.GetSocket(AutoCSer.Net.CommandServerKeepCallbackQueueTask,AutoCSer.Net.CommandServerKeepCallback,AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="keepCallback"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.getTaskQueue(AutoCSer.Net.CommandServerKeepCallback)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask.GetTaskQueue(AutoCSer.Net.CommandServerKeepCallbackQueueTask,AutoCSer.Net.CommandServerKeepCallback)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="task"></param>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1">
            <summary>
            服务端异步调用队列保持回调任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.keepCallback">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.callbackTask">
            <summary>
            回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            服务端异步调用保持回调队列任务
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.onCallCompleted">
            <summary>
            调用接口完成
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.checkCallTask(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.CheckCallTask(AutoCSer.Net.CommandServerKeepCallbackQueueTask{`0},System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            获取接口任务以后检查是否完成
            </summary>
            <param name="node"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.GetSocket(AutoCSer.Net.CommandServerKeepCallbackQueueTask{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerCallTaskQueue@)">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.getTaskQueue(AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.GetTaskQueue(AutoCSer.Net.CommandServerKeepCallbackQueueTask{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            获取命令服务 Task 队列
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackQueueTask`1.GetSocketDelegate">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="task"></param>
            <param name="method"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClient">
            <summary>
            Command client
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.Config">
            <summary>
            Command server configuration
            命令服务配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.ServerName">
            <summary>
            The service name is a unique identifier of the server registration. If the server registration is not required, it is only used for log output
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.Log">
            <summary>
            Log processing interface
            日志处理接口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.Host">
            <summary>
            The server listens to host and port information
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.IsDefaultController">
            <summary>
            When the client is initialized, whether to create a default controller instance that returns an error state
            客户端初始化的时候，是否创建返回错误状态的默认控制器实例
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.BinaryDeserializeConfig">
            <summary>
            Binary deserialization configuration parameters
            二进制反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.ReceiveBufferPool">
            <summary>
            Receive data buffer pool
            接受数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.SendBufferPool">
            <summary>
            Send data buffer pool
            发送数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.socketLock">
            <summary>
            Client socket operation lock
            客户端套接字操作锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.SocketEvent">
            <summary>
            Command client socket event
            命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.serviceRegistrar">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.ControllerCreators">
            <summary>
            Collection of client controller creators
            客户端控制器创建器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.callbackQueues">
            <summary>
            The client callback queue array
            客户端回调队列数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.callbackQueueLock">
            <summary>
            The client callback queue array accesses the lock
            客户端回调队列数组访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.CreateVersion">
            <summary>
            Create a client socket update version number
            创建客户端套接字更新版本号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.VerifyErrorCount">
            <summary>
            Verify the number of consecutive failures
            验证连续失败次数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.CurrentSocket">
            <summary>
            Gets the current client socket
            获取当前客户端套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.IsSocketClosed">
            <summary>
            Determines whether the current client socket is closed
            判断当前客户端套接字是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.socketTask">
            <summary>
            The current client socket
            当前客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.socketEventTask">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.createSocket">
            <summary>
            The client socket being created
            正在创建的客户端套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.IsDisposed">
            <summary>
            Whether resources have been released
            是否已经释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.IsReverse">
            <summary>
            Is the reverse service
            是否反向服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClient.IsShortLink">
            <summary>
            Is the connection short
            是否短连接
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClient.DefaultControllerReturnType">
            <summary>
            The default initialization controller call return type
            默认初始化控制器调用返回类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.#ctor(AutoCSer.Net.CommandClientConfig,AutoCSer.Net.CommandClientInterfaceControllerCreator[])">
            <summary>
            Command client
            </summary>
            <param name="config">Command server configuration
            命令服务配置</param>
            <param name="creators">Client controller creator collection
            客户端控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.#ctor(AutoCSer.Net.CommandReverseListener,AutoCSer.Net.CommandClientInterfaceControllerCreator[])">
            <summary>
            Reverse command client
            反向命令客户端
            </summary>
            <param name="listener"></param>
            <param name="creators"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.AppendCreators(AutoCSer.Net.CommandClientInterfaceControllerCreator[],AutoCSer.LeftArray{AutoCSer.Net.CommandClientInterfaceControllerCreator}@)">
            <summary>
            Add the collection of client controller creators
            添加客户端控制器创建器集合
            </summary>
            <param name="creators"></param>
            <param name="controllerCreators"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.AutoCreateSocket">
            <summary>
            Automatically start the connection
            自动启动连接
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.IsCreateVersion(System.Int32)">
            <summary>
            Verify the updated version number of the service
            验证服务更新版本号
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.ConnectFail(System.Net.IPEndPoint)">
            <summary>
            Service connection failed
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.ServerEndPointChanged(System.Net.IPEndPoint)">
            <summary>
            The server listens for address update notifications
            服务端监听地址更新通知
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetSocketAsync">
            <summary>
            Try to wait for a client socket
            尝试等待客户端套接字
            </summary>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.getSocketAsync">
            <summary>
            Try the client socket
            尝试客户端套接字
            </summary>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetSocketEvent">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.getSocketEvent">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetSocketEvent``1">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnCreateError(AutoCSer.Net.CommandClientSocket)">
            <summary>
            The initialization of the command client socket failed
            命令客户端套接字初始化失败
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnClosed(AutoCSer.Net.CommandClientSocket)">
            <summary>
            Close the command client socket
            关闭命令客户端套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnTimeout(AutoCSer.Net.CommandServer.Command)">
            <summary>
            Command timeout triggers an event
            命令超时触发事件
            </summary>
            <param name="head">Timeout first node</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            The processing after the socket verification is passed
            套接字验证通过以后的处理
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.CreateNewSocket(AutoCSer.Net.CommandClientSocket)">
            <summary>
            A socket operation failed to create version detection
            套接字操作失败重新创建版本检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.CreateNewSocketAsync(AutoCSer.Net.CommandClientSocket)">
            <summary>
            A socket operation failed to create version detection
            套接字操作失败重新创建版本检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetControllerCreator(System.String)">
            <summary>
            Gets the extension controller creator
            获取扩展控制器创建器
            </summary>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.getClientCallQueue(System.Int32)">
            <summary>
            Get the client execution queue
            获取客户端执行队列
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetCommandClientCallQueue(System.Int32)">
            <summary>
            Get the client execution queue
            获取客户端执行队列
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.GetCommandClientCallQueueLowPriority(System.Int32)">
            <summary>
            Get the client execution queue (low priority)
            获取客户端执行队列（低优先级）
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClient.OnQueueTimeout(AutoCSer.Net.CommandClientCallQueue,System.Int64)">
            <summary>
            Queue task execution timeout notification
            队列任务执行超时通知
            </summary>
            <param name="queue">Client execution queue
            客户端执行队列</param>
            <param name="seconds">Current task execution seconds
            当前任务执行秒数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClient`1">
            <summary>
            Interface symmetry command client
            接口对称命令客户端
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandClient`1.#ctor(AutoCSer.Net.CommandClientConfig{`0})">
            <summary>
            Interface symmetry command client
            接口对称命令客户端
            </summary>
            <param name="config">Command server configuration
            命令服务配置</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClient`1.GetSocketEvent">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <returns>Return null on failure</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientDefaultController">
            <summary>
            The client initializes the controller by default (to avoid null reference exceptions before the connection is established)
            客户端默认初始化控制器（避免连接建立之前产生 null 引用异常）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientDefaultController.Client">
            <summary>
            Command client
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientDefaultController.DefaultControllerReturnType">
            <summary>
            The default initialization controller call return type
            默认初始化控制器调用返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientDefaultController.callQueue">
            <summary>
            The client executes the queue
            客户端执行队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.#ctor">
            <summary>
            默认空控制器
            Default empty controller
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.#ctor(AutoCSer.Net.CommandClient,System.String)">
            <summary>
            The client initializes the controller by default (to avoid null reference exceptions before the connection is established)
            客户端默认初始化控制器（避免连接建立之前产生 null 引用异常）
            </summary>
            <param name="client">Command client</param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.Synchronous(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Synchronous return
            同步返回
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultSynchronous``1">
            <summary>
            Synchronous return
            同步返回
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.SendOnly(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.Callback(AutoCSer.Net.CommandClientDefaultController,AutoCSer.Net.CommandClientCallback)">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultCallback``1(AutoCSer.Net.CommandClientCallback{``0})">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.Callback(AutoCSer.Net.CommandClientDefaultController,System.Action{AutoCSer.Net.CommandClientReturnValue})">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultCallbackAction``1(System.Action{AutoCSer.Net.CommandClientReturnValue{``0}})">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.CallbackQueue(AutoCSer.Net.CommandClientCallbackQueueNode)">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.CallbackQueue(AutoCSer.Net.CommandClientDefaultController,AutoCSer.Net.CommandClientCallbackQueueNode)">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <param name="controller"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultCallbackQueue``1(AutoCSer.Net.CommandClientCallbackQueueNode{``0})">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.CallbackQueue(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.CallbackQueue(AutoCSer.Net.CommandClientDefaultController,System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <param name="controller"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultCallbackActionQueue``1(System.Action{AutoCSer.Net.CommandClientReturnValue{``0},AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.KeepCallback(AutoCSer.Net.CommandClientDefaultController,AutoCSer.Net.CommandClientKeepCallback)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultKeepCallback``1(AutoCSer.Net.CommandClientKeepCallback{``0})">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.KeepCallback(AutoCSer.Net.CommandClientDefaultController,System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultKeepCallbackAction``1(System.Action{AutoCSer.Net.CommandClientReturnValue{``0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.KeepCallbackQueue(AutoCSer.Net.CommandClientKeepCallbackQueue)">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.KeepCallbackQueue(AutoCSer.Net.CommandClientDefaultController,AutoCSer.Net.CommandClientKeepCallbackQueue)">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <param name="controller"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultKeepCallbackQueue``1(AutoCSer.Net.CommandClientKeepCallbackQueue{``0})">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.KeepCallbackQueue(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.KeepCallbackQueue(AutoCSer.Net.CommandClientDefaultController,System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <param name="controller"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultKeepCallbackActionQueue``1(System.Action{AutoCSer.Net.CommandClientReturnValue{``0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.ReturnType(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultReturnValue``1">
            <summary>
            Return value command
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.ReturnTypeQueue(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultReturnValueQueue``1">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.Enumerator(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultEnumerator``1">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.EnumeratorQueue(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.DefaultEnumeratorQueue``1">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.Throw(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Throw an exception
            抛出异常
            </summary>
            <param name="controller"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandClientDefaultController.Null">
            <summary>
            默认空控制器
            Default empty controller
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientDefaultController.GetNull(AutoCSer.Net.CommandClient,System.String)">
            <summary>
            Get the empty controller
            获取空控制器
            </summary>
            <param name="client"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue})">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue})~AutoCSer.Net.CommandClientCallback">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.Get(System.Action{AutoCSer.Net.CommandClientReturnValue})">
            <summary>
            Get the client callback delegate
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback.SuccessCallback">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback.SuccessCallback.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.SuccessCallback.#ctor(System.Action)">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.SuccessCallback.Callback(AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.op_Implicit(System.Action)~AutoCSer.Net.CommandClientCallback">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.Callback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage">Error message</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback.Cast``2(System.Action{AutoCSer.Net.CommandClientReturnValue{``1}},System.Func{``0,``1})">
            <summary>
            Type conversion of the callback return value
            回调返回值类型转换
            </summary>
            <typeparam name="RT">Service API return type
            服务 API 返回类型</typeparam>
            <typeparam name="T">Target return value type
            目标返回值类型</typeparam>
            <param name="callback"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback`1">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`1.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.#ctor(System.Action{`0},System.Action{AutoCSer.Net.CommandClientReturnTypeEnum})">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
            <param name="callback">Success value callback delegate
            成功值回调委托</param>
            <param name="errorCallback">Error return value type callback delegate
            错误成功值类型回调委托</param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback`1.ErrorCallback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`1.ErrorCallback.callback">
            <summary>
            Success value callback delegate
            成功值回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`1.ErrorCallback.errorCallback">
            <summary>
            Error return value type callback delegate
            错误成功值类型回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.ErrorCallback.#ctor(System.Action{`0},System.Action{AutoCSer.Net.CommandClientReturnTypeEnum})">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
            <param name="callback">Success value callback delegate
            成功值回调委托</param>
            <param name="errorCallback">Error return value type callback delegate
            错误成功值类型回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.ErrorCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0})">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})~AutoCSer.Net.CommandClientCallback{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.Get(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})">
            <summary>
            Get the client callback delegate
            获取客户端回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback`1.SuccessCallback">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`1.SuccessCallback.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.SuccessCallback.#ctor(System.Action{`0})">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.SuccessCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0})">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.op_Implicit(System.Action{`0})~AutoCSer.Net.CommandClientCallback{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.Callback(`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`1.Callback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Failure callback
            失败回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage">Error message</param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallback`2">
            <summary>
            Type conversion of the callback return value
            回调返回值类型转换
            </summary>
            <typeparam name="RT">Service API return type
            服务 API 返回类型</typeparam>
            <typeparam name="T">Target return value type
            目标返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`2.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallback`2.cast">
            <summary>
            Callback data type conversion
            回调数据类型转换
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`2.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`1}},System.Func{`0,`1})">
            <summary>
            Type conversion of the callback return value
            回调返回值类型转换
            </summary>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
            <param name="cast">Type conversion of the callback return value
            回调数据类型转换</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`2.Callback(AutoCSer.Net.CommandClientReturnValue{`0})">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallback`2.op_Implicit(AutoCSer.Net.CommandClientCallback{`0,`1})~System.Action{AutoCSer.Net.CommandClientReturnValue{`0}}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            Client queue callback task node
            客户端队列回调任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.Callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnType">
            <summary>
            The return type of the call
            调用返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue},AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Client queue callback task node
            客户端队列回调任务节点
            </summary>
            <param name="callback"></param>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Client queue callback task node
            客户端队列回调任务节点
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue})~AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.Get(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Get the client queue callback task node
            获取客户端队列回调任务节点
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallback">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallback.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallback.#ctor(System.Action)">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallback.Callback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.op_Implicit(System.Action)~AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallbackQueue">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallbackQueue.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallbackQueue.#ctor(System.Action{AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.SuccessCallbackQueue.Callback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.op_Implicit(System.Action{AutoCSer.Net.CommandClientCallQueue})~AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnTypeCallback">
            <summary>
            The callback of the return type of the call
            调用返回类型回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnTypeCallback.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnTypeCallback.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue})">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.ReturnTypeCallback.Callback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue})~AutoCSer.Net.CommandClientCallbackQueueNode">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode`1">
            <summary>
            Client queue callback task node
            客户端队列回调任务节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.Callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValue">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Client queue callback task node
            客户端队列回调任务节点
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue},AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Client queue callback task node
            客户端队列回调任务节点
            </summary>
            <param name="callback"></param>
            <param name="returnType"></param>
            <param name="errorMessage">Error message</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue},`0)">
            <summary>
            Client queue callback task node
            客户端队列回调任务节点
            </summary>
            <param name="callback"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.#ctor(System.Action{`0,AutoCSer.Net.CommandClientCallQueue},System.Action{AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Client queue callback task node
            客户端队列回调任务节点
            </summary>
            <param name="callback">Success value callback delegate
            成功值回调委托</param>
            <param name="errorCallback">Error return value type callback delegate
            错误成功值类型回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback.callback">
            <summary>
            Success value callback delegate
            成功值回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback.errorCallback">
            <summary>
            Error return value type callback delegate
            错误成功值类型回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback.#ctor(System.Action{`0,AutoCSer.Net.CommandClientCallQueue},System.Action{AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
            <param name="callback">Success value callback delegate
            成功值回调委托</param>
            <param name="errorCallback">Error return value type callback delegate
            错误成功值类型回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.ErrorCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue})~AutoCSer.Net.CommandClientCallbackQueueNode{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.Get(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue})">
            <summary>
            Get the client queue callback task node
            获取客户端队列回调任务节点
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode`1.SuccessCallback">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.SuccessCallback.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.SuccessCallback.#ctor(System.Action{`0})">
            <summary>
            Successful callback, ignore error return
            成功回调，忽略错误返回
            </summary>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.SuccessCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.op_Implicit(System.Action{`0})~AutoCSer.Net.CommandClientCallbackQueueNode{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValueCallback">
            <summary>
            Return value callback
            返回值回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValueCallback.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValueCallback.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.ReturnValueCallback.Callback(AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallbackQueueNode`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0}})~AutoCSer.Net.CommandClientCallbackQueueNode{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallQueue`1">
            <summary>
            The client executes the queue
            客户端执行队列
            </summary>
            <typeparam name="T">Execute the type of task node
            执行任务节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue`1.client">
            <summary>
            Command client
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue`1.Queue">
            <summary>
            Execution queue
            执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue`1.runSeconds">
            <summary>
            The time of the last task run
            最后一次运行任务时间
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue`1.#ctor(AutoCSer.Net.CommandClient)">
            <summary>
            The client executes the queue
            客户端执行队列
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue`1.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The client executes the queue
            客户端执行队列
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallQueue">
            <summary>
            The client executes the queue
            客户端执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue.WaitHandle">
            <summary>
            Queue waiting event
            队列等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueue.threadHandle">
            <summary>
            Thread handle
            线程句柄
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.#ctor(AutoCSer.Net.CommandClient)">
            <summary>
            The client executes the queue
            客户端执行队列
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The client executes the queue
            客户端执行队列
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.Close">
            <summary>
            Close the execution queue
            关闭执行队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.Add(AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.Add(AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.run">
            <summary>
            Task processing thread
            任务处理线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.CreateLink">
            <summary>
            Create a linked list of low-priority task queues
            创建低优先级任务队列链表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueue.OnTimerAsync">
            <summary>
            Timeout check
            超时检查
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallQueueLowPriorityLink">
            <summary>
            客户端执行低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.queue">
            <summary>
            客户端执行队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.nodeQueue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.head">
            <summary>
            首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.isQueue">
            <summary>
            Has it been added to the queue
            是否已经添加到队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.#ctor(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            任务队列链表节点
            </summary>
            <param name="queue">任务队列</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.Add(AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.add(AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.Add(AutoCSer.Net.CommandClientCallQueueLowPriorityLink,AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueLowPriorityLink.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCallQueueNode">
            <summary>
            Client queue task
            客户端队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCallQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.CommandClientCallQueueNode@)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="queue"></param>
            <param name="next"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallback">
            <summary>
            The client keep the callback delegate
            客户端保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallback.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            The client keep the callback delegate
            客户端保持回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand})~AutoCSer.Net.CommandClientKeepCallback">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.Get(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the client keep callback delegate
            获取客户端保持回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.Error(AutoCSer.Net.CommandClientReturnTypeEnum,System.String,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Failure callback
            失败回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.Callback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback.emptyCallback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Empty callback, such as heartbeats
            空回调，比如心跳
            </summary>
            <param name="returnValue"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallback.EmptyCallback">
            <summary>
            Empty callback, such as heartbeats
            空回调，比如心跳
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallback`1">
            <summary>
            The client keep the callback delegate
            客户端保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallback`1.Callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            The client keep the callback delegate
            客户端保持回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.KeepCallbackCommand})~AutoCSer.Net.CommandClientKeepCallback{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback`1.Get(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the client keep callback delegate
            获取客户端保持回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallback`1.Error(AutoCSer.Net.CommandClientReturnTypeEnum,System.String,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Failure callback
            失败回调
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallbackQueue">
            <summary>
            The client queue keep the callback delegate
            客户端队列保持回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueue.Callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            The client queue keep the callback delegate
            客户端队列保持回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})~AutoCSer.Net.CommandClientKeepCallbackQueue">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue.Get(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the client queue keep callback delegate
            获取客户端队列保持回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallbackQueue`1">
            <summary>
            The client queue keep the callback delegate
            客户端队列保持回调委托
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueue`1.Callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            The client queue keep the callback delegate
            客户端队列保持回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue`1.op_Implicit(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})~AutoCSer.Net.CommandClientKeepCallbackQueue{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueue`1.Get(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the client queue keep callback delegate
            获取客户端队列保持回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallbackQueueNode">
            <summary>
            客户端队列保持回调任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode.Callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode.keepCallbackCommand">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode.ReturnValue">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand},AutoCSer.Net.KeepCallbackCommand,AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            客户端队列保持回调任务节点
            </summary>
            <param name="callback"></param>
            <param name="keepCallbackCommand"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1">
            <summary>
            客户端队列保持回调任务节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.Callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.keepCallbackCommand">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.ReturnValue">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand},AutoCSer.Net.KeepCallbackCommand,`0)">
            <summary>
            客户端队列保持回调任务节点
            </summary>
            <param name="callback"></param>
            <param name="keepCallbackCommand"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.#ctor(System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand},AutoCSer.Net.KeepCallbackCommand,AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            客户端队列保持回调任务节点
            </summary>
            <param name="callback"></param>
            <param name="keepCallbackCommand"></param>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientKeepCallbackQueueNode`1.RunTask(AutoCSer.Net.CommandClientCallQueue)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientReturnTypeEnum">
            <summary>
            The return type of the call. The space 0x80 or above is a custom return value
            调用返回类型，0x80 或者以上空间为自定义返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.Unknown">
            <summary>
            Unknown status. Unexpected errors may occur
            未知状态，可能出现意外错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.VersionExpired">
            <summary>
            The API version has expired
            API 版本过期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ServerDeserializeError">
            <summary>
            Server-side deserialization error
            服务端反序列化错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ServerException">
            <summary>
            Server exception
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ServerOffline">
            <summary>
            The service interface has been taken offline
            服务接口已下线
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ServerDisposed">
            <summary>
            The server has released resources
            服务端已释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.PushBatch">
            <summary>
            It has been added to the batch command
            已添加到批处理命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.NoSocketCreated">
            <summary>
            No socket was created
            未创建套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.WaitConnect">
            <summary>
            The socket is waiting to connect
            套接字等待连接中
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.DisconnectionReconnect">
            <summary>
            The disconnection is being reconnected
            断线重连中
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.VerifyError">
            <summary>
            Verification failed
            验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.SocketClosed">
            <summary>
            The socket has been closed
            套接字已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ClientException">
            <summary>
            Client exception
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.Timeout">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ControllerMethodIndexError">
            <summary>
            The client command number is beyond the range of the controller
            客户端命令编号超出控制器范围
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ClientBuildError">
            <summary>
            Generate an output data error and cancel the command call
            生成输出数据错误，取消命令调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ClientDeserializeError">
            <summary>
            Client deserialization error
            客户端反序列化错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.CancelKeepCallback">
            <summary>
            Cancel the keep callback notification
            取消保持回调通知
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.NotSupportTaskQueueKey">
            <summary>
            Unsupported queue keywords
            不支持的队列关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.KeepCallbackDisposed">
            <summary>
            The callback has been released
            已释放回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnTypeEnum.ClientUnknown">
            <summary>
            There is an unknown error on the client side. It might be that the server was not connected or the verification failed
            客户端未知错误，可能是没有连接上服务器或者验证未通过
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientReturnValue">
            <summary>
            Command client calls the return value
            命令客户端调用返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue.ReturnType">
            <summary>
            The return type of the call
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientReturnValue.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Error return value
            错误返回值
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue.op_Implicit(AutoCSer.Net.CommandClientReturnTypeEnum)~AutoCSer.Net.CommandClientReturnValue">
            <summary>
            Implicit conversion
            隐式转换
            </summary>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue.GetIsSuccess(AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue.CheckThrowException(AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            Check the error status and throw an error exception
            检查错误状态并抛出错误异常
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientReturnValue`1">
            <summary>
            Command client calls the return value
            命令客户端调用返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue`1.Value">
            <summary>
            Return value
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue`1.ReturnType">
            <summary>
            The return type of the call
            调用返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientReturnValue`1.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientReturnValue`1.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientReturnValue`1.ReturnValue">
            <summary>
            Error return value
            错误返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.#ctor(`0)">
            <summary>
            Command client calls the return value
            命令客户端调用返回值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.#ctor(AutoCSer.Net.CommandClientReturnValue@)">
            <summary>
            Error return value
            错误返回值
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Error return value
            错误返回值
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.Cast``1(System.Func{`0,``0})">
            <summary>
            Return value type conversion
            返回值类型转换
            </summary>
            <typeparam name="VT"></typeparam>
            <param name="getValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.op_Implicit(`0)~AutoCSer.Net.CommandClientReturnValue{`0}">
            <summary>
            Implicit conversion
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.op_Implicit(AutoCSer.Net.CommandClientReturnValue)~AutoCSer.Net.CommandClientReturnValue{`0}">
            <summary>
            Implicit conversion
            隐式转换
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.GetReturnValue(`0)">
            <summary>
            Get return value
            获取返回值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientReturnValue`1.GetReturnValue(AutoCSer.Net.CommandClientReturnValue)">
            <summary>
            Get the error return value
            获取错误返回值
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCompressConfig">
            <summary>
            Command client configuration that supports default compression of transmitted data
            支持传输数据默认压缩的命令客户端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCompressConfig.MinCompressSize">
            <summary>
            When sending data, enable the minimum number of bytes for compression, with the default being 1KB
            发送数据启用压缩最低字节数量，默认为 1KB
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCompressConfig.CompressionLevel">
            <summary>
            The default compression level is fast compression. If it is a large amount of data transmission, it is recommended to change the CPU bandwidth to the default compression
            压缩级别默认为快速压缩，如果是大数据量传输建议用 CPU 换带宽修改为默认压缩
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCompressConfig.TransferEncode(AutoCSer.Net.CommandClientSocket,System.Byte[],System.Int32,System.Int32,AutoCSer.Memory.ByteArrayBuffer@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Send data coding
            发送数据编码
            </summary>
            <param name="socket">Command client socket
            命令客户端套接字</param>
            <param name="data">Original data
            原始数据</param>
            <param name="dataIndex">Original data start location
            原始数据开始位置</param>
            <param name="dataSize">Number of original data bytes
            原始数据字节数量</param>
            <param name="buffer">Output data buffer
            输出数据缓冲区</param>
            <param name="outputData">Output data
            输出数据</param>
            <param name="outputSeek">Start position of output data
            输出数据起始位置</param>
            <param name="outputHeadSize">The output data exceeds the header size
            输出数据多余头部大小</param>
            <returns>Whether the sent data is encoded
            发送数据是否编码</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCompressConfig.TransferDecode(AutoCSer.Net.CommandClientSocket,AutoCSer.SubArray{System.Byte},AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Received data decoding
            接收数据解码
            </summary>
            <param name="socket">Command client socket
            命令客户端套接字</param>
            <param name="transferData">The encoded data
            编码后的数据</param>
            <param name="outputData">Original data buffer waiting to be written
            等待写入的原始数据缓冲区</param>
            <returns>Whether the decoding is successful
            是否解码成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientCompressConfig`1">
            <summary>
            Command client configuration
            支持传输数据默认压缩的命令客户端配置
            </summary>
            <typeparam name="T">Primary controller interface type
            主控制器接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCompressConfig`1.MinCompressSize">
            <summary>
            When sending data, enable the minimum number of bytes for compression, with the default being 1KB
            发送数据启用压缩最低字节数量，默认为 1KB
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientCompressConfig`1.CompressionLevel">
            <summary>
            The default compression level is fast compression. If it is a large amount of data transmission, it is recommended to change the CPU bandwidth to the default compression
            压缩级别默认为快速压缩，如果是大数据量传输建议用 CPU 换带宽修改为默认压缩
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCompressConfig`1.TransferEncode(AutoCSer.Net.CommandClientSocket,System.Byte[],System.Int32,System.Int32,AutoCSer.Memory.ByteArrayBuffer@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Send data coding
            发送数据编码
            </summary>
            <param name="socket">Command client socket
            命令客户端套接字</param>
            <param name="data">Original data
            原始数据</param>
            <param name="dataIndex">Original data start location
            原始数据开始位置</param>
            <param name="dataSize">Number of original data bytes
            原始数据字节数量</param>
            <param name="buffer">Output data buffer
            输出数据缓冲区</param>
            <param name="outputData">Output data
            输出数据</param>
            <param name="outputSeek">Start position of output data
            输出数据起始位置</param>
            <param name="outputHeadSize">The output data exceeds the header size
            输出数据多余头部大小</param>
            <returns>Whether the sent data is encoded
            发送数据是否编码</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientCompressConfig`1.TransferDecode(AutoCSer.Net.CommandClientSocket,AutoCSer.SubArray{System.Byte},AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Received data decoding
            接收数据解码
            </summary>
            <param name="socket">Command client socket
            命令客户端套接字</param>
            <param name="transferData">The encoded data
            编码后的数据</param>
            <param name="outputData">Original data buffer waiting to be written
            等待写入的原始数据缓冲区</param>
            <returns>Whether the decoding is successful
            是否解码成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCompressConfig">
            <summary>
            Command server configuration that supports default compression of transmitted data
            支持传输数据默认压缩的命令服务端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCompressConfig.MinCompressSize">
            <summary>
            When sending data, enable the minimum number of bytes for compression, with the default being 1KB
            发送数据启用压缩最低字节数量，默认为 1KB
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCompressConfig.CompressionLevel">
            <summary>
            The default compression level is fast compression. If it is a large amount of data transmission, it is recommended to change the CPU bandwidth to the default compression
            压缩级别默认为快速压缩，如果是大数据量传输建议用 CPU 换带宽修改为默认压缩
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCompressConfig.TransferEncode(AutoCSer.Net.CommandServerSocket,System.Byte[],System.Int32,System.Int32,AutoCSer.Memory.ByteArrayBuffer@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Send data coding
            发送数据编码
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <param name="data">Original data
            原始数据</param>
            <param name="dataIndex">Origin of original data
            原始数据起始位置</param>
            <param name="dataSize">Number of bytes of original data
            原始数据字节数</param>
            <param name="buffer">Output data buffer
            输出数据缓冲区</param>
            <param name="outputData">Output data
            输出数据</param>
            <param name="outputSeek">Start position of output data
            输出数据起始位置</param>
            <param name="outputHeadSize">The output data exceeds the header size
            输出数据多余头部大小</param>
            <returns>Whether the sent data is encoded
            发送数据是否编码</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCompressConfig.TransferDecode(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte},AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Received data decoding
            接收数据解码
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <param name="transferData">The encoded data
            编码后的数据</param>
            <param name="outputData">Original data buffer waiting to be written
            等待写入的原始数据缓冲区</param>
            <returns>Whether the decoding is successful
            是否解码成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientConfig">
            <summary>
            Command client configuration
            命令客户端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.SendBufferMaxSize">
            <summary>
            Maximum number of bytes in the send data buffer. The default is 1MB
            发送数据缓冲区最大字节数，默认为 1MB
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CommandQueueCount">
            <summary>
            The maximum number of unprocessed commands, corresponding to the number of concurrent requests, defaults to 8192. Above the specified value will block the call until below the specified value to avoid excessive memory consumption
            最大未处理命令数量，对应并发请求数量，默认为 8192，超过指定值将阻塞调用直到低于指定值避免占用过多内存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CheckSeconds">
            <summary>
            The default interval for unidirectional heartbeat packets is 1 second. For services with stable and reliable frequencies, you can set the interval to 0 to disable heartbeat packets. The recommended value for open services is 60
            单向心跳包间隔时间默认为 1 秒，对于频率稳定可靠的服务类型可以设置为 0 禁用心跳包，开放服务建议值为 60
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CommandMaxTimeoutSeconds">
            <summary>
            The default value is 0, indicating that there is no timeout logic and the TimeoutSeconds timeout defined on the interface is invalid
            命令调用最大超时秒数，默认为 0 表示无超时逻辑并且接口定义 TimeoutSeconds 超时无效
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.QueueTimeoutSeconds">
            <summary>
            The default value is 0, indicating no check. This parameter is used to check whether queued tasks are blocked or deadlocked for a long time
            同步队列任务执行超时检查秒数，默认为 0 表示不检查，用于检查队列任务是否存在长时间阻塞或者死锁问题
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CancelKeepCallbackSeconds">
            <summary>
            The default value of the release keep callback sending command is 2. The recommended value of open service is 5
            释放保持回调发送命令定时秒数默认为 2，开放服务建议值为 5
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.VerifyErrorCount">
            <summary>
            Number of consecutive failed authentication attempts to create a new client. The default value is 4
            创建新客户端认证连续失败尝试次数，默认为 4
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.CommandPoolBits">
            <summary>
            Command pool initialization binary size, the maximum value is 16, the minimum value is 3, the default is 14 container size is 16384, open service recommended value is 3 Container size is 8
            命令池初始化二进制大小，最大值为 16，最小值为 3，默认为 14 容器大小为 16384，开放服务建议值为 3 容器大小为 8
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.IsServerController">
            <summary>
            If the default value is true, only one command controller obtains server controller data to match client controller information. If the default value is true, no server controller data is obtained when there is only one command controller
            默认为 true 表示只有 1 个命令控制器也获取服务端控制器数据用于匹配客户端控制器信息，设置为 true 表示只有 1 个命令控制器时不获取服务端控制器数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.IsAutoSocket">
            <summary>
            The default value true indicates that the connection is automatically started when the client object is created, otherwise it needs to be triggered on the first call
            默认为 true 表示在创建客户端对象的时候自动启动连接，否则需要第一次调用触发
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.NoDelay">
            <summary>
            The default is true, indicating that the Nagle algorithm is disabled and data is sent immediately
            默认为 true 表示禁用 Nagle 算法，立即发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.IsDefaultController">
            <summary>
            A default value of false indicates that the client does not create a default initialization controller instance before verification. Setting it to true creates a default controller instance that returns an error state during client initialization to avoid the issue of null exceptions sent by instance references (at the cost of prolonging the client's initialization time)
            默认为 false 表示客户端通过验证之前不创建默认的初始化控制器实例，设置为 true 则在客户端初始化的时候创建返回错误状态的默认控制器实例以避免实例引用发送 null 异常问题（代价是会延长客户端初始化的时间）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.ControllerCreatorBindingFlags">
            <summary>
            Command client socket event controller property binding identification, Defaults to the current type only define attributes BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.DeclaredOnly
            命令客户端套接字事件控制器属性绑定标识，默认为仅当前类型定义属性 BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.DeclaredOnly 
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.IsRemoteExpression">
            <summary>
            The default value of false indicates that remote expressions are not supported. To set it to true, the server needs to manually set AutoCSer.Net.CommandServerConfig.IsRemoteExpression to true for it to take effect
            默认为 false 表示不支持远程表达式，设置为 true 需要服务端手动设置 AutoCSer.Net.CommandServerConfig.IsRemoteExpression 为 true 才能生效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientConfig.GetIsRemoteExpression">
            <summary>
            Does it support remote expressions
            是否支持支持远程表达式
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.AutoCreateSocket(AutoCSer.Net.CommandClient)">
            <summary>
            Used to override the connection logic after server registration is enabled
            用于启用服务注册以后重写自动启动连接逻辑
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.AutoCreateSocketAsync(AutoCSer.Net.CommandClient)">
            <summary>
            Automatic start connection
            自动启动连接
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.GetRegistrar(AutoCSer.Net.CommandClient)">
            <summary>
            Get the service registration client listener component, which is defaulted to new AutoCSer.Net.CommandClientServiceRegistrar(commandClient) and is called all at once during client initialization
            获取服务注册客户端监听组件，默认为 new AutoCSer.Net.CommandClientServiceRegistrar(commandClient)，客户端初始化时一次性调用
            </summary>
            <param name="commandClient"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.GetSocketEventDelegate">
            <summary>
            Gets the command client socket event delegate
            获取命令客户端套接字事件委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.GetSocketEvent(AutoCSer.Net.CommandClient)">
            <summary>
            Gets the command client socket event, which defaults to new CommandClientSocketEvent(commandClient) and is called once upon client initialization
            获取命令客户端套接字事件，默认为 new CommandClientSocketEvent(commandClient)，客户端初始化时一次性调用
            </summary>
            <param name="commandClient"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.GetBinaryDeserializeConfig">
            <summary>
            Gets the binary deserialization configuration parameter, which is called once during client initialization
            获取二进制反序列化配置参数，客户端初始化时一次性调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.TransferEncode(AutoCSer.Net.CommandClientSocket,System.Byte[],System.Int32,System.Int32,AutoCSer.Memory.ByteArrayBuffer@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Send data coding
            发送数据编码
            </summary>
            <param name="socket">Command client socket
            命令客户端套接字</param>
            <param name="data">Original data
            原始数据</param>
            <param name="dataIndex">Original data start location
            原始数据开始位置</param>
            <param name="dataSize">Number of original data bytes
            原始数据字节数量</param>
            <param name="buffer">Output data buffer
            输出数据缓冲区</param>
            <param name="outputData">Output data
            输出数据</param>
            <param name="outputSeek">Start position of output data
            输出数据起始位置</param>
            <param name="outputHeadSize">The output data exceeds the header size
            输出数据多余头部大小</param>
            <returns>Whether the sent data is encoded
            发送数据是否编码</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.TransferDecode(AutoCSer.Net.CommandClientSocket,AutoCSer.SubArray{System.Byte},AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Received data decoding
            接收数据解码
            </summary>
            <param name="socket">Command client socket
            命令客户端套接字</param>
            <param name="transferData">The encoded data
            编码后的数据</param>
            <param name="outputData">Original data buffer waiting to be written
            等待写入的原始数据缓冲区</param>
            <returns>Whether the decoding is successful
            是否解码成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.OnCustomData(AutoCSer.Net.CommandClientSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            The custom data processing, the default return AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CustomCommandError and close the current socket (attention, because it is receiving data IO thread synchronization calls, If there is a block please open a new thread task processing)
            自定义数据处理，默认返回 AutoCSer.Net.CommandServer.ClientReceiveErrorTypeEnum.CustomCommandError 并关闭当前套接字（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
            <returns>The client receives data error type. If not Success is returned, the current socket is closed
            客户端接收数据错误类型，返回非 Success 则关闭当前套接字</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig.OnQueueTimeout(AutoCSer.Net.CommandClientCallQueue,System.Int64)">
            <summary>
            Queue task execution timeout notification
            队列任务执行超时通知
            </summary>
            <param name="queue">Client execution queue
            客户端执行队列</param>
            <param name="seconds">Current task execution seconds
            当前任务执行秒数</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig.Null">
            <summary>
            Default empty command client configuration
            默认空命令客户端配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientConfig`1">
            <summary>
            Command client configuration
            命令客户端配置
            </summary>
            <typeparam name="T">Primary controller interface type
            主控制器接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientConfig`1.IsSymmetryInterface">
            <summary>
            Symmetric interface definition
            是否对称接口定义
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig`1.GetSocketEvent(AutoCSer.Net.CommandClient)">
            <summary>
            Get command client socket event (one-time call at initialization)
            获取命令客户端套接字事件（初始化时一次性调用）
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientConfig`1.CreateSymmetryClient">
            <summary>
            Create the interface symmetry command client
            创建接口对称命令客户端
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientController">
            <summary>
            The command client controller
            命令客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.Socket">
            <summary>
            Command client socket
            命令客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.ControllerName">
            <summary>
            Command controller name
            命令控制器名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.Methods">
            <summary>
            Client interface method information collection
            客户端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.serverMethodIndexs">
            <summary>
            A collection of server-side method numbers
            服务端方法编号集合
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientController.ErrorMethods">
            <summary>
            Gets the collection of error methods
            获取错误方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.StartMethodIndex">
            <summary>
            Method starting sequence number
            方法起始序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientController.VerifyMethodIndex">
            <summary>
            Verification method serial number
            验证方法序号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.#ctor(AutoCSer.Net.CommandClientSocket,System.String)">
            <summary>
            Default empty controller
            默认空控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.#ctor(AutoCSer.Net.CommandClientSocket,System.String,System.Int32,AutoCSer.Net.CommandServer.ClientInterfaceMethod[],System.Int32[],System.Int32)">
            <summary>
            The command client controller
            命令客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <param name="startMethodIndex"></param>
            <param name="methods"></param>
            <param name="serverMethodIndexs"></param>
            <param name="verifyMethodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.GetMethodIndex(System.Int32)">
            <summary>
            Get the controller command method sequence number
            获取控制器命令方法序号
            </summary>
            <param name="methodIndex"></param>
            <returns>Return 0 if the range is exceeded
            超出范围返回 0</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SetServerMethodIndexs(System.String[])">
            <summary>
            Set the collection of server-side method numbers
            设置服务端方法编号集合
            </summary>
            <param name="MethodNames"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Synchronous(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SynchronousInput``1(System.Int32,``0@)">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SynchronousOutput``1(System.Int32,``0@)">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SynchronousInputOutput``2(System.Int32,``0@,``1@)">
            <summary>
            Synchronous waiting command
            同步等待命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SendOnly(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.SendOnlyInput``1(System.Int32,``0@)">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Callback(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback)">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Callback``1(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallback{``0})">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackOutput``2(System.Int32,AutoCSer.Net.CommandClientCallback{``1},``0@)">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackOutputReturnValue``2(System.Int32,AutoCSer.Net.CommandClientCallback{``1},``0@,``1@)">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackInput``1(System.Int32,AutoCSer.Net.CommandClientCallback,``0@)">
            <summary>
            Callback delegate command
            回调委托命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallback(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallback``1(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallback{``0})">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackOutput``2(System.Int32,AutoCSer.Net.CommandClientKeepCallback{``1},``0@)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackOutputReturnValue``2(System.Int32,AutoCSer.Net.CommandClientKeepCallback{``1},``0@,``1@)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackInput``1(System.Int32,AutoCSer.Net.CommandClientKeepCallback,``0@)">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallback"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.AppendQueue(AutoCSer.Net.CommandServer.ClientInterfaceMethod,AutoCSer.Net.CommandClientCallQueueNode)">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="method"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueue(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode)">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueue``1(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{``0})">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueueOutput``2(System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{``1},``0@)">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueueOutputReturnValue``2(System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode{``1},``0@,``1@)">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.CallbackQueueInput``1(System.Int32,AutoCSer.Net.CommandClientCallbackQueueNode,``0@)">
            <summary>
            Callback delegate queue command
            回调委托队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="callbackQueue"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueue(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue)">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueue``1(AutoCSer.Net.CommandClientController,System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{``0})">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueueOutput``2(System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{``1},``0@)">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueueOutputReturnValue``2(System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue{``1},``0@,``1@)">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.KeepCallbackQueueInput``1(System.Int32,AutoCSer.Net.CommandClientKeepCallbackQueue,``0@)">
            <summary>
            Keep callback queue command
            保持回调队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="keepCallbackQueue"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnType(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValue``1(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Return value command
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueOutput``2(System.Int32,``0@)">
            <summary>
            Return value command
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueOutputReturnValue``2(System.Int32,``0@,``1@)">
            <summary>
            Return value command
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnTypeInput``1(System.Int32,``0@)">
            <summary>
            Return value command
            返回值命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.AppendQueue(AutoCSer.Net.CommandServer.ClientInterfaceMethod,System.Action)">
            <summary>
            Add to the callback queue
            添加到回调队列
            </summary>
            <param name="method"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnTypeQueue(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueQueue``1(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueQueueOutput``2(System.Int32,``0@)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnValueQueueOutputReturnValue``2(System.Int32,``0@,``1@)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.ReturnTypeQueueInput``1(System.Int32,``0@)">
            <summary>
            Return value queue command
            返回值队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Enumerator(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.Enumerator``1(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorOutput``2(System.Int32,``0@)">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorOutputReturnValue``2(System.Int32,``0@,``1@)">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorInput``1(System.Int32,``0@)">
            <summary>
            Collection enumeration command
            集合枚举命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueue(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueue``1(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueueOutput``2(System.Int32,``0@)">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueueOutputReturnValue``2(System.Int32,``0@,``1@)">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="OT"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientController.EnumeratorQueueInput``1(System.Int32,``0@)">
            <summary>
            Collection enumeration queue command
            集合枚举队列命令
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientInterfaceControllerCreator">
            <summary>
            客户端控制器创建器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientInterfaceControllerCreator.ControllerName">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator.IsTaskQueue">
            <summary>
            是否服务端 Task 队列客户端控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.#ctor(System.String)">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.Create(AutoCSer.Net.CommandClientSocket,System.Int32,System.String[])">
            <summary>
            创建客户端控制器
            </summary>
            <param name="socket"></param>
            <param name="startMethodIndex"></param>
            <param name="serverMethodNames"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.CreateDefault(AutoCSer.Net.CommandClient)">
            <summary>
            创建客户端默认控制器
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetClientCreator``1(System.String)">
            <summary>
            获取客户端控制器创建器
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <param name="controllerName">控制器名称</param>
            <returns>客户端控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetSymmetryCreator``1(System.String)">
            <summary>
            获取接口对称服务客户端控制器创建器
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="controllerName">控制器名称，默认为 typeof(T).FullName</param>
            <returns>客户端控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetCreator``2(System.String)">
            <summary>
            获取客户端控制器创建器
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="ST">服务端接口类型</typeparam>
            <param name="controllerName">控制器名称，默认为 typeof(ST).FullName</param>
            <returns>客户端控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetTaskQueueClientCreator``2(System.String)">
            <summary>
            获取服务端 Task 队列客户端控制器创建器
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="KT">Task 队列关键字类型</typeparam>
            <param name="controllerName">控制器名称</param>
            <returns>服务端 Task 队列客户端控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator.GetTaskQueueCreator``3(System.String)">
            <summary>
            获取服务端 Task 队列客户端控制器创建器
            </summary>
            <typeparam name="T">客户端接口类型</typeparam>
            <typeparam name="ST">服务端接口类型</typeparam>
            <typeparam name="KT">Task 队列关键字类型</typeparam>
            <param name="controllerName">控制器名称，默认为 typeof(ST).FullName+typeof(KT).FullName</param>
            <returns>服务端 Task 队列客户端控制器创建器</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientInterfaceControllerCreator`2">
            <summary>
            客户端控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ST"></typeparam>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.IsTaskQueue">
            <summary>
            是否服务端 Task 队列客户端控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.#ctor(System.String)">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.Create(AutoCSer.Net.CommandClientSocket,System.Int32,System.String[])">
            <summary>
            创建服务控制器
            </summary>
            <param name="socket"></param>
            <param name="startMethodIndex"></param>
            <param name="serverMethodNames"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.CreateDefault(AutoCSer.Net.CommandClient)">
            <summary>
            创建客户端默认控制器
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`2.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientInterfaceControllerCreator`3">
            <summary>
            服务端 Task 队列客户端控制器创建器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ST"></typeparam>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.ControllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.IsTaskQueue">
            <summary>
            是否服务端 Task 队列客户端控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.#ctor(System.String)">
            <summary>
            控制器创建器
            </summary>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.Create(AutoCSer.Net.CommandClientSocket,System.Int32,System.String[])">
            <summary>
            创建服务控制器
            </summary>
            <param name="socket"></param>
            <param name="startMethodIndex"></param>
            <param name="serverMethodNames"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.CreateDefault(AutoCSer.Net.CommandClient)">
            <summary>
            创建客户端默认控制器
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientInterfaceControllerCreator`3.Check">
            <summary>
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientMethodAttribute">
            <summary>
            Command client method configuration
            命令客户端方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.TimeoutSeconds">
            <summary>
            The timeout period for the call is set to 0 by default, indicating no timeout. The maximum value is the client configuration AutoCSer.Net.CommandClientConfig.CommandMaxTimeoutSeconds
            调用超时秒数，默认为 0 表示不超时，最大值为客户端配置 AutoCSer.Net.CommandClientConfig.CommandMaxTimeoutSeconds
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.CallbackType">
            <summary>
            Data callback thread mode, with the default being CheckRunTask
            数据回调线程模式，默认为 CheckRunTask
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.QueueIndex">
            <summary>
            Synchronous queue sequence number
            同步队列序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.IsLowPriorityQueue">
            <summary>
            Whether it is a low-priority synchronous queue
            是否低优先级同步队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.MatchMethodName">
            <summary>
            Match the server method name, which is used to specify the matching server method name when the client rewrites the method name in the automatic command sequence number mode
            匹配服务端方法名称，用于自动命令序号模式下客户端改写方法名称时指定匹配的服务端方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientMethodAttribute.Defafult">
            <summary>
            Default command client method configuration
            默认命令客户端方法配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientServiceRegistrar">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientServiceRegistrar.Client">
            <summary>
            Command client
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientServiceRegistrar.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientServiceRegistrar.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientServiceRegistrar.GetServerEndPoint">
            <summary>
            Get the server listening address
            获取服务端监听地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientServiceRegistrar.ConnectFail(System.Net.IPEndPoint)">
            <summary>
            Server connection failed
            服务连接失败
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocket">
            <summary>
            Command client socket
            命令客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.Client">
            <summary>
            Command client
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.Socket">
            <summary>
            Socket
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.serverEndPoint">
            <summary>
            Server listening address
            服务监听地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.Controller">
            <summary>
            Client main controller
            客户端主控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.CommandPool">
            <summary>
            Client command pool
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveAsyncEventArgs">
            <summary>
            Receive data socket asynchronous event object
            接收数据套接字异步事件对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.RemoteMetadata">
            <summary>
            Remote expression client metadata information
            远程表达式客户端元数据信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.GetRemoteMetadata">
            <summary>
            Get the remote expression client metadata information
            获取远程表达式客户端元数据信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.commandQueueCount">
            <summary>
            The maximum number of unprocessed commands on the client side
            客户端最大未处理命令数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.reserve">
            <summary>
            Reserve
            保留
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.MaxInputSize">
            <summary>
            Maximum input data length
            最大输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.MaxMergeInputSize">
            <summary>
            Maximum merged input data length
            最大合并输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.pad0">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.SessionObject">
            <summary>
            Custom session object
            自定义会话对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.checkTimer">
            <summary>
            Client heart rate detection timing
            客户端心跳检测定时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.controllerLock">
            <summary>
            Command controller access lock
            命令控制器访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.controllerCreators">
            <summary>
            A collection of client controller creators
            客户端控制器创建器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.ControllerArray">
            <summary>
            Command client controller collection
            命令客户端控制器集合
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.Controllers">
            <summary>
            Command client controller collection
            命令客户端控制器集合
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.Item(System.String)">
            <summary>
            Get the command client controller
            获取命令客户端控制器
            </summary>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.Item(System.Type)">
            <summary>
            Get the command client controller
            获取命令客户端控制器
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveDeserializer">
            <summary>
            Receive binary deserialization of data
            接收数据二进制反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveBigBuffer">
            <summary>
            Temporary received data buffer
            临时接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveBuffer">
            <summary>
            Receive data buffer
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveDataStart">
            <summary>
            The starting position for receiving data
            接收数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.callbackIdentity">
            <summary>
            Current session callback identity
            当前会话回调标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.command">
            <summary>
            Current client command
            当前客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.ReceiveErrorMessage">
            <summary>
            Received data error message
            接收数据错误信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveIndex">
            <summary>
            The current number of bytes of received data being processed
            当前处理接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.transferDataSize">
            <summary>
            The byte size of the current data after encoding
            当前数据编码后的字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.dataSize">
            <summary>
            The current data byte size
            当前数据字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.OnReceiveThreadId">
            <summary>
            Receive the data thread ID
            接收数据线程ID
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveSocketError">
            <summary>
            The data receiving socket is incorrect
            接收数据套接字错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.createErrorCount">
            <summary>
            The number of failed socket creation attempts
            创建套接字失败次数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.CreateVersion">
            <summary>
            The current version number of the client being created
            当前创建客户端的版本号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveType">
            <summary>
            Receive data callback type
            接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveErrorType">
            <summary>
            Received data error type
            接收数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.receiveReserve">
            <summary>
            Reserve
            保留
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.pad1">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.commandCount">
            <summary>
            The current number of queue commands
            当前队列命令数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.commands">
            <summary>
            The linked list of output commands
            输出命令链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.outputWaitHandle">
            <summary>
            Output waiting event
            输出等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.waitPushCommands">
            <summary>
            The collection of commands waiting to be added to the queue
            等待添加到队列的命令集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.isClosed">
            <summary>
            Has the socket been closed
            是否已经关闭套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocket.IsClosed">
            <summary>
            Has the socket been closed
            是否已经关闭套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.commandReserve">
            <summary>
            Reserve
            保留
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.pad2">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.OutputSerializer">
            <summary>
            Output data binary serialization
            输出数据二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.buildCommandCount">
            <summary>
            The current number of sent commands
            当前发送命令数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.#ctor">
            <summary>
            Default empty socket
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocket.Null">
            <summary>
            Default empty socket
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.#ctor(AutoCSer.Net.CommandClient,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Command client socket
            命令客户端套接字
            </summary>
            <param name="client">Command client</param>
            <param name="serverEndPoint"></param>
            <param name="createVersion"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.#ctor(AutoCSer.Net.CommandClientSocket,System.Net.IPEndPoint)">
            <summary>
            Command client socket
            命令客户端套接字
            </summary>
            <param name="socket"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.#ctor(AutoCSer.Net.CommandClient,System.Net.Sockets.Socket)">
            <summary>
            反向客户端套接字
            </summary>
            <param name="client"></param>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.setValue(System.Boolean)">
            <summary>
            Set the default value
            设置默认值
            </summary>
            <param name="isNull"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.createController">
            <summary>
            Create the main controller
            创建主控制器
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Close">
            <summary>
            Close the socket
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.closeWaitPush">
            <summary>
            The close socket operation deals with the collection of waiting commands
            关闭套接字操作处理等待命令集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.addBuildCommandCount(System.Int32)">
            <summary>
            Increase the current number of sent commands
            增加当前发送命令数量
            </summary>
            <param name="buildCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Shutdown">
            <summary>
            Close the socket
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.ServerEndPointEquals(System.Net.IPEndPoint)">
            <summary>
            Compare whether the server listening addresses are equal
            比较服务端监听地址是否相等
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.create">
            <summary>
            Create a socket
            创建套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Start">
            <summary>
            Reverse client initialization operation
            反向客户端初始化操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.verify(System.Int32)">
            <summary>
            Verification call
            验证调用
            </summary>
            <param name="exceptionCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.OnVerify(System.Int32)">
            <summary>
            Service completion verification
            服务完成验证
            </summary>
            <param name="exceptionCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Callback(AutoCSer.Net.CommandServer.CommandControllerOutputData@)">
            <summary>
            The callback for the command controller to query data
            命令控制器查询数据回调
            </summary>
            <param name="controllerOutputData"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.createSynchronizeOnReceive">
            <summary>
            Create sockets to synchronously receive data
            创建套接字同步接收数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            The callback delegate after the data is received
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">Asynchronous callback parameters</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isCallbackIdentity(System.Int32)">
            <summary>
            Get the command callback number
            获取命令回调序号
            </summary>
            <param name="count"></param>
            <returns>Whether it is an asynchronous operation
            是否异步操作</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.checkDataLoopFixed">
            <summary>
            Check the command data
            检查命令数据
            </summary>
            <returns>0 indicates asynchronous, 1 indicates successful continuation of data parsing, and 2 indicates failure
            0 表示异步，1 表示成功继续解析数据，2 表示失败</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isOnDataLoopFixed">
            <summary>
            Check the command data
            检查命令数据
            </summary>
            <returns>Whether the execution was successful (non-asynchronous)
            是否执行成功（非异步）</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceiveErrorMessage(System.Byte*)">
            <summary>
            Receive error messages
            接收错误信息
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isOnBigDataLoopFixed">
            <summary>
            Check the command data
            检查命令数据
            </summary>
            <returns>Whether the execution was successful (non-asynchronous)
            是否执行成功（非异步）</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isData(System.Int32)">
            <summary>
            Get data
            获取数据
            </summary>
            <param name="count"></param>
            <returns>Whether it is an asynchronous operation
            是否异步操作</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.isBigData(System.Int32)">
            <summary>
            Get data
            获取数据
            </summary>
            <param name="count"></param>
            <returns>Whether it is an asynchronous operation
            是否异步操作</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.loop">
            <summary>
            Loop processing command
            循环处理命令
            </summary>
            <returns>Whether it is an asynchronous operation
            是否异步操作</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceive(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Received data processing
            接收数据处理
            </summary>
            <param name="type"></param>
            <param name="errorMessage">Error message</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceive(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Received data processing
            接收数据处理
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.onReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Received data processing
            接收数据处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.MergeCallback(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Merge command processing
            合并命令处理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Deserialize``1(AutoCSer.SubArray{System.Byte}@,``0@,System.Boolean)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="data">Data</param>
            <param name="value">Target object</param>
            <param name="isSimpleSerialize"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.createReceiveDeserializer">
            <summary>
            Receive binary deserialization of data
            接收数据二进制反序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.CheckSynchronousIO(AutoCSer.BinaryDeserializer)">
            <summary>
            Check whether the current serialization is in an IO synchronization environment
            检查当前序列化是否 IO 同步环境
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.buildOutput">
            <summary>
            Send data
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.PushNotCheckCount(AutoCSer.Net.CommandServer.Command)">
            <summary>
            Add a command without checking the count
            添加命令，不检查计数
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.TryPush(AutoCSer.Net.CommandServer.Command)">
            <summary>
            Try adding commands
            尝试添加命令
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.Check">
            <summary>
            Heart rate detection
            心跳检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.SendCustomData(System.Byte[])">
            <summary>
            Send custom data
            </summary>
            <param name="data"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocket.SendCustomData(AutoCSer.SubArray{System.Byte})">
            <summary>
            Send custom data
            </summary>
            <param name="data"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientControllerCreatorParameter">
            <summary>
            Client controller creator parameters
            客户端控制器创建器参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.ServerInterfaceType">
            <summary>
            Server interface type
            服务端接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.ClientInterfaceType">
            <summary>
            Client interface type
            客户端接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.ControllerName">
            <summary>
            The controller name is defaulted to ServerInterfaceType.Name
            控制器名称，默认为 ServerInterfaceType.Name
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.PropertyName">
            <summary>
            Binding attribute name
            绑定属性名称
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientControllerCreatorParameter.Creator">
            <summary>
            Client controller creator
            客户端控制器创建器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.TaskQueueKeyType">
            <summary>
            The keyword type of the server-side Task queue
            服务端 Task 队列关键字类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.#ctor(System.Type,System.Type,System.Type,System.String,System.String)">
            <summary>
            Client controller creator parameters
            客户端控制器创建器参数
            </summary>
            <param name="serverInterfaceType">Server interface type
            服务端接口类型</param>
            <param name="taskQueueKeyType">The keyword type of the server-side Task queue
            服务端 Task 队列关键字类型</param>
            <param name="clientInterfaceType">Client interface type
            客户端接口类型</param>
            <param name="controllerName">Controller name, default is serverInterfaceType.Name+taskQueueKeyType.Name
            控制器名称，默认为 serverInterfaceType.Name+taskQueueKeyType.Name</param>
            <param name="propertyName">Binding attribute names, scenario recognition binding attributes for one-to-many client interfaces and server interfaces
            绑定属性名称，客户端接口与服务端接口 1 对多的场景识别绑定属性</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Define the parameters of the asymmetric client controller creator
            定义非对称客户端控制器创建器参数
            </summary>
            <param name="controllerName">The controller name, by default, is of type MethodIndexEnumType
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="clientInterfaceType">Client interface type
            客户端接口类型</param>
            <param name="taskQueueKeyType">The keyword type of the server-side Task queue
            服务端 Task 队列关键字类型</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.#ctor(System.Type,System.Type,System.String,System.String)">
            <summary>
            Client controller creator parameters
            客户端控制器创建器参数
            </summary>
            <param name="serverInterfaceType">Server interface type
            服务端接口类型</param>
            <param name="clientInterfaceType">Client interface type
            客户端接口类型</param>
            <param name="controllerName">Controller name, default is serverInterfaceType.Name
            控制器名称，默认为 serverInterfaceType.Name</param>
            <param name="propertyName">Binding attribute names, scenario recognition binding attributes for one-to-many client interfaces and server interfaces
            绑定属性名称，客户端接口与服务端接口 1 对多的场景识别绑定属性</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.#ctor(System.Type,System.String,System.String)">
            <summary>
            Client controller creator parameters
            客户端控制器创建器参数
            </summary>
            <param name="interfaceType">Symmetrical service interface type
            对称服务接口类型</param>
            <param name="controllerName">Controller name, default is serverInterfaceType.Name
            控制器名称，默认为 serverInterfaceType.Name</param>
            <param name="propertyName">Binding attribute names, scenario recognition binding attributes for one-to-many client interfaces and server interfaces
            绑定属性名称，客户端接口与服务端接口 1 对多的场景识别绑定属性</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.GetControllerName">
            <summary>
            Get the controller name
            获取控制器名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientControllerCreatorParameter.Check">
            <summary>
            Check the error messages related to the client controller
            检查客户端控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.GetClientCreatorMethodInfo">
            <summary>
            Get client controller creator method information
            获取客户端控制器创建器方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.GetCreatorMethodInfo">
            <summary>
            Get client controller creator method information
            获取客户端控制器创建器方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.GetTaskQueueClientCreatorMethodInfo">
            <summary>
            Get the server-side Task queue client controller creator method information
            获取服务端 Task 队列客户端控制器创建器方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientControllerCreatorParameter.GetTaskQueueCreatorMethodInfo">
            <summary>
            Get the server-side Task queue client controller creator method information
            获取服务端 Task 队列客户端控制器创建器方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketEvent">
            <summary>
            Default command client socket event
            默认命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.verifySuccessTask">
            <summary>
            Verify the successfully completed tasks
            验证成功的已完成任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.verifyFailTask">
            <summary>
            Verify the completed tasks that failed
            验证失败的已完成任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.verifyRetryTask">
            <summary>
            The completed tasks that failed to verify and need to be retried
            验证失败需重试的已完成任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.lessVerifyMethodTask">
            <summary>
            The completed task of verifying the function logic is lacking
            缺少验证函数逻辑的已完成任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.getCompletedTask(AutoCSer.Net.CommandClientReturnValue{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            Get the completed task based on the validation status
            根据验证状态获取已完成任务
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.Client">
            <summary>
            Command client
            命令客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.customParameter">
            <summary>
            Custom pamameter
            自定义参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.setController">
            <summary>
            Set the client controller delegate
            设置客户端控制器委托
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocketEvent.Socket">
            <summary>
            By authenticating the API's current command client socket, this object changes as disconnection reconnects
            通过认证 API 的当前命令客户端套接字，该对象会随着断线重连而变化
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocketEvent.ControllerCreatorParameters">
            <summary>
            The set of parameters for creating the client controller is used to create the client controller object during the initialization of the client socket, and also to automatically bind the controller properties based on the interface type of the client controller after the client socket passes the service authentication API
            客户端控制器创建参数集合，用于命令客户端套接字初始化是创建客户端控制器对象，同时也用于命令客户端套接字事件在通过认证 API 之后根据客户端控制器接口类型自动绑定控制器属性
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.closeSocketVersion">
            <summary>
            Release the closed socket version of the waiting lock
            释放等待锁的关闭套接字版本
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent.socketWaitLocks">
            <summary>
            Wait for the collection of client socket locks
            等待客户端套接字锁集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.#ctor(AutoCSer.Net.CommandClient,System.Object)">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
            <param name="commandClient">Command client
            命令客户端</param>
            <param name="customParameter">Custom pamameter
            自定义参数</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.AppendCreators(AutoCSer.LeftArray{AutoCSer.Net.CommandClientInterfaceControllerCreator}@)">
            <summary>
            Add the collection of client controller creators
            添加客户端控制器创建器集合
            </summary>
            <param name="controllerCreators"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.GetController(AutoCSer.Net.CommandClientSocketEvent,System.String)">
            <summary>
            Gets the command client controller
            获取命令客户端控制器
            </summary>
            <param name="socketEvent"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.CreateSocketSleep(System.Int32)">
            <summary>
            By default, the system hibernates for 10ms after the first failed socket creation, 100ms after the second failed socket creation, and 1s after the third failed socket creation. After each failed socket creation, the system hibernates for 5s
            创建套接字失败重试休眠，默认第 1 次失败以后休眠 10ms，第 2 次失败以后休眠 100ms，第 3 次失败以后休眠 1s，以后每次失败都休眠 5s
            </summary>
            <param name="createErrorCount">Number of failures
            失败次数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.NotFoundControllerName(AutoCSer.Net.CommandClientSocket,System.String)">
            <summary>
            The notification of the client controller name was not found
            没有找到客户端控制器名称通知
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.NotFoundServerControllerName(AutoCSer.Net.CommandClientSocket,System.String)">
            <summary>
            The notification of the server controller name was not found
            没有找到服务端控制器名称通知
            </summary>
            <param name="socket"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.ControllerNameError(AutoCSer.Net.CommandClientController,System.String)">
            <summary>
            Notification when the name of the main controller does not match the name of the server
            主控制器名称与服务端名称不匹配通知
            </summary>
            <param name="controller"></param>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnCreateSocketRetrySuccess(AutoCSer.Net.CommandClientSocket,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Socket retry connection successful prompt
            套接字重试连接成功提示
            </summary>
            <param name="socket"></param>
            <param name="serverEndPoint"></param>
            <param name="exceptionCount">Number of abnormal errors
            异常错误次数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnCreateSocketException(AutoCSer.Net.CommandClientSocket,System.Exception,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Socket creation exception prompt
            套接字创建异常提示
            </summary>
            <param name="socket"></param>
            <param name="exception"></param>
            <param name="serverEndPoint"></param>
            <param name="exceptionCount">Number of abnormal errors
            异常错误次数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.CallVerifyMethod(AutoCSer.Net.CommandClientController)">
            <summary>
            The client call the authentication API after creating a socket connection
            客户端创建套接字连接以后调用认证 API
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.ReleaseSocketWaitLock">
            <summary>
            The release of the waiting client socket lock must be invoked during the client lock operation
            释放等待客户端套接字锁，必须在客户端锁操作中调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.GetWaitLock">
            <summary>
            Get the wait client socket lock, this call is in the client lock operation, should not complete the initialization operation as soon as possible, forbidden to call the internal nested lock operation to avoid deadlock
            获取等待客户端套接字锁，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.SetController(AutoCSer.Net.CommandClientSocket)">
            <summary>
            Set up the client controller
            设置客户端控制器
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.CallVerify(AutoCSer.Net.CommandClientSocket)">
            <summary>
            The reverse command server client listens for the authentication socket
            反向命令服务客户端监听验证套接字
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            Command Client socket custom client initialization operations after the authentication API is passed and the client controller is automatically bound, used to manually bind the client controller Settings and connection initialization operations, such as the initial keep callback. This call is located in the client lock operation, should not complete the initialization operation as soon as possible, do not call the internal nested lock operation to avoid deadlock
            命令客户端套接字通过认证 API 并自动绑定客户端控制器以后的客户端自定义初始化操作，用于手动绑定设置客户端控制器与连接初始化操作，比如初始化保持回调。此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnCreateError(AutoCSer.Net.CommandClientSocket)">
            <summary>
            The default operation is to notify the caller waiting for a connection. The same command client socket object may be called multiple times. The call is located in the client lock operation. The initialization operation should not be completed as soon as possible
            命令客户端套接字创建连接失败通知，默认操作为通知等待连接的调用者，同一个命令客户端套接字对象可能存在多次调用，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.releaseSocketWaitLock(System.Int32)">
            <summary>
            Release the waiting client socket lock and close the socket only once, and it must be called during the client lock operation
            释放等待客户端套接字锁，关闭套接字仅执行一次，必须在客户端锁操作中调用
            </summary>
            <param name="closeSocketVersion">Release the closed socket version of the waiting lock
            释放等待锁的关闭套接字版本</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnClosed(AutoCSer.Net.CommandClientSocket)">
            <summary>
            Disable command client current socket notification, the default action is to notify the caller waiting for the current connection, this call is located in the client lock operation, should not complete initialization operation as soon as possible, do not call internal nested lock operation to avoid deadlock
            关闭命令客户端当前套接字通知，默认操作为通知等待当前连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.Create(AutoCSer.Net.CommandClientSocket,AutoCSer.Net.CommandClientSocket)">
            <summary>
            Re-create a new socket notification, the default action is to notify the caller waiting for the current connection, this call is located in the client lock operation, should not complete the initialization operation as soon as possible, do not call the internal nested lock operation to avoid deadlock
            重新创建新的套接字通知，默认操作为通知等待当前连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
            <param name="errorSocket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent.OnDisposeClient">
            <summary>
            Turn off client notifications. The default action is to notify callers waiting for a connection. This call is in the client lock operation
            关闭客户端通知，默认操作为通知等待连接的调用者，此调用位于客户端锁操作中，禁止调用内部嵌套锁操作避免死锁
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketEvent`1">
            <summary>
            默认命令客户端套接字事件
            Default command client socket event
            </summary>
            <typeparam name="T">Primary controller interface type of the client
            客户端主控制器接口类型</typeparam>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocketEvent`1.InterfaceController">
            <summary>
            Current socket command client controller
            当前套接字命令客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEvent`1.IsSymmetryInterface">
            <summary>
            Symmetric interface definition
            是否对称接口定义
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandClientSocketEvent`1.ControllerCreatorParameters">
            <summary>
            The set of parameters for creating the client controller is used to create the client controller object during the initialization of the client socket, and also to automatically bind the controller properties based on the interface type of the client controller after the client socket passes the service authentication API
            客户端控制器创建参数集合，用于命令客户端套接字初始化是创建客户端控制器对象，同时也用于命令客户端套接字事件在通过认证 API 之后根据客户端控制器接口类型自动绑定控制器属性
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent`1.#ctor(AutoCSer.Net.CommandClient,System.Boolean)">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
            <param name="client"></param>
            <param name="isSymmetryInterface">Symmetric interface definition
            是否对称接口定义</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEvent`1.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            The current socket is used for manually binding client controller Settings and connection initialization operations, such as initialization keep callbacks, via validation methods. This call is located in the client lock operation, should not complete the initialization operation as soon as possible, do not call the internal nested lock operation to avoid deadlock
            当前套接字通过验证方法，用于手动绑定设置客户端控制器与连接初始化操作，比如初始化保持回调。此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketEventCache`1">
            <summary>
            Command client socket event caching
            命令客户端套接字事件缓存
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEventCache`1.SocketEvent">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEventCache`1.Client">
            <summary>
            Command client
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventCache`1.#ctor(AutoCSer.Net.CommandClient)">
            <summary>
            Command client socket event caching
            命令客户端套接字事件缓存
            </summary>
            <param name="client">Command client</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventCache`1.#ctor(AutoCSer.Net.CommandClientConfig)">
            <summary>
            Command client socket event caching
            命令客户端套接字事件缓存
            </summary>
            <param name="config">Command the client configuration
            命令客户端配置</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventCache`1.Create(AutoCSer.Net.CommandReverseListenerConfig)">
            <summary>
            Gets the command client socket event cache
            获取命令客户端套接字事件缓存
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketEventTask`1">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEventTask`1.socketEventTask">
            <summary>
            Command client socket event task caching
            命令客户端套接字事件任务缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEventTask`1.currentSocketEventTask">
            <summary>
            The current command client socket event task
            当前命令客户端套接字事件任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`1.#ctor(AutoCSer.Net.CommandClient)">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
            <param name="client">Command client</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`1.OnClosed(AutoCSer.Net.CommandClientSocket)">
            <summary>
            Close the command to notify the client of the current socket. The default operation is to notify the caller waiting for the current connection. This call is located in the client lock operation. The initialization operation should be completed as soon as possible. It is prohibited to call the internal nested lock operation to avoid deadlock
            关闭命令客户端当前套接字通知，默认操作为通知等待当前连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`1.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            After the command client socket passes the authentication API, the client initialization operation is carried out. The default operation is to reset the current socket and automatically bind the client controller operation and notify the caller waiting to connect. This call is located in the client lock operation. The initialization operation should be completed as soon as possible. It is prohibited to call the internal nested lock operation to avoid deadlock
            命令客户端套接字通过认证 API 以后的客户端初始化操作，默认操作为重置当前套接字与自动绑定客户端控制器操作并通知等待连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`1.Wait">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`1.wait">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketEventTask`2">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
            <typeparam name="CT">The interface type of the client's main controller
            客户端主控制器接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEventTask`2.socketEventTask">
            <summary>
            Command client socket event task caching
            命令客户端套接字事件任务缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketEventTask`2.currentSocketEventTask">
            <summary>
            The current command client socket event task
            当前命令客户端套接字事件任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`2.#ctor(AutoCSer.Net.CommandClient)">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
            <param name="client">Command client</param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`2.OnClosed(AutoCSer.Net.CommandClientSocket)">
            <summary>
            Close the command to notify the client of the current socket. The default operation is to notify the caller waiting for the current connection. This call is located in the client lock operation. The initialization operation should be completed as soon as possible. It is prohibited to call the internal nested lock operation to avoid deadlock
            关闭命令客户端当前套接字通知，默认操作为通知等待当前连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`2.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            After the command client socket passes the authentication API, the client initialization operation is carried out. The default operation is to reset the current socket and automatically bind the client controller operation and notify the caller waiting to connect. This call is located in the client lock operation. The initialization operation should be completed as soon as possible. It is prohibited to call the internal nested lock operation to avoid deadlock
            命令客户端套接字通过认证 API 以后的客户端初始化操作，默认操作为重置当前套接字与自动绑定客户端控制器操作并通知等待连接的调用者，此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`2.Wait">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientSocketEventTask`2.wait">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandClientSocketReceiveStateEnum">
            <summary>
            客户端套接字接收命令执行状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientSocketReceiveStateEnum.Asynchronous">
            <summary>
            等待异步完成
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandClientTaskQueueController`1">
            <summary>
            服务端 Task 队列命令客户端控制器
            </summary>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandClientTaskQueueController`1.Controller">
            <summary>
            The command client controller
            命令客户端控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandClientTaskQueueController`1.Key">
            <summary>
            队列关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandClientTaskQueueController`1.#ctor(AutoCSer.Net.CommandClientController,`0)">
            <summary>
            服务端 Task 队列命令客户端控制器
            </summary>
            <param name="controller"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandClientTaskQueueController`1.GetController(AutoCSer.Net.CommandClientTaskQueueController{`0})">
            <summary>
            Get the command client controller
            获取命令客户端控制器
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandClientTaskQueueController`1.GetKey(AutoCSer.Net.CommandClientTaskQueueController{`0})">
            <summary>
            获取队列关键字
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandListener">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MethodStartIndex">
            <summary>
            The starting position of the user command
            用户命令起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.CancelKeepMethodIndex">
            <summary>
            Cancel the keep callback command
            取消保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.CheckMethodIndex">
            <summary>
            Connect the heart rate detection command
            连接心跳检测命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.ControllerMethodIndex">
            <summary>
            Get the controller index command
            获取控制器索引命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.RemoteMetadataMethodIndex">
            <summary>
            Get the remote metadata command
            获取远程元数据命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.CustomDataMethodIndex">
            <summary>
            Custom data packet command
            自定义数据包命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MergeMethodIndex">
            <summary>
            Client flow merging command
            客户端流合并命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MinMethodIndex">
            <summary>
            Minimum system command
            最小系统命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MaxControllerCount">
            <summary>
            The maximum number of command controllers
            最大命令控制器数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.isSocketBuildOutputThread">
            <summary>
            Has the socket data sending thread been started
            是否已经启动套接字发送数据线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.Config">
            <summary>
            Command server configuration
            命令服务配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.Log">
            <summary>
            Log processing instance
            日志处理实例
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.ServerName">
            <summary>
            The service name is a unique identifier of the server registration. If the server registration is not required, it is only used for log output
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.Host">
            <summary>
            Information about the server host and port
            服务端主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.BinaryDeserializeConfig">
            <summary>
            Binary deserialization configuration parameters
            二进制反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.TaskQueueSet">
            <summary>
            Asynchronous task queue collection management
            异步任务队列集合管理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.ReceiveBufferPool">
            <summary>
            Receive data buffer pool
            接受数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.SendBufferPool">
            <summary>
            Send data buffer pool
            发送数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.VerifyTimeoutTicks">
            <summary>
            Verify the timeout clock cycle
            验证超时时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MaxInputSize">
            <summary>
            Maximum input data length
            最大输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MaxMergeInputSize">
            <summary>
            Maximum merged input data length
            最大合并输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.MinSocketSize">
            <summary>
            The minimum number of bytes for two consecutive times when the received and sent data is incomplete
            接收发送数据不完整时连续两次最小字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.SendBufferMaxSize">
            <summary>
            Maximum byte size of the send data buffer
            发送数据缓存区最大字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.SessionObject">
            <summary>
            Command server socket User-defined session object operation interface
            命令服务套接字自定义会话对象操作接口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.callQueues">
            <summary>
            The TCP server side synchronously calls the queue array
            TCP 服务器端同步调用队列数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.CallConcurrencyReadQueue">
            <summary>
            The TCP server side supports synchronous queues for parallel reading
            TCP 服务器端支持并行读的同步队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.CallReadWriteQueue">
            <summary>
            TCP server-side read and write queue
            TCP 服务器端读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.controllerLock">
            <summary>
            Command controller access lock
            命令控制器访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.Controllers">
            <summary>
            Command service controller collection
            命令服务控制器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.Controller">
            <summary>
            Main service controller
            主服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.RemoteMetadata">
            <summary>
            Remote expression server metadata information
            远程表达式服务端元数据信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListener.CommandEndIndex">
            <summary>
            End command sequence number
            结束命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.taskRunConcurrent">
            <summary>
            The number of concurrent operations allowed by Task.Run
            Task.Run 允许并发数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.offlineCount">
            <summary>
            Offline notification interface call count
            下线通知接口调用计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.IsOffline">
            <summary>
            Have you received the offline notification
            是否已经接收到下线通知
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.#ctor">
            <summary>
            By default, the server listens for empty commands
            默认空命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListener.Null">
            <summary>
            By default, the server listens for empty commands
            默认空命令服务端监听
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.#ctor(AutoCSer.Net.CommandServerConfig)">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.#ctor(AutoCSer.Net.CommandServerConfig,AutoCSer.Net.CommandServerInterfaceControllerCreator[])">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
            <param name="config">Configure the command server
            命令服务端配置</param>
            <param name="creators">Service controller creator collection
            服务控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.#ctor(AutoCSer.Net.CommandServerConfig,AutoCSer.LeftArray{AutoCSer.Net.CommandServerInterfaceControllerCreator}@)">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
            <param name="config">Configure the command server
            命令服务端配置</param>
            <param name="creators">Service controller creator collection
            服务控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetSessionObject``1">
            <summary>
            Gets the command service socket Custom Session object operation object
            获取命令服务套接字自定义会话对象操作对象
            </summary>
            <typeparam name="T">User-defined session object operation types
            自定义会话对象操作类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.Offline">
            <summary>
            Service offline notification
            服务下线通知
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.IncrementOfflineCount">
            <summary>
            Increase the call count of the offline notification interface
            增加下线通知接口调用计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.DecrementOfflineCount">
            <summary>
            The offline notification interface call has been completed
            下线通知接口调用完毕
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.CheckTaskRunConcurrent">
            <summary>
            Task.Run concurrent check
            Task.Run 并发检查
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.TaskRunConcurrent">
            <summary>
            Increase the concurrency of Task.Run
            增加 Task.Run 并发
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.FreeTaskRunConcurrent">
            <summary>
            Release Task.Run concurrency
            释放 Task.Run 并发
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(``0,System.String)">
            <summary>
            Add command controller
            添加命令控制器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controller">Controller interface operation example
            控制器接口操作实例</param>
            <param name="controllerName">Controller name, default typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Command controller
            命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.Func{``0},System.String)">
            <summary>
            Add command controller
            添加命令控制器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerCreator">Create a controller interface operation instance delegate
            创建控制器接口操作实例委托</param>
            <param name="controllerName">Controller name, default typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Command controller
            命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.Func{AutoCSer.Net.CommandListener,``0},System.String)">
            <summary>
            Add command controller
            添加命令控制器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerCreator">Create a controller interface operation instance delegate
            创建控制器接口操作实例委托</param>
            <param name="controllerName">Controller name, default typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Command controller
            命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``2(System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0},System.String)">
            <summary>
            Adding an asynchronous queue command controller
            添加异步队列命令控制器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <typeparam name="KT">Asynchronous queue keyword type
            异步队列关键字类型</typeparam>
            <param name="getTaskQueue">Gets the queue context delegate
            获取队列上下文委托</param>
            <param name="controllerName">Controller name, default typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Command controller
            命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.String,``0)">
            <summary>
            Add define asymmetric command controllers
            添加定义非对称命令控制器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerName">Controller name. The default MethodIndexEnumType type name is used
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controller">Controller interface operation example
            控制器接口操作实例</param>
            <returns>Command controller
            命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.String,System.Func{``0})">
            <summary>
            Add define asymmetric command controllers
            添加定义非对称命令控制器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerName">Controller name. The default MethodIndexEnumType type name is used
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>>
            <param name="controllerCreator">Create a controller interface operation instance delegate
            创建控制器接口操作实例委托</param>
            <returns>Command controller
            命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``1(System.String,System.Func{AutoCSer.Net.CommandListener,``0})">
            <summary>
            Add define asymmetric command controllers
            添加定义非对称命令控制器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerName">Controller name. The default MethodIndexEnumType type name is used
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">Create a controller interface operation instance delegate
            创建控制器接口操作实例委托</param>
            <returns>Command controller
            命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AppendController``2(System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0})">
            <summary>
            Adding an asynchronous queue defines an asymmetric command controller
            添加异步队列定义非对称命令控制器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <typeparam name="KT">Asynchronous queue keyword type
            异步队列关键字类型</typeparam>
            <param name="controllerName">Controller name. The default MethodIndexEnumType type name is used
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="getTaskQueue">Gets the queue context delegate
            获取队列上下文委托</param>
            <returns>Command controller
            命令控制器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.Append(AutoCSer.Net.CommandServerController)">
            <summary>
            Add the command controller
            添加命令控制器
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetControllers">
            <summary>
            Gets a collection of command service controllers
            获取命令服务控制器集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetController(System.String)">
            <summary>
            Get the controller by its name
            根据控制器名称获取控制器
            </summary>
            <param name="controllerName">Controller name
            控制器名称</param>
            <returns>null is returned when no matching name is found
            没有找到匹配名称返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetController(System.Type)">
            <summary>
            Get the controller by its name
            根据控制器名称获取控制器
            </summary>
            <param name="interfaceType">Controller interface type
            控制器接口类型</param>
            <returns>null is returned when no matching name is found
            没有找到匹配名称返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.Start">
            <summary>
            Start server listening
            启动服务端监听
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.OnClose(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Close the socket
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.listenAcceptCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Get the client requests the socket
            获取客户端请求套接字
            </summary>
            <param name="sender"></param>
            <param name="listenAcceptEvent"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetCommandController(System.UInt32@)">
            <summary>
            Gets the command service controller
            获取命令服务控制器
            </summary>
            <param name="commandMethodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.createServerCallQueue(System.Int32)">
            <summary>
            Gets the server execution queue
            获取服务端执行队列
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.getServerCallQueue(System.Int32)">
            <summary>
            Gets the server execution queue
            获取服务端执行队列
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.getServerCallLowPriorityQueue(System.Int32)">
            <summary>
            Gets the server execution queue
            获取服务端执行队列
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AddQueue(System.Byte,AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            Add a synchronous call queue task
            </summary>
            <param name="index">Queue number index
            队列编号索引</param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetServerCallQueue(AutoCSer.Net.CommandListener,System.Int32)">
            <summary>
            Gets the server execution queue
            获取服务端执行队列
            </summary>
            <param name="server"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.AddQueueLowPriority(System.Byte,AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            Add a synchronous call queue task (low priority)
            添加同步调用队列任务（低优先级）
            </summary>
            <param name="index">Queue number index
            队列编号索引</param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetServerCallQueueLowPriority(AutoCSer.Net.CommandListener,System.Int32)">
            <summary>
            Gets the server execution queue (low priority)
            获取服务端执行队列（低优先级）
            </summary>
            <param name="server"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.createServerCallReadWriteQueue">
            <summary>
            Gets the server read and write queue
            获取服务端读写队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.getServerCallReadWriteQueue">
            <summary>
            Gets the server read and write queue
            获取服务端读写队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetServerCallReadWriteQueue(AutoCSer.Net.CommandListener)">
            <summary>
            Gets the server read and write queue
            获取服务端读写队列
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.createServerCallConcurrencyReadQueue">
            <summary>
            Gets the synchronization queue that supports parallel reads on the server
            获取服务端支持并行读的同步队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.getServerCallConcurrencyReadQueue">
            <summary>
            Gets the synchronization queue that supports parallel reads on the server
            获取服务端支持并行读的同步队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetServerCallConcurrencyReadQueue(AutoCSer.Net.CommandListener)">
            <summary>
            Gets the synchronization queue that supports parallel reads on the server
            获取服务端支持并行读的同步队列
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.GetServerCallTaskQueueSet``1(AutoCSer.Net.CommandListener)">
            <summary>
            Gets the server asynchronous call queue
            获取服务端异步调用队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListener.QueryController(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Get controller information
            获取控制器信息
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandListenerBase">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.serviceRegistrar">
            <summary>
            Server registration component
            服务注册组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.socket">
            <summary>
            TCP socket
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.EndPoint">
            <summary>
            Get the socket listen address
            获取套接字监听地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.listenAcceptEvent">
            <summary>
            Listen for asynchronous events of the socket
            监听套接字异步事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.SocketAsyncEventArgsPool">
            <summary>
            Socket asynchronous event object pool
            套接字异步事件对象池
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.IsStart">
            <summary>
            Whether the service has been started
            是否已启动服务
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.IsDisposed">
            <summary>
            Is it closed
            是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBase.isSocketDisposed">
            <summary>
            Is trigger the quick close socket
            是否触发快速关闭套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.ServerName">
            <summary>
            The service name is a unique identifier of the server registration. If the server registration is not required, it is only used for log output
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBase.Host">
            <summary>
            The server listens to host and port information
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.#ctor">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.System#IAsyncDisposable#DisposeAsync">
            <summary>
            Release resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.DisposeServiceRegistrar(System.Int32)">
            <summary>
            Shut down the service after releasing the server registration component
            释放服务注册组件以后关闭服务
            </summary>
            <param name="delayMilliseconds">Milliseconds to wait after releasing the server registration component
            释放服务注册组件以后等待毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.DisposeSocket">
            <summary>
            Fast close socket for service switching operations
            快速关闭套接字，用于服务切换操作
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBase.Offline">
            <summary>
            Service offline notification
            服务下线通知
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandListenerBuilder">
            <summary>
            Create command server listeners
            创建命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandListenerBuilder.creators">
            <summary>
            Collection of service controller creators
            服务控制器创建器集合
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandListenerBuilder.Creators">
            <summary>
            Collection of service controller creators
            服务控制器创建器集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.#ctor(System.Int32)">
            <summary>
            Create command server listeners
            创建命令服务端监听
            </summary>
            <param name="creatorCapacity">The service controller creator collection initializes the container size
            服务控制器创建器集合容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.AppendInstance``1(``0,System.String)">
            <summary>
            Add the controller creator
            添加控制器创建器
            </summary>
            <typeparam name="T">Service instance type, specify the service interface type through AutoCSer.Net.CommandServerControllerAttribute.InterfaceType
            服务实例类型，通过 AutoCSer.Net.CommandServerControllerAttribute.InterfaceType 指定服务接口类型</typeparam>
            <param name="controller">Controller interface operation example
            控制器接口操作实例</param>
            <param name="controllerName">Controller name, default is typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(``0,System.String)">
            <summary>
            Add the controller creator
            添加控制器创建器
            </summary>
            <typeparam name="T">Service interface type
            服务接口类型</typeparam>
            <param name="controller">Controller interface operation example
            控制器接口操作实例</param>
            <param name="controllerName">Controller name, default is typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.AppendInstance``1(System.Func{``0},System.String)">
            <summary>
            Add the controller creator
            添加控制器创建器
            </summary>
            <typeparam name="T">Service instance type, specify the service interface type through AutoCSer.Net.CommandServerControllerAttribute.InterfaceType
            服务实例类型，通过 AutoCSer.Net.CommandServerControllerAttribute.InterfaceType 指定服务接口类型</typeparam>
            <param name="controllerCreator">Create a delegate of controller interface operation instances
            创建控制器接口操作实例委托</param>
            <param name="controllerName">Controller name, default is typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.Func{``0},System.String)">
            <summary>
            Add the controller creator
            添加控制器创建器
            </summary>
            <typeparam name="T">Service interface type
            服务接口类型</typeparam>
            <param name="controllerCreator">Create a delegate of controller interface operation instances
            创建控制器接口操作实例委托</param>
            <param name="controllerName">Controller name, default is typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.AppendInstance``1(System.Func{AutoCSer.Net.CommandListener,``0},System.String)">
            <summary>
            Add the controller creator
            添加控制器创建器
            </summary>
            <typeparam name="T">Service instance type, specify the service interface type through AutoCSer.Net.CommandServerControllerAttribute.InterfaceType
            服务实例类型，通过 AutoCSer.Net.CommandServerControllerAttribute.InterfaceType 指定服务接口类型</typeparam>
            <param name="controllerCreator">Create a delegate of controller interface operation instances
            创建控制器接口操作实例委托</param>
            <param name="controllerName">Controller name, default is typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.Func{AutoCSer.Net.CommandListener,``0},System.String)">
            <summary>
            Add the controller creator
            添加控制器创建器
            </summary>
            <typeparam name="T">Service interface type
            服务接口类型</typeparam>
            <param name="controllerCreator">Create a delegate of controller interface operation instances
            创建控制器接口操作实例委托</param>
            <param name="controllerName">Controller name, default is typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``2(System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0},System.String)">
            <summary>
            Add the controller creator
            添加控制器创建器
            </summary>
            <typeparam name="T">Service interface type
            服务接口类型</typeparam>
            <typeparam name="KT">Queue keyword type
            队列关键字类型</typeparam>
            <param name="getTaskQueue">Gets the queue context delegate
            获取队列上下文委托</param>
            <param name="controllerName">Controller name, default is typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.AppendInstance``1(System.String,``0)">
            <summary>
            Add the definition of the asymmetric controller creator
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T">Service instance type, specify the service interface type through AutoCSer.Net.CommandServerControllerAttribute.InterfaceType
            服务实例类型，通过 AutoCSer.Net.CommandServerControllerAttribute.InterfaceType 指定服务接口类型</typeparam>
            <param name="controllerName">The controller name, by default, is of type MethodIndexEnumType
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controller">Controller interface operation example
            控制器接口操作实例</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.String,``0)">
            <summary>
            Add the definition of the asymmetric controller creator
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T">Service interface type
            服务接口类型</typeparam>
            <param name="controllerName">The controller name, by default, is of type MethodIndexEnumType
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controller">Controller interface operation example
            控制器接口操作实例</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.AppendInstance``1(System.String,System.Func{``0})">
            <summary>
            Add the definition of the asymmetric controller creator
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T">Service instance type, specify the service interface type through AutoCSer.Net.CommandServerControllerAttribute.InterfaceType
            服务实例类型，通过 AutoCSer.Net.CommandServerControllerAttribute.InterfaceType 指定服务接口类型</typeparam>
            <param name="controllerName">The controller name, by default, is of type MethodIndexEnumType
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">Create a delegate of controller interface operation instances
            创建控制器接口操作实例委托</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.String,System.Func{``0})">
            <summary>
            Add the definition of the asymmetric controller creator
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T">Service interface type
            服务接口类型</typeparam>
            <param name="controllerName">The controller name, by default, is of type MethodIndexEnumType
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">Create a delegate of controller interface operation instances
            创建控制器接口操作实例委托</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.AppendInstance``1(System.String,System.Func{AutoCSer.Net.CommandListener,``0})">
            <summary>
            Add the definition of the asymmetric controller creator
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T">Service instance type, specify the service interface type through AutoCSer.Net.CommandServerControllerAttribute.InterfaceType
            服务实例类型，通过 AutoCSer.Net.CommandServerControllerAttribute.InterfaceType 指定服务接口类型</typeparam>
            <param name="controllerName">The controller name, by default, is of type MethodIndexEnumType
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">Create a delegate of controller interface operation instances
            创建控制器接口操作实例委托</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``1(System.String,System.Func{AutoCSer.Net.CommandListener,``0})">
            <summary>
            Add the definition of the asymmetric controller creator
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T">Service interface type
            服务接口类型</typeparam>
            <param name="controllerName">The controller name, by default, is of type MethodIndexEnumType
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">Create a delegate of controller interface operation instances
            创建控制器接口操作实例委托</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.Append``2(System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0})">
            <summary>
            Add the definition of the asymmetric controller creator
            添加定义非对称控制器创建器
            </summary>
            <typeparam name="T">Service interface type
            服务接口类型</typeparam>
            <typeparam name="KT">Queue keyword type
            队列关键字类型</typeparam>
            <param name="controllerName">The controller name, by default, is of type MethodIndexEnumType
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="getTaskQueue">Gets the queue context delegate
            获取队列上下文委托</param>
            <returns>Controller creator
            控制器创建器</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.CreateCommandListener(AutoCSer.Net.CommandServerConfig)">
            <summary>
            Create command server listeners
            创建命令服务端监听
            </summary>
            <param name="commandServerConfig"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandListenerBuilder.CreateCommandListener(AutoCSer.Net.CommandReverseClientConfig)">
            <summary>
            Create a reverse command service client
            创建反向命令服务客户端
            </summary>
            <param name="commandServerConfig"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerBindContextController">
            <summary>
            Socket context binding service instance (one instance for each connection)
            套接字上下文绑定服务实例（每个连接一个实例）
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindContextController.Socket">
            <summary>
            The socket of the currently executing task
            当前执行任务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindContextController.Controller">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindContextController.IsContext">
            <summary>
            Has the socket for the current execution task been set
            是否已经设置当前执行任务套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerBindContextController.#ctor">
            <summary>
            Socket context binding service instance (one instance for each connection)
            套接字上下文绑定服务实例（每个连接一个实例）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerBindContextController.Set(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerController)">
            <summary>
            Set the socket of the currently executing task
            设置当前执行任务套接字
            </summary>
            <param name="socket"></param>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerBindController">
            <summary>
            Bind the command service controller
            绑定命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindController.Controller">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerBindController.IsContext">
            <summary>
            Has the socket for the current execution task been set
            是否已经设置当前执行任务套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerBindController.#ctor">
            <summary>
            Bind the command service controller
            绑定命令服务控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerBindController.AutoCSer#Net#ICommandServerBindController#Bind(AutoCSer.Net.CommandServerController)">
            <summary>
            Bind the command service controller
            绑定命令服务控制器
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCall">
            <summary>
            Server-side call
            服务端调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCall.Socket">
            <summary>
            Command server socket
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCall.OfflineCount">
            <summary>
            The server side goes offline to count the object
            服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCall.CallbackIdentity">
            <summary>
            The session callback identifier is currently being processed
            当前处理会话回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.#ctor">
            <summary>
            Empty callback
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Server-side call
            服务端调用
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            Server-side call
            服务端调用
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            Server-side call
            服务端调用
            </summary>
            <param name="socket"></param>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            Server-side call
            服务端调用
            </summary>
            <param name="socket"></param>
            <param name="callbackIdentity"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.checkOfflineCount">
            <summary>
            Offline counting processing
            下线计数处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.send">
            <summary>
            Send the successful status
            发送成功状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.Send(AutoCSer.Net.CommandServerCall)">
            <summary>
            Send the successful status
            发送成功状态
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.send``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.Send``1(AutoCSer.Net.CommandServerCall,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="task"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.send(AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            The verification method sends data
            验证方法发送数据
            </summary>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.Send(AutoCSer.Net.CommandServerCall,AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            The verification method sends data
            验证方法发送数据
            </summary>
            <param name="task"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.RemoveKeepCallback(System.Exception)">
            <summary>
            Remove the asynchronous keep callback
            移除异步保持回调
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.RunTaskException(AutoCSer.Net.CommandServer.ServerMethodTypeEnum,System.Exception)">
            <summary>
            Get the exception of the Task.Run
            获取 Task.Run 任务异常
            </summary>
            <param name="methodType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.GetSocket(AutoCSer.Net.CommandServerCall)">
            <summary>
            Get the command service socket
            获取命令服务套接字
            </summary>
            <param name="serverCall"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCall.GetCustom(System.Byte)">
            <summary>
            Get the custom return value type
            获取自定义返回值类型
            </summary>
            <param name="customReturnType">Between 0 and 0x7f
            0-0x7f 之间</param>
            <returns>The custom return value type
            自定义返回值类型</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallback">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor">
            <summary>
            Empty callback
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.Callback(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Failure callback
            失败回调
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.Callback">
            <summary>
            Success status callback
            成功状态回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.SynchronousCallback">
            <summary>
            Successful status queue synchronization callback
            成功状态队列同步回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CancelKeep(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Cancel the keep callback command
            取消保持回调命令
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CreateServerCallback(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Create asynchronous callbacks
            创建异步回调
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CreateServerCallback(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CreateServerCallback(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CreateServerCallback(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback.CreateServerCallback(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallback`1">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallback`1.LinkNext">
            <summary>
            The next node of the linked list
            链表的下一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor">
            <summary>
            Empty callback
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Callback">
            <summary>
            No output callback is supported
            不支持无输出回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Callback(`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.SynchronousCallback(`0)">
            <summary>
            Queue synchronization callback
            队列同步回调
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.callback(AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="method"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Callback(AutoCSer.Net.CommandServerCallback{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="serverCallback"></param>
            <param name="method"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.synchronousCallback(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="queue"></param>
            <param name="method"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.SynchronousCallback(AutoCSer.Net.CommandServerCallQueue,AutoCSer.Net.CommandServerCallback{`0},AutoCSer.Net.CommandServer.ServerInterfaceMethod,`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="queue"></param>
            <param name="serverCallback"></param>
            <param name="method"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallback`1.Link">
            <summary>
            TCP server-side asynchronous callback linked list
            TCP 服务器端异步回调链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallback`1.Link.head">
            <summary>
            Head node
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Link.PushHead(AutoCSer.Net.CommandServerCallback{`0})">
            <summary>
            Add the head node
            </summary>
            <param name="head"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Link.Callback(`0)">
            <summary>
            Return value callback, clean up the callback failed object
            返回值回调，清理回调失败对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallback`1.Link.CancelKeep">
            <summary>
            Cancel all callbacks
            取消所有回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallbackTask">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallbackTask.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask.setTask(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask.onCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask.CreateServerCallbackTask(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask.CheckTask(AutoCSer.Net.CommandServerCallbackTask,System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="callbackTask"></param>
            <param name="task"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallbackTask`1">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallbackTask`1.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask`1.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask`1.setTask(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask`1.onCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackTask`1.CheckTask(AutoCSer.Net.CommandServerCallbackTask{`0},System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="callbackTask"></param>
            <param name="task"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallSendOnlyTask">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallSendOnlyTask.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallSendOnlyTask.#ctor(AutoCSer.Net.CommandServerSocket,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerSendOnly})">
            <summary>
            异步任务完成回调
            </summary>
            <param name="socket"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallSendOnlyTask.OnCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTask">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTask.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTask.#ctor(AutoCSer.Net.CommandServerSocket,System.Threading.Tasks.Task)">
            <summary>
            异步任务完成回调
            </summary>
            <param name="socket"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTask.OnCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTask`1">
            <summary>
            异步任务完成回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTask`1.Method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTask`1.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{`0})">
            <summary>
            异步任务完成回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTask`1.OnCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallVerifyStateTask">
            <summary>
            验证方法异步任务完成回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallVerifyStateTask.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallVerifyStateTask.task">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallVerifyStateTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            异步任务完成回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallVerifyStateTask.OnCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountTask`1">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountTask`1.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountTask`1.callbackTask">
            <summary>
            回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="callTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountTask`1.onCallCompleted">
            <summary>
            接口调用完成
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountTask`1.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountTask`1.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallback">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback.IsCancelKeep">
            <summary>
            Has the keep callback been cancelled
            是否已经取消保持回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerKeepCallback.IsCancelKeepCallback">
            <summary>
            Has the keep callback been cancelled
            是否已经取消保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback.outputCount">
            <summary>
            Output data count
            输出数据计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor">
            <summary>
            Empty callback
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.Callback">
            <summary>
            Success status callback
            成功状态回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CancelKeep(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Cancel the keep callback command
            取消保持回调命令
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.SetCancelKeep">
            <summary>
            Cancel the keep callback command
            取消保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.callback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.op_Implicit(AutoCSer.Net.CommandServerKeepCallback)~System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand}">
            <summary>
            Implicitly converted to client callback delegate
            隐式转换为客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.callback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.op_Implicit(AutoCSer.Net.CommandServerKeepCallback)~System.Action{AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand}">
            <summary>
            Implicitly converted to client callback delegate
            隐式转换为客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CreateServerKeepCallback(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback.CancelKeep(AutoCSer.Net.CommandServerKeepCallback)">
            <summary>
            Cancel the keep callback command
            取消保持回调命令
            </summary>
            <param name="keepCallback"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback.Null">
            <summary>
            The default empty TCP server-side asynchronous keep callback
            默认空 TCP 服务器端异步保持回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallback`1">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback`1.LinkNext">
            <summary>
            The next node of the linked list
            链表下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback`1.Method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor">
            <summary>
            Empty callback
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerCallReadWriteQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronous keep callback
            TCP 服务器端异步保持回调
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback">
            <summary>
            No output callback is supported
            不支持无输出回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback(`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
            <returns>Whether successfully added to the output queue, a false return indicates that the channel has been closed
            是否成功加入输出队列，返回 false 表示通道已关闭</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.VirtualCallback(`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
            <returns>Whether successfully added to the output queue, a false return indicates that the channel has been closed
            是否成功加入输出队列，返回 false 表示通道已关闭</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback(AutoCSer.Net.CommandServerCallQueue,`0)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="queue"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback(`0,System.Action)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
            <param name="onFree"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CallbackCancelKeep(`0)">
            <summary>
            Return the value callback and end the callback
            返回值回调并结束回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.VirtualCallbackCancelKeep(`0)">
            <summary>
            Return the value callback and end the callback
            返回值回调并结束回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Callback(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Return a collection of data
            返回数据集合
            </summary>
            <param name="values"></param>
            <param name="isCancel">Whether to close the callback after the callback is completed
            回调完成之后是否关闭回调</param>
            <returns>Whether successfully added to the output queue, a false return indicates that the channel has been closed
            是否成功加入输出队列，返回 false 表示通道已关闭</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.callback(AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.op_Implicit(AutoCSer.Net.CommandServerKeepCallback{`0})~System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.KeepCallbackCommand}">
            <summary>
            Implicitly converted to client callback delegate
            隐式转换为客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.callback(AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Client callback
            客户端回调
            </summary>
            <param name="returnValue"></param>
            <param name="queue"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.op_Implicit(AutoCSer.Net.CommandServerKeepCallback{`0})~System.Action{AutoCSer.Net.CommandClientReturnValue{`0},AutoCSer.Net.CommandClientCallQueue,AutoCSer.Net.KeepCallbackCommand}">
            <summary>
            Implicitly converted to client callback delegate
            隐式转换为客户端回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallReadWriteQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallback`1.Link">
            <summary>
            The TCP server side asynchronously maintains the callback linked list
            TCP 服务器端异步保持回调链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallback`1.Link.head">
            <summary>
            Head node
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerKeepCallback`1.Link.IsHead">
            <summary>
            Whether a head node exists
            是否存在头节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Link.PushHead(AutoCSer.Net.CommandServerKeepCallback{`0})">
            <summary>
            Add the head node
            </summary>
            <param name="head"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Link.Callback(`0)">
            <summary>
            Return value callback, clean up the callback failed object
            返回值回调，清理回调失败对象
            </summary>
            <param name="value"></param>
            <returns>Number of callback outputs (callback success not guaranteed)
            回调输出次数（不保证回调成功）</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallback`1.Link.CancelKeep">
            <summary>
            Cancel all callbacks
            取消所有回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCount">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCount.OutputLock">
            <summary>
            Output data access lock
            输出数据访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,System.Int32)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerSocket,System.Int32)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="socket"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerCallQueueNode,System.Int32)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerCallReadWriteQueueNode,System.Int32)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,System.Int32)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode,System.Int32)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.FreeCount">
            <summary>
            Release the output data count
            释放输出数据计数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.TrySetOutputCount(System.Int32)">
            <summary>
            Reset the count when the output data count is valid
            当输出数据计数有效时重新设置计数
            </summary>
            <param name="outputCount">The validity is greater than 0
            有效为大于 0</param>
            <returns>Whether the setting is successful or not, failure indicates that the current output data count is invalid
            是否设置成功，失败表示当前输出数据计数无效</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CallbackAsync">
            <summary>
            Return value callback, keep callback count and wait
            返回值回调，保持回调计数等待
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.SetCancelKeep">
            <summary>
            Cancel the keep callback command
            取消保持回调命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.tryCancelKeep">
            <summary>
            Try to cancel the keep callback command
            尝试取消保持回调命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CreateServerKeepCallback(AutoCSer.Net.CommandServerSocket,System.Int32)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallQueueNode,System.Int32)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallReadWriteQueueNode,System.Int32)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,System.Int32)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallTaskQueueNode,System.Int32)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount.Push(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            Add output
            添加输出
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCount`1">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCount`1.LinkNext">
            <summary>
            The next node of the linked list
            链表下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCount`1.Method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerCallReadWriteQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronously keep callback count
            TCP 服务器端异步保持回调计数
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.Callback">
            <summary>
            No output callback is supported
            不支持无输出回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync">
            <summary>
            No output callback is supported
            不支持无输出回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.getOutput(`0)">
            <summary>
            Get the output information
            获取输出信息
            </summary>
            <param name="returnValue"></param>
            <returns>Output information</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.tryCallback(`0,System.Boolean@)">
            <summary>
            Return value callback, and wait keep callback
            返回值回调，保持回调计数等待
            </summary>
            <param name="returnValue"></param>
            <param name="isPush"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync(`0)">
            <summary>
            Return value callback, and wait keep callback
            返回值回调，保持回调计数等待
            </summary>
            <param name="returnValue"></param>
            <returns>Whether successfully added to the output queue, a false return indicates that the channel has been closed
            是否成功加入输出队列，返回 false 表示通道已关闭</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync(`0,System.Action)">
            <summary>
            Return value callback, and wait keep callback
            返回值回调，保持回调计数等待
            </summary>
            <param name="returnValue"></param>
            <param name="onFree"></param>
            <returns>Whether successfully added to the output queue, a false return indicates that the channel has been closed
            是否成功加入输出队列，返回 false 表示通道已关闭</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CallbackAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Close the keep callback after returning the data collection
            返回数据集合以后关闭保持回调
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.EnumerableCallbackAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Close the keep callback after returning the data collection
            返回数据集合以后关闭保持回调
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallReadWriteQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.CreateServerKeepCallback(AutoCSer.Net.CommandServerCallTaskQueueNode,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link">
            <summary>
            The TCP server side asynchronously maintains the callback linked list
            TCP 服务器端异步保持回调链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link.head">
            <summary>
            Head node
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link.PushHead(AutoCSer.Net.CommandServerKeepCallbackCount{`0})">
            <summary>
            Add the head node
            </summary>
            <param name="head"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link.Callback(`0)">
            <summary>
            Return value callback, clean up the callback failed object
            返回值回调，清理回调失败对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCount`1.Link.CancelKeep">
            <summary>
            Cancel all callbacks
            取消所有回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCountTask">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCountTask.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,System.Int32)">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.#ctor(AutoCSer.Net.CommandServerSocket,System.Int32)">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
            <param name="socket"></param>
            <param name="outputCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.setCallTask(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.onCompletedAutoCancelKeep">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.setCallTaskAutoCancelKeep(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,System.Int32)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="outputCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.CheckTask(AutoCSer.Net.CommandServerKeepCallbackCountTask,System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask.CheckTaskAutoCancelKeep(AutoCSer.Net.CommandServerKeepCallbackCountTask,System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCountTask`1">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP 服务器端异步保持回调计数任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.setCallTask(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.onCompletedAutoCancelKeep">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.setCallTaskAutoCancelKeep(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.CheckTask(AutoCSer.Net.CommandServerKeepCallbackCountTask{`0},System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountTask`1.CheckTaskAutoCancelKeep(AutoCSer.Net.CommandServerKeepCallbackCountTask{`0},System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackTask">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackTask.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.setCallTask(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.onCompletedAutoCancelKeep">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.setCallTaskAutoCancelKeep(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.CheckTask(AutoCSer.Net.CommandServerKeepCallbackTask,System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask.CheckTaskAutoCancelKeep(AutoCSer.Net.CommandServerKeepCallbackTask,System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackTask`1">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackTask`1.callTask">
            <summary>
            接口调用任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.OfflineCount,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="offlineCount"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            TCP server-side asynchronous callback
            TCP 服务器端异步回调
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.onCompleted">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.setCallTask(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.onCompletedAutoCancelKeep">
            <summary>
            任务完成检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.setCallTaskAutoCancelKeep(System.Threading.Tasks.Task)">
            <summary>
            设置接口调用任务
            </summary>
            <param name="callTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.CreateServerKeepCallbackTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Create an asynchronous callback object
            创建异步回调对象
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.CheckTask(AutoCSer.Net.CommandServerKeepCallbackTask{`0},System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackTask`1.CheckTaskAutoCancelKeep(AutoCSer.Net.CommandServerKeepCallbackTask{`0},System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="task"></param>
            <param name="callTask"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallbackRunTask">
            <summary>
            Task.Run 异步任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallbackRunTask.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallbackRunTask.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask.SetIsDeserialize(AutoCSer.Net.CommandServerCallbackRunTask,System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask.RunTaskIsDeserialize(AutoCSer.Net.CommandServerCallbackRunTask)">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallbackRunTask`1">
            <summary>
            Task.Run 异步任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallbackRunTask`1.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallbackRunTask`1.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask`1.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask`1.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask`1.SetIsDeserialize(AutoCSer.Net.CommandServerCallbackRunTask{`0},System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallbackRunTask`1.RunTaskIsDeserialize(AutoCSer.Net.CommandServerCallbackRunTask{`0})">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask`1">
            <summary>
            Task.Run 异步任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask`1.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask`1.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask`1.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask`1.SetIsDeserialize(AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask{`0},System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask`1.RunTaskIsDeserialize(AutoCSer.Net.CommandServerEnumerableKeepCallbackCountRunTask{`0})">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCountRunTask">
            <summary>
            Task.Run 异步任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.runTaskAutoCancelKeep">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.SetIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackCountRunTask,System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.RunTaskIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackCountRunTask)">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask.RunTaskAutoCancelKeepIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackCountRunTask)">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1">
            <summary>
            Task.Run 异步任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1.runTaskAutoCancelKeep">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1.SetIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackCountRunTask{`0},System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1.RunTaskIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackCountRunTask{`0})">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackCountRunTask`1.RunTaskAutoCancelKeepIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackCountRunTask{`0})">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackRunTask">
            <summary>
            Task.Run 异步任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackRunTask.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackRunTask.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask.runTaskAutoCancelKeep">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask.SetIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackRunTask,System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask.RunTaskIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackRunTask)">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask.RunTaskAutoCancelKeepIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackRunTask)">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerKeepCallbackRunTask`1">
            <summary>
            Task.Run 异步任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerKeepCallbackRunTask`1.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask`1.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask`1.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask`1.runTaskAutoCancelKeep">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask`1.SetIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackRunTask{`0},System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask`1.RunTaskIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackRunTask{`0})">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerKeepCallbackRunTask`1.RunTaskAutoCancelKeepIsDeserialize(AutoCSer.Net.CommandServerKeepCallbackRunTask{`0})">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerRunTask">
            <summary>
            Task.Run 异步任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerRunTask.NullTask">
            <summary>
            默认 null 任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerRunTask.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerRunTask.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask.SetIsDeserialize(AutoCSer.Net.CommandServerRunTask,System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask.RunTaskIsDeserialize(AutoCSer.Net.CommandServerRunTask)">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerRunTask`1">
            <summary>
            Task.Run 异步任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerRunTask`1.NullTask">
            <summary>
            默认 null 任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerRunTask`1.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask`1.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask`1.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask`1.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask`1.SetIsDeserialize(AutoCSer.Net.CommandServerRunTask{`0},System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerRunTask`1.RunTaskIsDeserialize(AutoCSer.Net.CommandServerRunTask{`0})">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSendOnlyRunTask">
            <summary>
            Task.Run 异步任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSendOnlyRunTask.method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSendOnlyRunTask.IsDeserialize">
            <summary>
            Whether the parameters have been deserialized successfully
            参数是否反序列化成功
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSendOnlyRunTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSendOnlyRunTask.GetTask">
            <summary>
            Get the Task object that executes the command
            获取执行命令的 Task 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSendOnlyRunTask.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSendOnlyRunTask.SetIsDeserialize(AutoCSer.Net.CommandServerSendOnlyRunTask,System.Boolean)">
            <summary>
            Set whether the parameter deserialization is successful
            设置参数反序列化是否成功
            </summary>
            <param name="task"></param>
            <param name="isDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSendOnlyRunTask.RunTaskIsDeserialize(AutoCSer.Net.CommandServerSendOnlyRunTask)">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerVerifyStateRunTask">
            <summary>
            Task.Run 异步任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerVerifyStateRunTask.#ctor(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod)">
            <summary>
            Task.Run 异步任务
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerVerifyStateRunTask.onCompleted">
            <summary>
            异步任务完成回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerVerifyStateRunTask.runTask">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerVerifyStateRunTask.RunTaskIsDeserialize(AutoCSer.Net.CommandServerVerifyStateRunTask)">
            <summary>
            任务调用
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallQueueCustomNode">
            <summary>
            Server-side custom queue task nodes
            服务端自定义队列任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallQueueCustomNode.isQueue">
            <summary>
            Has it been added to the queue
            是否已经添加到队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallQueueCustomNode.CheckQueue">
            <summary>
            Check whether it has been added to the queue
            检查是否已经添加到队列
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueCustomTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.Wait">
            <summary>
            Wait for the return result of the task execution
            等待任务执行返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.GetResult">
            <summary>
            Gets the result of the task execution (Only for supporting await)
            获取任务执行返回结果（仅用于支持 await）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1">
            <summary>
            服务端异步调用队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.Wait">
            <summary>
            Wait for the return result of the task execution
            等待任务执行返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.GetResult">
            <summary>
            Gets the result of the task execution, return the default value before the result is returned (Only for supporting await)
            获取任务执行返回结果，结果未返回之前则返回默认值（仅用于支持 await）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTask`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.getTask">
            <summary>
            获取执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.exception">
            <summary>
            任务执行异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.isSynchronous">
            <summary>
            是否同步执行回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.RunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1">
            <summary>
            服务端异步调用队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.getTask">
            <summary>
            获取执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.callTask">
            <summary>
            接口返回返回任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.value">
            <summary>
            任务返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.exception">
            <summary>
            任务执行异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.isSynchronous">
            <summary>
            是否同步执行回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.RunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.queueOnCompleted">
            <summary>
            任务完成发送数据后调用下一个队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueCustomTaskNode`1.onCompleted">
            <summary>
            任务完成发送数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask">
            <summary>
            服务端异步调用队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.#ctor(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.Wait">
            <summary>
            Wait for the return result of the task execution
            等待任务执行返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.GetResult">
            <summary>
            Gets the result of the task execution, return null before the result is returned (Only for supporting await)
            获取任务执行返回结果，结果未返回之前则返回 null（仅用于支持 await）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1">
            <summary>
            服务端异步调用队列任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.#ctor(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            服务端异步调用队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.Wait">
            <summary>
            Wait for the return result of the task execution
            等待任务执行返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.GetResult">
            <summary>
            Gets the result of the task execution, return the default value before the result is returned (Only for supporting await)
            获取任务执行返回结果，结果未返回之前则返回默认值（仅用于支持 await）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerCallTaskQueueExceptionTask`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerConfig">
            <summary>
            Configure the command server
            命令服务端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.SessionObject">
            <summary>
            Command server socket User-defined session object operation interface
            命令服务套接字自定义会话对象操作接口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.SocketAsyncEventArgsMaxCount">
            <summary>
            Number of socket asynchronous event object caches. The default value is 256. The recommended value for open services is greater than 1024
            套接字异步事件对象缓存数量，默认为 256，开放服务建议值大于 1024
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.VerifyTimeoutSeconds">
            <summary>
            Authentication timeout seconds. The default value is 4
            认证超时秒数，默认为 4
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.MinSocketSize">
            <summary>
            The default value is 1. The recommended value for open service is 512 to avoid slow attacks on the client
            接收发送数据不完整时连续两次最小字节数，默认为 1，开放服务建议值为 512 避免客户端慢攻击
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.MaxVerifyDataSize">
            <summary>
            Maximum number of authentication data bytes. The default value is 256 bytes
            最大认证数据字节数量，默认为 256 字节
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.SendBufferMaxSize">
            <summary>
            The default value is 0, indicating no limit. The recommended value for open services is not greater than 1MB
            发送数据缓冲区最大字节数，默认为 0 表示不限制，开放服务建议值不大于 1MB
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.BinaryDeserializeMaxArraySize">
            <summary>
            The maximum length of the binary deserialized array. The default value is 0, indicating no limit. The open service is recommended to prevent memory occupation attacks according to the actual situation
            二进制反序列化数组最大长度，默认为 0 表示不限制，开放服务建议根据实际情况设置防止内存占用攻击，大数组建议拆分循环调用发送或者保持回调模式接收
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.QueueTimeoutSeconds">
            <summary>
            The default value is 0, indicating no check. This parameter is used to check whether queued tasks are blocked or deadlocked for a long time
            同步队列任务执行超时检查秒数，默认为 0 表示不检查，用于检查队列任务是否存在长时间阻塞或者死锁问题
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.BuildOutputThread">
            <summary>
            The default is queue mode
            默认为队列模式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.IsOutputControllerMethodName">
            <summary>
            The default value true indicates that the command controller queries the output data containing method name for client match verification
            默认为 true 表示命令控制器查询输出数据包含方法名称用于客户端匹配验证
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.IsOutputExceptionMessage">
            <summary>
            If the default value is true, abnormal information about the server is displayed. If the service is open, you are advised to set it to false to avoid sensitive information leakage
            默认为 true 表示输出服务端异常信息，开放服务建议设置为 false 避免敏感信息泄漏
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.NoDelay">
            <summary>
            The default is true, indicating that the Nagle algorithm is disabled and data is sent immediately
            默认为 true 表示禁用 Nagle 算法，立即发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.IsRemoteExpression">
            <summary>
            The default value of false indicates that remote expressions are not supported. Setting it to true means allowing arbitrary code execution, so the client needs to be fully trusted
            默认为 false 表示不支持远程表达式；设置为 true 意味着允许执行任意代码，所以需要客户端完全可信任
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.MaxReadWriteQueueConcurrency">
            <summary>
            The maximum concurrent number of the default read/write queue is set to the number of CPU logical processors minus 1 by default
            默认读写队列最大并发数量，默认为 CPU 逻辑处理器数量 - 1
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.MaxTaskRunConcurrent">
            <summary>
            The maximum Task.Run concurrency is set to 1024 by default, and should be set to 0 for highly concurrent lightweight applications
            最大 Task.Run 并发默认为 1024，高并发轻量级应用应该设置为 0
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.TaskQueueMaxConcurrent">
            <summary>
            The default value 1 indicates the pure queue mode. If the value is greater than 1, the concurrent throughput can be increased. However, the queue lock operation must be added to access shared resources, and the write operation can be executed only after all uncompleted read operations are complete. Therefore, the number of concurrent read tasks should not be too large to avoid a long wait time for write operations
            异步读写队列最大读操作并发任务数量，默认为 1 表示纯队列模式，当设置大于 1 时可提高并发吞吐，但是访问共享资源需要增加队列锁操作，而且写操作需要等待所有未完成读取操作结束以后才能执行，所以并发读取任务数量不宜过大避免造成写操作等待时间过长
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.TaskQueueWaitCount">
            <summary>
            The number of waiting read and write tasks in the asynchronous read and write queue. The default value is 16 and the minimum value is 1. The number of waiting read and write tasks should not be too large to prevent long write wait time
            异步读写队列写操作等待读取操作任务数量，默认为 16，最小值为 1，等待读取操作任务数量不宜过大避免造成写操作等待时间过长
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.TaskQueueTimeoutSeconds">
            <summary>
            The default value is 60, indicating that the queue is deleted after no new tasks are performed within the specified period. If the value is 0, the queue is deleted immediately after the queue is executed to avoid memory occupation. If the value is negative, the memory is permanently occupied
            异步读写队列驻留超时秒数，默认为 60 表示等待指定时间以后没有新任务再删除队列，设置为 0 表示队列任务执行完以后立即删除队列避免占用内存，设置为负数表示永久驻留内存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.MaxKeepCallbackCount">
            <summary>
            The maximum number of keep callbacks is set to 0 by default, indicating no limit. Open services should be set according to the actual situation to avoid memory usage attacks
            最大保持回调数量，默认为 0 表示不限制，开放服务应该根据实际情况设置避免内存占用攻击
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.Verify(System.Net.Sockets.Socket,AutoCSer.Net.CommandListener)">
            <summary>
            Validation sockets, such as IP addresses, return true by default
            验证套接字，比如验证 IP 地址，默认返回 true
            </summary>
            <param name="socket"></param>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.OnCustomData(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            The custom data processing, the default return AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CustomCommandError and close the current socket (attention, because it is receiving data IO thread synchronization calls, If there is a block please open a new thread task processing)
            自定义数据处理，默认返回 AutoCSer.Net.CommandServer.ServerReceiveErrorTypeEnum.CustomCommandError 并关闭当前套接字（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="socket"></param>
            <param name="data"></param>
            <returns>Server receives data error type. If not Success is returned, the current socket is closed
            服务端接收数据错误类型，返回非 Success 则关闭当前套接字</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.GetRegistrar(AutoCSer.Net.CommandListener)">
            <summary>
            Get the service registration component, which returns new AutoCSer.Net.CommandServiceRegistrar(server) by default and is called all at once during service initialization
            获取服务注册组件，默认返回 new AutoCSer.Net.CommandServiceRegistrar(server)，服务初始化时一次性调用
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.GetBinaryDeserializeConfig">
            <summary>
            Gets binary deserialization configuration parameters
            获取二进制反序列化配置参数，默认返回 new AutoCSer.BinarySerialize.DeserializeConfig { IsDisposeMemberMap = true, MaxArraySize = BinaryDeserializeMaxArraySize 小于等于 0 ? int.MaxValue : BinaryDeserializeMaxArraySize }，服务初始化时一次性调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.TransferEncode(AutoCSer.Net.CommandServerSocket,System.Byte[],System.Int32,System.Int32,AutoCSer.Memory.ByteArrayBuffer@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Send data coding
            发送数据编码
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <param name="data">Original data
            原始数据</param>
            <param name="dataIndex">Origin of original data
            原始数据起始位置</param>
            <param name="dataSize">Number of bytes of original data
            原始数据字节数</param>
            <param name="buffer">Output data buffer
            输出数据缓冲区</param>
            <param name="outputData">Output data
            输出数据</param>
            <param name="outputSeek">Start position of output data
            输出数据起始位置</param>
            <param name="outputHeadSize">The output data exceeds the header size
            输出数据多余头部大小</param>
            <returns>Whether the sent data is encoded
            发送数据是否编码</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.TransferDecode(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte},AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Received data decoding
            接收数据解码
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <param name="transferData">The encoded data
            编码后的数据</param>
            <param name="outputData">Original data buffer waiting to be written
            等待写入的原始数据缓冲区</param>
            <returns>Whether the decoding is successful
            是否解码成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.GetTaskQueueTypeSet(AutoCSer.Net.CommandListener)">
            <summary>
            Create an asynchronous read/write queue management, the default return new AutoCSer.Net.CommandServerCallTaskQueueTypeSet(server), one-time calls upon initial service
            创建异步读写队列管理，默认返回 new AutoCSer.Net.CommandServerCallTaskQueueTypeSet(server)，服务初始化时一次性调用
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.CheckTaskQueueKey``1(``0)">
            <summary>
            Check whether the keyword of the asynchronous read/write queue is valid
            检查异步读写队列关键字是否合法
            </summary>
            <typeparam name="T">Type of the queue keyword
            队列关键字类型</typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.IgnoreVerifyMethod(AutoCSer.Net.CommandServerController)">
            <summary>
            Authentication API warnings exist for non-primary controllers.
            非主控制器存在认证 API 警告
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.OnQueueTimeout(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallQueue,System.Int64)">
            <summary>
            Synchronization queue task timeout notification
            同步队列任务执行超时通知
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="seconds">Current task execution seconds
            当前任务执行秒数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfig.OnQueueTimeout(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallTaskQueue,System.Int64)">
            <summary>
            Asynchronous read/write queue task execution timeout notification
            异步读写队列任务执行超时通知
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="seconds">Current task execution seconds
            当前任务执行秒数</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.Null">
            <summary>
            Default empty command server configuration
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfig.NullServerOutput">
            <summary>
            Output information of the default empty server socket
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerConfigBase">
            <summary>
            Command server configuration
            命令服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.ServerName">
            <summary>
            The server name is a unique identifier of the server registration. If the server registration is not required, it is only used for log output
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.Host">
            <summary>
            The server listens to host and port information
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.ReceiveBufferSizeBits">
            <summary>
            Received data cache pool Byte size Number of binary bits. The default value is 17. The value is 128KB. The recommended value for open services is no more than 12 to avoid excessive memory usage
            接收数据缓存区池字节大小二进制位数量，默认为 17 为 128KB，开放服务建议值不大于 12 避免内存占用过多
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.SendBufferSizeBits">
            <summary>
            Send data cache pool Byte size Number of binary bits. The default value is 17. The value is 128KB. The recommended value for open services is no more than 12 to avoid excessive memory usage
            发送数据缓存区池字节大小二进制位数量，默认为 17 为 128KB，开放服务建议值不大于 12 避免内存占用过多
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.IsSerializeCopyString">
            <summary>
            By default, true indicates that string binary serialization directly copies memory data. Setting it to false encodes ASCII, which can reduce space occupation
            默认为 true 表示字符串二进制序列化直接复制内存数据，设置为 false 则对 ASCII 进行编码可以降低空间占用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.IsShortLink">
            <summary>
            By default, false indicates the long connection mode; otherwise, it only supports one request for the short connection mode (validation functions are not supported)
            默认为 false 表示长连接模式，否则只为短连接模式仅支持 1 次请求（不支持验证函数）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.MaxInputSize">
            <summary>
            The maximum number of bytes of input data, the default is 0 to indicate no limit, the open service recommended value is less than 2^ ReceiveBufferSizeBis-12 and the API is not recommended to produce large object transport behavior
            最大输入数据字节数，默认为 0 表示不限制，开放服务建议值小于 2^ReceiveBufferSizeBis - 12 而且不建议 API 产生大对象传输行为
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerConfigBase.Log">
            <summary>
            Log processing instance
            日志处理实例
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfigBase.GetAnyLevelLog(AutoCSer.LogLevelEnum)">
            <summary>
            Return a log processing instance if any level is supported
            如果支持指定任意级别则返回日志处理实例
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerConfigBase.OnControllerConstructorMessage(System.Type,System.String[])">
            <summary>
            The controller constructs a warning message
            控制器构造警告信息
            </summary>
            <param name="controllerType">Controller interface type
            控制器接口类型</param>
            <param name="messages">Construct warning message
            构造警告信息</param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.NullSocket">
            <summary>
            Default empty socket
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.NullSocketAsyncEventArgs">
            <summary>
            Default empty socket event
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.NullBinarySerializer">
            <summary>
            Default empty binary serialization
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerConfigBase.NullIPEndPoint">
            <summary>
            Default empty listening address
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerController">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.MaxCommandBits">
            <summary>
            多命令控制器模式最大命令数量有效位
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.MaxCommandCount">
            <summary>
            多命令控制器模式最大命令数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.DefaultAttribute">
            <summary>
            默认命令服务控制器配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.Server">
            <summary>
            命令服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.ControllerName">
            <summary>
            控制器名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.Attribute">
            <summary>
            命令控制器配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.Methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.VerifyMethod">
            <summary>
            Verification method
            验证方法
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.VerifyMethodIndex">
            <summary>
            验证方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CallQueue">
            <summary>
            同步调用队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CallQueueLowPriority">
            <summary>
            同步调用低优先级队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CallConcurrencyReadQueue">
            <summary>
            支持并发读队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CallReadWriteQueue">
            <summary>
            读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CallTaskQueue">
            <summary>
            The queue for asynchronous server calls
            服务端异步调用队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CommandStartIndex">
            <summary>
            起始命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.CommandEndIndex">
            <summary>
            结束命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController.ControllerIndex">
            <summary>
            控制器在服务中的索引编号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.#ctor(AutoCSer.Net.CommandListener)">
            <summary>
            默认空命令服务控制器
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.#ctor(AutoCSer.Net.CommandListener,System.String,AutoCSer.Net.CommandServerControllerInterfaceAttribute,AutoCSer.Net.CommandServer.ServerInterfaceMethod[],System.Int32,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
            <param name="server">Command server to listen
            命令服务端监听</param>
            <param name="controllerName">控制器名称</param>
            <param name="attribute"></param>
            <param name="methods"></param>
            <param name="verifyMethodIndex"></param>
            <param name="controllerQueue">控制器同步队列标记</param>
            <param name="isConcurrencyReadQueue">是否存在并发读队列</param>
            <param name="isReadWriteQueue">是否存在控制器读写队列</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.Close">
            <summary>
            关闭控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.GetControllerObject">
            <summary>
            控制器接口实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.SetCommandStartIndex(System.Int32)">
            <summary>
            设置起始命令序号
            </summary>
            <param name="commandStartIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.GetMethod(System.Int32)">
            <summary>
            获取服务端接口方法信息
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.GetCommandMapIndex(System.Int32)">
            <summary>
            获取命令位图索引
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.DoCommand(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <param name="data">命令数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddQueue(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加同步调用队列任务
            </summary>
            <param name="node"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddQueueLowPriority(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加同步调用队列低优先级任务
            </summary>
            <param name="node"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.Add(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task})">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTask(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddExceptionTask(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTask``1(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddExceptionTask``1(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.Add(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddExceptionTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddExceptionTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriority(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task})">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="getTask"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityTask(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityExceptionTask(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityTask``1(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityExceptionTask``1(System.Func{AutoCSer.Net.CommandServerCallTaskQueue,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriority(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="getTask"></param>
            <returns>返回 false 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityExceptionTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddLowPriorityExceptionTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="getTask"></param>
            <param name="isSynchronous">是否同步执行回调，默认为 false 表示任务执行回调，设置为 true 可能阻塞队列执行</param>
            <returns>可 await 任务对象，返回 null 表示当前控制器不支持异步队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTaskQueue(AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <param name="controller"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController.AddTaskQueueLowPriority(AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="controller"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerController`1">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
            <typeparam name="T">控制器接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController`1.Controller">
            <summary>
            控制器接口实例
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerController`1.getBindController">
            <summary>
            获取控制器接口实例
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.#ctor(AutoCSer.Net.CommandListener,System.String,`0,System.Func{AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerBindContextController},System.Int32,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
            <param name="server">Command server to listen
            命令服务端监听</param>
            <param name="controllerName">控制器名称</param>
            <param name="controller"></param>
            <param name="getBindController"></param>
            <param name="verifyMethodIndex"></param>
            <param name="controllerQueue">控制器同步队列标记</param>
            <param name="isConcurrencyReadQueue">是否存在并发读队列</param>
            <param name="isReadWriteQueue">是否存在控制器读写队列</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.Close">
            <summary>
            关闭控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.GetControllerObject">
            <summary>
            控制器接口实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.getController(AutoCSer.Net.CommandServerSocket)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.GetController(AutoCSer.Net.CommandServerController{`0},AutoCSer.Net.CommandServerSocket)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="controller"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.GetQueueNodeController(AutoCSer.Net.CommandServerController{`0},AutoCSer.Net.CommandServerCallQueueNode)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="controller"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.GetReadWriteQueueNodeController(AutoCSer.Net.CommandServerController{`0},AutoCSer.Net.CommandServerCallReadWriteQueueNode)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="controller"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerController`1.GetConcurrencyReadQueueNodeController(AutoCSer.Net.CommandServerController{`0},AutoCSer.Net.CommandServerCallConcurrencyReadQueueNode)">
            <summary>
            获取控制器接口实例
            </summary>
            <param name="controller"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerControllerAttribute">
            <summary>
            命令控制器接口配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerAttribute.InterfaceType">
            <summary>
            服务接口类型
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerControllerInterfaceAttribute">
            <summary>
            Command controller interface configuration
            命令服务控制器接口配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.IsCodeGeneratorMethodEnum">
            <summary>
            The default is true, indicating the generation method sequence number mapping enumeration type
            默认为 true 表示生成方法序号映射枚举类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.MethodIndexEnumTypeCodeGeneratorPath">
            <summary>
            Generate method sequence number mapping enumeration type code relative path. The default is null, indicating that the code is generated in the default file {xxx}.AutoCSer.cs
            生成方法序号映射枚举类型代码相对路径，默认为 null 表示代码生成到默认文件 {xxx}.AutoCSer.cs 中
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.IsCodeGeneratorClientInterface">
            <summary>
            The default true indicates that the code generator generates the client controller interface
            默认为 true 表示代码生成器生成客户端控制器接口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.IsSimpleSerializeInputParameter">
            <summary>
            The default value true indicates that input parameters are preferred for simple serialization operations
            默认为 true 表示输入参数优先适配简单序列化操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.IsSimpleSerializeOutputParameter">
            <summary>
            The default true indicates that the output parameters are preferred for simple serialization operations
            默认为 true 表示输出参数优先适配简单序列化操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.MaxReadWriteQueueConcurrency">
            <summary>
            The maximum concurrent number of the default read/write queue is set to the number of CPU logical processors minus 1 by default
            默认读写队列最大并发数量，默认为 CPU 逻辑处理器数量 - 1
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.TaskQueueMaxConcurrent">
            <summary>
            The default value is 0, indicating that the controller queue is disabled. If the recommended value of the controller queue is set to 1, the concurrency problem is ignored. If the value is greater than 1, the concurrent throughput can be increased. In addition, write operations can be performed only after all unfinished read operations are complete. Therefore, the number of concurrent read tasks should not be too large to prevent long write operation waiting time
            异步读写队列最大读操作并发任务数量，默认为 0 表示不启用控制器队列，如果启用控制器队列建议值为 1 可以不考虑并发问题，当设置大于 1 时可提高并发吞吐，但是访问共享资源需要增加队列锁操作，而且写操作需要等待所有未完成读取操作结束以后才能执行，所以并发读取任务数量不宜过大避免造成写操作等待时间过长
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerControllerInterfaceAttribute.TaskQueueWaitCount">
            <summary>
            The number of waiting read and write tasks in the asynchronous read and write queue. The default value is 16 and the minimum value is 1. The number of waiting read and write tasks should not be too large to prevent long write wait time
            异步读写队列写操作等待读取操作任务数量，默认为 16，最小值为 1，等待读取操作任务数量不宜过大避免造成写操作等待时间过长
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerControllerInterfaceAttribute.Clone">
            <summary>
            Copy the command controller configuration
            复制命令控制器配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerControllerInterfaceAttribute.GetControllerName(System.Type)">
            <summary>
            Gets the method number mapping enumeration type
            获取方法序号映射枚举类型
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerInterfaceControllerCreator">
            <summary>
            Service controller creator
            服务控制器创建器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator.ControllerName">
            <summary>
            Controller name
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.#ctor(System.String)">
            <summary>
            Controller creator
            </summary>
            <param name="controllerName"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.Create(AutoCSer.Net.CommandListener)">
            <summary>
            Create a service controller
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.Check">
            <summary>
            Check the error information about the service controller
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.getInterfaceServiceType(System.Type)">
            <summary>
            Gets the service interface type
            获取服务接口类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(``0,System.String)">
            <summary>
            Gets the controller creator
            获取控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controller">Controller interface operation instance
            控制器接口操作实例</param>
            <param name="controllerName">Controller name, default typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.Func{``0},System.String)">
            <summary>
            Gets the controller creator
            获取控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerCreator">Create a controller interface operation instance delegate
            创建控制器接口操作实例委托</param>
            <param name="controllerName">Controller name, default typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.Func{AutoCSer.Net.CommandListener,``0},System.String)">
            <summary>
            Gets the controller creator
            获取控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerCreator">Create a controller interface operation instance delegate
            创建控制器接口操作实例委托</param>
            <param name="controllerName">Controller name, default typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``2(System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0},System.String)">
            <summary>
            Gets the controller creator
            获取异步队列控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <typeparam name="KT">Asynchronous queue keyword type
            异步队列关键字类型</typeparam>
            <param name="getTaskQueue">Gets the queue context delegate
            获取队列上下文委托</param>
            <param name="controllerName">Controller name, default typeof(T).FullName
            控制器名称，默认为 typeof(T).FullName</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.String,``0)">
            <summary>
            Gets the asymmetric controller creator defined
            获取定义非对称控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerName">Controller name. The default MethodIndexEnumType type name is used
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controller">Controller interface operation instance
            控制器接口操作实例</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.String,System.Func{``0})">
            <summary>
            Gets the asymmetric controller creator defined
            获取定义非对称控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerName">Controller name. The default MethodIndexEnumType type name is used
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">Create a controller interface operation instance delegate
            创建控制器接口操作实例委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``1(System.String,System.Func{AutoCSer.Net.CommandListener,``0})">
            <summary>
            Gets the asymmetric controller creator defined
            获取定义非对称控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <param name="controllerName">Controller name. The default MethodIndexEnumType type name is used
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="controllerCreator">Create a controller interface operation instance delegate
            创建控制器接口操作实例委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator.GetCreator``2(System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0})">
            <summary>
            Gets the asymmetric controller creator defined
            获取异步队列定义非对称控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <typeparam name="KT">Asynchronous queue keyword type
            异步队列关键字类型</typeparam>
            <param name="controllerName">Controller name. The default MethodIndexEnumType type name is used
            控制器名称，默认采用 MethodIndexEnumType 类型名称</param>
            <param name="getTaskQueue">Gets the queue context delegate
            获取队列上下文委托</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerInterfaceControllerCreator`1">
            <summary>
            Service Controller Creator
            服务控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.controllerCreator">
            <summary>
            Create the controller interface instance delegate
            创建控制器接口实例委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.isFunc">
            <summary>
            Is delegate parameters
            是否委托参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.#ctor(System.String,`0)">
            <summary>
            Controller creator
            </summary>
            <param name="controllerName"></param>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.#ctor(System.String,System.Func{`0})">
            <summary>
            Controller creator
            </summary>
            <param name="controllerName"></param>
            <param name="controllerCreator"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.#ctor(System.String,System.Func{AutoCSer.Net.CommandListener,`0})">
            <summary>
            Controller creator
            </summary>
            <param name="controllerName"></param>
            <param name="controllerCreator"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.Create(AutoCSer.Net.CommandListener)">
            <summary>
            Create a service controller
            创建服务控制器
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.Check">
            <summary>
            Check the error messages related to the service controller
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController">
            <summary>
            Gets the controller interface instance
            获取控制器接口实例
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController.server">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController.controllerCreator">
            <summary>
            Create the controller interface instance delegate
            创建控制器接口实例委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController.#ctor(AutoCSer.Net.CommandListener,System.Func{AutoCSer.Net.CommandListener,`0})">
            <summary>
            Gets the controller interface instance
            获取控制器接口实例
            </summary>
            <param name="server"></param>
            <param name="controllerCreator"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`1.GetBindContextController.Get(AutoCSer.Net.CommandServerController,AutoCSer.Net.CommandServerSocket)">
            <summary>
            Gets the controller interface instance
            获取控制器接口实例
            </summary>
            <param name="commandServerController"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerInterfaceControllerCreator`2">
            <summary>
            Task Queue Service Controller Creator
            Task 队列服务控制器创建器
            </summary>
            <typeparam name="T">Controller interface type
            控制器接口类型</typeparam>
            <typeparam name="KT">Asynchronous queue keyword type
            异步队列关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerInterfaceControllerCreator`2.getTaskQueue">
            <summary>
            Gets the queue context delegate
            获取队列上下文委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`2.#ctor(System.String,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,`1,`0})">
            <summary>
            Controller creator
            控制器创建器
            </summary>
            <param name="controllerName"></param>
            <param name="getTaskQueue"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`2.Create(AutoCSer.Net.CommandListener)">
            <summary>
            Create a service controller
            创建服务控制器
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerInterfaceControllerCreator`2.Check">
            <summary>
            Check the error messages related to the service controller
            检查服务控制器相关错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerMethodAttribute">
            <summary>
            Command service method configuration
            命令服务方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.KeepCallbackOutputCount">
            <summary>
            Maintain the callback output count, a hold callback API setting for waiting counts, with a default of 1. It cannot batch output data. For internal service high-frequency call scenarios, it is recommended to set appropriate values based on specific business data and the size of the output cache to improve throughput and control memory usage
            保持回调输出计数，用于等待计数的保持回调 API 设置，默认为 1 无法批量输出数据，内部服务高频调用场景建议根据具体业务数据以及输出缓存区大小设置合适值以提高吞吐量并控制内存占用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsSynchronousCallTask">
            <summary>
            By default, false indicates that the framework schedules tasks based on concurrency; otherwise, tasks are synchronously called using IO threads
            默认为 false 表示框架根据并发情况调度 Task，否则使用 IO 线程同步调用 Task
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsOutputPool">
            <summary>
            By default, false indicates that the output object cache pool is not adopted. For frequent calls to the output interface, it is recommended to set it to true
            默认为 false 表示不采用输出对象缓存池，频繁调用输出接口建议设置为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.QueueIndex">
            <summary>
            The serial number of the synchronous queue. By default, 0 indicates an independent queue of the controller; otherwise, it is a shared queue of the current service
            同步队列序号，默认为 0 表示控制器独立队列，否则为当前服务的共享队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsControllerConcurrencyReadQueue">
            <summary>
            By default, true indicates that the controller independently supports the synchronous queue for parallel reading, while setting false represents the shared synchronous queue of the current service
            默认为 true 表示控制器独立支持并行读的同步队列，设置为 false 则为当前服务的共享同步队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsControllerReadWriteQueue">
            <summary>
            By default, true indicates the independent read and write queue of the controller, while setting false represents the shared read and write queue of the current service
            默认为 true 表示控制器独立读写队列，设置为 false 则为当前服务的共享读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsControllerTaskQueue">
            <summary>
            The default is true, indicating the use of the controller asynchronous task queue; otherwise, the queue keyword parameter needs to be prepared
            默认为 true 表示采用控制器异步任务队列，否则需要准备队列关键字参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsLowPriorityTaskQueue">
            <summary>
            The default is false, indicating that the Task queue controller mode does not use the low-priority API
            默认为 false 表示 Task 队列控制器模式不使用低优先级 API
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.AutoCancelKeep">
            <summary>
            The default is true, indicating that the hold callback is automatically cancelled when the API call is completed. Otherwise, the CancelKeep callback needs to be manually called to cancel, which is used in asynchronous call scenarios
            默认为 true 表示在 API 调用完成时自动取消保持回调，否则需要手动调用 CancelKeep 取消用于异步调用场景
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsOfflineCount">
            <summary>
            Whether to enable the service offline notification counting logic, which is used for singleton server registration to wait for all tasks to be completed before going offline and notifying the new service to go online, and to keep the calling-related interfaces from waiting for asynchronous callbacks to complete
            是否启用服务下线通知计数逻辑，用于单例服务注册等待所有任务完成以后下线并通知新服务上线，保持回调相关接口不等待异步回调完成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.IsExpired">
            <summary>
            Is expired
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerMethodAttribute.Default">
            <summary>
            Default command service method configuration
            默认命令服务方法配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSendOnly">
            <summary>
            The method that does not return data returns the type definition of the value
            不返回数据方法返回值类型定义
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSendOnly.Null">
            <summary>
            Default empty data
            默认空数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSendOnly.NullTask">
            <summary>
            Default empty task
            默认空任务
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSocket">
            <summary>
            Command server socket
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.Server">
            <summary>
            Command server to listen
            命令服务端监听
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.socket">
            <summary>
            Socket
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.onReceiveAsyncCallback">
            <summary>
            Receive asynchronous callback for data
            接收数据异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.buildOutputHandle">
            <summary>
            Attempt to send a data delegate
            尝试发送数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.keepCallbackLock">
            <summary>
            Asynchronously keep callback collection access lock
            异步保持回调集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.onClosedHashSet">
            <summary>
            Socket close event
            套接字关闭事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.pad0">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.commandDataLock">
            <summary>
            Command bitmap access lock
            命令位图访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.SessionObject">
            <summary>
            Custom session object
            自定义会话对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.bindControllers">
            <summary>
            The socket context binds the collection of server instances
            套接字上下文绑定服务端实例集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.commandData">
            <summary>
            The command bitmap that allows access
            允许访问的命令位图
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveAsyncEventArgs">
            <summary>
            Receive data socket asynchronous event object
            接收数据套接字异步事件对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveDeserializer">
            <summary>
            Receive binary deserialization of data
            接收数据二进制反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.verifyTimeout">
            <summary>
            Verify the timeout period
            验证超时时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveBuffer">
            <summary>
            Receive data buffer
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveBigBuffer">
            <summary>
            Temporary received data buffer
            临时接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveDataStart">
            <summary>
            The starting position for receiving data
            接收数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.lastReceiveSize">
            <summary>
            The number of bytes received last time
            上一次接收字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveIndex">
            <summary>
            The current number of bytes of received data being processed
            当前处理接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.transferDataSize">
            <summary>
            The byte size of the current data after encoding
            当前数据编码后的字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.dataSize">
            <summary>
            The current data byte size
            当前数据字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.controller">
            <summary>
            The current parsing command service controller
            当前解析命令服务控制器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerSocket.CurrentController">
            <summary>
            The current parsing command service controller
            当前解析命令服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.Method">
            <summary>
            Server interface method information
            服务端接口方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.OfflineCount">
            <summary>
            The current server is offline for counting objects
            当前服务端下线计数对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.CallbackIdentity">
            <summary>
            The session callback identifier is currently being processed
            当前处理会话回调标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerSocket.customDataSize">
            <summary>
            Customize the data byte length
            自定义数据字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputHead">
            <summary>
            Synchronous output head node
            同步输出头节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputEnd">
            <summary>
            Synchronize the output tail node
            同步输出尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.remoteExpressionFormatDeserialize">
            <summary>
            Format the remote expression deserialization data
            格式化远程表达式反序列化数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.createRemoteExpressionParameters">
            <summary>
            A collection of arguments for create a remote expression
            创建远程表达式参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.commandMethodIndex">
            <summary>
            The current command method sequence number + command flag bit information
            当前命令方法序号 + 命令标志位信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerSocket.CommandMethodIndex">
            <summary>
            Current command method sequence number
            当前命令方法序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.onReceiveThreadId">
            <summary>
            Receive the data thread ID
            接收数据线程ID
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveSocketError">
            <summary>
            The data receiving socket is incorrect
            接收数据套接字错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.VerifyState">
            <summary>
            The command service verifies the result status
            命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveType">
            <summary>
            Receive data callback type
            接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.receiveErrorType">
            <summary>
            Received data error type
            接收数据错误类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.IsShortLink">
            <summary>
            Is short connection
            是否短连接
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.pad1">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.nextOutputSocket">
            <summary>
            The next output socket
            下一个输出套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputs">
            <summary>
            The server-side socket outputs information
            服务端套接字输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.buildOutputHead">
            <summary>
            The first node of the unprocessed socket queue
            未处理套接字队列首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.buildOutputEnd">
            <summary>
            The tail node of the socket queue was not processed
            未处理套接字队列尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.isOutput">
            <summary>
            Is it being output
            是否正在输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.closeLock">
            <summary>
            Close the socket access lock
            Close the socket访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerSocket.IsClose">
            <summary>
            Whether the socket closing operation has been triggered
            是否已经触发套接字关闭操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.pad2">
            <summary>
            The CPU cache is filled with data blocks
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.keepCallbacks">
            <summary>
            Asynchronously keep callback collection
            异步保持回调集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.shortLinkKeepCallback">
            <summary>
            Short connection asynchronous keep callback
            短连接异步保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.OutputSerializer">
            <summary>
            Output data binary serialization
            输出数据二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.onSendAsyncCallback">
            <summary>
            Send asynchronous callbacks for data
            发送数据异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendAsyncEventArgs">
            <summary>
            Send asynchronous data events
            发送数据异步事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendBuffer">
            <summary>
            Output data buffer
            输出数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendTransferBuffer">
            <summary>
            Output the encoded data buffer
            输出编码数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendCopyBuffer">
            <summary>
            Output the copied data buffer
            输出复制数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendData">
            <summary>
            Send data
            发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.lastSendSize">
            <summary>
            The number of bytes sent last time
            上一次发送字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.sendSocketError">
            <summary>
            Error in sending data socket
            发送数据套接字错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.buildOutputThreadEnum">
            <summary>
            Server socket sends data thread type
            服务端套接字发送数据线程类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.isSerializeCopyString">
            <summary>
            String binary serialization directly copies memory data
            字符串二进制序列化直接复制内存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.isCloseSocket">
            <summary>
            Whether to trigger the socket close operation
            是否触发套接字关闭操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.isCloseShortLink">
            <summary>
            Whether it is necessary to close the short connection
            是否需要关闭短连接
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.IsCancelKeepCallback">
            <summary>
            Whether to cancel the asynchronous keep callback
            是否取消异步保持回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.#ctor">
            <summary>
            Empty command service socket, used to simulate the server-side context
            空命令服务套接字，用于模拟服务端上下文
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.#ctor(AutoCSer.Net.CommandListener,System.Net.Sockets.Socket)">
            <summary>
            Command server socket
            </summary>
            <param name="server"></param>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetBindController(System.Int32)">
            <summary>
            Get the socket context binding server instance
            获取套接字上下文绑定服务端实例
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetBindController(System.Int32,AutoCSer.Net.CommandServerBindContextController)">
            <summary>
            Get the socket context binding server instance
            获取套接字上下文绑定服务端实例
            </summary>
            <param name="index"></param>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetCommandData">
            <summary>
            Set the command bitmap that is allowed for access
            设置允许访问的命令位图
            </summary>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.ClearCommandData">
            <summary>
            Clear the commands that allow access
            清除允许访问的命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.setCommand(AutoCSer.Net.CommandServerController,System.Int32)">
            <summary>
            Set the commands allowed for access
            设置允许访问的命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetCommand(System.Int32,AutoCSer.Net.CommandServerController)">
            <summary>
            Set the commands allowed for access
            设置允许访问的命令
            </summary>
            <param name="methodIndex">The method number in the command service controller
            命令服务控制器中的方法编号</param>
            <param name="controller">Command service controller
            命令服务控制器</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetCommand(System.String,AutoCSer.Net.CommandServerController)">
            <summary>
            Set the commands allowed for access
            设置允许访问的命令
            </summary>
            <param name="methodName">Command service method name
            命令服务方法名称</param>
            <param name="controller">Command service controller
            命令服务控制器</param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetCommand(System.Collections.Generic.HashSet{System.String},AutoCSer.Net.CommandServerController)">
            <summary>
            Set the commands allowed for access
            设置允许访问的命令
            </summary>
            <param name="methodNames">A collection of command service method names
            命令服务方法名称集合</param>
            <param name="controller">Command service controller
            命令服务控制器</param>
            <returns>The number of matching methods
            匹配方法数量</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetVerifyState(AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
            <param name="verifyState"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetVerifyState(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            Set the status of the verification result of the command service
            设置命令服务验证结果状态
            </summary>
            <param name="socket"></param>
            <param name="verifyState"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetRemoteExpressionFormatDeserialize">
            <summary>
            Format the remote expression deserialization data
            格式化远程表达式反序列化数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetRemoteExpressionParameters">
            <summary>
            A collection of arguments for create a remote expression
            创建远程表达式参数集合
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.isRemoteMetadata">
            <summary>
            Has the remote metadata been obtained
            是否已经获取远程元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.appendRemoteMetadata">
            <summary>
            The client get the remote metadata
            客户端获取远程元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Start">
            <summary>
            Start receiving data
            开始接收数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.DisposeSocket">
            <summary>
            Close the socket
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.close">
            <summary>
            Close the socket
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CloseShortLink">
            <summary>
            Close the short connection
            关闭短连接
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.RemoveOnClosed(System.Action)">
            <summary>
            Remove the close callback delegate
            移除关闭回调委托
            </summary>
            <param name="onClosed"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SetOnClosed(System.Action)">
            <summary>
            Set the socket close event
            设置套接字关闭事件
            </summary>
            <param name="onClosed"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetCommandMethodIndex(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Get the current command method sequence number
            获取当前命令方法序号
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.checkReceiveSize(System.Int32)">
            <summary>
            When the received data is insufficient, check the length of the received data for two consecutive times
            接收数据不足时检查连续两次接收数据长度
            </summary>
            <param name="receiveSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.deserialize``1(AutoCSer.SubArray{System.Byte}@,``0@,System.Boolean)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="data">Data</param>
            <param name="value">Target object</param>
            <param name="isSimpleSerialize"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.createReceiveDeserializer">
            <summary>
            Receive binary deserialization of data
            接收数据二进制反序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Deserialize``1(AutoCSer.Net.CommandServerSocket,AutoCSer.SubArray{System.Byte}@,``0@,System.Boolean)">
            <summary>
            Deserialization
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <param name="data">Data</param>
            <param name="value">Target object</param>
            <param name="isSimpleSerialize"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckSynchronousIO(AutoCSer.BinaryDeserializer)">
            <summary>
            Check whether the current serialization is in the IO synchronization environment
            检查当前序列化是否 IO 同步环境
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetSwitchAwaiter">
            <summary>
            If the current thread is an IO thread receiving data, await forces the Task.Run operation
            如果当前线程为接收数据 IO 线程 await 强制 Task.Run 操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            The callback delegate after the data is received
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">Asynchronous callback parameters</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isReceiveVerifyCommand">
            <summary>
            Receive the verification command
            接收验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isVerifyCommand">
            <summary>
            Receive the verification command
            接收验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.checkVerifyCommand">
            <summary>
            Check and verify the command
            检查验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isReceiveVerifyData">
            <summary>
            Get verification data
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isVerifyData">
            <summary>
            Get verification data
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.verifyData">
            <summary>
            Check and verify the length of the data
            检查验证数据长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doVerifyCommand">
            <summary>
            Execute validation method
            执行验证方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isReceiveShortLinkClose">
            <summary>
            Wait for the short-connection client to close
            等待短连接客户端关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isReceiveCommand">
            <summary>
            Get the command
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isCommand">
            <summary>
            Get the command
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isCommandMap">
            <summary>
            Determine whether the command is valid
            判断命令是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.loop(System.Boolean)">
            <summary>
            Loop processing command
            循环处理命令
            </summary>
            <param name="isCommand"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.receiveData(System.Boolean@)">
            <summary>
            Check the command data
            检查命令数据
            </summary>
            <param name="isDoCommand">Is  command was executed
            是否执行了命令</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isData">
            <summary>
            Get Data
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.isBigData">
            <summary>
            Get the temporary buffer data
            获取临时缓冲区数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doCommandBig">
            <summary>
            Execute the command
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doBaseCommand">
            <summary>
            Execute the basic commands of the system
            执行系统基础命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doBaseCommand(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Execute the basic commands of the system
            执行系统基础命令
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doControllerCommand">
            <summary>
            Execute the service controller command
            执行服务控制器命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doCommand">
            <summary>
            Execute the command
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doCommand(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Execute the command
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.controllerDoCommand(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Execute the service controller command
            执行服务控制器命令
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.doCommandOfflineCount(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Offline notification interface command processing
            下线通知接口命令处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.merge(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Stream merging command processing
            流合并命令处理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.sendError">
            <summary>
            If data transmission fails or is abnormal, the socket needs to be closed
            发送数据失败或者异常需要关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.closeSend">
            <summary>
            Release the sent data buffer and the asynchronous event object
            释放发送数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.freeSendCopyBuffer">
            <summary>
            Release the output copy buffer
            释放输出复制缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.output">
            <summary>
            Start sending data
            启动发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.queueOutput">
            <summary>
            Start sending data
            启动发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.getNextOutputSocket">
            <summary>
            Get and clear the next node
            获取并清除下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.buildOutput">
            <summary>
            Try to send data
            尝试发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.setSendData(System.Byte*,System.Int32)">
            <summary>
            Set the data to be sent
            设置待发送数据
            </summary>
            <param name="start">Data starting position
            数据起始位置</param>
            <param name="count">Number of output bytes
            输出字节数量</param>
            <returns>Whether the output buffer has been changed
            输出缓冲区是否被改变</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.send">
            <summary>
            Send data
            </summary>
            <returns>Send data status
            发送数据状态</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.onSend(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            The callback delegate after the data is sent
            数据发送完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">Asynchronous callback parameters</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.onSendShortLink">
            <summary>
            After the short connection sends data, check whether the connection needs to be closed
            短连接发送数据以后检查是否需要关闭连接
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.freeBuildOutput">
            <summary>
            Release the unprocessed socket queue
            释放未处理套接字队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.AppendOutput(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            Add synchronous output
            添加同步输出
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.sendLink">
            <summary>
            Send synchronous output
            发送同步输出
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Push(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            Add output information
            添加输出信息
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Push(AutoCSer.Net.CommandServer.ServerOutput,AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            Add output information
            添加输出信息
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckPush(AutoCSer.Net.CommandServer.ServerOutput,AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            Add output information
            添加输出信息
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.TryPush(AutoCSer.Net.CommandServer.ServerOutput)">
            <summary>
            Add output information
            添加输出信息
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Send data
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendLog(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Send data
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Send data
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Send data synchronously
            同步发送数据
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendLog(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Send data synchronously
            同步发送数据
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendTask(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Send data synchronously
            同步发送数据
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Send data synchronously
            同步发送数据
            </summary>
            <param name="returnType"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Send the successful status synchronously
            同步发送成功状态
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.getOutput``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Get the output information synchronously
            同步获取输出信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Output parameters</param>
            <returns>Output information</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.GetOutput``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Get the output information
            获取输出信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callbackIdentity">Session callback identifier
            会话回调标识</param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Output parameters</param>
            <returns>Output information</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.send``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            Send data synchronously
            同步发送数据
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="callbackIdentity">Session callback identifier
            会话回调标识</param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0,System.Action)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="callbackIdentity">Session callback identifier
            会话回调标识</param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <param name="onFree"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendKeepCallback``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sending a data collection
            发送数据集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="returnValues"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendKeepCallbackLink``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0,``0)">
            <summary>
            Sending a data collection
            发送数据集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callbackIdentity"></param>
            <param name="method"></param>
            <param name="head"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,AutoCSer.Net.CommandServerVerifyStateEnum)">
            <summary>
            Send data
            </summary>
            <param name="callbackIdentity">Session callback identifier
            会话回调标识</param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Send``1(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="callbackIdentity">Session callback identifier
            会话回调标识</param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.send``1(AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data synchronously
            同步发送数据
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendOutput``1(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0@)">
            <summary>
            Send data synchronously
            同步发送数据
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="socket"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendReturnValue``1(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,``0)">
            <summary>
            Send data synchronously
            同步发送数据
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="socket"></param>
            <param name="method">Server interface method information
            服务端接口方法信息</param>
            <param name="outputParameter">Return value output parameters</param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.AppendCustomData(System.Byte[])">
            <summary>
            Send custom data synchronously (in asynchronous mode, you need to wait for the next synchronous sending call to be triggered)
            同步发送自定义数据（非同步模式则需要等待下次触发同步发送调用）
            </summary>
            <param name="data"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.AppendCustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Send custom data synchronously (in asynchronous mode, you need to wait for the next synchronous sending call to be triggered)
            同步发送自定义数据（非同步模式则需要等待下次触发同步发送调用）
            </summary>
            <param name="data"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendCustomData(System.Byte[])">
            <summary>
            Send custom data
            </summary>
            <param name="data"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendCustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Send custom data
            </summary>
            <param name="data"></param>
            <returns>Whether the addition to the output queue was successful
            添加到输出队列是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckOfflineCount">
            <summary>
            Server-side offline count check
            服务端下线计数检查
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckTask(AutoCSer.Net.CommandServerSocket,System.Threading.Tasks.Task)">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="socket"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckTask``1(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{``0})">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <typeparam name="T"></typeparam>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.checkTask(AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckTask(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServer.ServerInterfaceMethod,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerVerifyStateEnum})">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="socket"></param>
            <param name="method"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CheckTask(AutoCSer.Net.CommandServerSocket,System.Threading.Tasks.Task{AutoCSer.Net.CommandServerSendOnly})">
            <summary>
            Check the completion status of the interface task
            检查接口任务完成状态
            </summary>
            <param name="socket"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CallTaskQueueAppendQueue``1(AutoCSer.Net.CommandServerCallTaskQueueSet{``0},``0,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add the queue task
            添加队列任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue"></param>
            <param name="key"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CallTaskQueueAppendLowPriority``1(AutoCSer.Net.CommandServerCallTaskQueueSet{``0},``0,AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Add low priority task to the queue
            添加队列低优先级任务
            </summary>
            <param name="queue"></param>
            <param name="key"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.Add(AutoCSer.Net.CommandServerKeepCallback)">
            <summary>
            Add asynchronous keep callback
            添加异步保持回调
            </summary>
            <param name="keepCallback"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.ClientCancelKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            The client actively closes keep callback
            客户端主动关闭保持回调
            </summary>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.RemoveKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Remove the asynchronous keep callback
            移除异步保持回调
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.RemoveKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Remove the asynchronous keep callback
            移除异步保持回调
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.RemoveKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,System.Exception)">
            <summary>
            Remove the asynchronous keep callback
            移除异步保持回调
            </summary>
            <param name="callbackIdentity"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CancelKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Server exception cancellation asynchronous keep callback
            服务端异常取消异步保持回调
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Cancel the asynchronous keep callback
            取消异步保持回调
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.SendCancelKeepCallback(AutoCSer.Net.CommandServer.CallbackIdentity,AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Send the output of the cancel asynchronous keep callback
            发送取消异步保持回调输出
            </summary>
            <param name="callbackIdentity"></param>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.CommandServerSocketContext">
            <summary>
            Empty command service socket, used to simulate the server-side context
            空命令服务套接字，用于模拟服务端上下文
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.outputSocketHead">
            <summary>
            The set of sockets waiting to send data
            等待发送数据的套接字集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocket.socketOutputWaitHandle">
            <summary>
            The socket set sends data waiting events
            套接字集合发送数据等待事件
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.socketBuildOutput">
            <summary>
            The socket set sends data
            套接字集合发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocket.StartSocketBuildOutputThread">
            <summary>
            Start the socket to send data thread
            启动套接字发送数据线程
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSocketBuildOutputThreadEnum">
            <summary>
            服务端套接字发送数据线程类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketBuildOutputThreadEnum.Queue">
            <summary>
            队列模式，适合预期并发连接数量为 1 或者大量并发连接的场景
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketBuildOutputThreadEnum.Thread">
            <summary>
            线程并发，适合预期并发连接数量不为 1 并且低于 CPU 线程数量的场景，可以充分利用 CPU 多线程并行处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketBuildOutputThreadEnum.Synchronous">
            <summary>
            纯同步输出或者低频输出场景可以设置为 false 以避免输出线程调度，否则可能造成流程性阻塞对系统并发能力造成巨大影响
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServerTaskQueueService">
            <summary>
            Task queue controller service
            Task 队列控制器服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerTaskQueueService.Queue">
            <summary>
            The queue for asynchronous server calls
            服务端异步调用队列
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandServerTaskQueueService.Socket">
            <summary>
            The socket of the currently executing task
            当前执行任务套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerTaskQueueService.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode)">
            <summary>
            Task queue controller service
            Task 队列控制器服务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandServerTaskQueueService.CreateTaskQueue``2(AutoCSer.Net.CommandServerCallTaskQueueNode,``1@,System.Func{AutoCSer.Net.CommandServerCallTaskQueueNode,``1,``0})">
            <summary>
            Create the controller task queue
            创建控制器 Task 队列
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <param name="task"></param>
            <param name="key"></param>
            <param name="getQueue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerTaskQueueService.CreateTaskQueueDelegate`2">
            <summary>
            Create the controller task queue
            创建控制器 Task 队列委托
            </summary>
            <param name="task"></param>
            <param name="key"></param>
            <param name="getQueue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerTaskQueueService`1">
            <summary>
            Task queue controller service
            Task 队列控制器服务
            </summary>
            <typeparam name="T">Queue keyword type
            队列关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.CommandServerTaskQueueService`1.Key">
            <summary>
            Queue keyword
            队列关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerTaskQueueService`1.#ctor(AutoCSer.Net.CommandServerCallTaskQueueNode,`0)">
            <summary>
            Task queue controller service
            Task 队列控制器服务
            </summary>
            <param name="task"></param>
            <param name="key"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandServerVerifyStateEnum">
            <summary>
            The command service verifies the result status
            命令服务验证结果状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerVerifyStateEnum.Fail">
            <summary>
            Verification failed
            验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerVerifyStateEnum.Success">
            <summary>
            Verification successful
            验证成功
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerVerifyStateEnum.Retry">
            <summary>
            Verification failed. Allow the client to try again
            验证失败，允许客户端重试
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerVerifyStateEnum.LessVerifyMethod">
            <summary>
            Lack of validation logic function, need to reload AutoCSer.Net.CommandServerAttribute.ClientVerifyMethod
            缺少验证函数逻辑，需要重载实现 AutoCSer.Net.CommandServerAttribute.ClientVerifyMethod
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CommandServiceRegistrar">
            <summary>
            Server registration component
            服务注册组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServiceRegistrar.server">
            <summary>
            Server registration component
            服务注册组件
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.#ctor(AutoCSer.Net.CommandListenerBase)">
            <summary>
            Server registration component
            服务注册组件
            </summary>
            <param name="server">Command server to listen
            命令服务端监听</param>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.DisposeAsync">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.GetEndPoint">
            <summary>
            Get the server listening address
            获取服务端监听地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.GetHostPort">
            <summary>
            Get the server listening port number
            获取服务端监听端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.OnListened(AutoCSer.Net.HostEndPoint)">
            <summary>
            The server listener was successful
            服务端监听成功
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandServiceRegistrar.Offline">
            <summary>
            Notify the singleton server to go offline
            通知单例服务端下线
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CustomDataCommand">
            <summary>
            自定义数据包命令 await bool 是否成功添加输出队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CustomDataCommand.data">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CustomDataCommand.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CustomDataCommand.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CustomDataCommand.pushState">
            <summary>
            The status of the reqeust command added to the output queue
            请求命令添加到输出队列的状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.#ctor(AutoCSer.Net.CommandClientSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据包命令
            </summary>
            <param name="socket"></param>
            <param name="data">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.#ctor(AutoCSer.Net.CommandClientSocket,System.Byte[])">
            <summary>
            自定义数据包命令
            </summary>
            <param name="socket"></param>
            <param name="data">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.Wait">
            <summary>
            Wait for the command to add the output queue
            等待命令添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.GetResult">
            <summary>
            Whether the output queue has been successfully added
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.Push">
            <summary>
            Add commands to the output queue
            添加命令到输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CustomDataCommand.CheckWaitPush">
            <summary>
            The command waiting for idle output attempts to be added to the output queue again
            等待空闲输出的命令再次尝试添加到输出队列
            </summary>
            <returns>Is it necessary to keep waiting
            是否需要继续等待</returns>
        </member>
        <member name="T:AutoCSer.Net.CallbackCommand">
            <summary>
            Callback command (await bool, return whether successfully added to the output queue)
            回调命令（await bool，返回是否成功添加到输出队列）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CallbackCommand.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CallbackCommand.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CallbackCommand.PushState">
            <summary>
            The status of the reqeust command added to the output queue
            请求命令添加到输出队列的状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Callback command
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Callback command
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.Wait">
            <summary>
            Wait for the command to add the output queue
            等待命令添加输出队列
            </summary>
            <returns>Whether the output queue has been successfully added
            是否成功添加输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.GetResult">
            <summary>
            Whether the output queue has been successfully added
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.Push">
            <summary>
            The command is added to the output queue
            命令添加到输出队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CallbackCommand.CheckWaitPush">
            <summary>
            The command waiting for idle output attempts to be added to the output queue again
            等待空闲输出的命令再次尝试添加到输出队列
            </summary>
            <returns>Is it necessary to keep waiting
            是否需要继续等待</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandKeepCallback">
            <summary>
            Keep callback object of the command
            命令保持回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandKeepCallback.Command">
            <summary>
            Keep callback command
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandKeepCallback.cancelKeepCommand">
            <summary>
            Cancel the command to keep the callback
            取消保持回调的命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandKeepCallback.callbackIdentity">
            <summary>
            Session callback identifier
            会话回调标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.#ctor(AutoCSer.Net.CommandServer.KeepCommand)">
            <summary>
            Keep callback object of the command
            命令保持回调对象
            </summary>
            <param name="command">客户端命令</param>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.Dispose">
            <summary>
            Release resources (Send cancellation commands to the server regularly)
            释放资源（定时向服务器发送取消命令）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.Close">
            <summary>
            Forced shutdown (Send a cancellation command to the server immediately)
            强制关闭（立即向服务器发送取消命令）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.Cancel(System.Boolean)">
            <summary>
            Cancel the keep callback
            取消保持回调
            </summary>
            <param name="isTimerTask"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.appendTask(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            Add to the scheduled task
            添加到定时任务
            </summary>
            <param name="callbackIdentity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.TryCancel(System.Boolean)">
            <summary>
            Cancel the keep callback
            取消保持回调
            </summary>
            <param name="isTimerTask"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.Set(System.Int32,System.UInt32)">
            <summary>
            Set the session callback identifier
            设置会话回调标识
            </summary>
            <param name="index"></param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandKeepCallback.OnTimer">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.IEnumeratorCommand">
            <summary>
            Collection enumeration command interface
            集合枚举命令接口
            </summary>
        </member>
        <member name="M:AutoCSer.Net.IEnumeratorCommand.MoveNext">
            <summary>
            await bool, the collection enumeration command returns true when the next data exists
            await bool，集合枚举命令存在下一个数据返回 true
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.IEnumeratorCommand`1">
            <summary>
            Collection enumeration command interface
            集合枚举命令接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Net.IEnumeratorCommand`1.Current">
            <summary>
            Get current data
            获取当前数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.EnumeratorCommand">
            <summary>
            The collection enumeration command does not support multi-threaded concurrent calls to await MoveNext (await EnumeratorCommand{T}, returning null indicates failure to add to the output queue).
            集合枚举命令，不支持多线程并发调用 await MoveNext（await EnumeratorCommand，返回 null 表示添加到输出队列失败）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand.moveNext">
            <summary>
            Whether the next data exists in the collection enumeration command
            集合枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand.queueLock">
            <summary>
            Return value queue access lock
            返回值队列访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.System#IDisposable#Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.Wait">
            <summary>
            Wait for the command to add the output queue
            等待命令添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.GetResult">
            <summary>
            Get the collection enumeration command, return null before the result is returned (Only for supporting await)
            获取集合枚举命令，结果未返回之前则返回 null（仅用于支持 await）
            </summary>
            <returns>The operation of adding to the output queue failed and returned null
            添加到输出队列操作失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.MoveNext">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand.Close(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Close keep callback
            关闭保持回调
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="T:AutoCSer.Net.EnumeratorCommand`1">
            <summary>
            The collection enumeration command does not support multi-threaded concurrent calls to await MoveNext (await EnumeratorCommand{T}, returning null indicates failure to add to the output queue).
            集合枚举命令，不支持多线程并发调用 await MoveNext（await EnumeratorCommand{T}，返回 null 表示添加到输出队列失败）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand`1.returnValue">
            <summary>
            The initial return value
            初始返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand`1.moveNext">
            <summary>
            Whether the next data exists in the collection enumeration command
            集合枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand`1.returnValueQueue">
            <summary>
            Return value queue
            返回值队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorCommand`1.queueLock">
            <summary>
            Return value queue access lock
            返回值队列访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.EnumeratorCommand`1.Current">
            <summary>
            Current returned data
            当前返回数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            The collection enumeration command
            集合枚举命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.System#IDisposable#Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.System#IAsyncDisposable#DisposeAsync">
            <summary>
            Release resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.Wait">
            <summary>
            Wait for the command to add the output queue
            等待命令添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.GetResult">
            <summary>
            Get the collection enumeration command
            获取集合枚举命令
            </summary>
            <returns>The operation of adding to the output queue failed and returned null
            添加到输出队列操作失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.MoveNext">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.Close(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Close keep callback
            关闭保持回调
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorCommand`1.System#Collections#Generic#IAsyncEnumerator{T}#MoveNextAsync">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.EnumeratorQueueCommand">
            <summary>
            The collection enumeration queue command does not support multi-threaded concurrent calls to await MoveNext (await EnumeratorCommand{T}, returning null indicates failure to add to the output queue).
            集合枚举队列命令，不支持多线程并发调用 await MoveNext（await EnumeratorQueueCommand，返回 null 表示添加到输出队列失败）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand.moveNext">
            <summary>
            Whether the next data exists in the collection enumeration command
            集合枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand.queueLock">
            <summary>
            Return value queue access lock
            返回值队列访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The collection enumeration queue command
            集合枚举队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The collection enumeration queue command
            集合枚举队列命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.System#IDisposable#Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.Wait">
            <summary>
            Wait for the command to add the output queue
            等待命令添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.GetResult">
            <summary>
            Get the collection enumeration queue command
            获取集合枚举队列命令
            </summary>
            <returns>The operation of adding to the output queue failed and returned null
            添加到输出队列操作失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.MoveNext">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand.Close(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Close keep callback
            关闭保持回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.EnumeratorQueueCommand`1">
            <summary>
            The collection enumeration queue command does not support multi-threaded concurrent calls to await MoveNext (await EnumeratorCommand{T}, returning null indicates failure to add to the output queue).
            集合枚举队列命令，不支持多线程并发调用 await MoveNext（await EnumeratorQueueCommand{T}，返回 null 表示添加到输出队列失败）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand`1.returnValue">
            <summary>
            The initial return value
            初始返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand`1.moveNext">
            <summary>
            Whether the next data exists in the collection enumeration command
            集合枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand`1.returnValueQueue">
            <summary>
            Return value queue
            返回值队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.EnumeratorQueueCommand`1.queueLock">
            <summary>
            Return value queue access lock
            返回值队列访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Net.EnumeratorQueueCommand`1.Current">
            <summary>
            Current returned data
            当前返回数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The collection enumeration queue command
            集合枚举队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The collection enumeration queue command
            集合枚举队列命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            The collection enumeration queue command
            集合枚举队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Process the response data
            处理响应数据
            </summary>
            <param name="data">Response data
            响应数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.CancelKeepCallback(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Cancel the hold callback (Note that since it is a synchronous call by the IO thread receiving data, if there is a blockage, please open a new thread task to handle it)
            取消保持回调（注意，由于是接收数据 IO 线程同步调用，如果存在阻塞请新开线程任务处理）
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.System#IDisposable#Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.System#IAsyncDisposable#DisposeAsync">
            <summary>
            Release resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.Wait">
            <summary>
            Wait for the command to add the output queue
            等待命令添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.GetResult">
            <summary>
            Get the collection enumeration queue command
            获取集合枚举队列命令
            </summary>
            <returns>The operation of adding to the output queue failed and returned null
            添加到输出队列操作失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.MoveNext">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.System#Collections#Generic#IAsyncEnumerator{T}#MoveNextAsync">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.EnumeratorQueueCommand`1.Close(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Close keep callback
            关闭保持回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.KeepCallbackCommand">
            <summary>
            The keep callback command (await AutoCSer.Net.CommandKeepCallback, return the keep callback object of the command)
            保持回调命令（await AutoCSer.Net.CommandKeepCallback，返回命令保持回调对象）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The keep callback command (await AutoCSer.Net.CommandKeepCallback, return the keep callback object of the command)
            保持回调命令（await AutoCSer.Net.CommandKeepCallback，返回命令保持回调对象）
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The keep callback command (await AutoCSer.Net.CommandKeepCallback, return the keep callback object of the command)
            保持回调命令（await AutoCSer.Net.CommandKeepCallback，返回命令保持回调对象）
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.Wait">
            <summary>
            Wait for the command to add the output queue
            等待命令添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.GetResult">
            <summary>
            Get the command to keep callback object
            获取命令保持回调对象
            </summary>
            <returns>The operation of adding to the output queue failed and returned null
            添加到输出队列操作失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackCommand.nullCallback(AutoCSer.Net.CommandClientReturnValue,AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Default empty callback
            </summary>
            <param name="returnValue"></param>
            <param name="command"></param>
        </member>
        <member name="F:AutoCSer.Net.KeepCallbackCommand.NullCallback">
            <summary>
            Default empty callback
            </summary>
        </member>
        <member name="T:AutoCSer.Net.ReturnCommand">
            <summary>
            The return value command (await AutoCSer.Net.CommandClientReturnValue)
            返回值命令（await AutoCSer.Net.CommandClientReturnValue）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            The return value command has been completed
            已完成返回值命令
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.Wait">
            <summary>
            Wait for the command call to return the result
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.GetResult">
            <summary>
            Get the result of the command call, return an error message before the result is returned (Only for supporting await)
            获取命令调用结果，结果未返回之前则返回错误信息（仅用于支持 await）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand.GetTask(AutoCSer.Net.ReturnCommand)">
            <summary>
            Convert to a Task object
            转换为 Task 对象
            </summary>
            <param name="returnCommand"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.ReturnCommand`1">
            <summary>
            The return value command (await AutoCSer.Net.CommandClientReturnValue{T})
            返回值命令（await AutoCSer.Net.CommandClientReturnValue{T}）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.ReturnCommand`1.ReturnValue">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.#ctor(AutoCSer.Net.CommandClientController)">
            <summary>
            Default empty command
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.#ctor(`0@)">
            <summary>
            The return value command has been completed
            已完成返回值命令
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The return value command
            返回值命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.Wait">
            <summary>
            Wait for the command call to return the result
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.GetResult">
            <summary>
            Get the result of the command call, return an error message before the result is returned (Only for supporting await)
            获取命令调用结果，结果未返回之前则返回错误信息（仅用于支持 await）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.GetCommandResult">
            <summary>
            Get the command return value (suitable for scenarios where the server does not return default and does not care about the specific error)
            获取命令返回值（适合服务端不会返回 default 并且不关心具体错误的场景）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.SetReturn(`0)">
            <summary>
            Set the return value
            设置返回值
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.SetReturnQueue(`0)">
            <summary>
            Set the return value
            设置返回值
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnCommand`1.GetTask(AutoCSer.Net.ReturnCommand{`0})">
            <summary>
            Convert to a Task object
            转换为 Task 对象
            </summary>
            <param name="returnCommand"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CompletedReturnCommand">
            <summary>
            The completed return value command
            已完成的返回值命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CompletedReturnCommand.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            The completed return value command
            已完成的返回值命令
            </summary>
            <param name="returnType">返回值</param>
        </member>
        <member name="F:AutoCSer.Net.CompletedReturnCommand.Unknown">
            <summary>
            未知返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.CompletedReturnCommand`1">
            <summary>
            The completed return value command
            已完成的返回值命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.CompletedReturnCommand`1.#ctor(AutoCSer.Net.CommandClientController)">
            <summary>
            Default empty command
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.CompletedReturnCommand`1.#ctor(`0)">
            <summary>
            The completed return value command
            已完成的返回值命令
            </summary>
            <param name="returnValue">Return value</param>
        </member>
        <member name="M:AutoCSer.Net.CompletedReturnCommand`1.#ctor(`0@)">
            <summary>
            The completed return value command
            已完成的返回值命令
            </summary>
            <param name="returnValue">Return value</param>
        </member>
        <member name="F:AutoCSer.Net.CompletedReturnCommand`1.Default">
            <summary>
            默认值已完成返回值命令
            </summary>
        </member>
        <member name="T:AutoCSer.Net.ReturnQueueCommand">
            <summary>
            The return value queue command (await AutoCSer.Net.CommandClientReturnValue)
            返回值队列命令（await AutoCSer.Net.CommandClientReturnValue）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ReturnQueueCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnQueueCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.ReturnQueueCommand`1">
            <summary>
            The return value queue command (await AutoCSer.Net.CommandClientReturnValue{T})
            返回值队列命令（await AutoCSer.Net.CommandClientReturnValue{T}）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.ReturnQueueCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            The return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.ReturnQueueCommand`1.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            The return value queue command
            返回值队列命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.SendOnlyCommand">
            <summary>
            Unresponsive command (await bool, return whether successfully added to the output queue)
            无响应命令（await bool，返回是否成功添加到输出队列）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand.#ctor(AutoCSer.Net.CommandClientController,System.Int32)">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand.#ctor(AutoCSer.Net.CommandClientDefaultController)">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand.PushSendOnly">
            <summary>
            Add commands to the output queue
            添加命令到输出队列
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand.Discard">
            <summary>
            Discard command, used to clear the warning of await within async, is only used to ensure that the maximum number of unprocessed commands on the client side is not exceeded. If it is a batch request and may exceed the limit, await should be used to wait
            丢弃命令，用于清除 async 内部提示 await 的警告，仅用于确定不会超过客户端最大未处理命令数量限制，如果是批量请求并且可能超过限制则应该 await 等待
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SendOnlyCommand`1">
            <summary>
            Unresponsive command (await bool, return whether successfully added to the output queue)
            无响应命令（await bool，返回是否成功添加到输出队列）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.SendOnlyCommand`1.inputParameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand`1.#ctor(AutoCSer.Net.CommandClientController,System.Int32,`0@)">
            <summary>
            Unresponsive command
            无响应命令
            </summary>
            <param name="controller"></param>
            <param name="methodIndex"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand`1.Build(AutoCSer.Net.CommandServer.ClientBuildInfo@)">
            <summary>
            Generate the input data of the request command
            生成请求命令输入数据
            </summary>
            <param name="buildInfo"></param>
            <returns>The next request command
            下一个请求命令</returns>
        </member>
        <member name="M:AutoCSer.Net.SendOnlyCommand`1.OnBuildError(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            Error handling for generating the input data of the request command
            生成请求命令输入数据错误处理
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="T:AutoCSer.Net.ICommandClient">
            <summary>
            Command client interface
            命令客户端接口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.ICommandClient.IsDisposed">
            <summary>
            Whether resources have been released
            是否已经释放资源
            </summary>
        </member>
        <member name="P:AutoCSer.Net.ICommandClient.Host">
            <summary>
            The server listens to host and port information
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.ICommandClient.ServerName">
            <summary>
            The service name is a unique identifier of the server registration. If the server registration is not required, it is only used for log output
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ICommandClient.ServerEndPointChanged(System.Net.IPEndPoint)">
            <summary>
            The server listens for address update notifications
            服务端监听地址更新通知
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="T:AutoCSer.Net.ICommandServerBindController">
            <summary>
            The controller instance binds the command service controller
            控制器实例绑定命令服务控制器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.ICommandServerBindController.Bind(AutoCSer.Net.CommandServerController)">
            <summary>
            Bind the command service controller
            绑定命令服务控制器
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:AutoCSer.Net.ICommandListenerSession">
            <summary>
            命令服务会话对象操作接口
            </summary>
        </member>
        <member name="T:AutoCSer.Net.ICommandListenerGetSession`1">
            <summary>
            命令服务会话对象操作接口
            </summary>
            <typeparam name="T">指定会话对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.ICommandListenerGetSession`1.TryGetSessionObject(AutoCSer.Net.CommandServerSocket)">
            <summary>
            尝试从命令服务套接字自定义会话对象获取指定会话对象
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <returns>Return null on failure</returns>
        </member>
        <member name="T:AutoCSer.Net.ICommandListenerSession`1">
            <summary>
            命令服务会话对象操作接口
            </summary>
            <typeparam name="T">指定会话对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.ICommandListenerSession`1.CreateSessionObject(AutoCSer.Net.CommandServerSocket)">
            <summary>
            创建会话对象
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.ICommandListenerSession`2">
            <summary>
            命令服务会话对象操作接口
            </summary>
            <typeparam name="T">指定会话对象类型</typeparam>
            <typeparam name="ST">服务实例类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.ICommandListenerSession`2.CreateSessionObject(`1,AutoCSer.Net.CommandServerSocket)">
            <summary>
            创建会话对象
            </summary>
            <param name="service">服务控制器对象</param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandServerSocketSessionObject">
            <summary>
            命令服务套接字会话对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketSessionObject.CommandServerSocket">
            <summary>
            命令服务套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandServerSocketSessionObject.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            命令服务套接字会话对象
            </summary>
            <param name="socket">Command server socket
            命令服务套接字</param>
        </member>
        <member name="F:AutoCSer.Net.CommandServerSocketSessionObject.Null">
            <summary>
            默认空命令服务套接字会话对象
            </summary>
        </member>
        <member name="T:AutoCSer.Net.KeepCallbackReturnValueLink`1">
            <summary>
            The keep callback linked list of the return value
            保持回调返回值链表
            </summary>
            <typeparam name="T">Return value type</typeparam>
        </member>
        <member name="F:AutoCSer.Net.KeepCallbackReturnValueLink`1.LinkNext">
            <summary>
            The next node
            </summary>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackReturnValueLink`1.GetEndCount(`0,System.Int32,System.Int32@)">
            <summary>
            Gets the specified number of end nodes
            获取指定数量的结束节点
            </summary>
            <param name="head">Head node
            头节点</param>
            <param name="getCount">Get the quantity
            获取数量</param>
            <param name="endCount">Actual end number
            实际结束数量</param>
            <returns>End node
            结束节点</returns>
        </member>
        <member name="M:AutoCSer.Net.KeepCallbackReturnValueLink`1.GetEnd(`0,System.Int32,System.Int32@)">
            <summary>
            Gets the specified number of end nodes
            获取指定数量的结束节点
            </summary>
            <param name="head">Head node
            头节点</param>
            <param name="getCount">Get the quantity
            获取数量</param>
            <param name="endCount">Actual end number
            实际结束数量</param>
            <returns>End node
            结束节点</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandReverseClient">
            <summary>
            Reverse command service client (initiating connection end)
            反向命令服务客户端（发起连接端）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.config">
            <summary>
            Reverse command service client configuration
            反向命令服务客户端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.serverEndPoint">
            <summary>
            Server listening address
            服务监听地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.currentSocket">
            <summary>
            Current command server socket
            当前命令服务套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandReverseClient.IsSocketClosed">
            <summary>
            Determines whether the current client socket is closed
            判断当前客户端套接字是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.clientRegistrar">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseClient.createVersion">
            <summary>
            The current version number of the client being created
            当前创建客户端的版本号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.#ctor(AutoCSer.Net.CommandReverseClientConfig,AutoCSer.Net.CommandServerInterfaceControllerCreator[])">
            <summary>
            Reverse command service client (initiating connection end)
            反向命令服务客户端（发起连接端）
            </summary>
            <param name="config">Command server configuration
            命令服务配置</param>
            <param name="creators">Service controller creator collection
            服务控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.#ctor(AutoCSer.Net.CommandReverseClientConfig,AutoCSer.LeftArray{AutoCSer.Net.CommandServerInterfaceControllerCreator}@)">
            <summary>
            Reverse command service client (initiating connection end)
            反向命令服务客户端（发起连接端）
            </summary>
            <param name="config">Command server configuration
            命令服务配置</param>
            <param name="creators">Service controller creator collection
            服务控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.CreateSocket">
            <summary>
            Automatically start the connection
            自动启动连接
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.CreateSocketAsync">
            <summary>
            Automatically start the connection
            自动启动连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.create(System.Int32)">
            <summary>
            Start the connection
            启动连接
            </summary>
            <param name="createVersion"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.AutoCSer#Net#ICommandClient#ServerEndPointChanged(System.Net.IPEndPoint)">
            <summary>
            The server listens for address update notifications
            服务监听地址更新通知
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClient.OnClose(AutoCSer.Net.CommandServerSocket)">
            <summary>
            Close the socket
            </summary>
            <param name="socket"></param>
        </member>
        <member name="T:AutoCSer.Net.CommandReverseClientConfig">
            <summary>
            Reverse command service client configuration (initiating connection end)
            反向命令服务客户端配置（发起连接端）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClientConfig.GetRegistrar(AutoCSer.Net.CommandReverseClient)">
            <summary>
            Get the service registration client listener component, which is defaulted to new AutoCSer.Net.CommandClientServiceRegistrar(commandClient) and is called all at once during client initialization
            获取服务注册客户端监听组件，默认为 new AutoCSer.Net.CommandClientServiceRegistrar(commandClient)，客户端初始化时一次性调用
            </summary>
            <param name="commandClient"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClientConfig.CreateSocket(AutoCSer.Net.CommandReverseClient)">
            <summary>
            Used to override the connection logic after server registration is enabled
            用于启用服务注册以后重写自动启动连接逻辑
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClientConfig.CreateSocketSleep(System.Int32)">
            <summary>
            By default, the system hibernates for 10ms after the first failed socket creation, 100ms after the second failed socket creation, and 1s after the third failed socket creation. After each failed socket creation, the system hibernates for 5s
            创建套接字失败重试休眠，默认第 1 次失败以后休眠 10ms，第 2 次失败以后休眠 100ms，第 3 次失败以后休眠 1s，以后每次失败都休眠 5s
            </summary>
            <param name="createErrorCount">Number of failures
            失败次数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClientConfig.OnCreateSocketRetrySuccess(AutoCSer.Net.CommandClientSocket,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Socket retry connection successful prompt
            套接字重试连接成功提示
            </summary>
            <param name="socket"></param>
            <param name="serverEndPoint"></param>
            <param name="exceptionCount">Number of abnormal errors
            异常错误次数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseClientConfig.OnCreateSocketException(AutoCSer.Net.CommandClientSocket,System.Exception,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Socket creation exception prompt
            套接字创建异常提示
            </summary>
            <param name="socket"></param>
            <param name="exception"></param>
            <param name="serverEndPoint"></param>
            <param name="exceptionCount">Number of abnormal errors
            异常错误次数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.CommandReverseListener">
            <summary>
            反向命令服务客户端监听（监听连接端）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.Config">
            <summary>
            反向命令服务客户端监听配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.CommandClient">
            <summary>
            命令客户端
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandReverseListener.ServerName">
            <summary>
            服务名称，服务注册唯一标识，没有用到服务注册的时候仅用于日志输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.CommandReverseListener.Host">
            <summary>
            服务监听主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListener.startLock">
            <summary>
            启动服务监听访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.#ctor(AutoCSer.Net.CommandReverseListenerConfig,AutoCSer.Net.CommandClientInterfaceControllerCreator[])">
            <summary>
            反向命令服务客户端监听（监听连接端）
            </summary>
            <param name="config">反向命令服务客户端监听配置</param>
            <param name="creators">客户端控制器创建器集合</param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.Start">
            <summary>
            启动服务监听
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.listenAcceptCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            获取客户端请求套接字
            </summary>
            <param name="sender"></param>
            <param name="listenAcceptEvent"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.onSocket(System.Net.Sockets.Socket)">
            <summary>
            新的套接字连接处理
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.verify(System.Net.Sockets.Socket)">
            <summary>
            套接字验证，一般用于验证 IP 地址，默认返回 true
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.start(AutoCSer.Net.CommandClientSocket)">
            <summary>
            反向客户端启动操作
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.onVerified">
            <summary>
            客户端验证完成处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListener.GetSocketEvent">
            <summary>
            Gets the command client socket event
            获取命令客户端套接字事件
            </summary>
            <returns>Return null on failure</returns>
        </member>
        <member name="T:AutoCSer.Net.CommandReverseListenerConfig">
            <summary>
            Reverse command service client listening configuration (listening connection end)
            反向命令服务客户端监听配置（监听连接端）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.CommandReverseListenerConfig.SocketAsyncEventArgsMaxCount">
            <summary>
            The default number of socket asynchronous event object caches is 8
            套接字异步事件对象缓存数量，默认为 8
            </summary>
        </member>
        <member name="M:AutoCSer.Net.CommandReverseListenerConfig.GetRegistrar(AutoCSer.Net.CommandReverseListener)">
            <summary>
            Get the service registration component, which returns new AutoCSer.Net.CommandServiceRegistrar(server) by default and is called all at once during service initialization
            获取服务注册组件，默认返回 new AutoCSer.Net.CommandServiceRegistrar(server)，服务初始化时一次性调用
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.HostEndPoint">
            <summary>
            Information about the server host and port
            服务端主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.HostEndPoint.Host">
            <summary>
            Server host name or IP address. If the server cannot be resolved, IPAddress.Any is used by default, such as "www.x.com" or "127.0.0.1"
            服务端主机名称或者 IP 地址，无法解析时默认使用 IPAddress.Any，比如 "www.x.com" 或者 "127.0.0.1"
            </summary>
        </member>
        <member name="F:AutoCSer.Net.HostEndPoint.Port">
            <summary>
            Listening port number
            监听端口号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.#ctor(System.UInt16,System.String)">
            <summary>
            Information about the server host and port
            服务端主机与端口信息
            </summary>
            <param name="port">Listening port number. 0 indicates the allocated port number obtained from the port registration service
            监听端口号，0 表示从端口注册服务获取分配端口号</param>
            <param name="host">Server host name or IP address. If the server cannot be resolved, IPAddress.Any is used by default, such as "www.x.com" or "127.0.0.1"
            服务端主机名称或者 IP 地址，无法解析时默认使用 IPAddress.Any，比如 "www.x.com" 或者 "127.0.0.1"</param>
        </member>
        <member name="P:AutoCSer.Net.HostEndPoint.IPEndPoint">
            <summary>
            Get the server listening address
            获取服务端监听地址
            </summary>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.Get(System.UInt16)">
            <summary>
            Obtain the information of the service host and port based on the port number
            根据端口号获取服务主机与端口信息
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.Equals(AutoCSer.Net.HostEndPoint)">
            <summary>
            Judge whether they are equal
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.HostEndPoint.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.SocketAsyncEventArgsPool">
            <summary>
            套接字异步事件对象池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.head">
            <summary>
            套接字异步事件对象池首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.maxCount">
            <summary>
            最大缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
            套接字异步事件对象池
            </summary>
            <param name="maxCount"></param>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.Get">
            <summary>
            Pop-up node
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.Free">
            <summary>
            释放套接字异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.free">
            <summary>
            释放套接字异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Add a node
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.RemoteTypeAttribute">
            <summary>
            Legal remote type tagging (effective when assemblies are configured)
            合法远程类型标记（程序集在配置中时生效）
            </summary>
        </member>
        <member name="T:AutoCSer.Log.IgnoreException">
            <summary>
            日志忽略异常，不输出日志，用于测试
            </summary>
        </member>
        <member name="M:AutoCSer.Log.IgnoreException.#ctor">
            <summary>
            日志忽略异常，不输出日志，用于测试
            </summary>
        </member>
        <member name="M:AutoCSer.Log.IgnoreException.#ctor(System.String)">
            <summary>
            日志忽略异常，不输出日志，用于测试
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:AutoCSer.Log.File">
            <summary>
            文件日志
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.fileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.encoding">
            <summary>
            文件字符编码
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.fileStream">
            <summary>
            日志文件流
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.fileStreamName">
            <summary>
            日志文件流文件名称
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.streamWriter">
            <summary>
            日志文件流
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.logLock">
            <summary>
            日志队列访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.Level">
            <summary>
            允许日志级别
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.isCheckFlush">
            <summary>
            是否需要检查文件写入状态
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.isDisposed">
            <summary>
            Whether resources have been released
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.#ctor(AutoCSer.LogLevelEnum,System.String,System.Text.Encoding)">
            <summary>
            日志处理
            </summary>
            <param name="level">允许日志级别</param>
            <param name="fileName">日志文件</param>
            <param name="encoding">默认为 UTF-8</param>
        </member>
        <member name="M:AutoCSer.Log.File.open">
            <summary>
            打开日志文件
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.DisposeAsync">
            <summary>
            Release resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Log.File.IsAnyLevel(AutoCSer.LogLevelEnum)">
            <summary>
            判断是否支持任意级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Log.File.write(System.String,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            写日志文件
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="callerMemberName"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Log.File.checkFlush">
            <summary>
            检查文件写入状态
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.Debug(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Log.File.Exception(System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.Log.File.Flush">
            <summary>
            等待写入完成
            </summary>
            <returns>写盘是否成功</returns>
        </member>
        <member name="M:AutoCSer.Log.File.MoveBak">
            <summary>
            移动日志文件
            </summary>
            <returns>新的日志文件名称</returns>
        </member>
        <member name="M:AutoCSer.Log.File.GetDefaultFileName">
            <summary>
            获取默认日志文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.LogLevelEnum">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.AutoCSer">
            <summary>
            AutoCSer 框架底层调试信息
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Info">
            <summary>
            一般信息
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Debug">
            <summary>
            调试信息
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Error">
            <summary>
            一般错误
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.Breakpoint">
            <summary>
            测试断点
            </summary>
        </member>
        <member name="F:AutoCSer.LogLevelEnum.All">
            <summary>
            所有日志
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.BufferSizeBitsEnum">
            <summary>
            缓冲区字节大小二进制位数
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Byte256">
            <summary>
            256B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Byte512">
            <summary>
            512B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte">
            <summary>
            1KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte2">
            <summary>
            2KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte4">
            <summary>
            4KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte8">
            <summary>
            8KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte16">
            <summary>
            16KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte32">
            <summary>
            32KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte64">
            <summary>
            64KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferSizeBitsEnum.Kilobyte128">
            <summary>
            128KB
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.ByteArray">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.Buffer">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.Pool">
            <summary>
            字节数组缓冲区池
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.ByteArray.BufferSize">
            <summary>
            缓存区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.Indexs">
            <summary>
            缓存区指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.IsRemove">
            <summary>
            是否已经从缓存区池中移除
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.#ctor(System.Int32)">
            <summary>
            字节数组缓冲区池
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.#ctor(AutoCSer.Memory.ByteArrayPool)">
            <summary>
            字节数组缓冲区池
            </summary>
            <param name="pool"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.FreeIndex">
            <summary>
            释放缓存区指针
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.TryFree(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            尝试释放字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.Free(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            释放字节数组缓冲区
            </summary>
            <param name="buffer"></param>
            <returns>是否需要重新添加到 空闲缓冲区集合</returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.Remove(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            移除需要清除的字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.TryRemoveGet(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            尝试移除需要清除的字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArray.sortComparer(AutoCSer.Memory.ByteArray,AutoCSer.Memory.ByteArray)">
            <summary>
            未使用缓存区数量排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Memory.ByteArray.SortComparer">
            <summary>
            未使用缓存区数量排序
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.ByteArrayBuffer">
            <summary>
            Byte array buffer
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayBuffer.Buffer">
            <summary>
            Byte array buffer
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayBuffer.StartIndex">
            <summary>
            The starting position of the buffer
            缓冲区起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayBuffer.CurrentIndex">
            <summary>
            Current relative position (reserved field)
            当前相对位置（保留字段）
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.ByteArrayBuffer.BufferCurrentIndex">
            <summary>
            Current absolute position
            当前绝对位置
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Copy the buffer data
            复制缓冲区数据
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetClearBuffer">
            <summary>
            Clear the data and return the byte array buffer
            清除数据并返回字节数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.Set(AutoCSer.Memory.ByteArray)">
            <summary>
            Set the byte array buffer
            设置字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.Set(AutoCSer.Memory.ByteArray,System.Int32)">
            <summary>
            Set the byte array buffer
            设置字节数组缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.TryRemoveGet">
            <summary>
            Try to remove the byte array buffer that needs to be cleared
            尝试移除需要清除的字节数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.Free">
            <summary>
            Release the byte array buffer
            释放字节数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.FreeCopy(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            Release the copy buffer
            释放复制缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.ReSize(System.Int32,System.Int32)">
            <summary>
            When the byte size is not satisfied, the byte array buffer is retrieved again
            当字节大小不满足时，重新获取字节数组缓冲区
            </summary>
            <param name="size"></param>
            <param name="currentIndex"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Set the socket buffer 
            设置套接字缓存区
            </summary>
            <param name="receiveAsyncEventArgs"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.SetCurrent(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Set the socket buffer 
            设置套接字缓存区
            </summary>
            <param name="receiveAsyncEventArgs"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.CopyFromFree(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            Release the current cache area and copy the byte array buffer
            释放当前缓存区并复制字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.CopyFromSetSize(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Copy data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetSubArray(System.Int32,System.Int32)">
            <summary>
            Get the array substring
            获取数组子串
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetSeekSubArray(System.Int32)">
            <summary>
            Get the array substring
            获取数组子串
            </summary>
            <param name="seek"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.Set(AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Set the array substring
            设置数组子串
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetSubArray(System.Int32)">
            <summary>
            Get the array substring
            获取数组子串
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBuffer.GetFixedBuffer">
            <summary>
            Get the fixed buffer, DEBUG mode to detect the data range
            获取 fixed 缓冲区，DEBUG 模式对数据范围进行检测
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Memory.ByteArrayPool">
            <summary>
            字节数组缓冲区池
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.FixedBufferSize">
            <summary>
            128KB 避免 GC 压缩
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.Size">
            <summary>
            缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.bufferCount">
            <summary>
            已经创建的缓存区数量
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.buffers">
            <summary>
            空闲缓冲区集合
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.#ctor(System.Int32,System.Int32)">
            <summary>
            字节数组缓冲区池
            </summary>
            <param name="size"></param>
            <param name="bufferCount"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.Get(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            获取字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.get(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            获取字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.Free(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            释放字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.TryRemoveGet(AutoCSer.Memory.ByteArrayBuffer@)">
            <summary>
            尝试移除需要清除的字节数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.free">
            <summary>
            清理缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.minSizeBits">
            <summary>
            字节数组缓冲区池最小缓冲区二进制位数 4 为 16B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.maxSizeBits">
            <summary>
            字节数组缓冲区池最大缓冲区二进制位数 30 为 1GB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.pools">
            <summary>
            缓冲区池集合
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayPool.poolLock">
            <summary>
            缓冲区池集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.getPoolByIndex(System.Int32)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.GetPool(AutoCSer.Memory.BufferSizeBitsEnum)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="bits">缓冲区字节大小二进制位数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.getPool(System.Int32)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.GetBuffer(AutoCSer.Memory.ByteArrayBuffer@,System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.GetBuffer(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.GetSingleBuffer(AutoCSer.Memory.ByteArrayBuffer@,System.Int32)">
            <summary>
            获取独立缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.clearCache">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayPool.clearCacheTask">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.HashBuffer">
            <summary>
            用于 HASH 的字节数组与数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.HashBuffer.data">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.HashBuffer.Buffer">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.HashBuffer.#ctor(System.Byte*,System.Int32,System.Int32)">
            <summary>
            用于 HASH 的数据缓冲区
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <param name="hashCode"></param>
        </member>
        <member name="M:AutoCSer.Memory.HashBuffer.#ctor(System.Byte*,System.Byte*)">
            <summary>
            用于 HASH 的数据缓冲区
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Memory.HashBuffer.#ctor(AutoCSer.Memory.HashBuffer@)">
            <summary>
            用于 HASH 的字节数组
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Memory.HashBuffer.Equals(AutoCSer.Memory.HashBuffer)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBuffer.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBuffer.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Memory.HashBytes">
            <summary>
            用于 HASH 的字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.HashBytes.SubArray">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.HashBytes.HashCode">
            <summary>
            HASH 值
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.#ctor(AutoCSer.SubArray{System.Byte},System.UInt64)">
            <summary>
            字节数组 HASH
            </summary>
            <param name="data">字节数组</param>
            <param name="hashCode"></param>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            字节数组 HASH
            </summary>
            <param name="data">字节数组</param>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.op_Implicit(AutoCSer.SubArray{System.Byte})~AutoCSer.Memory.HashBytes">
            <summary>
            HASH字节数组隐式转换
            </summary>
            <param name="data">字节数组</param>
            <returns>HASH字节数组</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.op_Implicit(System.Byte[])~AutoCSer.Memory.HashBytes">
            <summary>
            HASH字节数组隐式转换
            </summary>
            <param name="data">字节数组</param>
            <returns>HASH字节数组</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.op_Implicit(AutoCSer.Memory.HashBytes)~AutoCSer.SubArray{System.Byte}">
            <summary>
            HASH字节数组隐式转换
            </summary>
            <param name="data">HASH字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.Equals(AutoCSer.Memory.HashBytes)">
            <summary>
            比较字节数组是否相等
            </summary>
            <param name="other">用于HASH的字节数组</param>
            <returns>Is it equal
            是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.GetHashCode">
            <summary>
            获取 HASH 值
            </summary>
            <returns>HASH 值</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.Equals(System.Object)">
            <summary>
            比较字节数组是否相等
            </summary>
            <param name="other">字节数组HASH</param>
            <returns>Is it equal
            是否相等</returns>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedStream">
            <summary>
            非托管内存数据流
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStream.#ctor(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="unmanagedPool">非托管内存池</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStream.#ctor(AutoCSer.Memory.UnmanagedPoolPointer,System.Boolean)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStream.Null">
            <summary>
            默认空非托管内存数据流
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.CharStream">
            <summary>
            内存字符流
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.CharStream.Char">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.CharStream.CurrentChar">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.CharStream.Length">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.#ctor(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            内存字符流
            </summary>
            <param name="unmanagedPool">非托管内存池</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.#ctor(AutoCSer.Memory.UnmanagedPoolPointer@,System.Boolean)">
            <summary>
            内存字符流
            </summary>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.#ctor(AutoCSer.Memory.UnmanagedPoolPointer,System.Boolean)">
            <summary>
            内存字符流
            </summary>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.GetPrepCharSizeCurrent(System.Int32)">
            <summary>
            预增数据流字符长度
            </summary>
            <param name="size">增加字符长度</param>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.PrepCharSize(System.Int32)">
            <summary>
            预增数据流字符长度
            </summary>
            <param name="size">增加字符长度</param>
            <returns>是否增加成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.SimpleWrite(System.String)">
            <summary>
            写字符串，适合零碎短小数据(不足8字节按8字节算)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteNotNull(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteNotEmpty(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(System.String,System.Int32,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
            <param name="index">起始位置</param>
            <param name="size">长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(AutoCSer.SubString)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(AutoCSer.SubString@)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Byte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.SByte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.UInt16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Int16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.UInt32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Int32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.UInt64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.UnsafeToString(System.UInt64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Int64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.UnsafeToString(System.Int64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonNull">
            <summary>
            输出 null 值
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonNull(AutoCSer.Memory.CharStream)">
            <summary>
            输出 null 值
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonObject">
            <summary>
            输出空对象
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonArray">
            <summary>
            输出空数组
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonEmptyString">
            <summary>
            写入空字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonObjectString">
            <summary>
            输出对象字符串 [object Object]
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonArrayStart(System.Int32)">
            <summary>
            预申请数组长度并写入数组开始符号 [
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonBool(System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.Byte)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeJsonHex(System.UInt32,System.Int32)">
            <summary>
            数字转换成十六进制字符串 0x..
            </summary>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.SByte)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeJsonHex2(System.UInt32)">
            <summary>
            数字转换成十六进制字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.UInt16)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeJsonHex4(System.UInt32)">
            <summary>
            数字转换成十六进制字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.UInt32)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeJsonHex8(System.UInt32)">
            <summary>
            数字转换成十六进制字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonHex(System.UInt64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteNegative(System.Int32)">
            <summary>
            预增数据流字符长度并写入负号
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonString(System.Int64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonString(System.UInt64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Single)">
            <summary>
            输出 float 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonInfinity(System.Single)">
            <summary>
            输出 float 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Double)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonInfinity(System.Double)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeDoubleMaxValue(System.Double)">
            <summary>
            输出 double 最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeDoubleMinValue(System.Double)">
            <summary>
            输出 double 最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonNaN">
            <summary>
            输出非数字值
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WritePositiveInfinity">
            <summary>
            输出正无穷
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteNegativeInfinity">
            <summary>
            输出负无穷
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeInfinity">
            <summary>
            输出无穷
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteString(System.Guid)">
            <summary>
            Guid转换成字符串（单引号）
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Guid@)">
            <summary>
            Guid转换成字符串（双引号）
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Char)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJson(System.Char*,System.Int32)">
            <summary>
            写入 JSON 字符串
            </summary>
            <param name="stringStart">起始位置</param>
            <param name="stringLength">字符串长度，必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonString(System.DateTime)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonString(System.TimeSpan)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.writeString(System.TimeSpan,System.Char)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
            <param name="quote"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonNewDate">
            <summary>
            写入 new Date(
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonOtherDate">
            <summary>
            时间转字符串 第三方格式开始 "/Date(
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonOtherDateEnd">
            <summary>
            时间转字符串 第三方格式结束 )/"
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonName(System.String)">
            <summary>
            写入 JSON 名称
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonKeyValueKey(System.Int32)">
            <summary>
            写入 JSON Key
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteJsonKeyValueValue">
            <summary>
            写入 JSON Value
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlDateTime2String(System.DateTime)">
            <summary>
            时间转字符串 yyyy/MM/dd HH:mm:ss.fffffff
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlDateTimeString(System.DateTime)">
            <summary>
            时间转字符串 yyyy/MM/dd HH:mm:ss.fff
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlSmallDateTimeString(System.DateTime)">
            <summary>
            时间转字符串 yyyy/MM/dd HH:mm:ss
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlDateString(System.DateTime)">
            <summary>
            时间转字符串 yyyy/MM/dd
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteSqlString(System.TimeSpan)">
            <summary>
            时间转字符串 HH:mm:ss.fffffff
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.Write(System.String,System.Char)">
            <summary>
            输出字符串，不处理转义符
            </summary>
            <param name="value"></param>
            <param name="quoteChar">默认为双引号</param>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Boolean)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Byte)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.SByte)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Int16)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.UInt16)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Int32)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.UInt32)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Int64)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.UInt64)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Single)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Double)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Decimal)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Char)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.DateTime)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.Guid)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(System.String)">
            <summary>
            WebView 写 JSON 数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.CharStream.WriteWebViewJson(AutoCSer.SubString)">
            <summary>
            WebView 写入 JSON 字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Memory.Pointer">
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
            <summary>
            指针(指针无法静态初始化与异步操作)
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="F:AutoCSer.Memory.Pointer.Data">
            <summary>
            指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Pointer.ByteSize">
            <summary>
            总字节长度
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Size">
            <summary>
            总字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Pointer.CurrentIndex">
            <summary>
            当前数据操作位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Index">
            <summary>
            当前数据操作位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Current">
            <summary>
            当前数据操作位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.End">
            <summary>
            数据结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.FreeSize">
            <summary>
            空闲字节数量
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.IsFreeSize">
            <summary>
            不为 0 表示存在空闲字节
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.#ctor(System.Void*,System.Int32)">
            <summary>
            指针
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.#ctor(System.Void*,System.Int32,System.Int32)">
            <summary>
            指针
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <param name="currentIndex"></param>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Byte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.SByte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Short">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.UShort">
            <summary>
            双字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Char">
            <summary>
            字符指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Int">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.UInt">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.Long">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.Pointer.ULong">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Equals(System.Object)">
            <summary>
            指针比较
            </summary>
            <param name="obj">待比较指针</param>
            <returns>指针是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Get(System.Int32)">
            <summary>
            获取指定字节
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Equals(AutoCSer.Memory.Pointer)">
            <summary>
            指针比较
            </summary>
            <param name="other">待比较指针</param>
            <returns>指针是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetNull">
            <summary>
            Clear the data
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Clear">
            <summary>
            数据全部设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetDataClearOnly">
            <summary>
            获取指针并清除
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Set(System.Void*,System.Int32)">
            <summary>
            设置指针
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetNull(System.Void*)">
            <summary>
            当指针匹配时清空数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Slice(System.Int32,System.Int32)">
            <summary>
            获取子段
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="byteSize">长度</param>
            <returns>子段</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.CopyTo(AutoCSer.Memory.Pointer@)">
            <summary>
            复制数据到另外一个指针
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetBeforeMove(System.Int32)">
            <summary>
            移动当前数据操作位置并返回移动之前的位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetCurrent(System.Void*)">
            <summary>
            设置当前数据操作位置
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetCurrentIndex(System.Int32,System.Int32)">
            <summary>
            设置当前数据操作位置并写入数据
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSizeData(System.Int32)">
            <summary>
            写入数据长度
            </summary>
            <param name="dataIndex">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSizeHeader(System.Int32)">
            <summary>
            写入数据长度
            </summary>
            <param name="headerIndex">头部起始位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetHashCode64(System.Int32)">
            <summary>
            计算 64 位 HASH 值
            </summary>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSizeGetHashCode64(System.Int32)">
            <summary>
            写入数据长度并计算 64 位 HASH 值
            </summary>
            <param name="startIndex">头部起始位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetHashCode64(System.Void*,System.Int32)">
            <summary>
            计算 64 位 HASH 值
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.CheckSetBit(System.Int32)">
            <summary>
            设置位图
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SetBit(System.Int32)">
            <summary>
            设置位图
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetBit(System.Int32)">
            <summary>
            获取位图数据
            </summary>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.MoveToEnd">
            <summary>
            移动当前位置到最后
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.CheckMoveSize(System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.MoveSize(System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetMoveSize(System.Int32)">
            <summary>
            移动当前位置并返回当前位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetIndexBeforeMove(System.Int32)">
            <summary>
            移动当前数据操作位置并返回移动之前的位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetIndexBeforeMove(System.Int32,System.Int32)">
            <summary>
            移动当前数据操作位置并返回移动之前的位置
            </summary>
            <param name="size"></param>
            <param name="value">写入数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeMoveSize(System.Int32,System.Int32)">
            <summary>
            写入缓冲区字节数
            </summary>
            <param name="startIndex"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.newByteSize(System.Int32)">
            <summary>
            扩展数据总字节数
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.NewByteSize(System.Int32)">
            <summary>
            扩展数据总字节数
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.NewByteSize(System.Int32,AutoCSer.Memory.UnmanagedPool)">
            <summary>
            扩展数据总字节数
            </summary>
            <param name="size"></param>
            <param name="freePool"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.PopInt">
            <summary>
            弹出一个整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Guid@)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(AutoCSer.Net.CommandServer.CallbackIdentity)">
            <summary>
            写入会话回调标识
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int32,System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int32,System.Int32,System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int64,System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            写入 64 字节数据
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSize(System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="value"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSize(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSize(System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteSize(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Byte*,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串，长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.String,System.Int32,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串，长度必须大于0</param>
            <param name="index">起始位置</param>
            <param name="size">长度必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.String,System.Char)">
            <summary>
            写字符串
            </summary>
            <param name="value"></param>
            <param name="quoteChar"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteJsonCustomNameFirst(System.String)">
            <summary>
            写 JSON 名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteJsonCustomNameNext(System.String)">
            <summary>
            写 JSON 名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.WriteJson(System.Guid@,System.Char)">
            <summary>
            Guid转换成字符串
            </summary>
            <param name="value">Guid</param>
            <param name="quoteChar"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.JavaScriptUnescape(System.Byte*,System.Byte*)">
            <summary>
            模拟javascript解码函数unescape
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.javaScriptUnescape(System.Byte*,System.Byte*)">
            <summary>
            模拟javascript解码函数unescape
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SimpleWrite(System.String)">
            <summary>
            复制字符串，适合零碎短小数据(不足8字节按8字节算)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SimpleWrite(System.Byte*,System.Int32)">
            <summary>
            复制字节数组，适合零碎短小数据(不足8字节按8字节算)
            </summary>
            <param name="source"></param>
            <param name="size">必须大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize1">
            <summary>
            增加 1 个空白字节
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize2">
            <summary>
            增加 2 个空白字节
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize3">
            <summary>
            增加 3 个空白字节
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFill(System.Int32)">
            <summary>
            填充空白字节
            </summary>
            <param name="fillSize">字节数量</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillWithStartIndex(System.Int32)">
            <summary>
            补白对齐 4 字节
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillLeftByteSize(System.Int32)">
            <summary>
            左侧补白对齐 4 字节
            </summary>
            <param name="size">增加数据长度</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillLeftByteSize2(System.Int32)">
            <summary>
            左侧补白对齐 4 字节
            </summary>
            <param name="size">增加数据长度</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize(System.Void*)">
            <summary>
            增加当前数据长度并且补白对齐 4 字节
            </summary>
            <param name="current">新的当前位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeFillByteSize2(System.Void*)">
            <summary>
            增加当前数据长度并且补白对齐 4 字节
            </summary>
            <param name="current">新的当前位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.JsonSerializeFill(System.Int32)">
            <summary>
            二进制序列化 JSON 成员序列化补白对齐 4 字节并写入 JSON 字节长度
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetArray">
            <summary>
            转换成字节数组
            </summary>
            <returns>字节数组</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetBufferArray">
            <summary>
            整个缓冲区转换成字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.BufferSequenceEqual(System.Byte[])">
            <summary>
            整个缓冲区与字节数组比较
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.GetBuffer(AutoCSer.Memory.ByteArrayBuffer@,System.Int32)">
            <summary>
            转换成字节数组
            </summary>
            <param name="buffer"></param>
            <param name="index">复制起始位置</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.TimeSpan)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.SerializeWriteNullable(System.Guid)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt16)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int16)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Byte)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.SByte)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Boolean)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.TimeSpan)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Half)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Int128)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.UInt128)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Numerics.Complex)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Numerics.Plane)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Numerics.Quaternion)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Numerics.Matrix3x2)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Numerics.Matrix4x4)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Numerics.Vector2)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Numerics.Vector3)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.Pointer.Write(System.Numerics.Vector4)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="T:AutoCSer.Memory.Common">
            <summary>
            内存或字节数组处理
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Common.Clear(System.UInt64*,System.Int32)">
            <summary>
            填充整数
            </summary>
            <param name="src">The starting address cannot be null
            起始地址，不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.Clear(System.Byte*,System.Int32)">
            <summary>
            填充整数
            </summary>
            <param name="src">The starting address cannot be null
            起始地址，不能为null</param>
            <param name="count">字节数量，必须大于 0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.Fill(System.UInt64*,System.Int32,System.UInt64)">
            <summary>
            填充整数
            </summary>
            <param name="src">The starting address cannot be null
            起始地址，不能为null</param>
            <param name="count">整数数量,大于0</param>
            <param name="value">填充整数</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.Copy(System.Void*,System.Void*,System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">The starting address of the original data cannot be null
            原数据起始地址，不能为null</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.Copy(System.Void*,System.Void*,System.Int64)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">The starting address of the original data cannot be null
            原数据起始地址，不能为null</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.SimpleCopyNotNull64(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            复制字节数组(不足8字节按8字节算)
            </summary>
            <param name="source">The starting address of the original data cannot be null
            原数据起始地址，不能为null</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
            <param name="length">字节长度,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.copy(System.Byte*,System.Byte*,System.Int64)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">The starting address of the original data cannot be null
            原数据起始地址，不能为null</param>
            <param name="destination">The starting address of the target data cannot be null
            目标数据起始地址，不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Common.equal(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Comparison of byte arrays
            字节数组比较
            </summary>
            <param name="left">null is not allowed
            不允许为 null</param>
            <param name="right">null is not allowed
            不允许为 null</param>
            <param name="count">比较字节数</param>
            <returns>Is it equal
            是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.SequenceEqual(System.Void*,System.Void*,System.Int32)">
            <summary>
            Comparison of byte arrays
            字节数组比较
            </summary>
            <param name="left">null is not allowed
            不允许为 null</param>
            <param name="right">null is not allowed
            不允许为 null</param>
            <param name="count">比较字节数</param>
            <returns>Is it equal
            是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.SimpleEqualNotNull(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Comparison of byte arrays
            字节数组比较
            </summary>
            <param name="left">null is not allowed
            不允许为 null</param>
            <param name="right">null is not allowed
            不允许为 null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>Is it equal
            是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.SimpleEqualNotNull(AutoCSer.Memory.Pointer@,AutoCSer.Memory.Pointer@,System.Int32)">
            <summary>
            Comparison of byte arrays
            字节数组比较
            </summary>
            <param name="left">null is not allowed
            不允许为 null</param>
            <param name="right">null is not allowed
            不允许为 null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>Is it equal
            是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.Common.HashCodeShift(System.UInt32)">
            <summary>
            32 位哈希值位移操作
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Memory.Common.AddHashCode">
            <summary>
            哈希值计算加法运算常量
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Common.GetHashCode64(System.Byte*,System.Int32)">
            <summary>
            计算 64 位 HASH 值
            </summary>
            <param name="start">Data starting position
            数据起始位置</param>
            <param name="length">数据长度</param>
            <returns>64 位 HASH 值</returns>
        </member>
        <member name="T:AutoCSer.Memory.ObjectRoot.ScanType">
            <summary>
            待检测类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ObjectRoot.ScanType.types">
            <summary>
            待检测类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.ObjectRoot.ScanType.Types">
            <summary>
            待检测类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ObjectRoot.ScanType.typeLock">
            <summary>
            待检测类型集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ObjectRoot.ScanType.TryAdd(System.Type)">
            <summary>
            添加待检测类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ObjectRoot.ScanType.Add(System.Type)">
            <summary>
            添加待检测类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:AutoCSer.Memory.Unmanaged">
            <summary>
            非托管内存
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Unmanaged.staticSize">
            <summary>
            不释放的固定内存申请大小
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetStatic(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)
            </summary>
            <param name="size"></param>
            <param name="isClear">是否需要清除</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetStaticPointer(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)
            </summary>
            <param name="size"></param>
            <param name="isClear"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetStaticPointer8(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)（8字节补齐）
            </summary>
            <param name="size"></param>
            <param name="isClear"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.FreeStatic(AutoCSer.Memory.Pointer@)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.FreeStatic(AutoCSer.Memory.Pointer@,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="F:AutoCSer.Memory.Unmanaged.totalSize">
            <summary>
            非托管内存申请字节数
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Get(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetPointer(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetPointer8(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存（8字节补齐）
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Free(AutoCSer.Memory.Pointer@)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Free(AutoCSer.Memory.Pointer@,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Free(System.Void*,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.Free(System.Byte*@,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.FreePool(System.Void*,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.FreeOnly(AutoCSer.Memory.Pointer@)">
            <summary>
            释放内存（一次性单线程队列释放，不允许多次调用）
            </summary>
            <param name="data">非托管内存起始指针</param>
        </member>
        <member name="F:AutoCSer.Memory.Unmanaged.AutoCSerStatic">
            <summary>
            AutoCSer 使用静态内存段，防止碎片化
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.Unmanaged.NullByte8">
            <summary>
            8个0字节（公用）
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetDeBruijn32Number">
            <summary>
            2^n相关32位deBruijn序列集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetDateWeekData">
            <summary>
            星期字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetDateMonthData">
            <summary>
            月份字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetJsonDeserializeBits">
            <summary>
            JSON 解析字符状态位
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetJsonDeserializeEscapeCharData">
            <summary>
            JSON 转义字符集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetRandomSecureSeeds">
            <summary>
            随机种子
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.Unmanaged.GetReusableDictionaryPrimes">
            <summary>
            可重用字典小质数集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedPool">
            <summary>
            非托管内存池
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.free">
            <summary>
            空闲内存地址
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.freeLock">
            <summary>
            空闲内存地址访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.Size">
            <summary>
            缓冲区尺寸
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.isGetNewBuffer">
            <summary>
            是否申请了新的缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.#ctor(System.Int32)">
            <summary>
            内存池
            </summary>
            <param name="size">缓冲区尺寸</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.tryGet">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPointer">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPointer(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPoolPointer">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.Push(System.Byte*)">
            <summary>
            保存缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.PushOnly(AutoCSer.Memory.Pointer@)">
            <summary>
            保存缓冲区（一次性单线程队列释放，不允许多次调用）
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.PushPool(AutoCSer.Memory.Pointer@)">
            <summary>
            保存缓冲区（多线程并发）
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.Free(AutoCSer.Memory.Pointer@)">
            <summary>
            保存缓冲区（多线程并发）
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.OnTimer">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.onTimer">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.CachePageSize">
            <summary>
            CPU高速缓存页缓冲区池字节大小 64B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.CachePage">
            <summary>
            CPU高速缓存页缓冲区池 64B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.TinySize">
            <summary>
            微型缓冲区池字节大小 256B
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.Tiny">
            <summary>
            微型缓冲区池(256B)
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.Kilobyte">
            <summary>
            1KB 缓冲区池 1KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.DefaultSize">
            <summary>
            默认缓冲区池字节大小 4KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.Default">
            <summary>
            默认缓冲区池(4KB)
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.RadixSortCountBufferSize">
            <summary>
            64B 基数排序计数缓冲区字节大小 8KB
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.RadixSortCountBuffer">
            <summary>
            64B 基数排序计数缓冲区池(8KB)
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPool.LzwEncodeTableBuffer">
            <summary>
            LZW压缩编码查询表缓冲区(2MB)
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPool(System.Int32)">
            <summary>
            获取临时缓冲区
            </summary>
            <param name="length">缓冲区字节长度</param>
            <returns>临时缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPool.GetPoolPointer(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="length">缓冲区字节长度</param>
            <returns>缓冲区</returns>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedPoolPointer">
            <summary>
            非托管内存池指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPoolPointer.Pointer">
            <summary>
            指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedPoolPointer.unmanagedPool">
            <summary>
            非托管内存池
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.#ctor(AutoCSer.Memory.UnmanagedPool,System.Void*)">
            <summary>
            非托管内存池指针
            </summary>
            <param name="unmanagedPool">非托管内存池</param>
            <param name="data">指针</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.#ctor(AutoCSer.Memory.UnmanagedPool,AutoCSer.Memory.Pointer)">
            <summary>
            非托管内存池指针
            </summary>
            <param name="unmanagedPool">非托管内存池</param>
            <param name="pointer">指针</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.#ctor(AutoCSer.Memory.Pointer)">
            <summary>
            非托管内存池指针
            </summary>
            <param name="pointer">指针</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.PushOnly">
            <summary>
            保存缓冲区（一次性单线程队列释放，不允许多次调用）
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.Push">
            <summary>
            保存缓冲区（多线程并发）
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.PushSetNull">
            <summary>
            保存缓冲区并清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedPoolPointer.Set(System.Void*,System.Int32)">
            <summary>
            设置指针
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedStreamBase">
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.Data">
            <summary>
            数据指针
            </summary>
        </member>
        <member name="P:AutoCSer.Memory.UnmanagedStreamBase.FreeSize">
            <summary>
            空闲字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.IsUnmanaged">
            <summary>
            是否非托管内存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.CanResize">
            <summary>
            是否允许扩展缓存区大小
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.IsResizeError">
            <summary>
            在不允许扩展缓存区大小的情况下是否产生了扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamBase.IsSerializeCopyString">
            <summary>
            默认为 true 表示字符串二进制序列化直接复制内存数据，设置为 false 则对 ASCII 进行编码可以降低空间占用
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.#ctor(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            非托管内存池
            </summary>
            <param name="unmanagedPool"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.#ctor(AutoCSer.Memory.UnmanagedPoolPointer@,System.Boolean)">
            <summary>
            非托管内存池
            </summary>
            <param name="data"></param>
            <param name="isUnmanaged"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Finalize">
            <summary>
            析构释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Reset">
            <summary>
            强制重置数据缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Dispose">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Close">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Close(System.Boolean)">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Clear">
            <summary>
            Clear the data
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.ClearCanResize">
            <summary>
            Clear the data
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.TrySetData(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            尝试申请数据缓冲区并清空数据
            </summary>
            <param name="unmanagedPool"></param>
            <returns>flase 表示已经存在数据缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.TrySetDataCanResize(AutoCSer.Memory.UnmanagedPool)">
            <summary>
            尝试申请数据缓冲区并清空数据
            </summary>
            <param name="unmanagedPool"></param>
            <returns>flase 表示已经存在数据缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Reset(System.Void*,System.Int32)">
            <summary>
            重置数据（调用该方法之后应该调用 ResetEnd / Close 避免后续调用写入数据）
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.ResetEnd(System.Void*)">
            <summary>
            重置数据完成
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.CopyFromStart(AutoCSer.Memory.UnmanagedStreamBase)">
            <summary>
            复制数据缓冲区
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.CopyFromEnd(AutoCSer.Memory.UnmanagedStreamBase)">
            <summary>
            恢复数据缓冲区
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.ExchangeToBuffer(AutoCSer.Memory.UnmanagedStreamBase,AutoCSer.Memory.UnmanagedStreamExchangeBuffer@)">
            <summary>
            复制数据缓冲区并返回原数据缓冲区信息
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.ExchangeFromBuffer(AutoCSer.Memory.UnmanagedStreamBase,AutoCSer.Memory.UnmanagedStreamExchangeBuffer@)">
            <summary>
            恢复设置数据缓冲区
            </summary>
            <param name="stream"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.ExchangeIsSerializeCopyString(System.Boolean@)">
            <summary>
            设置字符串二进制序列化直接复制内存数据
            </summary>
            <param name="isSerializeCopyString"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.SetCanResize(System.Boolean)">
            <summary>
            设置是否允许扩展缓存区大小并返回当前数据位置
            </summary>
            <param name="canResize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.SetCanResizeGetCurrentIndex(System.Boolean)">
            <summary>
            设置是否允许扩展缓存区大小并返回当前数据位置
            </summary>
            <param name="canResize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.setPrepSize(System.Int32)">
            <summary>
            设置预增数据流字节长度
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.SetResizeError">
            <summary>
            设置扩展错误状态
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.PrepSize(System.Int32)">
            <summary>
            预增数据流字节长度
            </summary>
            <param name="size">增加字节长度</param>
            <returns>是否增加成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.TryPrepSize(System.Int32)">
            <summary>
            预增数据流字节长度
            </summary>
            <param name="size">必须大于 0</param>
            <returns>是否增加成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.TryMoveSize(System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="size">必须大于 0</param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.PrepSize(AutoCSer.Memory.UnmanagedStreamBase,System.Int32)">
            <summary>
            预增数据流字节长度
            </summary>
            <param name="unmanagedStream"></param>
            <param name="size">增加字节长度</param>
            <returns>是否增加成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetBeforeMove(System.Int32)">
            <summary>
            增加数据流字节长度并返回增加之前的位置
            </summary>
            <param name="size">增加字节长度</param>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetIndexBeforeMove(System.Int32)">
            <summary>
            增加数据流字节长度并返回增加之前的位置
            </summary>
            <param name="size">增加字节长度</param>
            <returns>失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetIndexBeforeMove(System.Int32,System.Int32)">
            <summary>
            增加数据流字节长度并返回增加之前的位置
            </summary>
            <param name="size">增加字节长度</param>
            <param name="value">写入数据</param>
            <returns>失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetCanResizeBeforeMove(System.Int32)">
            <summary>
            增加数据流字节长度并返回增加之前的位置
            </summary>
            <param name="size">增加字节长度</param>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetPrepSizeCurrent(System.Int32)">
            <summary>
            预增数据流字符长度
            </summary>
            <param name="size">增加字符长度</param>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetPrepSizeCurrentIndex(System.Int32)">
            <summary>
            预增数据流字符长度
            </summary>
            <param name="size">增加字符长度</param>
            <returns>失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetMoveSize(System.Int32)">
            <summary>
            移动当前位置并返回当前位置
            </summary>
            <param name="size"></param>
            <returns>Failure and return 0
            失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.MoveSize(System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="size"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.MoveSize(AutoCSer.Memory.UnmanagedStreamBase,System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="stream"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.SerializeMoveSize(System.Int32)">
            <summary>
            写入缓冲区字节数
            </summary>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Guid)">
            <summary>
            写数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Guid@)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.JsonSerializeFill(System.Int32)">
            <summary>
            二进制序列化 JSON 成员序列化补白对齐 4 字节并写入 JSON 字节长度
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Serialize(System.Char*,System.Int32,System.Boolean)">
            <summary>
            String serialization
            </summary>
            <param name="stringFixed"></param>
            <param name="stringLength"></param>
            <param name="isCopy"></param>
            <returns>不包括补白的字节数，0 表示序列化失败</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.GetSerializeStringLengthSize(System.Int32)">
            <summary>
            获取字符串长度字节数
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Serialize(System.Void*,System.Int32,System.Int32)">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="data">数据,不能为null</param>
            <param name="arrayLength">数据数量</param>
            <param name="dataSize">复制数据数量</param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(AutoCSer.Memory.Pointer@)">
            <summary>
            写入数据
            </summary>
            <param name="pointer"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            写入 64 字节数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.UnsafeWrite(AutoCSer.Memory.UnmanagedStreamBase,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="unmanagedStream"></param>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.UInt16)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Int16)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Byte)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.SByte)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Boolean)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.TimeSpan)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Half)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Int128)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.UInt128)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Numerics.Complex)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Numerics.Plane)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Numerics.Quaternion)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Numerics.Matrix3x2)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Numerics.Matrix4x4)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Numerics.Vector2)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Numerics.Vector3)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamBase.Write(System.Numerics.Vector4)">
            <summary>
            写数据
            </summary>
            <param name="value">data</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="T:AutoCSer.Memory.UnmanagedStreamExchangeBuffer">
            <summary>
            非托管内存数据流切换数据缓冲区信息
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamExchangeBuffer.Data">
            <summary>
            非托管内存池指针
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamExchangeBuffer.IsUnmanaged">
            <summary>
            是否非托管内存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamExchangeBuffer.CanResize">
            <summary>
            是否允许扩展缓存区大小
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamExchangeBuffer.IsResizeError">
            <summary>
            在不允许扩展缓存区大小的情况下是否产生了扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.UnmanagedStreamExchangeBuffer.IsSerializeCopyString">
            <summary>
            字符串二进制序列化直接复制内存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.UnmanagedStreamExchangeBuffer.#ctor(AutoCSer.Memory.UnmanagedStreamBase)">
            <summary>
            非托管内存数据流切换数据缓冲区信息
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:AutoCSer.NullableBoolEnum">
            <summary>
            可空逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBoolEnum.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBoolEnum.False">
            <summary>
            逻辑假值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBoolEnum.True">
            <summary>
            逻辑真值
            </summary>
        </member>
        <member name="T:AutoCSer.ObjectReferenceType">
            <summary>
            对象引用（用于序列化循环引用比较）
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectReferenceType.value">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectReferenceType.type">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectReferenceType.#ctor(System.Object,System.Type)">
            <summary>
            对象引用
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.ObjectReferenceType.Equals(AutoCSer.ObjectReferenceType)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectReferenceType.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectReferenceType.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CombinationTemplateConfig">
            <summary>
            Customize simple combination template parameters
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="P:AutoCSer.CombinationTemplateConfig.TemplatePath">
            <summary>
            Custom template relative to project path
            自定义模板相对项目路径
            </summary>
        </member>
        <member name="T:AutoCSer.Config">
            <summary>
            Public configuration parameters
            公共配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Encoding">
            <summary>
            Global encoding
            全局编码
            </summary>
        </member>
        <member name="F:AutoCSer.Config.TimeoutCapacityBitSize">
            <summary>
            The binary bit length of the two-dimensional second-level timer array container is set to a minimum of 8 and a maximum of 12 by default
            二维秒级定时器数组容器二进制位长度，默认为最小值 8，最大值为 12
            </summary>
        </member>
        <member name="F:AutoCSer.Config.IsMemoryScanStaticType">
            <summary>
            The default is false, indicating that the memory of statically type members is not scanned
            默认为 false 表示不扫描静态类型成员内存
            </summary>
        </member>
        <member name="F:AutoCSer.Config.MemoryCacheClearSeconds">
            <summary>
            The default time interval for temporary cache clearing is 3600 seconds
            临时性缓存清理时间间隔秒数，默认为 3600 秒
            </summary>
        </member>
        <member name="F:AutoCSer.Config.MaxByteArrayPoolSizeBits">
            <summary>
            The maximum binary number of the buffer in the byte array buffer pool is 17 by default for 128KB, the minimum value is 4 for 16B, and the maximum value is 30 for 1GB
            字节数组缓冲区池最大缓冲区二进制位数，默认为 17 为 128KB，最小值为 4 为 16B，最大值为 30 为 1GB
            </summary>
        </member>
        <member name="F:AutoCSer.Config.remoteTypes">
            <summary>
            A collection of basic legal remote types
            基础合法远程类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.Config.RemoteTypes">
            <summary>
            A collection of basic legal remote types
            基础合法远程类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Config.remoteTypeAssemblys">
            <summary>
            A collection of assemblies for verifying legitimate remote type tags
            验证合法远程类型标记的程序集集合
            </summary>
        </member>
        <member name="P:AutoCSer.Config.RemoteTypeAssemblys">
            <summary>
            A collection of assemblies for verifying legitimate remote type tags
            验证合法远程类型标记的程序集集合
            </summary>
        </member>
        <member name="P:AutoCSer.Config.SerializeUnmanagedPool">
            <summary>
            Serialization initialization of unmanaged memory pools, with a default of 4KB. For open servers, it is recommended to modify it to 256B or 1KB
            序列化初始化非托管内存池，默认为 4KB，开放服务端建议修改为 256B 或者 1KB
            </summary>
        </member>
        <member name="M:AutoCSer.Config.#ctor">
            <summary>
            Public configuration parameters
            公共配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.Config.GetMemoryCacheClearSeconds">
            <summary>
            Get the number of seconds between temporary cache cleanup times
            获取临时性缓存清理时间间隔秒数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.OnLogFileException(AutoCSer.ILog,System.Exception)">
            <summary>
            Log file operation exception handling (because logs cannot be written), note that the application layer should not call this log to record this exception, nor should the logs of two exceptions be called mutually to avoid an infinite loop
            日志文件操作异常处理（因为没法写日志），注意应用层也不要调用该日志记录这个异常，也不要让两个异常的日志相互调用避免死循环
            </summary>
            <param name="log">Log processing interface
            日志处理接口</param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Config.GetLinkPoolParameter(System.Type)">
            <summary>
            Gets the default linked list cache pool parameters
            获取默认链表缓存池参数
            </summary>
            <param name="type">Cache data type
            缓存数据类型</param>
            <returns>Linked list cache pool parameters
            链表缓存池参数</returns>
        </member>
        <member name="M:AutoCSer.Config.CheckRemoteType(System.Type)">
            <summary>
            Check whether the remote type is valid
            检查远程类型是否合法
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.AppendRemoteType(System.Type)">
            <summary>
            Add the basic legal remote type
            添加基础合法远程类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Config.AppendRemoteTypeAssembly(System.Reflection.Assembly)">
            <summary>
            Add assemblies that verify legitimate remote type tags
            添加验证合法远程类型标记的程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:AutoCSer.Config.AppendRemoteTypeAsync(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Add basic legitimate remote type (log by default)
            添加基础合法远程类型（默认写日志）
            </summary>
            <param name="type">Basic legitimate remote type
            基础合法远程类型</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Config.AppendRemoteTypeAssemblyAsync(System.Reflection.Assembly,System.String,System.String,System.Int32)">
            <summary>
            Add assemblies that validate valid remote type flags (default log writing)
            添加验证合法远程类型标记的程序集（默认写日志）
            </summary>
            <param name="assembly">An assembly that validates a valid remote type tag
            验证合法远程类型标记的程序集</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.Config.Compress(System.Byte[],System.Int32,System.Int32,AutoCSer.Memory.ByteArrayBuffer@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32,System.IO.Compression.CompressionLevel)">
            <summary>
            Compress data
            压缩数据
            </summary>
            <param name="data">Original data
            原始数据</param>
            <param name="startIndex">The starting position of the original data
            原始数据起始位置</param>
            <param name="count">The number of bytes of the original data to be compressed
            原始数据待压缩字节数</param>
            <param name="buffer">Compressed output buffer
            压缩输出缓冲区</param>
            <param name="compressData">Compressed data
            压缩后的数据</param>
            <param name="seek">The starting position of the compressed output
            压缩输出起始位置</param>
            <param name="compressHeadSize">The size of the compressed excess head
            压缩多余头部大小</param>
            <param name="level"></param>
            <returns>Whether the compression was successful
            是否压缩成功</returns>
        </member>
        <member name="M:AutoCSer.Config.Compress(System.Byte[],System.Int32,System.Int32,System.Int32,System.IO.Compression.CompressionLevel)">
            <summary>
            Compress data
            压缩数据
            </summary>
            <param name="data">Original data
            原始数据</param>
            <param name="startIndex">The starting position of the original data
            原始数据起始位置</param>
            <param name="count">The number of bytes of the original data to be compressed
            原始数据待压缩字节数</param>
            <param name="seek">The starting position of the compressed output
            压缩输出起始位置</param>
            <param name="level"></param>
            <returns>Compressed data
            压缩后的数据</returns>
        </member>
        <member name="M:AutoCSer.Config.Decompress(AutoCSer.SubArray{System.Byte}@,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Data decompression
            数据解压
            </summary>
            <param name="compressData">Compressed data
            压缩后的数据</param>
            <param name="destinationData">The original data buffer waiting to be written
            等待写入的原始数据缓冲区</param>
            <returns>Whether the decompression was successful
            是否解压成功</returns>
        </member>
        <member name="F:AutoCSer.Config.setMemoryStreamExpandable">
            <summary>
            Set up memory flow expansion
            设置内存流扩容
            </summary>
        </member>
        <member name="M:AutoCSer.Config.GetExpandableMemoryStream(AutoCSer.Memory.ByteArrayBuffer@,System.Int32)">
            <summary>
            Get an expandable memory stream
            获取可扩容内存流
            </summary>
            <param name="buffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.Cache">
            <summary>
            配置加载缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Cache.GetCreator(System.Type,System.String)">
            <summary>
            获取配置创建
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Configuration.Cache.Get(System.Type,System.String)">
            <summary>
            获取配置项数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置缓存名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="F:AutoCSer.Configuration.Cache.cache">
            <summary>
            配置集合 [类型+名称]
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Cache.append(System.Type)">
            <summary>
            添加配置缓存
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:AutoCSer.Configuration.Common">
            <summary>
            公共配置，该类型不允许增加依赖成员
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.Common.Root">
            <summary>
            Root configuration
            根配置
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.Common.IsConfigLoaded">
            <summary>
            配置缓存是否已经加载
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Common.SetRoot(AutoCSer.Configuration.IRoot)">
            <summary>
            设置根配置，用于如果不是 Assembly.GetEntryAssembly() 或者不希望扫描程序集的场景
            </summary>
            <param name="root">根配置</param>
            <returns>false 表示配置缓存已经加载，设置无效</returns>
        </member>
        <member name="M:AutoCSer.Configuration.Common.Get(System.Type,System.String)">
            <summary>
            获取配置项数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称，默认为 null 表示默认名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Configuration.Common.GetAsync(System.Type,System.String)">
            <summary>
            获取配置项数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称，默认为 null 表示默认名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Configuration.Common.Get``1(System.String)">
            <summary>
            获取配置项数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">配置名称，默认为 null 表示默认名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Configuration.Common.GetAsync``1(System.String)">
            <summary>
            获取配置项数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">配置名称，默认为 null 表示默认名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="T:AutoCSer.Configuration.Creator">
            <summary>
            配置创建
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Creator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Configuration.Creator.CreateAsync">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.FieldCreator">
            <summary>
            字段配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.FieldCreator.field">
            <summary>
            目标字段
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.FieldCreator.#ctor(System.Reflection.FieldInfo)">
            <summary>
            字段配置创建
            </summary>
            <param name="field">目标字段</param>
        </member>
        <member name="M:AutoCSer.Configuration.FieldCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.FieldObjectCreator">
            <summary>
            字段配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.FieldObjectCreator.field">
            <summary>
            目标字段
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.FieldObjectCreator.#ctor(System.Reflection.FieldInfo)">
            <summary>
            字段配置创建
            </summary>
            <param name="field">目标字段</param>
        </member>
        <member name="M:AutoCSer.Configuration.FieldObjectCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.MethodCreator">
            <summary>
            Task 函数配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MethodCreator.method">
            <summary>
            目标函数
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MethodCreator.type">
            <summary>
            配置数据类型 ConfigObject{T}
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.MethodCreator.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Task 函配置创建
            </summary>
            <param name="method">目标函数</param>
            <param name="type">配置数据类型</param>
        </member>
        <member name="M:AutoCSer.Configuration.MethodCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Configuration.MethodCreator.CreateAsync">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.MethodObjectCreator">
            <summary>
            Task 函数配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MethodObjectCreator.method">
            <summary>
            目标函数
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MethodObjectCreator.type">
            <summary>
            配置数据类型
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.MethodObjectCreator.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Task 函配置创建
            </summary>
            <param name="method">目标函数</param>
            <param name="type">配置数据类型</param>
        </member>
        <member name="M:AutoCSer.Configuration.MethodObjectCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Configuration.MethodObjectCreator.CreateAsync">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.PropertyCreator">
            <summary>
            属性配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.PropertyCreator.method">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.PropertyCreator.#ctor(System.Reflection.MethodInfo)">
            <summary>
            属性配置创建
            </summary>
            <param name="method">目标属性</param>
        </member>
        <member name="M:AutoCSer.Configuration.PropertyCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.PropertyObjectCreator">
            <summary>
            属性配置创建
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.PropertyObjectCreator.method">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.PropertyObjectCreator.#ctor(System.Reflection.MethodInfo)">
            <summary>
            属性配置创建
            </summary>
            <param name="method">目标属性</param>
        </member>
        <member name="M:AutoCSer.Configuration.PropertyObjectCreator.Create">
            <summary>
            创建配置对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.MemberAttribute">
            <summary>
            申明为配置项
            </summary>
        </member>
        <member name="F:AutoCSer.Configuration.MemberAttribute.Name">
            <summary>
            配置名称，默认为 null 表示默认名称，空字符串表示使用定义名称
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.MemberAttribute.#ctor(System.String)">
            <summary>
            申明为配置项
            </summary>
            <param name="name">配置名称，默认为 null 表示默认名称，空字符串表示使用定义名称</param>
        </member>
        <member name="M:AutoCSer.Configuration.MemberAttribute.GetCacheName(System.String)">
            <summary>
            获取配置缓存名称
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Configuration.IRoot">
            <summary>
            Root configuration interface
            根配置接口
            </summary>
        </member>
        <member name="P:AutoCSer.Configuration.IRoot.MainTypes">
            <summary>
            Main configuration type collection
            主配置类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.Configuration.IRoot.PublicTypes">
            <summary>
            Collection of public configuration types
            公共配置类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.IRoot.OnLoadException(AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Exception}})">
            <summary>
            Configuration cache type loading exception (Note: Do not synchronously block the configuration thread)
            配置缓存类型加载异常（注意不要同步阻塞配置线程）
            </summary>
            <param name="exceptionTypes">Configuration cache type loading exception
            配置缓存类型加载异常</param>
        </member>
        <member name="T:AutoCSer.Configuration.Root">
            <summary>
            Root configuration
            根配置
            </summary>
        </member>
        <member name="P:AutoCSer.Configuration.Root.MainTypes">
            <summary>
            Main configuration type collection
            主配置类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.Configuration.Root.PublicTypes">
            <summary>
            Collection of public configuration types
            公共配置类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Configuration.Root.OnLoadException(AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Exception}})">
            <summary>
            Configuration cache type loading exception (Note: Do not synchronously block the configuration thread)
            配置缓存类型加载异常（注意不要同步阻塞配置线程）
            </summary>
            <param name="exceptionTypes">Configuration cache type loading exception
            配置缓存类型加载异常</param>
        </member>
        <member name="M:AutoCSer.Configuration.Root.OnLoadException(AutoCSer.Configuration.IRoot,AutoCSer.LeftArray{AutoCSer.KeyValue{System.Type,System.Exception}})">
            <summary>
            Configuration cache type loading exception
            配置缓存类型加载异常
            </summary>
            <param name="root"></param>
            <param name="exceptionTypes"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Configuration.Root.Null">
            <summary>
            Default empty configuration
            </summary>
        </member>
        <member name="T:AutoCSer.ConfigObject">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="F:AutoCSer.ConfigObject.onChangedLock">
            <summary>
            日志队列访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.ConfigObject.IsReadOnly">
            <summary>
            配置数据是否只读
            </summary>
        </member>
        <member name="M:AutoCSer.ConfigObject.#ctor(System.Boolean)">
            <summary>
            配置对象
            </summary>
            <param name="isReadOnly"></param>
        </member>
        <member name="M:AutoCSer.ConfigObject.GetConfigObjectType(System.Type)">
            <summary>
            获取配置对象类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject.Create``1(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject.CreateTask``1(System.Object)">
            <summary>
            创建配置对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject.GetTask``1(System.Object)">
            <summary>
            获取配置对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ConfigObject`1">
            <summary>
            配置对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.ConfigObject`1.Value">
            <summary>
            配置数据
            </summary>
        </member>
        <member name="F:AutoCSer.ConfigObject`1.onChangeds">
            <summary>
            配置更新触发任务集合
            </summary>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.#ctor(`0,System.Boolean)">
            <summary>
            配置数据
            </summary>
            <param name="value"></param>
            <param name="isReadOnly"></param>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.Get">
            <summary>
            获取配置数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.op_Implicit(AutoCSer.ConfigObject{`0})~`0">
            <summary>
            配置对象隐式转换，当 T 为接口类型时隐式转换会异常
            </summary>
            <param name="config">配置对象</param>
            <returns>配置数据</returns>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.ClearOnChanged">
            <summary>
            清除配置更新触发任务
            </summary>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.SetOnChanged(System.Func{AutoCSer.ConfigObject{`0},System.Threading.Tasks.Task})">
            <summary>
            添加配置更新触发任务
            </summary>
            <param name="onChanged">配置更新触发任务</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.RemoveOnChanged(System.Func{AutoCSer.ConfigObject{`0},System.Threading.Tasks.Task})">
            <summary>
            移除配置更新触发任务
            </summary>
            <param name="onChanged">配置更新触发任务</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ConfigObject`1.callOnChanged">
            <summary>
            触发配置更新触发任务
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Date">
            <summary>
            Date-related operations
            日期相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Date.BaseTime">
            <summary>
            The default base time value is 1900/1/1
            默认基础时间值 1900/1/1
            </summary>
        </member>
        <member name="F:AutoCSer.Date.StartTime">
            <summary>
            Initialize the Utc time
            初始化 Utc 时间
            </summary>
        </member>
        <member name="F:AutoCSer.Date.StartTimestamp">
            <summary>
            Initialize the starting timestamp
            初始化起始时间戳
            </summary>
        </member>
        <member name="P:AutoCSer.Date.TimestampDifference">
            <summary>
            Get the difference of the initialization timestamps
            获取初始化时间戳差值
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Date.TimestampByMilliseconds">
            <summary>
            1-millisecond timestamp
            1 毫秒时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Date.LocalTimeTicks">
            <summary>
            Local clock cycle
            本地时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Date.ZoneHourString">
            <summary>
            Time zone hour string +HH:
            时区小时字符串 +HH:
            </summary>
        </member>
        <member name="F:AutoCSer.Date.ZoneMinuteString">
            <summary>
            Time zone f minute string mm"
            时区f分钟字符串 mm"
            </summary>
        </member>
        <member name="F:AutoCSer.Date.isTimestampTicks">
            <summary>
            Whether the clock cycle is consistent with the timestamp
            时钟周期与时间戳是否一致
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_32Mul">
            <summary>
            The multiplier of a 32-bit integer divided by 60
            32 位整数除以 60 转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_32Shift">
            <summary>
            The number of shifts in the multiplication method of a 32-bit integer divided by 60
            32 位整数除以 60 转乘法的位移数量
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_16Mul">
            <summary>
            The multiplier of a 16-bit integer divided by 60
            16 位整数除以 60 转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_16Shift">
            <summary>
            The number of shifts in the multiplication method of a 16-bit integer divided by 60
            16 位整数除以 60 转乘法的位移数量
            </summary>
        </member>
        <member name="F:AutoCSer.Date.weekData">
            <summary>
            Week string data
            星期字符串数据
            </summary>
        </member>
        <member name="F:AutoCSer.Date.monthData">
            <summary>
            Month string data
            月份字符串数据
            </summary>
        </member>
        <member name="M:AutoCSer.Date.localToUniversalTime(System.DateTime)">
            <summary>
            Convert local time to Utc time
            本地时间转换为 Utc 时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.ToDateString(System.DateTime,System.Char*,System.Char)">
            <summary>
            Time to date string (yyyy/MM/dd)
            时间转换成日期字符串（yyyy/MM/dd）
            </summary>
            <param name="time">Time value
            时间值</param>
            <param name="chars">Output the position of the time string
            输出时间字符串位置</param>
            <param name="split">Separator
            分隔符</param>
        </member>
        <member name="M:AutoCSer.Date.toTimeString(System.Int32,System.Char*)">
            <summary>
            Time is converted to string (HH:mm:ss)
            时间转换成字符串（HH:mm:ss）
            </summary>
            <param name="second">The number of seconds for the day
            当天的计时秒数</param>
            <param name="chars">Output the position of the time string
            输出时间字符串位置</param>
        </member>
        <member name="F:AutoCSer.Date.ToStringSize">
            <summary>
            Maximum byte length of time-converted string (yyyy-MM-ddTHH:mm:ss.fffffff)
            时间转换字符串最大字节长度（yyyy-MM-ddTHH:mm:ss.fffffff）
            </summary>
        </member>
        <member name="F:AutoCSer.Date.DefaultDateSplit">
            <summary>
            The separator between the default year, month and day
            默认年月日之间的分隔符
            </summary>
        </member>
        <member name="M:AutoCSer.Date.ToString(System.DateTime,System.Char*,System.Char,System.Char)">
            <summary>
            Time is converted to string (yyyy-MM-ddTHH:mm:ss.fffffff)
            时间转换成字符串（yyyy-MM-ddTHH:mm:ss.fffffff）
            </summary>
            <param name="time"></param>
            <param name="timeFixed"></param>
            <param name="dateTimeSplit">The separator between date and time
            日期与时间之间的分隔符</param>
            <param name="dateSplit">The separator between years, months and days
            年月日之间的分隔符</param>
            <returns>The string length may return 19/23/27
            字符串长度，可能返回 19/23/27</returns>
        </member>
        <member name="M:AutoCSer.Date.toTicksString(System.Char*,System.Int64)">
            <summary>
            The time is converted to a string (.fffffff)
            时间转换成字符串（.fffffff）
            </summary>
            <param name="timeFixed"></param>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.ToString3(System.DateTime,System.Char*,System.Char,System.Char)">
            <summary>
            Time is converted to string (yyyy-MM-ddTHH:mm:ss.fff)
            时间转换成字符串（yyyy-MM-ddTHH:mm:ss.fff）
            </summary>
            <param name="time"></param>
            <param name="timeFixed"></param>
            <param name="dateTimeSplit">The separator between date and time
            日期与时间之间的分隔符</param>
            <param name="dateSplit">The separator between years, months and days
            年月日之间的分隔符</param>
            <returns>The string length may return 19/23
            字符串长度，可能返回 19/23</returns>
        </member>
        <member name="M:AutoCSer.Date.ToSecondString(System.DateTime,System.Char*,System.Char,System.Char)">
            <summary>
            Time is converted to string (yyyy-MM-ddTHH:mm:ss)
            时间转换成字符串（yyyy-MM-ddTHH:mm:ss）
            </summary>
            <param name="time"></param>
            <param name="timeFixed"></param>
            <param name="dateTimeSplit">The separator between date and time
            日期与时间之间的分隔符</param>
            <param name="dateSplit">The separator between years, months and days
            年月日之间的分隔符</param>
            <returns>The number of clock cycles of less than one second
            不足 1 秒的时钟周期数</returns>
        </member>
        <member name="M:AutoCSer.Date.toString(System.DateTime,AutoCSer.Memory.CharStream,System.Char)">
            <summary>
            Time is converted into a string
            时间转换成字符串
            </summary>
            <param name="time">Time value
            时间值</param>
            <param name="charStream">Output character stream
            输出字符流</param>
            <param name="dateSplit">The separator between years, months and days
            年月日之间的分隔符</param>
        </member>
        <member name="M:AutoCSer.Date.toString(System.DateTime,System.Char)">
            <summary>
            Time is converted to string (yyyy-MM-ddTHH:mm:ss.fffffff)
            时间转换成字符串（yyyy-MM-ddTHH:mm:ss.fffffff）
            </summary>
            <param name="time"></param>
            <param name="dateSplit">The separator between years, months and days
            年月日之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.ToString(System.TimeSpan,System.Char*)">
            <summary>
            Time is converted to a string (HH:mm:ss.fffffff)
            时间转换成字符串（HH:mm:ss.fffffff）
            </summary>
            <param name="time"></param>
            <param name="timeFixed"></param>
            <returns>String length</returns>
        </member>
        <member name="M:AutoCSer.Date.toString(System.TimeSpan)">
            <summary>
            Time is converted to a string (HH:mm:ss.fffffff)
            时间转换成字符串（HH:mm:ss.fffffff）
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.toIntDate(System.DateTime)">
            <summary>
            The integer value of time conversion: Year[23b] + Month[4b] + Day[5b]
            时间转整数值 Year[23b] + Month[4b] + Day[5b]
            </summary>
            <param name="time"></param>
            <returns>Year[23b] + Month[4b] + Day[5b]</returns>
        </member>
        <member name="M:AutoCSer.Date.fromIntDate(System.UInt32,System.DateTimeKind)">
            <summary>
            Convert integer values to time
            整数值转时间
            </summary>
            <param name="date">Year[23b] + Month[4b] + Day[5b]</param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.GetMillisecondsByTimestamp(System.Int64)">
            <summary>
            Timestamp to millisecond
            时间戳转毫秒数
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.GetTimestampByMilliseconds(System.Int64)">
            <summary>
            Milliseconds to timestamps
            毫秒数转时间戳
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Date.TimestampPerSecond">
            <summary>
            The number of timestamps per second
            每秒时间戳数量
            </summary>
        </member>
        <member name="M:AutoCSer.Date.GetTimestampBySeconds(System.Int64)">
            <summary>
            Convert seconds to timestamps
            秒数转时间戳
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.GetTimestampByTicks(System.Int64)">
            <summary>
            Clock cycle to timestamp (It may overflow)
            时钟周期转时间戳（It may overflow）
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.DictionaryCreator`1">
            <summary>
            Create the dictionary
            创建字典
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.DictionaryCreator`1.Create``1">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="VT">Data type</typeparam>
            <returns>Dictionary</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator`1.Create``1(System.Int32)">
            <summary>
            Create a dictionary
            创建字典
            </summary>
            <typeparam name="VT">Data type</typeparam>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Dictionary</returns>
        </member>
        <member name="T:AutoCSer.DynamicArray">
            <summary>
            Dynamic array information
            动态数组信息
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.DefalutArrayCapacity">
            <summary>
            Default array container size
            默认数组容器大小
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.isClearArrayCache">
            <summary>
            Type cache of does the array element need to be cleared (If there are reference type members, a clearing operation is required to prevent memory leaks)
            数组元素是否需要清除操作的类型缓存（存在引用类型成员则需要清除操作避免内存泄露）
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.isClearArrayLock">
            <summary>
            The access lock of the array type cache
            数组类型缓存的访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray.IsClearArray(System.Type)">
            <summary>
            Does the array element need to be cleared
            数组元素是否需要清除操作
            </summary>
            <param name="type"></param>
            <returns>Does the array element need to be cleared
            数组元素是否需要清除操作</returns>
        </member>
        <member name="M:AutoCSer.DynamicArray.isClearArray(System.Type,System.Collections.Generic.Dictionary{AutoCSer.HashObject{System.Type},System.Boolean})">
            <summary>
            Does the array element need to be cleared
            数组元素是否需要清除操作
            </summary>
            <param name="type"></param>
            <param name="isClearArrayCache"></param>
            <returns>Does the array element need to be cleared
            数组元素是否需要清除操作</returns>
        </member>
        <member name="M:AutoCSer.DynamicArray.clearCache">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray.clearCacheTask">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.DynamicArray`1">
            <summary>
            Dynamic array base class
            动态数组基类
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.DynamicArray`1.IsClearArray">
            <summary>
            Does the array element need to be cleared
            数组元素是否需要清除操作
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray`1.GetNewArray(System.Int32)">
            <summary>
            Create a new array
            创建新数组
            </summary>
            <param name="capacity">Expected array container size
            预期数组容器大小</param>
            <returns>Array</returns>
        </member>
        <member name="T:AutoCSer.EmptyArray`1">
            <summary>
            An empty array of 0 length
            0 长度空数组
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.EmptyArray`1.Array">
            <summary>
            0-element Array (Serious warning: Do not perform Array.resize operations on this object. Do not use in scenarios where it cannot be guaranteed)
            0 元素数组（严重警告，禁止对该对象进行 Array.Resize 操作，在无法保证的场景禁止使用）
            </summary>
        </member>
        <member name="T:AutoCSer.Enumerator`1">
            <summary>
            枚举器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AutoCSer.Enumerator`1.EmptyEnumerator">
            <summary>
            空枚举器
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.EmptyEnumerator.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.EmptyEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.MoveNext">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.Reset">
            <summary>
            重置枚举器状态
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.Dispose">
            <summary>
            释放枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Empty">
            <summary>
            空枚举实例
            </summary>
        </member>
        <member name="T:AutoCSer.Enumerator`1.Array">
            <summary>
            数组枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.array">
            <summary>
            被枚举数组
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.currentIndex">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.endIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.startIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.#ctor(AutoCSer.LeftArray{`0})">
            <summary>
            数组枚举器
            </summary>
            <param name="value">数组子串</param>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            数组枚举器
            </summary>
            <param name="array">Array</param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="P:AutoCSer.Enumerator`1.Array.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.Array.System#Collections#IEnumerator#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.MoveNext">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.Reset">
            <summary>
            重置枚举器状态
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.Dispose">
            <summary>
            释放枚举器
            </summary>
        </member>
        <member name="T:AutoCSer.GuidCreator">
            <summary>
            Guid 联合体
            </summary>
        </member>
        <member name="F:AutoCSer.GuidCreator.Value">
            <summary>
            Guid
            </summary>
        </member>
        <member name="M:AutoCSer.GuidCreator.ToString(System.Char*)">
            <summary>
            转换成字符串
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.HashKey`2">
            <summary>
            哈希关键字
            </summary>
            <typeparam name="T1">关键字类型1</typeparam>
            <typeparam name="T2">关键字类型2</typeparam>
        </member>
        <member name="F:AutoCSer.HashKey`2.value1">
            <summary>
            关键字1
            </summary>
        </member>
        <member name="F:AutoCSer.HashKey`2.value2">
            <summary>
            关键字2
            </summary>
        </member>
        <member name="M:AutoCSer.HashKey`2.#ctor(`0,`1)">
            <summary>
            哈希关键字
            </summary>
            <param name="value1">关键字1</param>
            <param name="value2">关键字2</param>
        </member>
        <member name="M:AutoCSer.HashKey`2.Equals(AutoCSer.HashKey{`0,`1})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashKey`2.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashKey`2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.HashSetCreator">
            <summary>
            Create the HashSet
            创建 HashSet
            </summary>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateInt">
            <summary>
            Create a HashSet
            创建 HashSet
            </summary>
            <returns>HashSet</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateLong">
            <summary>
            Create a HashSet
            创建 HashSet
            </summary>
            <returns>HashSet</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateHashObject``1">
            <summary>
            Create a HashSet
            创建 HashSet
            </summary>
            <typeparam name="T">Data type</typeparam>
            <returns>HashSet</returns>
        </member>
        <member name="T:AutoCSer.HashSetCreator`1">
            <summary>
            Create the HashSet
            创建 HashSet
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:AutoCSer.HashSetCreator`1.Create">
            <summary>
            Create a HashSet
            创建 HashSet
            </summary>
            <returns>HashSet</returns>
        </member>
        <member name="T:AutoCSer.IO.File">
            <summary>
            文件扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.IO.File.BakPrefix">
            <summary>
            临时文件前缀
            </summary>
        </member>
        <member name="M:AutoCSer.IO.File.MoveBak(System.String)">
            <summary>
            修改文件名成为默认备份文件 %yyyyMMdd-HHmmss_HEX_fileName
            </summary>
            <param name="fileName">源文件名</param>
            <returns>备份文件名称,失败返回 null</returns>
        </member>
        <member name="M:AutoCSer.IO.File.MoveBakFileName(System.String)">
            <summary>
            获取备份文件名称 %yyyyMMdd-HHmmss_HEX_fileName
            </summary>
            <param name="fileName">源文件名</param>
            <returns>备份文件名称</returns>
        </member>
        <member name="T:AutoCSer.JsonSerializeMemberAttribute">
            <summary>
            JSON serialization member configuration
            JSON 序列化成员配置
            </summary>
        </member>
        <member name="T:AutoCSer.JsonSerializeAttribute">
            <summary>
            JSON 序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeAttribute.DocumentType">
            <summary>
            文档类型，用于 WEB API 等接口文档的 JSON 序列化描述
            </summary>
        </member>
        <member name="T:AutoCSer.KeyValue">
            <summary>
            Key-value pairs
            键值对
            </summary>
        </member>
        <member name="M:AutoCSer.KeyValue.From``2(``0,``1)">
            <summary>
            Get the key-value pair
            获取键值对
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.KeyValue`2">
            <summary>
            Key-value pairs
            键值对
            </summary>
            <typeparam name="KT">Keyword type
            </typeparam>
            <typeparam name="VT">Data value type
            数据值类型</typeparam>
        </member>
        <member name="F:AutoCSer.KeyValue`2.Key">
            <summary>
            Keyword
            </summary>
        </member>
        <member name="F:AutoCSer.KeyValue`2.Value">
            <summary>
            Data value
            </summary>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0,`1)">
            <summary>
            Key-value pairs
            键值对
            </summary>
            <param name="key">Keyword</param>
            <param name="value">Data value</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0@,`1@)">
            <summary>
            Key-value pairs
            键值对
            </summary>
            <param name="key">Keyword</param>
            <param name="value">Data value</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.SetNull">
            <summary>
            Clear the data
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.KeyValue`2.Set(`0,`1)">
            <summary>
            Reset the key-value pair
            重置键值对
            </summary>
            <param name="key">Keyword</param>
            <param name="value">Data value</param>
        </member>
        <member name="T:AutoCSer.LeftArray`1">
            <summary>
            Array substring
            数组子串
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Array">
            <summary>
            Original array
            原数组
            </summary>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Length">
            <summary>
            Effective data length
            有效数据长度
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.Count">
            <summary>
            Effective data length
            有效数据长度
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.FreeCount">
            <summary>
            The number of free slots in the original array
            原数组空闲数量
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.IsFree">
            <summary>
            Are there any available positions
            是否存在空闲位置
            </summary>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Reserve">
            <summary>
            Reserve
            保留字段
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.IsReadOnly">
            <summary>
            A fixed return of false indicates writable
            固定返回 false 表示可写
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.Item(System.Int32)">
            <summary>
            Set or get the data of the specified location
            设置或获取指定位置数据
            </summary>
            <param name="index">Specified position
            指定位置</param>
            <returns>Data value</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Int32)">
            <summary>
            Array substring
            数组子串
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(`0[])">
            <summary>
            Array substring
            数组子串
            </summary>
            <param name="array">Array</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Int32,`0[])">
            <summary>
            Array substring
            数组子串
            </summary>
            <param name="length">Initialize the data length
            初始化数据长度</param>
            <param name="array">Original array
            原数组</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Get the enumerator
            获取枚举器
            </summary>
            <returns>Enumerator
            枚举器</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            获取枚举器
            </summary>
            <returns>Enumerator
            枚举器</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetEnumerable(System.Int32,System.Int32)">
            <summary>
            Return the collection enumeration data
            返回集合枚举数据
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetEnumerable(System.Int32)">
            <summary>
            Return the collection enumeration data
            返回集合枚举数据
            </summary>
            <param name="index">Starting position
            起始位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetReverseEnumerable(System.Int32,System.Int32)">
            <summary>
            Return the reverse enumeration data of the collection
            返回集合反向枚举数据
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetReverseIndexEnumerable">
            <summary>
            Return the reverse enumeration data of the collection
            返回集合反向枚举数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.setCapacity(System.Int32)">
            <summary>
            Set the size of the data container
            设置数据容器大小
            </summary>
            <param name="capacity">Container size
            容器大小</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.checkCapacity(System.Int32)">
            <summary>
            Set the size of the data container
            设置数据容器大小
            </summary>
            <param name="capacity">Container size
            容器大小</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.PrepLength(System.Int32)">
            <summary>
            Pre-increase the length of valid data
            预增有效数据长度
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Set(System.Int32,`0)">
            <summary>
            Set the specified location data
            设置指定位置数据
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.SetEmpty">
            <summary>
            Empty and release the array, and set the valid length of the data to 0
            置空并释放数组并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Set(`0[])">
            <summary>
            Reset the array data
            重置数组数据
            </summary>
            <param name="array">null is not allowed
            不允许能为 null</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Clear">
            <summary>
            Clear all the data and set the valid length of the data to 0
            清除所有数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ClearLength">
            <summary>
            Clear the current valid data and set the valid length of the data to 0
            清除当前有效数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ClearCache">
            <summary>
            Clear part of the cache
            清除部分缓存
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Exchange(AutoCSer.LeftArray{`0}@)">
            <summary>
            Array swap
            数组互换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.UnsafeAdd(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.TryAdd(`0)">
            <summary>
            Add data when there is a free place
            当有空闲位置时添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the array is full and the addition failed
            返回 false 表示数组已满，添加失败</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adding a data collection
            添加数据集合
            </summary>
            <param name="values">Data collection
            数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(`0[])">
            <summary>
            Adding a data collection
            添加数据集合
            </summary>
            <param name="array">Data collection
            数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(`0[],System.Int32,System.Int32)">
            <summary>
            Adding a data collection
            添加数据集合
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Append(`0[])">
            <summary>
            Adding a data collection
            添加数据集合
            </summary>
            <param name="array">Data collection
            数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(AutoCSer.LeftArray{`0}@)">
            <summary>
            Adding a data collection
            添加数据集合
            </summary>
            <param name="array">Data collection
            数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Insert(System.Int32,`0)">
            <summary>
            Insert data
            插入数据
            </summary>
            <param name="index">Insert position
            插入位置</param>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Contains(`0)">
            <summary>
            Determine whether there is data
            判断是否存在数据
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns>Returning false indicates that there is no matching data
            返回 false 表示不存在匹配数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.IndexOf(`0)">
            <summary>
            Get the matching data location
            获取匹配数据位置
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns>Returning -1 indicates a matching failure
            返回 -1 表示匹配失败</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Remove(`0)">
            <summary>
            Remove the first matching data
            移除第一个匹配数据
            </summary>
            <param name="value">data</param>
            <returns>Returning false indicates that there is no data match
            返回 false 表示不存在数据匹配</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAtOnly(System.Int32)">
            <summary>
            Remove the data at the specified location (without clearing the data)
            移除指定位置的数据（不清除数据）
            </summary>
            <param name="index">Data location
            数据位置</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified location
            移除指定位置的数据
            </summary>
            <param name="index">Data location
            数据位置</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.indexOf(System.Func{`0,System.Boolean})">
            <summary>
            Get the matching position in the array
            获取数组中的匹配位置
            </summary>
            <param name="isValue">Determine whether the data match
            判断数据是否匹配</param>
            <returns>Returning -1 indicates a matching failure
            返回 -1 表示匹配失败</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.IndexOf(System.Func{`0,System.Boolean})">
            <summary>
            Get the matching position in the array
            获取数组中的匹配位置
            </summary>
            <param name="isValue">Determine whether the data match
            判断数据是否匹配</param>
            <returns>Returning -1 indicates a matching failure
            返回 -1 表示匹配失败</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ReplaceAdd(`0,System.Func{`0,System.Boolean})">
            <summary>
            Replace the first matching value based on the matching conditions. If there is no match, add new data
            根据匹配条件替换第一个匹配值，不存在匹配则添加新数据
            </summary>
            <param name="value">New data to be added
            待添加的新数据</param>
            <param name="isValue">Determine whether the data match
            判断数据是否匹配</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveToEnd(`0)">
            <summary>
            Remove the first matching data, and then move the last data to the position of the deleted data
            移除第一个匹配数据，然后将最后一个数据移动到被删除数据位置
            </summary>
            <param name="value">The match to be removed
            待移除匹配</param>
            <returns>Returning false indicates that there is no data match
            返回 false 表示不存在数据匹配</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAllToEnd(System.Func{`0,System.Boolean})">
            <summary>
            Remove all matching data. Each deletion operation moves the current last data to the deleted data position
            移除所有匹配数据，每次删除操作将当前最后一个数据移动到删除数据位置
            </summary>
            <param name="isValue"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetRemoveAllToEnd(System.Func{`0,System.Boolean})">
            <summary>
            Remove all matching data. Each deletion operation moves the current last data to the deleted data position
            移除所有匹配数据，每次删除操作将当前最后一个数据移动到删除数据位置
            </summary>
            <param name="isValue"></param>
            <returns>Removed the data collection
            被移除数据集合</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveToEndOnly(System.Int32)">
            <summary>
            Move the last data to the position where the deleted data was located (without clearing the data)
            最后一个数据移动到被删除数据位置（不清除数据）
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveToEnd(System.Int32)">
            <summary>
            Move the last data to the position where the deleted data was located
            将最后一个数据移动到被删除数据位置
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAtToEnd(System.Int32)">
            <summary>
            Move the last data to the position where the deleted data was located
            将最后一个数据移动到被删除数据位置
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Pop">
            <summary>
            Try to remove the last data
            尝试移除最后一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.TryPopOnly(`0@)">
            <summary>
            Try to pop up the last data (without clearing the data)
            尝试弹出最后一个数据（不清除数据）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.TryPop(`0@)">
            <summary>
            Try to pop up the last data
            尝试弹出最后一个数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that there is no data that can be ejected
            返回 false 表示没有可以弹出的数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.PopAll">
            <summary>
            Pop up all the data
            弹出所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.PopOnly">
            <summary>
            Try to remove the last data
            尝试移除最后一个数据
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.LastOrDefault">
            <summary>
            Get the last data
            获取最后一个数据
            </summary>
            <returns>The last data. If there is no data, return default(T)
            最后一个数据，没有数据则返回 default(T)</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Reverse">
            <summary>
            Reverse the array
            逆转数组
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy data
            </summary>
            <param name="destinationArray">Target array
            目标数组</param>
            <param name="index">Target starting position
            目标起始位置</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ToArray">
            <summary>
            Convert to an array
            转换为数组
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.getArray">
            <summary>
            Copy the array data to create a new array
            复制数组数据创建新数组
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetArray">
            <summary>
            Copy the array data to create a new array
            复制数组数据创建新数组
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetArray``1(System.Func{`0,``0})">
            <summary>
            Convert the data types of array elements to create a new array
            转换数组元素数据类型创建新数组
            </summary>
            <typeparam name="VT">Target data type
            目标数据类型</typeparam>
            <param name="getValue">Data conversion delegate
            数据转换委托</param>
            <returns>Array</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Sort(System.Func{`0,`0,System.Int32})">
            <summary>
            Array data sorting
            数组数据排序
            </summary>
            <param name="comparer">Data sorting comparator
            数据排序比较器</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.JoinString(System.String,System.Func{`0,System.String})">
            <summary>
            Connect string
            连接字符串
            </summary>
            <param name="toString">The delegate that gets the string
            获取字符串的委托</param>
            <param name="join">String concatenation symbol
            字符串连接符号</param>
            <returns>The string generated by the concatenation operation
            连接操作产生的字符串</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetFixedBuffer">
            <summary>
            Get the fixed buffer, DEBUG mode to detect the data range
            获取 fixed 缓冲区，DEBUG 模式对数据范围进行检测
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ListArray`1">
            <summary>
            单向动态数组
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.ListArray`1.Array">
            <summary>
            Array substring
            数组子串
            </summary>
        </member>
        <member name="P:AutoCSer.ListArray`1.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.ListArray`1.IsReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="P:AutoCSer.ListArray`1.Item(System.Int32)">
            <summary>
            设置或获取值
            </summary>
            <param name="index">位置</param>
            <returns>Data value</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor">
            <summary>
            单向动态数组
            </summary>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(System.Int32)">
            <summary>
            单向动态数组
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(`0[])">
            <summary>
            单向动态数据
            </summary>
            <param name="array">数据数组</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(AutoCSer.LeftArray{`0})">
            <summary>
            单向动态数据
            </summary>
            <param name="array">数据数组</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(System.Int32,`0[])">
            <summary>
            单向动态数据
            </summary>
            <param name="length">Initialize the data length
            初始化数据长度</param>
            <param name="array">Original array
            原数组</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Get the enumerator
            获取枚举器
            </summary>
            <returns>Enumerator
            枚举器</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            获取枚举器
            </summary>
            <returns>Enumerator
            枚举器</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.ListArray`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Add(`0[])">
            <summary>
            Adding a data collection
            添加数据集合
            </summary>
            <param name="array">Data collection
            数据集合</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Append(`0[])">
            <summary>
            Adding a data collection
            添加数据集合
            </summary>
            <param name="array">Data collection
            数据集合</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Add(AutoCSer.ListArray{`0})">
            <summary>
            Adding a data collection
            添加数据集合
            </summary>
            <param name="array">Data collection
            数据集合</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Insert(System.Int32,`0)">
            <summary>
            Insert data
            插入数据
            </summary>
            <param name="index">Insert position
            插入位置</param>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Contains(`0)">
            <summary>
            Determine whether there is data
            判断是否存在数据
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns>Returning false indicates that there is no matching data
            返回 false 表示不存在匹配数据</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy data
            </summary>
            <param name="destinationArray">Target array
            目标数组</param>
            <param name="index">Target starting position
            目标起始位置</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Reverse">
            <summary>
            Reverse the array
            逆转列表
            </summary>
        </member>
        <member name="M:AutoCSer.ListArray`1.IndexOf(`0)">
            <summary>
            Get the matching data location
            获取匹配数据位置
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns>Returning -1 indicates a matching failure
            返回 -1 表示匹配失败</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.Remove(`0)">
            <summary>
            移除数据
            </summary>
            <param name="value">data</param>
            <returns>Returning false indicates that there is no data match
            返回 false 表示不存在数据匹配</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.RemoveAt(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">Data location
            数据位置</param>
            <returns>被移除数据</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.Sort(System.Func{`0,`0,System.Int32})">
            <summary>
            Array data sorting
            数组数据排序
            </summary>
            <param name="comparer">Data sorting comparator
            数据排序比较器</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.JoinString(System.String,System.Func{`0,System.String})">
            <summary>
            Connect string
            连接字符串
            </summary>
            <param name="toString">The delegate that gets the string
            获取字符串的委托</param>
            <param name="join">String concatenation symbol
            字符串连接符号</param>
            <returns>The string generated by the concatenation operation
            连接操作产生的字符串</returns>
        </member>
        <member name="T:AutoCSer.Reflection.Emit.Module">
            <summary>
            动态程序集模块
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.Module.assemblyBuilder">
            <summary>
            动态程序集
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.Module.Builder">
            <summary>
            动态程序集模块
            </summary>
        </member>
        <member name="T:AutoCSer.Reflection.Emit.Field">
            <summary>
            字段操作
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.Field.UnsafeSetField``2(System.String)">
            <summary>
            创建设置字段委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="FT"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.Field.UnsafeSetField``2(System.Reflection.FieldInfo,System.String)">
            <summary>
            创建设置字段委托
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="FT"></typeparam>
            <param name="field"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Reflection.Emit.StringWriter">
            <summary>
            字符串写入器
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.target">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.endLabel">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.step">
            <summary>
            写入阶段
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.size">
            <summary>
            未写入字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.value0">
            <summary>
            写入数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.value1">
            <summary>
            写入数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.value2">
            <summary>
            写入数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.value3">
            <summary>
            写入数据缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.#ctor(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            字符串写入器
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.Write(System.String)">
            <summary>
            写入字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.Write(System.Char)">
            <summary>
            添加字符
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.WriteEnd">
            <summary>
            写入结束
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Emit.StringWriter.Write(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.String)">
            <summary>
            写入字符串
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.UnmanagedStreamBasePrepSizeMethod">
            <summary>
            非托管内存数据流预增数据流长度方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULong4Method">
            <summary>
            非托管内存数据流写入 64 字节数据方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULongSizeMethod">
            <summary>
            非托管内存数据流写入数据方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULong2SizeMethod">
            <summary>
            非托管内存数据流写入数据方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULong3SizeMethod">
            <summary>
            非托管内存数据流写入数据方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Emit.StringWriter.unmanagedStreamBaseUnsafeWriteULong4SizeMethod">
            <summary>
            非托管内存数据流写入数据方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.Reflection.TypeNameBuildEnum">
            <summary>
            类型名称输出类型
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuildEnum.Code">
            <summary>
            CSharp 代码
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuildEnum.XmlDocument">
            <summary>
            读取 XML 文档
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuildEnum.OutputXml">
            <summary>
            XML 文档输出注释
            </summary>
        </member>
        <member name="T:AutoCSer.Reflection.AssemblyCache">
            <summary>
            程序集缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.fullName">
            <summary>
            程序集全名称
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.name">
            <summary>
            Assembly name
            程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.AssemblyCache.#ctor(System.Reflection.Assembly)">
            <summary>
            程序集缓存
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:AutoCSer.Reflection.AssemblyCache.Get(System.String)">
            <summary>
            根据程序集名称获取程序集
            </summary>
            <param name="fullName">程序集名称</param>
            <returns>程序集,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.cache">
            <summary>
            程序集缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.nameCache">
            <summary>
            程序集缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.lastAssembly">
            <summary>
            最后一次访问的程序集
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.AssemblyCache.lastNameAssembly">
            <summary>
            最后一次访问的程序集
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.AssemblyCache.loadAssembly(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            加载程序集
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AutoCSer.Reflection.Common">
            <summary>
            反射公共配置
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.Common.createDelegateCount">
            <summary>
            创建委托数量
            </summary>
        </member>
        <member name="P:AutoCSer.Reflection.Common.CreateDelegateCount">
            <summary>
            创建委托数量
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Common.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
            <summary>
            创建委托并计数
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Reflection.RemoteType">
            <summary>
            Remote type (for serialization operations)
            远程类型（用于序列化操作）
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.RemoteType.AssemblyName">
            <summary>
            Assembly name
            程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.RemoteType.Name">
            <summary>
            Type name
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.#ctor(System.String,System.String)">
            <summary>
            Remote type (for serialization operations)
            远程类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.Set(System.String,System.String)">
            <summary>
            Set type information
            设置类型信息
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.#ctor(System.Type)">
            <summary>
            Remote type (for serialization operations)
            远程类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.op_Implicit(System.Type)~AutoCSer.Reflection.RemoteType">
            <summary>
            Implicit conversion
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.TryGet(System.Type@,System.Boolean)">
            <summary>
            Try to get the type
            尝试获取类型
            </summary>
            <param name="type"></param>
            <param name="checkType">The default is true, indicating that AutoCSer.Common.Config.CheckRemoteType needs to be called to check the validity of the remote type
            默认为 true 表示需要调用 AutoCSer.Common.Config.CheckRemoteType 检查远程类型的合法性</param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.GetTypeIndex(System.Boolean@)">
            <summary>
            Get the index of a fixed-type array
            获取固定类型数组索引
            </summary>
            <param name="isArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.Equals(AutoCSer.Reflection.RemoteType)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.Equals(System.Object)">
            <summary>
            /
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.RemoteType.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Reflection.RemoteType.arrayChar">
            <summary>
            Fixed type maximum quantity
            固定类型最大数量 46
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.RemoteType.FixedTypes">
            <summary>
            Fixed type collection
            固定类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.RemoteType.typeNames">
            <summary>
            Fixed type name collection
            固定类型名称集合
            </summary>
        </member>
        <member name="T:AutoCSer.Reflection.TypeNameBuilder">
            <summary>
            类型代码名称生成器
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuilder.GenericSplit">
            <summary>
            类型名称泛型分隔符
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuilder.NameStream">
            <summary>
            名称缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuilder.TypeNameEnum">
            <summary>
            类型名称输出类型
            </summary>
        </member>
        <member name="P:AutoCSer.Reflection.TypeNameBuilder.isXml">
            <summary>
            是否 XML
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.#ctor(AutoCSer.Reflection.TypeNameBuildEnum)">
            <summary>
            类型代码名称生成器
            </summary>
            <param name="typeNameEnum"></param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.GetTypeFullName(System.Type,System.Type[],System.Boolean)">
            <summary>
            获取类型名称
            </summary>
            <param name="type"></param>
            <param name="genericArguments">泛型类型参数集合</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.Array(System.Type,System.Type[],System.Boolean)">
            <summary>
            数组处理
            </summary>
            <param name="type"></param>
            <param name="genericArguments">泛型类型参数集合</param>
            <param name="isFullName">是否全称</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.getFullName(System.Type,System.Type[])">
            <summary>
            任意类型处理
            </summary>
            <param name="type"></param>
            <param name="genericArguments">泛型类型参数集合</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.getNameNoArray(System.Type)">
            <summary>
            任意类型处理
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.GenericName(System.Type,System.String)">
            <summary>
            泛型处理
            </summary>
            <param name="type"></param>
            <param name="nameSuffix">类名称后缀</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.GenericFullName(System.Type,System.Type[],System.Boolean)">
            <summary>
            泛型处理
            </summary>
            <param name="type"></param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
            <param name="genericArguments">泛型类型参数集合</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.XmlDocumentGenericTypeParameter(System.Type,System.Type[])">
            <summary>
            XML 文档泛型类型参数
            </summary>
            <param name="type"></param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.genericParameter(System.Type,System.Type[],System.Boolean)">
            <summary>
            泛型参数处理
            </summary>
            <param name="type"></param>
            <param name="genericArguments">泛型类型参数集合</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.genericParameter(System.Type[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            泛型参数处理
            </summary>
            <param name="parameterTypes">参数类型集合</param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="endIndex">结束位置</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.ReflectedType(System.Type,System.Type)">
            <summary>
            嵌套类型处理
            </summary>
            <param name="type"></param>
            <param name="reflectedType">上层类型</param>
        </member>
        <member name="M:AutoCSer.Reflection.TypeNameBuilder.GetFullName(System.Type,AutoCSer.Reflection.TypeNameBuildEnum,System.Boolean)">
            <summary>
            根据类型获取代码名称
            </summary>
            <param name="type"></param>
            <param name="buildEnum">类型名称输出类型</param>
            <param name="isGenericParameterTypeName">是否输出泛型参数类型名称</param>
            <returns>代码名称</returns>
        </member>
        <member name="F:AutoCSer.Reflection.TypeNameBuilder.TypeNames">
            <summary>
            Collection of type code names
            类型代码名称集合
            </summary>
        </member>
        <member name="T:AutoCSer.ReusableDictionary">
            <summary>
            可重用字典（主要用于非引用类型缓冲区，避免 new / Clear 开销）
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary.Count">
            <summary>
            有效数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.rollIndex">
            <summary>
            滚动索引位置（用于优先级淘汰策略）
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.CapacityDivision">
            <summary>
            哈希取余
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.maxRemoveCount">
            <summary>
            最大删除数据位置
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.groupType">
            <summary>
            可重用字典重组操作类型
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary.NodeArrayClearCount">
            <summary>
            需要清理的数组位置
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.#ctor">
            <summary>
            空字典
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            可重用字典
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.clear">
            <summary>
            清除计数位置信息
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.removeCount">
            <summary>
            删除数据移动结束位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.ClearCount">
            <summary>
            清除计数位置信息
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.clearRemoveCount">
            <summary>
            清除计数位置信息
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.GetResizeCapacity(System.Int32)">
            <summary>
            获取重组数据数组大小
            </summary>
            <param name="capacity">当前数组大小</param>
            <returns>重组数据数组大小</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.GetCapacity(System.Int32)">
            <summary>
            Get the container size
            获取容器大小
            </summary>
            <param name="capacity">指定容器大小</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.MaxPrime">
            <summary>
            最大质数
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.maxPrice">
            <summary>
            最大小质数
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionary.primes">
            <summary>
            小质数集合起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary.IsPrime(System.Int32)">
            <summary>
            判断是否质数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ReusableDictionary`1">
            <summary>
            可重用字典（主要用于非引用类型缓冲区，避免 new / Clear 开销）
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.ReusableDictionary`1.Nodes">
            <summary>
            节点集合
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            可重用字典
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.add(System.UInt32,`0)">
            <summary>
            新增数据
            </summary>
            <param name="hashCode"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.resize">
            <summary>
            重组数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.resize(AutoCSer.ReusableHashNode{`0}[],System.Int32)">
            <summary>
            重组数据
            </summary>
            <param name="nodes"></param>
            <param name="rollIndex"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.resizeHashIndex(AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            重组数据
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.resizeHashIndexSort(AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            重组数据
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.resizeRoll(AutoCSer.ReusableHashNode{`0}[],System.Int32)">
            <summary>
            重组数据
            </summary>
            <param name="nodes"></param>
            <param name="rollIndex"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.ClearArray">
            <summary>
            Clear the data
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.remove(System.Int32,System.Int32)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="nodeIndex"></param>
            <param name="hashIndex"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.changeIndex(System.Int32)">
            <summary>
            尝试修改访问节点索引位置
            </summary>
            <param name="nodeIndex"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.change(System.Int32,System.Int32)">
            <summary>
            交换节点位置
            </summary>
            <param name="nodeIndex"></param>
            <param name="changeIndex"></param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`1.CopyTo(AutoCSer.LeftArray{`0}@)">
            <summary>
            Copy data
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:AutoCSer.ReusableDictionary`2">
            <summary>
            可重用字典（主要用于非引用类型缓冲区，避免 new / Clear 开销）
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="VT">Keyword type
            数据类型</typeparam>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.KeyValues">
            <summary>
            键值对集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Keys">
            <summary>
            关键字集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Values">
            <summary>
            The data collection
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableDictionary`2.Item(`0)">
            <summary>
            获取或者设置数据
            </summary>
            <param name="key">keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            可重用字典
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.TryGetValue(`0,`1@,System.Boolean)">
            <summary>
            尝试获取数据
            </summary>
            <param name="key">keyword</param>
            <param name="value">Target data</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Set(`0,`1,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key">keyword</param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.TryAdd(`0,`1,System.Boolean)">
            <summary>
            Add data
            </summary>
            <param name="key">keyword</param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否添加数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.set(`0,`1,System.Boolean,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key">keyword</param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <param name="isAdd"></param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.ContainsKey(`0,System.Boolean)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.Remove(`0,`1@)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.RemoveRoll">
            <summary>
            删除滚动索引位置数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.RemoveRoll(AutoCSer.KeyValue{`0,`1}@)">
            <summary>
            删除滚动索引位置数据
            </summary>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>是否存在数据，非 Roll 类型也返回 false</returns>
        </member>
        <member name="M:AutoCSer.ReusableDictionary`2.RemoveRoll(`1@)">
            <summary>
            删除滚动索引位置数据
            </summary>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>是否存在数据，非 Roll 类型也返回 false</returns>
        </member>
        <member name="T:AutoCSer.ReusableDictionaryGroupTypeEnum">
            <summary>
            Reusable dictionary recombination operation types
            可重用字典重组操作类型
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionaryGroupTypeEnum.HashIndex">
            <summary>
            The conflict-free data positions within the reorganized index range are directly matched with the hash index positions to avoid secondary random memory access
            重组索引范围内无冲突数据位置直接匹配哈希索引位置，避免二次随机内存访问
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionaryGroupTypeEnum.HashIndexSort">
            <summary>
            Sorting by the position of the hash index can ensure the continuity of conflicting data memory, but it will result in secondary random memory access
            按照哈希索引位置排序，可以保证冲突数据内存的连续，但是会产生二次随机内存访问
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableDictionaryGroupTypeEnum.Roll">
            <summary>
            Rolling the index position (used for the priority elimination strategy) neither guarantees matching the hash index position nor the continuity of memory, and may require n random memory accesses
            滚动索引位置（用于优先级淘汰策略），既不保证匹配哈希索引位置，也不保证内存的连续性，可能需要 n 次随机内存访问
            </summary>
        </member>
        <member name="T:AutoCSer.ReusableHashNode`1">
            <summary>
            可重用哈希节点
            </summary>
            <typeparam name="T">节点数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ReusableHashNode`1.HashIndex">
            <summary>
            哈希索引
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableHashNode`1.Source">
            <summary>
            节点来源，最高位为 0 表示首节点，否则表示后续节点
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableHashNode`1.SourceHigh">
            <summary>
            0 表示首节点
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableHashNode`1.SourceIndex">
            <summary>
            获取节点来源
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableHashNode`1.SetNextSource(System.Int32)">
            <summary>
            设置后续节点的节点来源
            </summary>
            <param name="index"></param>
        </member>
        <member name="F:AutoCSer.ReusableHashNode`1.HashCode">
            <summary>
            关键字哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableHashNode`1.Next">
            <summary>
            下一个数据索引位置，int.MaxValue 表示最后一个
            </summary>
        </member>
        <member name="F:AutoCSer.ReusableHashNode`1.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableHashNode`1.Set(System.UInt32,System.UInt32,`0)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="source"></param>
            <param name="hashCode"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ReusableHashNode`1.Set(System.UInt32,System.UInt32,`0,System.Int32)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="source"></param>
            <param name="hashCode"></param>
            <param name="value"></param>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.ReusableHashNode`1.Set(System.UInt32,`0)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="hashCode"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ReusableHashNode`1.Set(System.UInt32,AutoCSer.ReusableHashNode{`0}@)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="source"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ReusableHashNode`1.SetNext(System.UInt32,AutoCSer.ReusableHashNode{`0}@)">
            <summary>
            设置后续节点数据
            </summary>
            <param name="source"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.ReusableHashNode`1.SetHashIndex(System.Int32,AutoCSer.ReusableHashNode{`0}@)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="hashIndex"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.ReusableHashCodeKeyDictionary`1">
            <summary>
            可重用字典（主要用于非引用类型缓冲区，避免 new / Clear 开销）
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="P:AutoCSer.ReusableHashCodeKeyDictionary`1.KeyValues">
            <summary>
            键值对集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableHashCodeKeyDictionary`1.Keys">
            <summary>
            关键字集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableHashCodeKeyDictionary`1.Values">
            <summary>
            The data collection
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.ReusableHashCodeKeyDictionary`1.Item(System.Int32)">
            <summary>
            获取或者设置数据
            </summary>
            <param name="key">keyword</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.ReusableHashCodeKeyDictionary`1.Item(System.UInt32)">
            <summary>
            获取或者设置数据
            </summary>
            <param name="key">keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            可重用字典
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.TryGetValue(System.Int32,`0@,System.Boolean)">
            <summary>
            尝试获取数据
            </summary>
            <param name="key">keyword</param>
            <param name="value">Target data</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.TryGetValue(System.UInt32,`0@,System.Boolean)">
            <summary>
            尝试获取数据
            </summary>
            <param name="key">keyword</param>
            <param name="value">Target data</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.Set(System.Int32,`0,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.Set(System.UInt32,`0,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.TryAdd(System.Int32,`0,System.Boolean)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否添加数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.TryAdd(System.UInt32,`0,System.Boolean)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否添加数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.set(System.UInt32,`0,System.Boolean,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <param name="isAdd"></param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.ContainsKey(System.Int32,System.Boolean)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.ContainsKey(System.UInt32,System.Boolean)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.Remove(System.Int32)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.Remove(System.UInt32)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.Remove(System.Int32,`0@)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.Remove(System.UInt32,`0@)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.RemoveRoll">
            <summary>
            删除滚动索引位置数据
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.RemoveRoll(AutoCSer.KeyValue{System.Int32,`0}@)">
            <summary>
            删除滚动索引位置数据
            </summary>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>是否存在数据，非 Roll 类型也返回 false</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.RemoveRoll(AutoCSer.KeyValue{System.UInt32,`0}@)">
            <summary>
            删除滚动索引位置数据
            </summary>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>是否存在数据，非 Roll 类型也返回 false</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashCodeKeyDictionary`1.RemoveRoll(`0@)">
            <summary>
            删除滚动索引位置数据
            </summary>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>是否存在数据，非 Roll 类型也返回 false</returns>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Deserializer">
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
            <summary>
            简单反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumULong``1(System.Byte*,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.UInt64@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.UInt64}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">Logical value</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.SByte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Int16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.UInt16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Char}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.String@,System.Byte*)">
            <summary>
            String deserialization
            </summary>
            <param name="start"></param>
            <param name="value"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.NotNull(System.Byte*,System.String@,System.Byte*)">
            <summary>
            String deserialization
            </summary>
            <param name="start"></param>
            <param name="value"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Byte[]@,System.Byte*)">
            <summary>
            字节数组反序列化
            </summary>
            <param name="start"></param>
            <param name="value"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Deserializer.DeserializeDelegate`1">
            <summary>
            反序列化委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Target data</param>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Deserializer.DeserializeDefaultDelegate`1">
            <summary>
            反序列化委托
            </summary>
            <param name="data"></param>
            <param name="value">Target data</param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize``1(System.Byte*,``0@)">
            <summary>
            反序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.Deserializer.deserializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.GetDeserializeDelegate(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Int64}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.UInt32}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Int32}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Single}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Double}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Decimal}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.DateTime}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.TimeSpan}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Nullable{System.Guid}@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Int64@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.UInt32@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Int32@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.UInt16@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Int16@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Byte@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.SByte@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Boolean@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Single@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Double@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Decimal@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Char@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.DateTime@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.TimeSpan@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Guid@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Half@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Int128@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.UInt128@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Numerics.Complex@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Numerics.Plane@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Numerics.Quaternion@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Numerics.Matrix3x2@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Numerics.Matrix4x4@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Numerics.Vector2@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Numerics.Vector3@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.Deserialize(System.Byte*,System.Numerics.Vector4@)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumLong``1(System.Byte*,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumUInt``1(System.Byte*,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumInt``1(System.Byte*,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumUShort``1(System.Byte*,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumShort``1(System.Byte*,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumByte``1(System.Byte*,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Deserializer.EnumSByte``1(System.Byte*,``0@)">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Serializer">
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
            <summary>
            简单序列化
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.UInt64})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.UInt64)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumULong``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Byte[])">
            <summary>
            String serialization
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.String)">
            <summary>
            String serialization
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Boolean})">
            <summary>
            逻辑值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">Logical value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.SByte})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Int16})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.UInt16})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Char})">
            <summary>
            字符序列化
            </summary>
            <param name="stream"></param>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Guid)">
            <summary>
            Guid序列化
            </summary>
            <param name="stream"></param>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.Serialize``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            序列化模板
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.Serializer.serializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.GetSerializeDelegate(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.IsType(System.Type)">
            <summary>
            判断是否可序列化类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Int64})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.UInt32})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Int32})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Single})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Double})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Decimal})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.DateTime})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.TimeSpan})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Nullable{System.Guid})">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Int64)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.UInt32)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Int32)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.UInt16)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Int16)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Byte)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.SByte)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Boolean)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Single)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Double)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Decimal)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Char)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.DateTime)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.TimeSpan)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Half)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Int128)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.UInt128)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Numerics.Complex)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Numerics.Plane)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Numerics.Quaternion)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Numerics.Matrix3x2)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Numerics.Matrix4x4)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Numerics.Vector2)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Numerics.Vector3)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.serialize(AutoCSer.Memory.UnmanagedStream,System.Numerics.Vector4)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumLong``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumUInt``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumInt``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumUShort``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumShort``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumByte``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.Serializer.EnumSByte``1(AutoCSer.Memory.UnmanagedStream,``0)">
            <summary>
            Serialization of enumeration values
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unmanagedStream">二进制数据序列化</param>
            <param name="value">Enumeration value</param>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.DeserializeDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.FixedFill(System.Int32)">
            <summary>
            填充对齐数据
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.DeserializeDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Deserializer`1">
            <summary>
            简单反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.Deserializer`1.DefaultDeserializer">
            <summary>
            简单反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.SerializeDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.SerializeDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.SerializeDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.SerializeDynamicMethod.returnLabel">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.SerializeDynamicMethod.#ctor(System.Type,System.Int32)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="fixedSize"></param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.SerializeDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.SerializeDynamicMethod.FixedFill(System.Int32)">
            <summary>
            填充对齐数据
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamBaseMoveSizeMethod">
            <summary>
            内存字符流移动当前位置方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.SimpleSerialize.SerializeDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Serializer`1">
            <summary>
            简单序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AutoCSer.SimpleSerialize.Serializer`1.SimpleSerializer">
            <summary>
            简单序列化委托
            </summary>
            <param name="stream"></param>
            <param name="value">Target data</param>
        </member>
        <member name="F:AutoCSer.SimpleSerialize.Serializer`1.DefaultSerializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="T:AutoCSer.SimpleSerializeType`1">
            <summary>
            简单序列化类型信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.SimpleSerializeType`1.IsSimple">
            <summary>
            是否简单序列化
            </summary>
        </member>
        <member name="T:AutoCSer.SubArray`1">
            <summary>
            Array substring
            数组子串
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.SubArray`1.Array">
            <summary>
            Original array
            原数组
            </summary>
        </member>
        <member name="F:AutoCSer.SubArray`1.Start">
            <summary>
            The starting position in the original array
            原数组中的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.SubArray`1.Length">
            <summary>
            Effective data length
            有效数据长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubArray`1.EndIndex">
            <summary>
            Data end position
            数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(`0[])">
            <summary>
            Array substring
            数组子串
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            Array substring
            数组子串
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(System.Int32)">
            <summary>
            Used for the command service to return the error type
            用于命令服务返回错误类型
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Array substring
            数组子串
            </summary>
            <param name="array">Original array
            原数组</param>
            <param name="startIndex">The starting position in the original array
            原数组中的起始位置</param>
            <param name="length">Effective data length
            有效数据长度</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.op_Implicit(`0[])~AutoCSer.SubArray{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetArray(System.Int32@,System.Int32@)">
            <summary>
            Get the original array object
            获取原始数组对象
            </summary>
            <param name="startIndex">The starting position in the original array
            原数组中的起始位置</param>
            <param name="length">Effective data length
            有效数据长度</param>
            <returns>Original array
            原数组</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.SetEmpty">
            <summary>
            Empty and release the array
            置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(`0[])">
            <summary>
            Reset the array data
            重置数组数据
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(System.Int32,System.Int32)">
            <summary>
            Reset the array position data
            重置数组位置数据
            </summary>
            <param name="startIndex">The starting position in the original array
            原数组中的起始位置</param>
            <param name="length">Effective data length
            有效数据长度</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(`0[],System.Int32,System.Int32)">
            <summary>
            Reset the array data
            重置数组数据
            </summary>
            <param name="array">Original array
            原数组</param>
            <param name="startIndex">The starting position in the original array
            原数组中的起始位置</param>
            <param name="length">Effective data length
            有效数据长度</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.MoveStart(System.Int32)">
            <summary>
            Move the starting position
            移动起始位置
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetMoveStartLength(System.Int32)">
            <summary>
            Return the length of the valid data after moving the starting position
            移动起始位置后返回有效数据长度
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetArray">
            <summary>
            Create and convert to an array object
            创建转换为数组对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetArray``1(System.Func{`0,``0})">
            <summary>
            Create and convert to an array object
            创建转换为数组对象
            </summary>
            <typeparam name="VT">Array data type
            数组数据类型</typeparam>
            <param name="getValue">Delegate for converting data
            转换数据委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetFixedBuffer">
            <summary>
            Get the fixed buffer, DEBUG mode to detect the data range
            获取 fixed 缓冲区，DEBUG 模式对数据范围进行检测
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.WaitTask">
            <summary>
            开启线程调用 Task.Wait() 防止后续操作出现同步阻塞 Task 调度线程
            </summary>
        </member>
        <member name="F:AutoCSer.WaitTask.task">
            <summary>
            被调度任务
            </summary>
        </member>
        <member name="F:AutoCSer.WaitTask.waitLock">
            <summary>
            返回值等待锁
            </summary>
        </member>
        <member name="M:AutoCSer.WaitTask.#ctor(System.Threading.Tasks.Task)">
            <summary>
            获取 Task.Result
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.WaitTask.wait">
            <summary>
            获取返回值
            </summary>
        </member>
        <member name="M:AutoCSer.WaitTask.Wait">
            <summary>
            获取返回值
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.WaitTask`1">
            <summary>
            开启线程获取 Task.Result 防止后续操作出现同步阻塞 Task 调度线程
            </summary>
            <typeparam name="T">Return value type</typeparam>
        </member>
        <member name="F:AutoCSer.WaitTask`1.task">
            <summary>
            被调度任务
            </summary>
        </member>
        <member name="F:AutoCSer.WaitTask`1.waitLock">
            <summary>
            返回值等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.WaitTask`1.result">
            <summary>
            任务返回值
            </summary>
        </member>
        <member name="M:AutoCSer.WaitTask`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            获取 Task.Result
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.WaitTask`1.getResult">
            <summary>
            获取返回值
            </summary>
        </member>
        <member name="M:AutoCSer.WaitTask`1.GetResult(System.Exception@)">
            <summary>
            获取返回值
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.Common">
            <summary>
            公共调用
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.Common.GetSerializeFields``1(AutoCSer.LeftArray{AutoCSer.Metadata.FieldIndex},AutoCSer.TextSerialize.SerializeAttribute)">
            <summary>
            获取字段成员集合
            </summary>
            <typeparam name="T">序列化成员配置类型</typeparam>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.Common.GetSerializeProperties``1(AutoCSer.LeftArray{AutoCSer.Metadata.PropertyIndex},AutoCSer.TextSerialize.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <typeparam name="T">序列化成员配置类型</typeparam>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.Common.GetDeserializeFields``1(AutoCSer.LeftArray{AutoCSer.Metadata.FieldIndex},AutoCSer.TextSerialize.SerializeAttribute)">
            <summary>
            获取字段成员集合
            </summary>
            <typeparam name="T">序列化成员配置类型</typeparam>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.Common.GetDeserializeProperties``1(AutoCSer.LeftArray{AutoCSer.Metadata.PropertyIndex},AutoCSer.TextSerialize.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <typeparam name="T">序列化成员配置类型</typeparam>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.CustomConfig">
            <summary>
            自定义全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.CustomConfig.customSerializeDelegate">
            <summary>
            Custom serialization委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.CustomConfig.customSerializeDelegateLock">
            <summary>
            Custom serialization委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.AppendCustomSerializeDelegate(System.Type,AutoCSer.TextSerialize.SerializeDelegate,System.Delegate)">
            <summary>
            添加自定义序列化委托（应该在该类型的静态构造函数中调用，否则可能无法生效）
            </summary>
            <param name="type"></param>
            <param name="serializeDelegate"></param>
            <param name="deserializeDelegate">必须是静态方法，第一个参数类型为 AutoCSer.JsonDeserializer / AutoCSer.XmlDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void</param>
            <returns>如果已经存在该类型的自定义序列化委托则添加失败并返回 false</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.getCustomSerializeDelegate(System.Type,AutoCSer.TextSerialize.SerializeDelegate@)">
            <summary>
            根据类型获取自定义序列化委托
            </summary>
            <param name="type"></param>
            <param name="serializeDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.geteCustomDeserializeDelegate(System.Type,System.Delegate@)">
            <summary>
            根据类型获取自定义反序列化委托
            </summary>
            <param name="type"></param>
            <param name="deserializeDelegate"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.TextSerialize.CustomConfig.PrimitiveSerializeDelegates">
            <summary>
            获取自定义类型序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.JsonSerializer / AutoCSer.XmlDeserializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
        </member>
        <member name="P:AutoCSer.TextSerialize.CustomConfig.PrimitiveDeserializeDelegates">
            <summary>
            获取自定义类型反序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.JsonDeserializer / AutoCSer.XmlDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.getCustomSerializeReferenceTypes``1(System.Type)">
            <summary>
            根据类型获取自定义序列化需要循环引用检查的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.Write(AutoCSer.Memory.CharStream,System.Single)">
            <summary>
            写入浮点数
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.Write(AutoCSer.Memory.CharStream,System.Double)">
            <summary>
            写入浮点数
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.Write(AutoCSer.Memory.CharStream,System.Decimal)">
            <summary>
            写入小数
            </summary>
            <param name="charStream"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.CallCustomConstructor``1(``0@)">
            <summary>
            找不到构造函数的自定义创建对象处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.CustomConfig.Deserialize(AutoCSer.SubString@,System.Double@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.DelegateReference">
            <summary>
            序列化委托循环引用信息
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.PushType">
            <summary>
            引用循环执行类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.IsUnknownMember">
            <summary>
            是否存在未知子节点
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.IsCheckMember">
            <summary>
            循环引用是否需要检查成员类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.IsCompleted">
            <summary>
            状态是否计算完成
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.Delegate">
            <summary>
            序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.DelegateReference.ReferenceTypes">
            <summary>
            需要循环引用检查的类型
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.#ctor(System.Delegate)">
            <summary>
            序列化委托循环引用信息
            </summary>
            <param name="delegateValue">序列化委托</param>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.SetNoLoop(System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.SetUnknown(System.Type,System.Delegate)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="type"></param>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.SetMember(AutoCSer.TextSerialize.SerializeDelegate@)">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.DelegateReference.SetMember(System.Delegate,System.Type[])">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="referenceTypes"></param>
        </member>
        <member name="T:AutoCSer.TextSerialize.LoopTypeArray">
            <summary>
            序列化委托循环引用检查数组
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.LoopTypeArray.ReferenceTypes">
            <summary>
            需要循环引用检查的类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.LoopTypeArray.ReferenceGenericTypes">
            <summary>
            需要循环引用检查的类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.LoopTypeArray.Index">
            <summary>
            当前检查的类型位置
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.LoopTypeArray.Set(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            设置检查数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.LoopTypeArray.Set(AutoCSer.TextSerialize.DelegateReference)">
            <summary>
            设置检查数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="T:AutoCSer.TextSerialize.PropertyMethod`1">
            <summary>
            属性成员信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.TextSerialize.PropertyMethod`1.Property">
            <summary>
            属性索引
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PropertyMethod`1.Method">
            <summary>
            访问函数
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PropertyMethod`1.MemberAttribute">
            <summary>
            成员自定义属性
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.PropertyMethod`1.#ctor(AutoCSer.Metadata.PropertyIndex,`0,System.Reflection.MethodInfo)">
            <summary>
            属性成员信息
            </summary>
            <param name="property"></param>
            <param name="method"></param>
            <param name="memberAttribute"></param>
        </member>
        <member name="T:AutoCSer.TextSerialize.PushTypeEnum">
            <summary>
            序列化循环引用检查类型
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.DepthCount">
            <summary>
            仅做层级计数操作
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.UnknownNode">
            <summary>
            上级节点为值类型未知节点时添加循环对象检查
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.UnknownDepthCount">
            <summary>
            当前节点为值类型未知节点，仅做层级计数与状态修改操作，不添加循环对象检查
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.Push">
            <summary>
            添加循环对象检查，包括循环类型对象与未知引用类型对象
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.PushTypeEnum.DepthOutOfRange">
            <summary>
            深度超出范围
            </summary>
        </member>
        <member name="T:AutoCSer.TextSerialize.SerializeAttribute">
            <summary>
            序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeAttribute.IsBaseType">
            <summary>
            是否作用与派生类型，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeAttribute.CheckLoopReference">
            <summary>
            是否检测循环引用（仅对引用类型有效），默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeAttribute.CustomReferenceTypes">
            <summary>
            Custom serialization需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知
            </summary>
        </member>
        <member name="T:AutoCSer.TextSerialize.SerializeConfig">
            <summary>
            Text serialization configuration parameters
            文本序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.DefaultCheckDepth">
            <summary>
            The default maximum node detection depth value is 64
            默认最大节点检测深度值为 64
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.MemberMap">
            <summary>
            Member bitmap
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.CheckDepth">
            <summary>
            The maximum node detection depth is set to 64 by default. (Excessive depth can cause stack overflow, so this serialization component is not suitable for serializing linked list structures. If there is a similar requirement, please customize the serialization conversion to an array for processing)
            最大节点检测深度，默认为 64（过大的深度会造成堆栈溢出，所以该序列化组件不适合序列化链表结构，如果存在该类似需求请自定义序列化转换为数组处理）
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.CheckLoop">
            <summary>
            The default is true, indicating that the circular reference is checked
            默认为 true 表示检查循环引用
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.IsMemberMapErrorToDefault">
            <summary>
            The default is true, indicating that the default output is used when the member bitmap types do not match
            默认为 true 表示成员位图类型不匹配时使用默认输出
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.IsInfinityToNaN">
            <summary>
            The default is true, indicating that Infinity / -Infinity is converted to NaN output
            默认为 true 表示将 Infinity / -Infinity 转换为 NaN 输出
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.IsObject">
            <summary>
            Whether to convert object to a real type for output
            是否将 object 转换成真实类型输出
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeConfig.IsEnumToString">
            <summary>
            By default, false indicates that the enumeration type outputs a number; otherwise, a string is output
            默认为 false 表示枚举类型输出数字，否则输出字符串
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeConfig.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            Get and set the custom serialization member bitmap
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">Serialization member bitmap
            序列化成员位图</param>
            <returns>Original serialization member bitmap
            原序列化成员位图</returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.SerializeDelegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeDelegate.Delegate">
            <summary>
            Custom serialization委托
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.SerializeDelegate.ReferenceTypes">
            <summary>
            需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.#ctor(System.Delegate,System.Type[])">
            <summary>
            Custom serialization委托
            </summary>
            <param name="delegateValue">序列化委托，必须是静态方法，第一个参数类型为 AutoCSer.JsonSerializer / AutoCSer.XmlSerializer，第二参数类型为具体数据类型，返回值类型为 void</param>
            <param name="referenceTypes">需要循环引用检查的类型，数组长度为 0 表示无需循环引用检查，null 表示未知</param>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.op_Implicit(System.Delegate)~AutoCSer.TextSerialize.SerializeDelegate">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">自定义序列化委托，必须是静态方法，第一个参数类型为 AutoCSer.JsonSerializer / AutoCSer.XmlSerializer，第二参数类型为具体数据类型，返回值类型为 void</param>
            <returns>自定义序列化委托</returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.Set(System.Delegate,System.Type[])">
            <summary>
            设置自定义序列化委托
            </summary>
            <param name="delegateValue"></param>
            <param name="referenceTypes"></param>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.GetRemoveDelegate">
            <summary>
            获取自定义序列化委托
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.Check(System.Type,System.Type@,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="serializerType"></param>
            <param name="type"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.Check(System.Type,System.Type,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="serializerType"></param>
            <param name="type"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerialize.SerializeDelegate.Check(System.Type,AutoCSer.TextSerialize.DelegateReference@,System.Type@)">
            <summary>
            检查自定义序列化委托
            </summary>
            <param name="serializerType"></param>
            <param name="serializeDelegateReference"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TextSerialize.WarningEnum">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.DepthOutOfRange">
            <summary>
            深度超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.LoopReference">
            <summary>
            存在对象循环引用
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.WarningEnum.ResizeError">
            <summary>
            在不允许扩展缓存区大小的情况下产生了扩展操作
            </summary>
        </member>
        <member name="T:AutoCSer.TextSerialize.EnumDeserialize`1">
            <summary>
            Deserialization of enumeration values
            枚举值反序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.TextSerialize.EnumDeserialize`1.enumValues">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerialize.EnumDeserialize`1.enumSearchData">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="T:AutoCSer.TextDeserializeConfig">
            <summary>
            文本反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializeConfig.IsTempString">
            <summary>
            是否临时字符串(可修改)
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializeConfig.IsMatchEnum">
            <summary>
            是否强制匹配枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializeConfig.NewArraySize">
            <summary>
            默认数组大小为 10
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializeConfig.IsErrorNewString">
            <summary>
            指针模式反序列化失败时是否 new string
            </summary>
        </member>
        <member name="T:AutoCSer.TextDeserializer`1">
            <summary>
            文本反序列化
            </summary>
            <typeparam name="T">文本反序列化类型</typeparam>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="P:AutoCSer.TextDeserializer`1.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.text">
            <summary>
            解析字符串
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.textFixed">
            <summary>
            解析字符串起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.Current">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.end">
            <summary>
            解析结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.stringBuffer4">
            <summary>
            临时字符串
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.stringBuffer8">
            <summary>
            临时字符串
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.stringBuffer16">
            <summary>
            临时字符串
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.stringBuffer40">
            <summary>
            临时字符串
            </summary>
        </member>
        <member name="F:AutoCSer.TextDeserializer`1.customError">
            <summary>
            自定义错误
            </summary>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.#ctor(System.Byte*)">
            <summary>
            文本反序列化
            </summary>
            <param name="bits">字符状态位查询表格</param>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.free">
            <summary>
            释放 XML 解析器（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.isFindChar(System.UInt64)">
            <summary>
            查找字符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.isFindChar(System.Char)">
            <summary>
            查找字符
            </summary>
            <param name="value"></param>
            <returns>是否存在下一个字符</returns>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.findChar(System.UInt64)">
            <summary>
            查找字符
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.getStringBuffer(System.Int32)">
            <summary>
            获取临时字符串
            </summary>
            <param name="byteSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextDeserializer`1.GetStringBuffer(AutoCSer.Memory.Pointer@)">
            <summary>
            获取临时字符串
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TextSerializer`2">
            <summary>
            文本序列化
            </summary>
            <typeparam name="T">文本序列化类型</typeparam>
            <typeparam name="CT">序列化配置参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.CharStream">
            <summary>
            字符串输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.forefather">
            <summary>
            祖先节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.CheckDepth">
            <summary>
            节点层级计数
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.IsBinaryMix">
            <summary>
            是否二进制混杂模式
            </summary>
        </member>
        <member name="P:AutoCSer.TextSerializer`2.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.TextSerializer`2.isProcessing">
            <summary>
            是否正在处理序列化操作
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.#ctor(`1,System.Boolean)">
            <summary>
            文本序列化
            </summary>
            <param name="config">Configuration parameters</param>
            <param name="isThreadStatic">是否单线程模式</param>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.System#IDisposable#Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.free">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.Check(AutoCSer.TextSerialize.PushTypeEnum)">
            <summary>
            获取序列化循环引用检查类型
            </summary>
            <param name="pushType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.PushUnknownNode(System.Object)">
            <summary>
            上级节点为值类型未知节点时添加循环对象检查
            </summary>
            <param name="value"></param>
            <returns>0 表示循环引用</returns>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.Push(System.Object)">
            <summary>
            添加循环引用检查对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.WriteLoopReference">
            <summary>
            循环引用对象处理
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.PopUnknownNode(System.Int32)">
            <summary>
            上级节点为值类型未知节点时添加循环对象检查
            </summary>
            <param name="unknownCount"></param>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.PopUnknownDepthCount">
            <summary>
            当前节点为值类型未知节点
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.Pop">
            <summary>
            弹出循环引用检查对象
            </summary>
        </member>
        <member name="M:AutoCSer.TextSerializer`2.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            Get and set the custom serialization member bitmap
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">Serialization member bitmap
            序列化成员位图</param>
            <returns>Original serialization member bitmap
            原序列化成员位图</returns>
        </member>
        <member name="T:AutoCSer.Threading.CpuCachePad">
            <summary>
            The CPU cache is filled with data blocks. By default, it is a 64b application, and the filling is 7 * 8 = 56b
            CPU 高速缓存填充数据块，默认为 64b 应用，填充 7 * 8 = 56b
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.ActionQueueTaskNode">
            <summary>
            委托任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ActionQueueTaskNode.action">
            <summary>
            任务委托
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ActionQueueTaskNode.#ctor(System.Action)">
            <summary>
            委托任务节点
            </summary>
            <param name="action">任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.ActionQueueTaskNode.RunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ActionQueueTaskNode.Empty">
            <summary>
            默认空队列任务节点
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LinkPoolBase`1">
            <summary>
            缓存对象链表（用于冲突概率低的场景）
            </summary>
            <typeparam name="T">链表节点泛型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolBase`1.stack">
            <summary>
            无锁栈
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolBase`1.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolBase`1.maxCount">
            <summary>
            最大缓存数量（非精确数量）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolBase`1.isNewValue">
            <summary>
            是否返回了 null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolBase`1.isDisponse">
            <summary>
            是否需要释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolBase`1.isAsyncDisponse">
            <summary>
            是否需要异步释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkPoolBase`1.#ctor(AutoCSer.Threading.LinkPoolParameter,System.Type,System.Boolean,System.Boolean)">
            <summary>
            链表
            </summary>
            <param name="parameter">默认链表缓存池参数</param>
            <param name="type">缓存对象链表类型</param>
            <param name="isDisponse">是否需要释放资源</param>
            <param name="isAsyncDisponse">是否需要异步释放资源</param>
        </member>
        <member name="M:AutoCSer.Threading.LinkPoolBase`1.push(`0)">
            <summary>
            Add a node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkPoolBase`1.pop">
            <summary>
            Pop-up node
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkPoolBase`1.OnTimer">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkPoolBase`1.dispose(`0)">
            <summary>
            释放队形
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkPoolBase`1.onTimer">
            <summary>
            Clear cache data at regular intervals
            定时清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LinkPool`1">
            <summary>
            缓存对象链表（用于冲突概率低的场景）
            </summary>
            <typeparam name="T">缓存对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LinkPool`1.isAsyncDisponse">
            <summary>
            是否需要异步释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPool`1.isDisponse">
            <summary>
            是否需要释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkPool`1.#ctor(AutoCSer.Threading.LinkPoolParameter)">
            <summary>
            链表
            </summary>
            <param name="parameter">默认链表缓存池参数</param>
        </member>
        <member name="M:AutoCSer.Threading.LinkPool`1.Push(`0)">
            <summary>
            Add a node
            </summary>
            <param name="value">不可为 null</param>
        </member>
        <member name="M:AutoCSer.Threading.LinkPool`1.IsPush(`0)">
            <summary>
            Add a node
            </summary>
            <param name="value">不可为 null</param>
            <returns>Add failed and return false
            添加失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkPool`1.Pop">
            <summary>
            Pop-up node
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.LinkPool`1.Default">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LinkPool`2">
            <summary>
            缓存对象链表（用于冲突概率低的场景）
            </summary>
            <typeparam name="T">缓存对象类型</typeparam>
            <typeparam name="LT">链表节点泛型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LinkPool`2.isAsyncDisponse">
            <summary>
            是否需要异步释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPool`2.isDisponse">
            <summary>
            是否需要释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkPool`2.#ctor(AutoCSer.Threading.LinkPoolParameter)">
            <summary>
            链表
            </summary>
            <param name="parameter">默认链表缓存池参数</param>
        </member>
        <member name="M:AutoCSer.Threading.LinkPool`2.Push(`0)">
            <summary>
            Add a node
            </summary>
            <param name="value">不可为 null</param>
        </member>
        <member name="M:AutoCSer.Threading.LinkPool`2.Pop">
            <summary>
            Pop-up node
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.LinkPool`2.Default">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LinkStack`1">
            <summary>
            无锁栈
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LinkStack`1.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.LinkStack`1.IsEmpty">
            <summary>
            是否空链表
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.PushOnly(`0)">
            <summary>
            Add a node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.Push(`0)">
            <summary>
            Add a node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.TryPushHead(`0)">
            <summary>
            添加首节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.IsPushHead(`0)">
            <summary>
            Add a node
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.PushLink(`0,`0)">
            <summary>
            添加栈链表
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.IsPushHeadLink(`0,`0)">
            <summary>
            添加栈链表
            </summary>
            <param name="head"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.Pop">
            <summary>
            弹出一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.Get">
            <summary>
            获取栈链表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.Get(`0@)">
            <summary>
            获取栈链表
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.GetToEnd(`0@)">
            <summary>
            获取栈链表
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.GetQueue">
            <summary>
            获取队列链表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.GetQueue(`0@)">
            <summary>
            获取队列链表
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.GetQueueToEnd(`0@)">
            <summary>
            获取队列链表
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkStack`1.GetQueueToEnd(`0@,`0@)">
            <summary>
            获取队列链表
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="T:AutoCSer.Threading.LockObject">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockObject.lockObject">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockObject.#ctor(System.Object)">
            <summary>
            锁对象
            </summary>
            <param name="lockObject"></param>
        </member>
        <member name="M:AutoCSer.Threading.LockObject.Enter">
            <summary>
            等待锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockObject.Exit">
            <summary>
            Release the lock
            释放锁
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.CompletedTaskCastAwaiter`1">
            <summary>
            已完成 Awaiter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Threading.CompletedTaskCastAwaiter`1.Exception">
            <summary>
            不支持，直接抛出异常
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CompletedTaskCastAwaiter`1.#ctor">
            <summary>
            已完成默认值 Awaiter
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CompletedTaskCastAwaiter`1.#ctor(`0)">
            <summary>
            已完成 Awaiter
            </summary>
            <param name="result">任务执行结果</param>
        </member>
        <member name="F:AutoCSer.Threading.CompletedTaskCastAwaiter`1.Default">
            <summary>
            默认值已完成 Awaiter
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SwitchAwaiter">
            <summary>
            await enforces task.run operations (executing in async Task Main also prevents UI thread deadlock)
            await 强制 Task.Run 操作（在 async Task Main 中执行也可以防止 UI 线程死锁）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SwitchAwaiter.isCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SwitchAwaiter.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SwitchAwaiter.#ctor">
            <summary>
            await 强制 Task.Run 操作
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SwitchAwaiter.#ctor(System.Boolean)">
            <summary>
            已完成任务，不执行 Task.Run 操作
            </summary>
            <param name="isCompleted"></param>
        </member>
        <member name="M:AutoCSer.Threading.SwitchAwaiter.Wait">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SwitchAwaiter.GetResult">
            <summary>
            Only for supporting await
            仅用于支持 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SwitchAwaiter.GetAwaiter">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SwitchAwaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="F:AutoCSer.Threading.SwitchAwaiter.Default">
            <summary>
            await enforces task.run operations (executing in async Task Main also prevents UI thread deadlock)
            await 强制 Task.Run 操作（在 async Task Main 中执行也可以防止 UI 线程死锁）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SwitchAwaiter.Completed">
            <summary>
            The task. Run operation is not executed because the Task is complete
            已完成任务，不执行 Task.Run 操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TaskCastAwaiter`1">
            <summary>
            Task 返回值类型转换 await T
            </summary>
            <typeparam name="T">await 返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.TaskCastAwaiter`1.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskCastAwaiter`1.result">
            <summary>
            任务执行结果
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.TaskCastAwaiter`1.IsResult">
            <summary>
            是否存在执行结果
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.TaskCastAwaiter`1.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.TaskCastAwaiter`1.Exception">
            <summary>
            执行异常信息
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`1.Wait">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`1.GetResult">
            <summary>
            Only for supporting await
            仅用于支持 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`1.GetAwaiter">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`1.setResult(`0)">
            <summary>
            设置返回结果
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`1.setCompleted">
            <summary>
            设置完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`1.onCompleted(`0)">
            <summary>
            设置返回结果并尝试回调操作
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`1.onCompleted">
            <summary>
            设置错误结果并尝试回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TaskCastAwaiter`2">
            <summary>
            Task 返回值类型转换 Awaiter
            </summary>
            <typeparam name="T">await 返回值类型</typeparam>
            <typeparam name="TT">Task 返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.TaskCastAwaiter`2.task">
            <summary>
            执行 Task
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskCastAwaiter`2.exception">
            <summary>
            数据转换异常信息
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.TaskCastAwaiter`2.Exception">
            <summary>
            执行异常信息
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`2.#ctor(System.Threading.Tasks.Task{`1},System.Boolean)">
            <summary>
            Task 返回值类型转换 Awaiter
            </summary>
            <param name="task"></param>
            <param name="isCheck"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`2.#ctor(System.Threading.Tasks.Task{`1})">
            <summary>
            Task 返回值类型转换 Awaiter
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`2.check">
            <summary>
            检查 Task 是否完成
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`2.onCompleted">
            <summary>
            Task 执行完成
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskCastAwaiter`2.GetResult(`1)">
            <summary>
            类型转换
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.TaskQueue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueue.queue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueue.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueue.AddOnly(AutoCSer.Threading.QueueTaskNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueue.Add(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueue.Default">
            <summary>
            默认任务队列，用于系统可延时任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueue.AddDefault(System.Action)">
            <summary>
            添加默认任务
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:AutoCSer.Threading.TaskQueueBase">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueBase.threadHandle">
            <summary>
            Thread handle
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueBase.WaitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueBase.isDisposed">
            <summary>
            Whether resources have been released
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueBase.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueBase.#ctor">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueBase.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TaskReturnAwaiter`1">
            <summary>
            Task 执行完以后返回固定值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.TaskReturnAwaiter`1.task">
            <summary>
            执行 Task
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.TaskReturnAwaiter`1.Exception">
            <summary>
            执行异常信息
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskReturnAwaiter`1.#ctor(System.Threading.Tasks.Task,`0)">
            <summary>
            Task 执行完以后返回固定值
            </summary>
            <param name="task"></param>
            <param name="result">返回值</param>
        </member>
        <member name="M:AutoCSer.Threading.TaskReturnAwaiter`1.onCompleted">
            <summary>
            Task 执行完成
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.CatchTask">
            <summary>
            捕获异常任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.Task">
            <summary>
            任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.CallerFilePath">
            <summary>
            调用文件路径
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.CallerMemberName">
            <summary>
            调用成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.CallerLineNumber">
            <summary>
            所在文件行数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.isQueue">
            <summary>
            是否加入未完成队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.#ctor(System.Threading.Tasks.Task,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            捕获异常线程
            </summary>
            <param name="task">任务</param>
            <param name="isQueue">是否加入未完成队列</param>
            <param name="callerFilePath">调用文件路径</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerLineNumber">所在文件行数</param>
        </member>
        <member name="M:AutoCSer.Threading.CatchTask.onCompleted">
            <summary>
            任务完成处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CatchTask.queue">
            <summary>
            未释放任务集合
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.CatchTask.Tasks">
            <summary>
            枚举所有未释放任务
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.DoubleLink`1">
            <summary>
            Two-way linked list node
            双向链表节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.DoubleLinkNext">
            <summary>
            The next node
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.DoubleLinkPrevious">
            <summary>
            The previous node
            上一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.ResetDoubleLink">
            <summary>
            Reset the linked list
            重置链表状态
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.freeNotEnd(AutoCSer.Threading.SpinLock@)">
            <summary>
            Pop-up node
            弹出节点
            </summary>
            <param name="linkLock">Linked list access lock
            链表访问锁</param>
            <returns>Whether to pop the node or not, false indicates that repeated pop-up operations are not allowed
            是否弹出节点，false 表示不允许重复弹出操作</returns>
        </member>
        <member name="T:AutoCSer.Threading.DoubleLink`1.YieldLink">
            <summary>
            Concurrent linked list
            并发链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.YieldLink.End">
            <summary>
            Tail of the linked list
            链表尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.YieldLink.linkLock">
            <summary>
            Linked list access lock
            链表访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.YieldLink.PushNotNull(`0)">
            <summary>
            Add a node
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.YieldLink.PopNotNull(`0)">
            <summary>
            Pop-up node
            弹出节点
            </summary>
            <param name="value"></param>
            <returns>Whether to pop the node or not, false indicates that repeated pop-up operations are not allowed
            是否弹出节点，false 表示不允许重复弹出操作</returns>
        </member>
        <member name="T:AutoCSer.Threading.Link`1">
            <summary>
            Linked list node
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.LinkNext">
            <summary>
            The next node
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.GetLinkNextClear">
            <summary>
            Get and clear the next node
            获取并清除下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.GetEnd(`0)">
            <summary>
            Gets the last node of the linked list
            获取链表最后一个节点
            </summary>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.GetEnd(`0,System.Int32@)">
            <summary>
            Gets the last node of the linked list
            获取链表最后一个节点
            </summary>
            <param name="head"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.Reverse">
            <summary>
            Reversed linked list
            逆转链表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.reverse(`0,`0)">
            <summary>
            Reversed linked list
            逆转链表
            </summary>
            <param name="head"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.GetMiddle(`0)">
            <summary>
            Gets the middle position node
            获取中间节点
            </summary>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.LinkPoolParameter">
            <summary>
            默认链表缓存池参数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolParameter.MaxObjectCount">
            <summary>
            最大缓存对象数量，默认为  AutoCSer.Common.ProcessorCount * 2
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkPoolParameter.ReleaseFreeTimeoutSeconds">
            <summary>
            释放空闲缓存对象定时间隔秒数，默认为 3600s
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.LinkPoolParameter.Default">
            <summary>
            默认链表缓存池参数
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.QueueTaskNode">
            <summary>
            Queue task node
            队列任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.RunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.ClearLinkRunTask">
            <summary>
            Execute the task
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.RunTask(AutoCSer.Threading.QueueTaskNode@)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.OnException(System.Exception)">
            <summary>
            Queue task execution exception
            队列任务执行异常
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskNode.OnTimeout(AutoCSer.Net.CommandServerCallQueue,System.Int64)">
            <summary>
            Server-side queue timeout notification
            服务端队列超时通知
            </summary>
            <param name="queue"></param>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimer">
            <summary>
            Second-level timing operation
            秒级定时操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.timer">
            <summary>
            Timer for refreshing time
            刷新时间的定时器
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.InternalTaskArray">
            <summary>
            Two-dimensional timed task array, used for deterministic non-blocking internal tasks (no concurrency in queue mode)
            二维定时任务数组，用于确定性非阻塞的内部任务（队列模式无并发）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.TaskArray">
            <summary>
            Two-dimensional scheduled task array (Queue mode, no concurrency)
            二维定时任务数组（队列模式无并发）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.CurrentSeconds">
            <summary>
            Count the current clock seconds
            当前时钟秒数计数
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SecondTimer.GetCurrentSeconds">
            <summary>
            Count the current clock seconds
            当前时钟秒数计数
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SecondTimer.Now">
            <summary>
            Time accurate to the second
            精确到秒的时间
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SecondTimer.UtcNow">
            <summary>
            Utc time accurate to the second
            精确到秒的 Utc 时间
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimer.SetNow">
            <summary>
            Reset time
            重置时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimer.SetUtcNow">
            <summary>
            Reset Utc time
            重置 Utc 时间
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.NextSecondTicks">
            <summary>
            The clock cycle of the next second
            下一秒时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.TimerInterval">
            <summary>
            The current time update interval
            当前时间更新间隔
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.refreshTimeThreadCount">
            <summary>
            The number of threads with unfinished refresh time
            未结束刷新时间线程数量
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.SecondTimer.RefreshTimeThreadCount">
            <summary>
            The number of threads with unfinished refresh time
            未结束刷新时间线程数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimer.SecondNodeLink">
            <summary>
            A linked list of scheduled tasks triggered once per second, used for deterministic non-blocking internal tasks
            每秒触发一次的定时任务链表，用于确定性非阻塞的内部任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimer.refreshTime(System.Object)">
            <summary>
            Refresh time
            刷新时间
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerAppendTaskStateEnum">
            <summary>
            任务添加状态
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerAppendTaskStateEnum.Completed">
            <summary>
            已经同步处理完成
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerAppendTaskStateEnum.After">
            <summary>
            执行之后添加新的定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerAppendTaskStateEnum.AppendTaskArray">
            <summary>
            添加任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerAppendTaskStateEnum.OnTimer">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArray`1">
            <summary>
            二维定时任务数组
            </summary>
            <typeparam name="T">二维秒级定时任务节点链表类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArray">
            <summary>
            第一维定时任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.nextLinkArray">
            <summary>
            第二维定时任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArrayCapacity">
            <summary>
            任务数组容器大小
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArrayBitSize">
            <summary>
            容器二进制位长度，最小值为 8，最大值为 12
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.timerLink">
            <summary>
            超出二维任务链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.NodeLink">
            <summary>
            每秒尝试一次的定时任务链表，不能保证每秒触发一次
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArrayBaseSeconds">
            <summary>
            第一维定时任务数组基础秒数计时
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.linkArrayIndex">
            <summary>
            第一维定时任务数组当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.nextLinkArrayIndex">
            <summary>
            第二维定时任务数组当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArray`1.TimerLinkLock">
            <summary>
            任务节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray`1.#ctor(System.Byte)">
            <summary>
            二维定时任务数组
            </summary>
            <param name="linkArrayBitSize">容器二进制位长度，最小值为 8，最大值为 12</param>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArray">
            <summary>
            二维定时同步任务数组
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.#ctor(System.Byte)">
            <summary>
            二维定时任务数组
            </summary>
            <param name="linkArrayBitSize">容器二进制位长度，最小值为 8，最大值为 12</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.Append(AutoCSer.Threading.SecondTimerArrayNode)">
            <summary>
            添加定时任务节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.Append(System.Action,System.Int32)">
            <summary>
            添加定时委托任务
            </summary>
            <param name="task">委托任务</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.Append(System.Action,System.Int32,AutoCSer.Threading.SecondTimerKeepModeEnum,System.Int32)">
            <summary>
            添加定时委托任务
            </summary>
            <param name="task">委托任务</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="keepMode">定时任务继续模式</param>
            <param name="keepSeconds">继续执行间隔秒数，0 表示不继续执行</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArray.OnTimer">
            <summary>
            执行定时任务
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArrayActionNode">
            <summary>
            二维秒级定时委托任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayActionNode.task">
            <summary>
            委托任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayActionNode.#ctor(System.Action,AutoCSer.Threading.SecondTimerArray,System.Int32,AutoCSer.Threading.SecondTimerKeepModeEnum,System.Int32)">
            <summary>
            二维秒级定时委托任务节点
            </summary>
            <param name="task">委托任务</param>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="keepMode">定时任务继续模式</param>
            <param name="keepSeconds">继续执行间隔秒数，0 表示不继续执行</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayActionNode.OnTimer">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArrayNode">
            <summary>
            二维秒级定时同步任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.taskArray">
            <summary>
            二维定时任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.KeepSeconds">
            <summary>
            继续执行间隔秒数，小于等于 0 表示不继续执行
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.KeepMode">
            <summary>
            定时任务继续模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.TimeoutSeconds">
            <summary>
            超时
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.#ctor">
            <summary>
            二维秒级定时任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.#ctor(AutoCSer.Threading.SecondTimerArray,System.Int32,AutoCSer.Threading.SecondTimerKeepModeEnum,System.Int32)">
            <summary>
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="keepMode">定时任务继续模式</param>
            <param name="keepSeconds">继续执行间隔秒数，0 表示不继续执行</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.#ctor(AutoCSer.Threading.SecondTimerArray,AutoCSer.Threading.SecondTimerKeepModeEnum)">
            <summary>
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">二维定时任务数组</param>
            <param name="keepMode">定时任务继续模式</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.#ctor(AutoCSer.Threading.SecondTimerArray,System.Int64)">
            <summary>
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">执行任务时间</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.getNextTimeoutSeconds">
            <summary>
            获取下一个超时秒计数
            </summary>
            <returns>0 表示不再继续</returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.AppendTaskArray">
            <summary>
            任务添加到二维定时任务数组
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.AppendTaskArray(System.Int32)">
            <summary>
            任务添加到二维定时任务数组
            </summary>
            <param name="keepSeconds">继续执行间隔秒数</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.AppendCall">
            <summary>
            添加任务直接触发定时操作
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.After">
            <summary>
            执行之后添加新的定时任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.Call(AutoCSer.Threading.SecondTimerArrayNode@)">
            <summary>
            触发定时任务并返回下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNode.OnTimer">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNode.Null">
            <summary>
            Default empty node
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerArrayNodeLink">
            <summary>
            二维秒级定时任务同步节点链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNodeLink.end">
            <summary>
            任务尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerArrayNodeLink.head">
            <summary>
            任务首节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNodeLink.Append(AutoCSer.Threading.SecondTimerArrayNode)">
            <summary>
            添加尾节点
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNodeLink.AppendOtherHead(AutoCSer.Threading.SecondTimerArrayNode)">
            <summary>
            将另外一个链表的首节点添加到尾节点并返回下一个节点
            </summary>
            <param name="otherHead"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerArrayNodeLink.GetClear">
            <summary>
            获取首节点并且清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerKeepModeEnum">
            <summary>
            定时任务继续模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerKeepModeEnum.Before">
            <summary>
            执行之前添加新的定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerKeepModeEnum.After">
            <summary>
            执行之后添加新的定时任务
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerNode">
            <summary>
            定时同步任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerNode.OnTimer">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerNode.LinkOnTimer(AutoCSer.Threading.SecondTimerNode)">
            <summary>
            执行定时任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskArray">
            <summary>
            二维定时任务数组
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArray.#ctor(System.Byte)">
            <summary>
            二维定时任务数组
            </summary>
            <param name="linkArrayBitSize">容器二进制位长度，最小值为 8，最大值为 12</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArray.Append(AutoCSer.Threading.SecondTimerTaskArrayNode)">
            <summary>
            添加定时任务节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArray.OnTimer">
            <summary>
            执行定时任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArray.Append(System.Action,System.Int32,AutoCSer.Threading.SecondTimerTaskThreadModeEnum)">
            <summary>
            添加定时任务
            </summary>
            <param name="task">委托任务</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="threadMode">执行任务的线程模式</param>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskArrayActionNode">
            <summary>
            二维秒级定时委托任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayActionNode.task">
            <summary>
            委托任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayActionNode.#ctor(System.Action,AutoCSer.Threading.SecondTimerTaskArray,System.Int32,AutoCSer.Threading.SecondTimerTaskThreadModeEnum)">
            <summary>
            二维秒级定时委托任务节点
            </summary>
            <param name="task">委托任务</param>
            <param name="taskArray">二维定时任务数组</param>
            <param name="timeoutSeconds">第一次执行任务间隔的秒数</param>
            <param name="threadMode">执行任务的线程模式</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayActionNode.OnTimer">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskArrayNode">
            <summary>
            Two-dimensional second-level timing task node
            二维秒级定时任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.taskArray">
            <summary>
            Two-dimensional array of scheduled tasks
            二维定时任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.KeepSeconds">
            <summary>
            The number of seconds between the continuation of execution. If it is less than or equal to 0, it indicates that the execution will not continue
            继续执行间隔秒数，小于等于 0 表示不继续执行
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.threadMode">
            <summary>
            The thread mode for executing tasks
            执行任务的线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.KeepMode">
            <summary>
            The scheduled task continues to execute mode
            定时任务继续执行模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.isTryAppended">
            <summary>
            Has the task been added to the task array
            是否已经添加任务到任务数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.Reserved">
            <summary>
            Internal reserved fields of AutoCSer
            AutoCSer 内部保留字段
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.TimeoutSeconds">
            <summary>
            Timeout second count
            超时秒计数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.#ctor">
            <summary>
            Two-dimensional second-level timing task node
            二维秒级定时任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.#ctor(AutoCSer.Threading.SecondTimerTaskArray,AutoCSer.Threading.SecondTimerTaskThreadModeEnum,AutoCSer.Threading.SecondTimerKeepModeEnum)">
            <summary>
            Two-dimensional second-level timing task node
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">Two-dimensional array of scheduled tasks
            二维定时任务数组</param>
            <param name="threadMode">The thread mode for executing tasks
            执行任务的线程模式</param>
            <param name="KeepMode">The scheduled task continues to execute mode
            定时任务继续执行模式</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.#ctor(AutoCSer.Threading.SecondTimerTaskArray,System.Int32,AutoCSer.Threading.SecondTimerTaskThreadModeEnum,AutoCSer.Threading.SecondTimerKeepModeEnum,System.Int32)">
            <summary>
            Two-dimensional second-level timing task node
            二维秒级定时任务节点
            </summary>
            <param name="taskArray">Two-dimensional array of scheduled tasks
            二维定时任务数组</param>
            <param name="timeoutSeconds">The number of seconds between the first task execution
            第一次执行任务间隔的秒数</param>
            <param name="threadMode">The thread mode for executing tasks
            执行任务的线程模式</param>
            <param name="KeepMode">The scheduled task continues to execute mode
            定时任务继续执行模式</param>
            <param name="keepSeconds">The number of seconds for the continuation of execution, with 0 indicating no continuation of execution
            继续执行间隔秒数，0 表示不继续执行</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.getNextTimeoutSeconds">
            <summary>
            Get the next timeout second count
            获取下一个超时秒计数
            </summary>
            <returns>0 indicates no further continuation
            0 表示不再继续</returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryAppendTaskArrayAsync(System.Int32)">
            <summary>
            The task is added to the two-dimensional scheduled task array
            任务添加到二维定时任务数组
            </summary>
            <param name="keepSeconds">Continue the execution interval in seconds
            继续执行间隔秒数</param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryAppendTaskArrayAsync">
            <summary>
            Try to add to the task array
            尝试添加到任务数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryAppendTaskArray">
            <summary>
            Try to add to the task array
            尝试添加到任务数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.AppendTaskArrayAsync(AutoCSer.Threading.SecondTimerAppendTaskStateEnum)">
            <summary>
            The task is added to the two-dimensional scheduled task array
            任务添加到二维定时任务数组
            </summary>
            <param name="appendTaskState"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryAppendTaskArray(System.Int32)">
            <summary>
            Try to add to the task array
            尝试添加到任务数组
            </summary>
            <param name="timeoutSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.AppendTaskArray">
            <summary>
            The task is added to the two-dimensional scheduled task array
            任务添加到二维定时任务数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.After">
            <summary>
            Add a new scheduled task after the task is executed
            任务执行之后添加新的定时任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.AfterAsync">
            <summary>
            Add a new scheduled task after the task is executed
            任务执行之后添加新的定时任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.TryCall(AutoCSer.Threading.SecondTimerAppendTaskStateEnum@)">
            <summary>
            Try to trigger the scheduled task
            尝试触发定时任务
            </summary>
            <param name="appendTaskState"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.Call(AutoCSer.Threading.SecondTimerAppendTaskStateEnum,AutoCSer.Threading.SecondTimerAppendTaskStateEnum)">
            <summary>
            Trigger the scheduled task
            触发定时任务
            </summary>
            <param name="callTaskState"></param>
            <param name="appendTaskState"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.OnTimer">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNode.OnTimerAsync">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNode.Null">
            <summary>
            Default empty node
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskArrayNodeLink">
            <summary>
            二维秒级定时任务节点链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.end">
            <summary>
            任务尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.head">
            <summary>
            任务首节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.Append(AutoCSer.Threading.SecondTimerTaskArrayNode)">
            <summary>
            添加尾节点
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.AppendOtherHead(AutoCSer.Threading.SecondTimerTaskArrayNode)">
            <summary>
            将另外一个链表的首节点添加到尾节点并返回下一个节点
            </summary>
            <param name="otherHead"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SecondTimerTaskArrayNodeLink.GetClear">
            <summary>
            获取首节点并且清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.SecondTimerTaskThreadModeEnum">
            <summary>
            执行任务的线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskThreadModeEnum.Synchronous">
            <summary>
            阻塞定时线程同步执行 OnTimer，适用于无阻塞快速结束任务避免线程调度
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskThreadModeEnum.WaitTask">
            <summary>
            await 阻塞定时线程同步执行 OnTimerAsync，适用于无阻塞快速结束任务避免线程调度
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SecondTimerTaskThreadModeEnum.AddCatchTask">
            <summary>
            调用 AutoCSer.Threading.CatchTask.Add 执行 OnTimerAsync
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TimeoutCount">
            <summary>
            超时计数
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TimeoutCount.SecondIndex">
            <summary>
            计时与索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.SecondIndex.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.SecondIndex.Index">
            <summary>
            计数索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.SecondIndex.Second">
            <summary>
            计时秒基数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.SecondIndex.Next(System.Int32)">
            <summary>
            计算下一个位置
            </summary>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.secondIndex">
            <summary>
            计时与索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.Counts">
            <summary>
            计数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimeoutCount.maxSeconds">
            <summary>
            最大超时秒数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.#ctor(System.UInt16)">
            <summary>
            超时计数
            </summary>
            <param name="maxSeconds">最大超时秒数，必须大于 0</param>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.Finalize">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.TryIncrement(System.UInt16)">
            <summary>
            增加超时计数
            </summary>
            <param name="seconds">超时秒数</param>
            <returns>超时秒计数</returns>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.Increment(System.UInt16)">
            <summary>
            增加超时计数
            </summary>
            <param name="seconds">超时秒数，必须大于 0</param>
            <returns>超时秒计数</returns>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.TryDecrement(System.UInt32)">
            <summary>
            减少超时计数
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.Decrement(System.UInt32)">
            <summary>
            减少超时计数
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.OnTimer">
            <summary>
            超时检测
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimeoutCount.OnTimeout(System.UInt32)">
            <summary>
            超时事件（不允许阻塞）
            </summary>
            <param name="seconds">超时秒计数</param>
        </member>
        <member name="T:AutoCSer.Threading.SemaphoreSlimLock">
            <summary>
            异步锁（不支持重入，重入则死锁）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SemaphoreSlimLock.LockObject">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.#ctor(System.Int32,System.Int32)">
            <summary>
            异步锁（不支持重入，重入则死锁）
            </summary>
            <param name="initialCount">初始允许并发数量，默认应该传 1</param>
            <param name="maxCount">最大并发数量</param>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.Enter">
            <summary>
            Apply for a lock
            申请锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.EnterAsync">
            <summary>
            Apply for a lock
            申请锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.Exit">
            <summary>
            Release the lock
            释放锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SemaphoreSlimLock.TryExit(AutoCSer.Threading.SemaphoreSlimLock)">
            <summary>
            Release the lock
            释放锁
            </summary>
            <param name="semaphoreSlimLock"></param>
        </member>
        <member name="T:AutoCSer.Threading.SleepFlagSpinLock">
            <summary>
            休眠标志自旋锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SleepFlagSpinLock.lockValue">
            <summary>
            锁数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SleepFlagSpinLock.SleepFlag">
            <summary>
            休眠标志
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.TryEnter">
            <summary>
            Apply for a lock
            申请锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.Enter">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.enter">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.EnterSleepFlag">
            <summary>
            申请锁并设置休眠标志，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.EnterNotCheckSleepFlag">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频高冲突场景（不检测休眠标识，和 SpinLock.Enter4 效果一样）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.enterNotCheckSleepFlag">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频高冲突场景（不检测休眠标识，和 SpinLock.Enter4 效果一样）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.Exit">
            <summary>
            Release the lock
            释放锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SleepFlagSpinLock.ExitSleepFlag">
            <summary>
            重置休眠标志并释放锁
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.SpinLock">
            <summary>
            Interlocked.CompareExchange 自旋锁（相对 System.Threading.Monitor 减少一个 object 对象）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SpinLock.Lock">
            <summary>
            锁数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SpinLock.Reserve">
            <summary>
            保留
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.TryEnter">
            <summary>
            Apply for a lock
            申请锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.EnterYield">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.enterYield">
            <summary>
            申请锁，每间隔 4 次调用 1 次 Thread.Sleep(0)，用于高频一般冲突场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.EnterSleep">
            <summary>
            申请锁，一直调用 Thread.Sleep(0)，用于低频场景
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SpinLock.Exit">
            <summary>
            Release the lock
            释放锁
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Thread">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.threadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.Handle">
            <summary>
            Thread handle
            线程句柄
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Thread.IsAborted">
            <summary>
            线程是否已经退出
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Thread.Task">
            <summary>
            任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.waitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.#ctor(AutoCSer.Threading.ThreadPool)">
            <summary>
            线程池线程
            </summary>
            <param name="threadPool">线程池</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.#ctor(AutoCSer.Threading.ThreadPool,System.Action)">
            <summary>
            线程池线程
            </summary>
            <param name="threadPool">线程池</param>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.start(System.Boolean)">
            <summary>
            启动线程
            </summary>
            <param name="isBackground"></param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.exitTest">
            <summary>
            退出测试线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.runBackground">
            <summary>
            运行线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.run">
            <summary>
            运行线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.RunTask(System.Action)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.Stop">
            <summary>
            结束线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.StopLink">
            <summary>
            结束线程
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.Thread.beginThreadAffinityState">
            <summary>
            System.Threading.Thread.BeginThreadAffinity() 调用状态
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.BeginThreadAffinity">
            <summary>
            System.Threading.Thread.BeginThreadAffinity()
            </summary>
            <returns>调用是否成功</returns>
        </member>
        <member name="M:AutoCSer.Threading.Thread.beginThreadAffinity">
            <summary>
            System.Threading.Thread.BeginThreadAffinity()
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.ThreadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.TinyStackSize">
            <summary>
            最低线程堆栈大小 128KB
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.defaultStackSize">
            <summary>
            默认线程堆栈大小 1MB
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.isDisposed">
            <summary>
            Whether resources have been released
            是否已经释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.StackSize">
            <summary>
            线程堆栈大小
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.IsBackground">
            <summary>
            是否后台线程
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.threads">
            <summary>
            线程链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.freeThreadCount">
            <summary>
            空闲线程数量
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.#ctor(System.Int32,System.Boolean)">
            <summary>
            线程池
            </summary>
            <param name="stackSize">线程堆栈大小</param>
            <param name="isBackground">是否后台线程</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.PushBackground(AutoCSer.Threading.Thread)">
            <summary>
            后台线程入池
            </summary>
            <param name="thread">线程池线程</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.Push(AutoCSer.Threading.Thread)">
            <summary>
            前台线程入池
            </summary>
            <param name="thread">线程池线程</param>
            <returns>线程池是否已经释放</returns>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.exit">
            <summary>
            前台线程退出
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.FastStart(System.Action)">
            <summary>
            获取一个线程并执行任务
            </summary>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.Start(System.Action)">
            <summary>
            获取一个线程并执行任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.releaseFree">
            <summary>
            是否空闲线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.releaseFreeBackground">
            <summary>
            是否空闲线程
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.Tiny">
            <summary>
            微型线程池,堆栈 128K
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.TinyBackground">
            <summary>
            微型后台线程池,堆栈 128K
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.BackgroundExitThread">
            <summary>
            后台退出测试线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.CheckExit">
            <summary>
            前台退出测试
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.releaseFreeThread">
            <summary>
            释放多余线程数据
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.ThreadPoolQueueUserWorkItem">
            <summary>
            线程池回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPoolQueueUserWorkItem.callback">
            <summary>
            线程池回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPoolQueueUserWorkItem.#ctor(System.Action)">
            <summary>
            线程池回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPoolQueueUserWorkItem.Callback(System.Object)">
            <summary>
            线程池回调委托
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Threading.ThreadYield">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.YieldOnly">
            <summary>
            .NET 4.0 之前的版本不做任何事
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.Yield">
            <summary>
            .NET 4.0 之前的版本调用 System.Threading.Thread.Sleep(0)
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.UISynchronousTask">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask.getTask">
            <summary>
            获取任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask.wait">
            <summary>
            等待任务执行结果
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask.exception">
            <summary>
            任务执行异常信息
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.UISynchronousTask.Exception">
            <summary>
            任务执行异常信息，正常执行无异常返回 null
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <param name="getTask">获取任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.run">
            <summary>
            执行任务线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.Wait">
            <summary>
            任务执行结果
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.Wait(System.Func{System.Threading.Tasks.Task})">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <param name="getTask"></param>
            <returns>任务执行异常信息，正常执行无异常返回 null</returns>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.GetResult``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <param name="getTask">获取任务委托</param>
            <returns>任务执行结果</returns>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask.GetResult``1(System.Func{System.Threading.Tasks.Task{``0}},System.Exception@)">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <param name="getTask">获取任务委托</param>
            <param name="exception">任务执行异常信息，正常执行无异常返回 null</param>
            <returns>任务执行结果</returns>
        </member>
        <member name="T:AutoCSer.Threading.UISynchronousTask`1">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask`1.getTask">
            <summary>
            获取任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask`1.wait">
            <summary>
            等待任务执行结果
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask`1.exception">
            <summary>
            任务执行异常信息
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.UISynchronousTask`1.Exception">
            <summary>
            任务执行异常信息，正常执行无异常返回 null
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UISynchronousTask`1.result">
            <summary>
            任务执行结果
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            UI 线程同步上下文调用 async Task 避免死锁操作
            </summary>
            <param name="getTask">获取任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask`1.run">
            <summary>
            执行任务线程
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.UISynchronousTask`1.Result">
            <summary>
            任务执行结果
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.UISynchronousTask`1.GetResult(System.Exception@)">
            <summary>
            获取任务执行结果与任务执行异常信息
            </summary>
            <param name="exception">任务执行异常信息，正常执行无异常返回 null</param>
            <returns>任务执行结果</returns>
        </member>
        <member name="T:AutoCSer.ILog">
            <summary>
            日志处理接口
            </summary>
        </member>
        <member name="M:AutoCSer.ILog.IsAnyLevel(AutoCSer.LogLevelEnum)">
            <summary>
            判断是否支持任意级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ILog.Debug(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.ILog.Exception(System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.ILog.Flush">
            <summary>
            等待写入完成
            </summary>
            <returns>写盘是否成功</returns>
        </member>
        <member name="T:AutoCSer.LogHelper">
            <summary>
            公共日志配置
            </summary>
        </member>
        <member name="F:AutoCSer.LogHelper.Default">
            <summary>
            公共配置日志，默认为文件日志
            </summary>
        </member>
        <member name="M:AutoCSer.LogHelper.Info(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加普通日志
            </summary>
            <param name="message">普通日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.InfoIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加普通日志
            </summary>
            <param name="message">普通日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Debug(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.DebugIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加调试日志
            </summary>
            <param name="message">调试日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Exception(System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.ExceptionIgnoreException(System.Exception,System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加异常日志
            </summary>
            <param name="exception">异常信息</param>
            <param name="message">附加信息</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Error(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加一般错误日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.ErrorIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加一般错误日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Warn(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.WarnIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加警告日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Fatal(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加致命错误日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.FatalIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加致命错误日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Breakpoint(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加测试断点日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
            <returns>是否写入日志</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.BreakpointIgnoreException(System.String,AutoCSer.LogLevelEnum,System.String,System.String,System.Int32)">
            <summary>
            添加测试断点日志
            </summary>
            <param name="message">错误日志内容</param>
            <param name="level">日志级别</param>
            <param name="callerMemberName">Caller member name</param>
            <param name="callerFilePath">Caller the source code file path</param>
            <param name="callerLineNumber">Caller the line number of the source code</param>
        </member>
        <member name="M:AutoCSer.LogHelper.Flush">
            <summary>
            等待写入完成
            </summary>
            <returns>写盘是否成功</returns>
        </member>
        <member name="M:AutoCSer.LogHelper.FlushIgnoreException">
            <summary>
            等待写入完成
            </summary>
            <returns>写盘是否成功</returns>
        </member>
        <member name="T:AutoCSer.JsonSerializeConfig">
            <summary>
            JSON serialization configuration parameters
            JSON 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.DateTimeCustomFormat">
            <summary>
            Customize the ToString("xxx") format
            自定义 ToString("xxx") 格式
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.DateTimeType">
            <summary>
            Time output type
            时间输出类型
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsDateTimeMinNull">
            <summary>
            The default is true, indicating that the minimum time output is null
            默认为 true 表示最小时间输出为 null
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsStringDictionaryToObject">
            <summary>
            By default, true indicates that IDictionary{string,T} is converted to object output; otherwise, the output is an array of {"Key":x,"Value":y}
            默认为 true 表示 IDictionary{string,T} 转换成对象输出，否则输出为 {"Key":x,"Value":y} 数组
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsDictionaryToObject">
            <summary>
            By default, false indicates that IDictionary{KT,VT} outputs an array of {"Key":x,"Value":y}, and setting it to true replaces it with object output
            默认为 false 表示 IDictionary{KT,VT} 输出 {"Key":x,"Value":y} 数组，设置为 true 则换成对象输出
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsIntegerToHex">
            <summary>
            Whether integers are allowed to be converted to hexadecimal strings (for WEB API output)
            整数是否允许转换为 16 进制字符串（用于 WEB API 输出）
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsMaxNumberToString">
            <summary>
            Whether long/ulong that exceeds the maximum effective precision is converted to a string (for WEB API output)
            超出最大有效精度的 long / ulong 是否转换成字符串（用于 WEB API 输出）
            </summary>
        </member>
        <member name="F:AutoCSer.JsonSerializeConfig.IsBoolToInt">
            <summary>
            Whether the logical value is converted to 1/0 for output (for WEB API output)
            逻辑值是否转换成 1/0 输出（用于 WEB API 输出）
            </summary>
        </member>
        <member name="T:AutoCSer.Random">
            <summary>
            Random number
            随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.SecureSeedsSize">
            <summary>
            Number of seed bytes
            种子字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.SeedArrayField">
            <summary>
            The default seed array of system random numbers
            系统随机数默认种子数组
            </summary>
        </member>
        <member name="F:AutoCSer.Random.seeds">
            <summary>
            Public seeds
            公用种子
            </summary>
        </member>
        <member name="F:AutoCSer.Random.secureSeeds">
            <summary>
            Safe seeds
            安全种子
            </summary>
        </member>
        <member name="F:AutoCSer.Random.current">
            <summary>
            32-bit seed position
            32 位种子位置
            </summary>
        </member>
        <member name="F:AutoCSer.Random.current64">
            <summary>
            64-bit seed position
            64 位种子位置
            </summary>
        </member>
        <member name="F:AutoCSer.Random.currentLock">
            <summary>
            64-bit seed location access lock
            64 位种子位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bits">
            <summary>
            Random bit cache
            随机位缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bitCount">
            <summary>
            Random bit cache quantity
            随机位缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.byteLock">
            <summary>
            Byte cache access lock
            字节缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bytes">
            <summary>
            字节缓存
            </summary>
            Byte cache
        </member>
        <member name="F:AutoCSer.Random.byteCount">
            <summary>
            Byte cache quantity
            字节缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushortLock">
            <summary>
            双字节缓存访问锁
            </summary>
            Double-byte cache access lock
        </member>
        <member name="F:AutoCSer.Random.ushorts">
            <summary>
            双字节缓存
            </summary>
            Double-byte cache
        </member>
        <member name="F:AutoCSer.Random.ushortCount">
            <summary>
            The number of double-byte caches
            双字节缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Random.#ctor(System.Boolean)">
            <summary>
            Random number
            随机数
            </summary>
            <param name="isAutoCSerStatic">Whether the random seed uses the default static memory
            随机种子是否采用默认静态内存</param>
        </member>
        <member name="M:AutoCSer.Random.Dispose">
            <summary>
            Release the seed memory
            释放种子内存
            </summary>
        </member>
        <member name="M:AutoCSer.Random.nextIndex">
            <summary>
            Get the random seed position
            获取随机种子位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.Next">
            <summary>
            Get the next random number
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.NextFloat">
            <summary>
            Get the next random number
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.Next(System.Int32)">
            <summary>
            Get the next random number
            获取下一个随机数
            </summary>
            <param name="mod">Take the modulus of the remainder
            求余取模数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextBit">
            <summary>
            Get the next random bit
            获取下一个随机位
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextByte">
            <summary>
            Get the next random byte
            获取下一个随机字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextUShort">
            <summary>
            Get the next random double byte
            获取下一个随机双字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.nextIndex64">
            <summary>
            Get the random seed position
            获取随机种子位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextULong">
            <summary>
            Get the next random number
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.NextDouble">
            <summary>
            Get the next random number
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNext">
            <summary>
            Get the next random number
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextUIntNotZero">
            <summary>
            Get the next nonzero random number
            获取下一个非 0 随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextULong">
            <summary>
            Get the next random number
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextULongNotZero">
            <summary>
            Get the next nonzero random number
            获取下一个非 0 随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Default">
            <summary>
            Default random number
            默认随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Hash64">
            <summary>
            Random Hash value (for anti-construction)
            随机 Hash 值（用于防构造）
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Hash">
            <summary>
            Random Hash value (for anti-construction)
            </summary>
        </member>
        <member name="T:AutoCSer.ReferenceHashKey`1">
            <summary>
            引用哈希关键字
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.ReferenceHashKey`1.Value">
            <summary>
            哈希关键字
            </summary>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.#ctor(`0)">
            <summary>
            哈希关键字
            </summary>
            <param name="value">keyword</param>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.op_Implicit(`0)~AutoCSer.ReferenceHashKey{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">哈希关键字</param>
            <returns>引用哈希关键字</returns>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.Equals(AutoCSer.ReferenceHashKey{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ReferenceHashKey`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.CharBuilder">
            <summary>
            状态数据创建器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.names">
            <summary>
            名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.Data">
            <summary>
            状态数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.prefix">
            <summary>
            前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.table">
            <summary>
            状态矩阵
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.stateCount">
            <summary>
            状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.tableCount">
            <summary>
            矩阵状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.prefixSize">
            <summary>
            前缀数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.chars">
            <summary>
            状态字符集合
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.#ctor(AutoCSer.KeyValue{System.String,System.Int32}[],System.Boolean)">
            <summary>
            状态数据创建器
            </summary>
            <param name="names">名称集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.count(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算状态数量
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.create(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建状态数据
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.StringCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.compare(AutoCSer.KeyValue{System.String,System.Int32},AutoCSer.KeyValue{System.String,System.Int32})">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.Check(AutoCSer.KeyValue{System.String,System.Int32}[],System.String@)">
            <summary>
            状态检测
            </summary>
            <param name="values"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.Create(System.String[],System.Boolean)">
            <summary>
            创建名称查找数据
            </summary>
            <param name="names">名称集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
            <returns>名称查找数据</returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.CharSearcher">
            <summary>
            字符搜索器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.#ctor(AutoCSer.Memory.Pointer)">
            <summary>
            字符搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.#ctor(AutoCSer.Memory.Pointer@)">
            <summary>
            字符搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.GetCharIndex(System.Char*,System.Char*,System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="charStart">特殊字符串查找表</param>
            <param name="charEnd">特殊字符串查找表结束位置</param>
            <param name="value">特殊字符</param>
            <returns>特殊字符位置,匹配失败返回null</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.Search(System.String)">
            <summary>
            获取状态索引
            </summary>
            <param name="value"></param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.UnsafeSearch(System.Char*,System.Char*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.UnsafeSearch(System.Char*,System.Int32)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="length">匹配长度</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="T:AutoCSer.SubString">
            <summary>
            字符子串
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.String">
            <summary>
            原字符串
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.Start">
            <summary>
            原字符串中的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.Length">
            <summary>
            字符子串长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubString.Item(System.Int32)">
            <summary>
            获取字符
            </summary>
            <param name="index">字符位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubString.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            字符子串
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="value"></param>
            <param name="length">长度</param>
        </member>
        <member name="M:AutoCSer.SubString.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            字符子串
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="value"></param>
            <param name="length">长度</param>
        </member>
        <member name="M:AutoCSer.SubString.op_Implicit(System.String)~AutoCSer.SubString">
            <summary>
            字符串隐式转换为子串
            </summary>
            <param name="value"></param>
            <returns>字符子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.op_Implicit(AutoCSer.SubString)~System.String">
            <summary>
            字符子串隐式转换为字符串
            </summary>
            <param name="value">字符子串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetHashCode64">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.SubString.SetEmpty">
            <summary>
            Clear the data
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.SubString.Set(System.String,System.Int32,System.Int32)">
            <summary>
            设置数据长度
            </summary>
            <param name="value">字符串,不能为null</param>
            <param name="startIndex">起始位置,必须合法</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.SubString.Equals(System.Object)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="obj">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(AutoCSer.SubString)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(AutoCSer.SubString@)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(System.String)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.SubString.Slice(System.Int32,System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="length">长度</param>
            <returns>子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.Sub(System.Int32,System.Int32)">
            <summary>
            设置为子串
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="length">长度</param>
        </member>
        <member name="M:AutoCSer.SubString.Sub(System.Int32)">
            <summary>
            设置为子串
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
        </member>
        <member name="M:AutoCSer.SubString.GetSub(System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <returns>子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetSub(System.Int32,System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="length">长度</param>
            <returns>子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.MoveStart(System.Int32)">
            <summary>
            修改起始位置
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SubString.IndexOf(System.Char)">
            <summary>
            字符查找
            </summary>
            <param name="value">查找值</param>
            <returns>字符位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SubString.Trim">
            <summary>
            删除前后空格，包括 \t\r\n
            </summary>
            <returns>删除前后空格</returns>
        </member>
        <member name="M:AutoCSer.SubString.Split(System.Char)">
            <summary>
            分割字符串
            </summary>
            <param name="split">分割符</param>
            <returns>字符子串集合</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetFixedBuffer">
            <summary>
            Get the fixed buffer, DEBUG mode to detect the data range
            获取 fixed 缓冲区，DEBUG 模式对数据范围进行检测
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ToGenericCollection`1">
            <summary>
            ICollection 泛型转换
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.ToGenericCollection`1.collection">
            <summary>
            ICollection数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.#ctor(System.Collections.ICollection)">
            <summary>
            ICollection泛型转换
            </summary>
            <param name="collection">ICollection数据集合</param>
        </member>
        <member name="P:AutoCSer.ToGenericCollection`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.ToGenericCollection`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Get the enumerator
            获取枚举器
            </summary>
            <returns>Enumerator
            枚举器</returns>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            获取枚举器
            </summary>
            <returns>Enumerator
            枚举器</returns>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.Remove(`0)">
            <summary>
            移除数据(不可用)
            </summary>
            <param name="value">data</param>
            <returns>Returning false indicates that there is no data match
            返回 false 表示不存在数据匹配</returns>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy data
            </summary>
            <param name="values">Target array
            目标数组</param>
            <param name="index">Target starting position
            目标起始位置</param>
        </member>
        <member name="M:AutoCSer.ToGenericCollection`1.Contains(`0)">
            <summary>
            Determine whether there is data
            判断是否存在数据
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns>Returning false indicates that there is no matching data
            返回 false 表示不存在匹配数据</returns>
        </member>
        <member name="T:System.Half">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:System.Half.value">
            <summary>
            16b
            </summary>
        </member>
        <member name="M:System.Half.Equals(System.Half)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Half.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Int128">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:System.Int128.lower">
            <summary>
            低 64b
            </summary>
        </member>
        <member name="F:System.Int128.upper">
            <summary>
            高 64b
            </summary>
        </member>
        <member name="M:System.Int128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="upper"></param>
            <param name="lower"></param>
        </member>
        <member name="M:System.Int128.Equals(System.Int128)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:System.Int128.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.Int128.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.UInt128">
            <summary>
            .NET8 类型定义（用于二进制序列化兼容操作）
            </summary>
        </member>
        <member name="F:System.UInt128.lower">
            <summary>
            低 64b
            </summary>
        </member>
        <member name="F:System.UInt128.upper">
            <summary>
            高 64b
            </summary>
        </member>
        <member name="M:System.UInt128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            
            </summary>
            <param name="upper"></param>
            <param name="lower"></param>
        </member>
        <member name="M:System.UInt128.Equals(System.UInt128)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:System.UInt128.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.UInt128.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.IAsyncEnumerator`1">
            <summary>
            异步枚举器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:System.Collections.Generic.IAsyncEnumerator`1.Current">
            <summary>
            当前数据
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="T:System.Threading.Tasks.ValueTask">
            <summary>
            Task 封装
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask.#ctor(System.Action)">
            <summary>
            Task 封装
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask.AsTask">
            <summary>
            转换为 Task
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask.FromResult``1(``0)">
            <summary>
            Get the completed task
            获取已完成任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:System.Threading.Tasks.ValueTask.CompletedTask">
            <summary>
            The task is completed by default
            默认已完成任务
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.ValueTask`1">
            <summary>
            Task 封装
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
            <summary>
            已完成任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:System.Threading.Tasks.ValueTask`1.AsTask">
            <summary>
            转换为 Task
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.IAsyncDisposable">
            <summary>
            异步释放资源
            </summary>
        </member>
        <member name="M:System.IAsyncDisposable.DisposeAsync">
            <summary>
            异步释放资源
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
