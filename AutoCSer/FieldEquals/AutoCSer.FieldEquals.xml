<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.FieldEquals</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.FieldEquals.CombinationTemplateConfig">
            <summary>
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="T:AutoCSer.FieldEquals.Comparor">
            <summary>
            对象对比
            </summary>
            <summary>
            对象对比
            </summary>
            <summary>
            对象对比
            </summary>
            <summary>
            对象对比
            </summary>
            <summary>
            对象对比
            </summary>
            <summary>
            对象对比
            </summary>
            <summary>
            对象对比
            </summary>
            <summary>
            对象对比
            </summary>
            <summary>
            对象对比
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EnumULong``1(``0,``0)">
            <summary>
            枚举值比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.FieldEquals.Comparor.FieldEqualsMethodName">
            <summary>
            对象对比方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.Comparor.MemberMapFieldEqualsMethodName">
            <summary>
            对象对比方法名称
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.CallEquals``1(``0,``0)">
            <summary>
            对象对比
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.ObjectEquals(System.Object,System.Object)">
            <summary>
            对象比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.Equals(System.Single,System.Single)">
            <summary>
            浮点数比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.Equals(System.Double,System.Double)">
            <summary>
            浮点数比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EquatableEquals``1(``0,``0)">
            <summary>
            对象比较
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.ReferenceEquals``1(``0,``0)">
            <summary>
            对象比较
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.NullableEquals``1(System.Nullable{``0},System.Nullable{``0})">
            <summary>
            对象比较
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.ArrayEquals``1(``0[],``0[])">
            <summary>
            数组比较
            </summary>
            <typeparam name="T"></typeparam>
            <param name="leftArray"></param>
            <param name="rightArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.CollectionEquals``2(``0,``0)">
            <summary>
            集合比较
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="leftArray"></param>
            <param name="rightArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.DictionaryEquals``3(``0,``0)">
            <summary>
            字典比较
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="leftArray"></param>
            <param name="rightArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.KeyValueEquals``2(AutoCSer.KeyValue{``0,``1},AutoCSer.KeyValue{``0,``1})">
            <summary>
            键值对比较
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.KeyValuePairEquals``2(System.Collections.Generic.KeyValuePair{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            键值对比较
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.FieldEquals.Comparor.IsBreakpoint">
            <summary>
            测试断点信息添加到输出队列（DEBUG 有效）
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.Breakpoint(System.Type)">
            <summary>
            检查返回数据
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.Breakpoint``1(``0,``0)">
            <summary>
            测试断点信息添加到输出队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.Breakpoint``1(System.Type,``0,``0)">
            <summary>
            测试断点信息添加到输出队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.Equals``1(``0,``0)">
            <summary>
            对象对比
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.Equals``1(``0,``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象对比
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.GetFieldEqualsFields(System.Reflection.FieldInfo[])">
            <summary>
            获取对象对比成员
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EnumLong``1(``0,``0)">
            <summary>
            枚举值比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EnumUInt``1(``0,``0)">
            <summary>
            枚举值比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EnumInt``1(``0,``0)">
            <summary>
            枚举值比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EnumUShort``1(``0,``0)">
            <summary>
            枚举值比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EnumShort``1(``0,``0)">
            <summary>
            枚举值比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EnumByte``1(``0,``0)">
            <summary>
            枚举值比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor.EnumSByte``1(``0,``0)">
            <summary>
            枚举值比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.Comparor`1">
            <summary>
            对象对比
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.FieldEquals.Comparor`1.EqualsComparor">
            <summary>
            对象对比委托
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.Comparor`1.MemberMapEqualsComparor">
            <summary>
            对象对比委托
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor`1.MemberMapEquals(`0,`0,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            对象对比
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor`1.notSupport(`0,`0)">
            <summary>
            不支持类型
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FieldEquals.Comparor`1.getDelegate">
            <summary>
            获取对象比较委托
            </summary>
            <returns>对象比较委托</returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.IgnoreAttribute">
            <summary>
            忽略成员配置
            </summary>
        </member>
        <member name="T:AutoCSer.FieldEquals.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.Member.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.Member.NameMember">
            <summary>
            成员名称信息
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Member.#ctor(System.Reflection.FieldInfo,System.Reflection.MemberInfo)">
            <summary>
            成员信息
            </summary>
            <param name="field"></param>
            <param name="nameMember"></param>
        </member>
        <member name="T:AutoCSer.FieldEquals.MemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.MemberDynamicMethod.objectReferenceEqualsMethod">
            <summary>
            引用比较函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.MemberDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.MemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.MemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.MemberDynamicMethod.type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.MemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.FieldEquals.MemberDynamicMethod.isMemberMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.MemberDynamicMethod.#ctor(AutoCSer.Metadata.GenericType,System.Boolean)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
            <param name="isMemberMap"></param>
        </member>
        <member name="M:AutoCSer.FieldEquals.MemberDynamicMethod.Push(System.Reflection.FieldInfo)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.FieldEquals.MemberDynamicMethod.Push(System.Reflection.FieldInfo,System.Int32)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="memberIndex">字段信息</param>
        </member>
        <member name="M:AutoCSer.FieldEquals.MemberDynamicMethod.Base">
            <summary>
            基类调用
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.MemberDynamicMethod.Create(System.Type)">
            <summary>
            创建委托
            </summary>
            <param name="type">委托类型</param>
            <returns>委托</returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.CollectionGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.CollectionGenericType.EqualsDelegate">
            <summary>
            对象对比委托
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.CollectionGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.FieldEquals.Metadata.CollectionGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.CollectionGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">ICollection 类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.CollectionGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.CollectionGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.CollectionGenericType`2.EqualsDelegate">
            <summary>
            对象对比委托
            </summary>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.DictionaryGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.DictionaryGenericType.EqualsDelegate">
            <summary>
            字典比较委托
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.DictionaryGenericType.create``3">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.FieldEquals.Metadata.DictionaryGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.DictionaryGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">IDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.DictionaryGenericType`3">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.DictionaryGenericType`3.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.DictionaryGenericType`3.EqualsDelegate">
            <summary>
            字典比较委托
            </summary>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.EnumGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.EnumGenericType.EqualsDelegate">
            <summary>
            枚举值对比委托
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.EnumGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.FieldEquals.Metadata.EnumGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.EnumGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.EnumGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.EnumGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.EnumGenericType`2.EqualsDelegate">
            <summary>
            枚举值对比委托
            </summary>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.EquatableGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.EquatableGenericType.EquatableEqualsDelegate">
            <summary>
            对象对比委托
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.EquatableGenericType.ReferenceEqualsDelegate">
            <summary>
            对象对比委托
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.EquatableGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.FieldEquals.Metadata.EquatableGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.EquatableGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.EquatableGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.EquatableGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.EquatableGenericType`1.EquatableEqualsDelegate">
            <summary>
            对象对比委托
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.EquatableGenericType`1.ReferenceEqualsDelegate">
            <summary>
            对象对比委托
            </summary>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.GenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.GenericType.CallEqualsDelegate">
            <summary>
            调用对象对比委托
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.GenericType.ArrayDelegate">
            <summary>
            数组对象对比委托
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.GenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.FieldEquals.Metadata.GenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.GenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.GenericType`1">
            <summary>
            泛型类型元数据
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.GenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.GenericType`1.CallEqualsDelegate">
            <summary>
            调用对象对比委托
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.GenericType`1.ArrayDelegate">
            <summary>
            数组对象对比委托
            </summary>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.StructGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.StructGenericType.NullableDelegate">
            <summary>
            可空类型比较委托
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.StructGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.FieldEquals.Metadata.StructGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.FieldEquals.Metadata.StructGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.FieldEquals.Metadata.StructGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.StructGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.FieldEquals.Metadata.StructGenericType`1.NullableDelegate">
            <summary>
            可空类型比较委托
            </summary>
        </member>
    </members>
</doc>
