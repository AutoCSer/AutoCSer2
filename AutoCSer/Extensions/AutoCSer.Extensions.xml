<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.Extensions</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.CompareFromExtensions">
            <summary>
            数据反向比较
            </summary>
            <summary>
            数据反向比较
            </summary>
            <summary>
            数据反向比较
            </summary>
            <summary>
            数据反向比较
            </summary>
        </member>
        <member name="M:AutoCSer.CompareFromExtensions.CompareFrom(System.UInt64,System.UInt64)">
            <summary>
            数据反向比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CompareFromExtensions.CompareFrom(System.Int64,System.Int64)">
            <summary>
            数据反向比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CompareFromExtensions.CompareFrom(System.UInt32,System.UInt32)">
            <summary>
            数据反向比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CompareFromExtensions.CompareFrom(System.Int32,System.Int32)">
            <summary>
            数据反向比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.LeftArraySort">
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.Sort(AutoCSer.LeftArray{System.UInt64})">
            <summary>
            数组排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryIndexOfLess(AutoCSer.LeftArray{System.UInt64},System.UInt64)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>匹配值之前的位置</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryIndexOf(AutoCSer.LeftArray{System.UInt64},System.UInt64)">
            <summary>
            二分查找第一个匹配值位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryRemove(AutoCSer.LeftArray{System.UInt64},System.UInt64)">
            <summary>
            删除二分查找第一个匹配值并返回删除数据位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>删除数据位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryInsertNew(AutoCSer.LeftArray{System.UInt64},System.UInt64)">
            <summary>
            二分查找添加新数据并返回添加新数据位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">添加新数据</param>
            <returns>添加新数据位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.QuickSort(AutoCSer.LeftArray{System.UInt64})">
            <summary>
            数组排序
            </summary>
            <param name="array">长度大于 1</param>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.QuickSort(AutoCSer.LeftArray{System.Int32})">
            <summary>
            数组排序
            </summary>
            <param name="array">长度大于 1</param>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.Sort(AutoCSer.LeftArray{System.Int64})">
            <summary>
            数组排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.Sort(AutoCSer.LeftArray{System.UInt32})">
            <summary>
            数组排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.Sort(AutoCSer.LeftArray{System.Int32})">
            <summary>
            数组排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.QuickSort(AutoCSer.LeftArray{System.Int64})">
            <summary>
            数组排序
            </summary>
            <param name="array">长度大于 1</param>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.QuickSort(AutoCSer.LeftArray{System.UInt32})">
            <summary>
            数组排序
            </summary>
            <param name="array">长度大于 1</param>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryIndexOfLess(AutoCSer.LeftArray{System.Int64},System.Int64)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>匹配值之前的位置</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryIndexOf(AutoCSer.LeftArray{System.Int64},System.Int64)">
            <summary>
            二分查找第一个匹配值位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryRemove(AutoCSer.LeftArray{System.Int64},System.Int64)">
            <summary>
            删除二分查找第一个匹配值并返回删除数据位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>删除数据位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryInsertNew(AutoCSer.LeftArray{System.Int64},System.Int64)">
            <summary>
            二分查找添加新数据并返回添加新数据位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">添加新数据</param>
            <returns>添加新数据位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryIndexOfLess(AutoCSer.LeftArray{System.UInt32},System.UInt32)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>匹配值之前的位置</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryIndexOf(AutoCSer.LeftArray{System.UInt32},System.UInt32)">
            <summary>
            二分查找第一个匹配值位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryRemove(AutoCSer.LeftArray{System.UInt32},System.UInt32)">
            <summary>
            删除二分查找第一个匹配值并返回删除数据位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>删除数据位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryInsertNew(AutoCSer.LeftArray{System.UInt32},System.UInt32)">
            <summary>
            二分查找添加新数据并返回添加新数据位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">添加新数据</param>
            <returns>添加新数据位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryIndexOfLess(AutoCSer.LeftArray{System.Int32},System.Int32)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>匹配值之前的位置</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryIndexOf(AutoCSer.LeftArray{System.Int32},System.Int32)">
            <summary>
            二分查找第一个匹配值位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryRemove(AutoCSer.LeftArray{System.Int32},System.Int32)">
            <summary>
            删除二分查找第一个匹配值并返回删除数据位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">匹配值</param>
            <returns>删除数据位置，失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.LeftArraySort.BinaryInsertNew(AutoCSer.LeftArray{System.Int32},System.Int32)">
            <summary>
            二分查找添加新数据并返回添加新数据位置
            </summary>
            <param name="array">数组处于已排序状态</param>
            <param name="value">添加新数据</param>
            <returns>添加新数据位置，失败返回-1</returns>
        </member>
        <member name="T:AutoCSer.Extensions.ArraySort">
            <summary>
            数组扩展
            </summary>
            <summary>
            数组扩展
            </summary>
            <summary>
            数组扩展
            </summary>
            <summary>
            数组扩展
            </summary>
            <summary>
            数组扩展
            </summary>
            <summary>
            数组扩展
            </summary>
            <summary>
            数组扩展
            </summary>
            <summary>
            数组扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ArraySort.Sort(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Extensions.ArraySort.QuickSort(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">长度大于 1</param>
        </member>
        <member name="M:AutoCSer.Extensions.ArraySort.QuickSort(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">长度大于 1</param>
        </member>
        <member name="M:AutoCSer.Extensions.ArraySort.Sort(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Extensions.ArraySort.Sort(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Extensions.ArraySort.Sort(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Extensions.ArraySort.QuickSort(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">长度大于 1</param>
        </member>
        <member name="M:AutoCSer.Extensions.ArraySort.QuickSort(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">长度大于 1</param>
        </member>
        <member name="T:AutoCSer.Extensions.CombinationTemplateConfig">
            <summary>
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.CombinationTemplateConfig.TemplatePath">
            <summary>
            自定义模板相对项目路径
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Culture.Chinese">
            <summary>
            扩展中文配置
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.Chinese.GetStreamPersistenceLoaderDecodeFailed(System.String,System.Int64)">
            <summary>
            日志流持久化文件数据解码失败
            </summary>
            <param name="fileName">持久化文件名称</param>
            <param name="position">错误数据位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.Chinese.GetStreamPersistenceLoaderDataSizeError(System.String,System.Int64)">
            <summary>
            日志流持久化文件数据块长度错误
            </summary>
            <param name="fileName">持久化文件名称</param>
            <param name="position">错误数据位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.Chinese.GetStreamPersistenceLoaderHeaderSizeError(System.String,System.Int32,System.Int32)">
            <summary>
            日志流持久化文件头部数据不足
            </summary>
            <param name="fileName">持久化文件名称</param>
            <param name="unreadSize">文件未读取数据字节数量</param>
            <param name="fileHeadSize">需要读取的文件头部字节数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.Chinese.GetXmlNodeTypeNotMatch(AutoCSer.XmlNodeTypeEnum,AutoCSer.XmlNodeTypeEnum)">
            <summary>
            XML 节点类型不匹配
            </summary>
            <param name="type">XML 节点类型</param>
            <param name="matchType">XML 节点需要的匹配节点类型</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Culture.Chinese.Default">
            <summary>
            默认扩展中文配置
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Culture.Configuration">
            <summary>
            扩展系统语言文化配置
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.Configuration.GetStreamPersistenceLoaderDecodeFailed(System.String,System.Int64)">
            <summary>
            日志流持久化文件数据解码失败
            </summary>
            <param name="fileName">持久化文件名称</param>
            <param name="position">错误数据位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.Configuration.GetStreamPersistenceLoaderDataSizeError(System.String,System.Int64)">
            <summary>
            日志流持久化文件数据块长度错误
            </summary>
            <param name="fileName">持久化文件名称</param>
            <param name="position">错误数据位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.Configuration.GetStreamPersistenceLoaderHeaderSizeError(System.String,System.Int32,System.Int32)">
            <summary>
            日志流持久化文件头部数据不足
            </summary>
            <param name="fileName">持久化文件名称</param>
            <param name="unreadSize">文件未读取数据字节数量</param>
            <param name="fileHeadSize">需要读取的文件头部字节数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.Configuration.GetXmlNodeTypeNotMatch(AutoCSer.XmlNodeTypeEnum,AutoCSer.XmlNodeTypeEnum)">
            <summary>
            XML 节点类型不匹配
            </summary>
            <param name="type">XML 节点类型</param>
            <param name="matchType">XML 节点需要的匹配节点类型</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Culture.Configuration.Default">
            <summary>
            默认扩展系统语言文化配置
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Culture.English">
            <summary>
            Extended English configuration
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.English.GetStreamPersistenceLoaderDecodeFailed(System.String,System.Int64)">
            <summary>
            Description Failed to decode the log stream persistence file
            </summary>
            <param name="fileName">Persistent file name</param>
            <param name="position">Error data location</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.English.GetStreamPersistenceLoaderDataSizeError(System.String,System.Int64)">
            <summary>
            The length of the log stream persistent file data block is incorrect
            </summary>
            <param name="fileName">Persistent file name</param>
            <param name="position">Error data location</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.English.GetStreamPersistenceLoaderHeaderSizeError(System.String,System.Int32,System.Int32)">
            <summary>
            The header data of the log stream persistent file is insufficient
            </summary>
            <param name="fileName">Persistent file name</param>
            <param name="unreadSize">Number of unread bytes of data from the file</param>
            <param name="fileHeadSize">The number of file header bytes to be read</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Culture.English.GetXmlNodeTypeNotMatch(AutoCSer.XmlNodeTypeEnum,AutoCSer.XmlNodeTypeEnum)">
            <summary>
            The XML node type does not match
            </summary>
            <param name="type">XML node type</param>
            <param name="matchType">XML node required matching node type</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Culture.English.Default">
            <summary>
            Default Extended English configuration
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Date">
            <summary>
            日期相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Date.TimestampPerMillisecond">
            <summary>
            每毫秒时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Date.MillisecondTimestampDifferencePerSecond">
            <summary>
            每秒 毫秒时间戳误差
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Date.timestampToMilliseconds">
            <summary>
            时间戳转毫秒数乘数
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Date.GetMillisecondsByTimestamp(System.Int64)">
            <summary>
            时间戳转毫秒数
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.DictionaryCreator">
            <summary>
            创建字典
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateOnly``2">
            <summary>
            创建字典
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="VT">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateAny``2(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="VT">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateChar``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateLong``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateLong``1(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateULong``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateHashSubString``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateHashSubString``1(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.Extensions.DictionaryCreator.CreateEndPoint``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.Extensions.FileInfoExtension">
            <summary>
            文件信息相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.FileInfoExtension.RefreshExists(System.IO.FileInfo)">
            <summary>
            刷新文件信息状态并返回文件是否存在状态
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.FileInfoExtension.RefreshLastWriteTimeUtc(System.IO.FileInfo)">
            <summary>
            刷新文件信息状态并返回文件最后修改时间
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.EnumerableExtension">
            <summary>
            集合相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.EnumerableExtension.getLeftArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="values">数据集合</param>
            <param name="capacity">初始空间大小</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.EnumerableExtension.getListArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="values">数据集合</param>
            <param name="capacity">初始空间大小</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extensions.EnumerableExtension.enumerableTask``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            并发任务，用于替代 Parallel.ForEachAsync
            </summary>
            <param name="source">获取任务参数集合</param>
            <param name="taskCount">最大并发任务数量，最小值为 1</param>
            <param name="getTask">获取任务委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.EnumerableExtension.enumerableValueTask``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.ValueTask})">
            <summary>
            并发任务，用于替代 Parallel.ForEachAsync
            </summary>
            <param name="source">获取任务参数集合</param>
            <param name="taskCount">最大并发任务数量，最小值为 1</param>
            <param name="getTask">获取任务委托</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.IntegerExtension">
            <summary>
            数值相关扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.IntegerExtension.bitCount(System.UInt64)">
            <summary>
            获取二进制1位的个数
            </summary>
            <param name="value">数据</param>
            <returns>二进制1位的个数</returns>
        </member>
        <member name="M:AutoCSer.Extensions.IntegerExtension.bits(System.UInt64)">
            <summary>
            获取有效位长度
            </summary>
            <param name="value">数据</param>
            <returns>有效位长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.IntegerExtension.endBits(System.UInt32)">
            <summary>
            获取最后二进制0位的长度
            </summary>
            <param name="value">数据</param>
            <returns>最后二进制0位的长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.IntegerExtension.endBits(System.UInt64)">
            <summary>
            获取最后二进制0位的长度
            </summary>
            <param name="value">数据</param>
            <returns>最后二进制0位的长度</returns>
        </member>
        <member name="M:AutoCSer.Extensions.IntegerExtension.checkDivMul(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            32b 除法转位移乘法误差检查
            </summary>
            <param name="divisor">除数，必须大于 0</param>
            <param name="shiftBit">位移数量</param>
            <param name="maxValue">最大被除数</param>
            <returns>误差是否满足要求</returns>
        </member>
        <member name="M:AutoCSer.Extensions.IntegerExtension.checkDivMul(System.UInt16,System.Int32,System.UInt16)">
            <summary>
            16b 除法转位移乘法误差检查
            </summary>
            <param name="divisor">除数，必须大于 0</param>
            <param name="shiftBit">位移数量</param>
            <param name="maxValue">最大被除数</param>
            <returns>误差是否满足要求</returns>
        </member>
        <member name="T:AutoCSer.Extensions.SemaphoreSlimLock">
            <summary>
            异步锁扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.SemaphoreSlimLock.Reentrant(AutoCSer.Threading.SemaphoreSlimLock)">
            <summary>
            异步锁重入计数，第一次（最外层）调用该方法的调用点为当前异步可重入锁的异步上下文，对于上层异步调用无效（非线程安全，不支持多线程并发操作同一个异步上下文）
            </summary>
            <param name="semaphoreSlimLock"></param>
        </member>
        <member name="M:AutoCSer.Extensions.SemaphoreSlimLock.ReentrantExit(AutoCSer.Threading.SemaphoreSlimLock)">
            <summary>
            释放异步锁重入计数（非线程安全，不支持多线程并发操作同一个异步上下文）
            </summary>
            <param name="semaphoreSlimLock"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.SubStringExtension">
            <summary>
            字符串相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.SubStringExtension.LowerEquals(AutoCSer.SubString,System.String)">
            <summary>
            字符子串转小写字母是否匹配右侧小写字母字符串
            </summary>
            <param name="value"></param>
            <param name="lowerString">小写字母字符串，长度不为 0</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.SubStringExtension.IndexLower(AutoCSer.SubString,System.Char)">
            <summary>
            字符子串转小写字母查找第一个匹配小写字母位置
            </summary>
            <param name="value">长度不为 0</param>
            <param name="lowerChar">小写字母</param>
            <returns>相对于原字符串的位置，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.Extensions.SubStringExtension.split(System.String,System.Char)">
            <summary>
            分割字符串
            </summary>
            <param name="text">待分割字符串</param>
            <param name="splitChar">分割符</param>
            <returns>字符子串集合</returns>
        </member>
        <member name="M:AutoCSer.Extensions.SubStringExtension.CompareTo(AutoCSer.SubString,AutoCSer.SubString@)">
            <summary>
            比较字符串大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.SynchronizationContextExtension">
            <summary>
            同步上下文扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.SynchronizationContextExtension.Post(System.Threading.SynchronizationContext,System.Action,System.Object)">
            <summary>
            同步上下文调用
            </summary>
            <param name="context"></param>
            <param name="call"></param>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.Extensions.SynchronizationContextExtension.Post``1(System.Threading.SynchronizationContext,System.Action{``0},``0,System.Object)">
            <summary>
            同步上下文调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="call"></param>
            <param name="parameter"></param>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Extensions.TypeNameExtension">
            <summary>
            类型扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.TypeNameExtension.getTypeFullName(System.Type,AutoCSer.Reflection.TypeNameBuilder@,System.String)">
            <summary>
            获取类型名称
            </summary>
            <param name="type"></param>
            <param name="typeNameBuilder"></param>
            <param name="tempName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.TypeNameExtension.typeFullName(System.Type,AutoCSer.Reflection.TypeNameBuilder@)">
            <summary>
            写入类型名称
            </summary>
            <param name="type"></param>
            <param name="typeNameBuilder"></param>
        </member>
        <member name="M:AutoCSer.Extensions.TypeNameExtension.typeFullName(System.Type,AutoCSer.Reflection.TypeNameBuilder@,System.Type[])">
            <summary>
            写入类型名称
            </summary>
            <param name="type"></param>
            <param name="typeNameBuilder"></param>
            <param name="genericArguments">泛型类型参数集合</param>
        </member>
        <member name="M:AutoCSer.Extensions.TypeNameExtension.GetName(AutoCSer.Reflection.TypeNameBuilder@,System.String,System.Char*)">
            <summary>
            获取类型名称
            </summary>
            <param name="typeNameBuilder"></param>
            <param name="tempName"></param>
            <param name="nameFixed"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Memory.Common">
            <summary>
            内存或字节数组处理
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Common.FillBits(System.Byte*,System.Int32,System.Int32)">
            <summary>
            填充二进制位
            </summary>
            <param name="data">数据起始位置,不能为null</param>
            <param name="start">起始二进制位,不能越界</param>
            <param name="count">二进制位数量,不能越界</param>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Common.GetShortBigEndian(System.Byte*)">
            <summary>
            获取整数
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Common.GetIntBigEndian(System.Byte*)">
            <summary>
            获取整数
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Common.GetLongBigEndian(System.Byte*)">
            <summary>
            获取整数
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Common.GetUShortBigEndian(System.Byte*)">
            <summary>
            获取大端编码 16b 整数
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Common.GetUIntBigEndian(System.Byte[],System.Int32)">
            <summary>
            字节流转32位无符号整数
            </summary>
            <param name="data">字节数组,不能为null</param>
            <param name="startIndex">起始位置</param>
            <returns>无符号整数值</returns>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Common.GetUIntBigEndian(System.Byte*)">
            <summary>
            获取大端编码 32b 整数
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Common.GetULongBigEndian(System.Byte*)">
            <summary>
            获取整数
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Memory.Unmanaged">
            <summary>
            非托管内存
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Memory.Unmanaged.AutoCSerStatic">
            <summary>
            AutoCSer 使用静态内存段，防止碎片化
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Unmanaged.GetXmlBits">
            <summary>
            XML 字符状态位
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Unmanaged.GetHtmlBits">
            <summary>
            HTML 字符状态位
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Memory.Unmanaged.GetRawExpressionBits">
            <summary>
            原始表达式字符状态位
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.BaseGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.BaseGenericType.GetXmlSerializeBaseDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 XML 基类序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.BaseGenericType.XmlDeserializeBaseDelegate">
            <summary>
            XML 基类反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.BaseGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Metadata.BaseGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.BaseGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.BaseGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.BaseGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.BaseGenericType`2.GetXmlSerializeBaseDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 XML 基类序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.BaseGenericType`2.XmlDeserializeBaseDelegate">
            <summary>
            XML 基类反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.CollectionGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.CollectionGenericType.GetXmlSerializeCollectionDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 XML 集合序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.CollectionGenericType.XmlDeserializeCollectionDelegate">
            <summary>
            XML 集合反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.CollectionGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Metadata.CollectionGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.CollectionGenericType.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <param name="interfaceType">ICollection 类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.CollectionGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.CollectionGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.CollectionGenericType`2.GetXmlSerializeCollectionDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 XML 集合序列化委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.CollectionGenericType`2.XmlDeserializeCollectionDelegate">
            <summary>
            XML 集合反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.EnumGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.EnumGenericType.XmlSerializeEnumDelegate">
            <summary>
            获取 XML 序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.EnumGenericType.XmlDeserializeEnumDelegate">
            <summary>
            获取 XML 反序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.EnumGenericType.XmlDeserializeEnumFlagsDelegate">
            <summary>
            获取 XML 反序列化枚举委托
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.EnumGenericType.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Metadata.EnumGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.EnumGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.EnumGenericType`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UT"></typeparam>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.EnumGenericType`2.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.EnumGenericType`2.XmlSerializeEnumDelegate">
            <summary>
            获取 XML 序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.EnumGenericType`2.XmlDeserializeEnumDelegate">
            <summary>
            获取 XML 反序列化枚举委托
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.EnumGenericType`2.XmlDeserializeEnumFlagsDelegate">
            <summary>
            获取 XML 反序列化枚举委托
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.GenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.IsSerializeConstructor">
            <summary>
            判断构造函数是否支持数据反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.GenericType.GetXmlSerializeArrayDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取 XML 序列化数组委托
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlSerializeDelegate">
            <summary>
            XML 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlSerializeNotSupportDelegate">
            <summary>
            XML 自定义序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlSerializeDelegateReference">
            <summary>
            XML 序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlSerializeObjectGenericDelegate">
            <summary>
            XML 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlSerializeStreamObjectDelegate">
            <summary>
            XML 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlSerializeObjectDelegate">
            <summary>
            获取 XML 序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlDeserializeArrayDelegate">
            <summary>
            XML 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlDeserializeLeftArrayDelegate">
            <summary>
            XML 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlDeserializeListArrayDelegate">
            <summary>
            XML 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlDeserializeNotSupportDelegate">
            <summary>
            XML 自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.XmlDeserializeDelegate">
            <summary>
            XML 反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType.InterfaceControllerTaskQueueNodeSetReturn">
            <summary>
            接口队列任务节点设置返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.GenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Metadata.GenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.GenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.GenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.IsSerializeConstructor">
            <summary>
            是否存在默认构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.GenericType`1.GetXmlSerializeArrayDelegate(AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            XML 序列化数组
            </summary>
            <param name="serializeDelegateReference"></param>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlSerializeDelegate">
            <summary>
            XML 自定义序列化引用类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlSerializeNotSupportDelegate">
            <summary>
            XML 自定义序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlSerializeDelegateReference">
            <summary>
            XML 序列化委托循环引用信息
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlSerializeObjectGenericDelegate">
            <summary>
            XML 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlSerializeStreamObjectDelegate">
            <summary>
            XML 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlSerializeObjectDelegate">
            <summary>
            获取 XML 序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlDeserializeArrayDelegate">
            <summary>
            XML 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlDeserializeLeftArrayDelegate">
            <summary>
            XML 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlDeserializeListArrayDelegate">
            <summary>
            XML 反序列化数组
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlDeserializeNotSupportDelegate">
            <summary>
            XML 自定义反序列化不支持类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.XmlDeserializeDelegate">
            <summary>
            XML 反序列化类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType`1.InterfaceControllerTaskQueueNodeSetReturn">
            <summary>
            接口队列任务节点设置返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.GenericType2">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType2.XmlDeserializeKeyValuePairDelegate">
            <summary>
            XML 键值对序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.GenericType2.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Metadata.GenericType2.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.GenericType2.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.GenericType2.Get(System.Type[])">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.GenericType2`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType2`2.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType2`2.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.GenericType2`2.XmlDeserializeKeyValuePairDelegate">
            <summary>
            XML 键值对序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.StructGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.StructGenericType.XmlSerializeNullableDelegate">
            <summary>
            XML 序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.StructGenericType.XmlSerializeIsOutputNullableMethod">
            <summary>
            获取 XML 序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.StructGenericType.XmlDeserializeNullableDelegate">
            <summary>
            XML 反序列化可空类型
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.StructGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extensions.Metadata.StructGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Metadata.StructGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Metadata.StructGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.StructGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.StructGenericType`1.XmlSerializeNullableDelegate">
            <summary>
            XML 序列化可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.StructGenericType`1.XmlSerializeIsOutputNullableMethod">
            <summary>
            获取 XML 序列化函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Metadata.StructGenericType`1.XmlDeserializeNullableDelegate">
            <summary>
            XML 反序列化可空类型
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.Threading.EnumerableValueTask`1">
            <summary>
            并发任务
            </summary>
            <typeparam name="T">获取任务参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableValueTask`1.source">
            <summary>
            获取任务参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableValueTask`1.getTask">
            <summary>
            获取任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableValueTask`1.taskLock">
            <summary>
            任务并发锁
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableValueTask`1.waitLock">
            <summary>
            任务完成等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableValueTask`1.taskCount">
            <summary>
            当前启动任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableValueTask`1.completedCount">
            <summary>
            当前完成任务数量
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Threading.EnumerableValueTask`1.CompletedCount">
            <summary>
            /当前完成任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableValueTask`1.errorCount">
            <summary>
            异常任务数量
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Threading.EnumerableValueTask`1.ErrorCount">
            <summary>
            异常任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableValueTask`1.isCancel">
            <summary>
            是否已经取消任务
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.EnumerableValueTask`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Func{`0,System.Threading.Tasks.ValueTask})">
            <summary>
            并发任务
            </summary>
            <param name="source">获取任务参数集合</param>
            <param name="taskCount">最大并发任务数量</param>
            <param name="getTask">获取任务委托</param>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.EnumerableValueTask`1.Cancel">
            <summary>
            取消任务
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.EnumerableValueTask`1.Start">
            <summary>
            启动任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.EnumerableValueTask`1.run(`0)">
            <summary>
            运行任务
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Threading.EnumerableTask`1">
            <summary>
            并发任务
            </summary>
            <typeparam name="T">获取任务参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableTask`1.source">
            <summary>
            获取任务参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableTask`1.getTask">
            <summary>
            获取任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableTask`1.taskLock">
            <summary>
            任务并发锁
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableTask`1.waitLock">
            <summary>
            任务完成等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableTask`1.taskCount">
            <summary>
            当前启动任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableTask`1.completedCount">
            <summary>
            当前完成任务数量
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Threading.EnumerableTask`1.CompletedCount">
            <summary>
            /当前完成任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableTask`1.errorCount">
            <summary>
            异常任务数量
            </summary>
        </member>
        <member name="P:AutoCSer.Extensions.Threading.EnumerableTask`1.ErrorCount">
            <summary>
            异常任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.EnumerableTask`1.isCancel">
            <summary>
            是否已经取消任务
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.EnumerableTask`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            并发任务
            </summary>
            <param name="source">获取任务参数集合</param>
            <param name="taskCount">最大并发任务数量</param>
            <param name="getTask">获取任务委托</param>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.EnumerableTask`1.Cancel">
            <summary>
            取消任务
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.EnumerableTask`1.Start">
            <summary>
            启动任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.EnumerableTask`1.run(`0)">
            <summary>
            运行任务
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator">
            <summary>
            毫秒ID生成器
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.startTime">
            <summary>
            开始计数时间
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.startTimestamp">
            <summary>
            初始化时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.mask">
            <summary>
            毫秒内计数掩码
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.maxTimestamp">
            <summary>
            当前最大时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.currentIdentity">
            <summary>
            当前ID
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.IdentityLock">
            <summary>
            ID生成访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.timestampCount">
            <summary>
            允许连续时间戳数量
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.bits">
            <summary>
            毫秒内计数 2 进制位数 + 分布式编号 2 进制位数
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.distributedBits">
            <summary>
            分布式编号 2 进制位数
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.#ctor(System.Int64,System.Byte,System.Byte)">
            <summary>
            毫秒ID生成器
            </summary>
            <param name="mask">毫秒内计数掩码</param>
            <param name="bits">毫秒内计数 2 进制位数 + 分布式编号 2 进制位数</param>
            <param name="distributedBits">分布式编号 2 进制位数</param>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.GetTime(System.Int64)">
            <summary>
            根据 ID 获取时间
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.MillisecondIdentityGenerator.GetLocalTime(System.Int64)">
            <summary>
            根据 ID 获取时间
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.Threading.ReentrantSemaphoreSlimLockCount">
            <summary>
            异步锁重入计数
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.ReentrantSemaphoreSlimLockCount.semaphoreSlim">
            <summary>
            异步锁
            </summary>
        </member>
        <member name="F:AutoCSer.Extensions.Threading.ReentrantSemaphoreSlimLockCount.count">
            <summary>
            重入计数
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.ReentrantSemaphoreSlimLockCount.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            异步锁重入计数
            </summary>
            <param name="semaphoreSlim"></param>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.ReentrantSemaphoreSlimLockCount.Enter(System.Threading.SemaphoreSlim)">
            <summary>
            申请锁计数
            </summary>
            <param name="semaphoreSlim"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.Threading.ReentrantSemaphoreSlimLockCount.Exit(System.Threading.SemaphoreSlim)">
            <summary>
            释放锁计数
            </summary>
            <param name="semaphoreSlim"></param>
            <returns>-1 表示不匹配</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.ULongQuickRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ULongQuickRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ULongQuickRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongQuickRangeSorterDesc.Sort(System.UInt64*,System.UInt64*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.ULongSortIndex">
            <summary>
            排序索引
            </summary>
            <summary>
            排序索引
            </summary>
            <summary>
            排序索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongSortIndex.SortDesc(AutoCSer.Algorithm.ULongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="F:AutoCSer.Algorithm.ULongSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ULongSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongSortIndex.Set(System.UInt64,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongSortIndex.Sort(AutoCSer.Algorithm.ULongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.UnsafeSortArray">
            <summary>
            排序数组操作
            </summary>
            <summary>
            排序数组操作
            </summary>
            <summary>
            排序数组操作
            </summary>
            <summary>
            排序数组操作
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.UnsafeSortArray.BinaryIndexOfLess(System.UInt64*,System.Int32,System.UInt64)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <param name="start">起始位置</param>
            <param name="count">查找数据数量，大于 0</param>
            <param name="value">匹配值</param>
            <returns>匹配值之前的位置</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.UnsafeSortArray.BinaryIndexOfLess(System.Int64*,System.Int32,System.Int64)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <param name="start">起始位置</param>
            <param name="count">查找数据数量，大于 0</param>
            <param name="value">匹配值</param>
            <returns>匹配值之前的位置</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.UnsafeSortArray.BinaryIndexOfLess(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <param name="start">起始位置</param>
            <param name="count">查找数据数量，大于 0</param>
            <param name="value">匹配值</param>
            <returns>匹配值之前的位置</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.UnsafeSortArray.BinaryIndexOfLess(System.Int32*,System.Int32,System.Int32)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <param name="start">起始位置</param>
            <param name="count">查找数据数量，大于 0</param>
            <param name="value">匹配值</param>
            <returns>匹配值之前的位置</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.UnsafeQuickSort">
            <summary>
            指针快速排序
            </summary>
            <summary>
            指针快速排序
            </summary>
            <summary>
            指针快速排序
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.UnsafeQuickSort.SortULong(System.Byte*,System.Byte*)">
            <summary>
            快速排序
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置 - sizeof(ulong)</param>
        </member>
        <member name="M:AutoCSer.Algorithm.UnsafeQuickSort.SortLong(System.Byte*,System.Byte*)">
            <summary>
            快速排序
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置 - sizeof(long)</param>
        </member>
        <member name="M:AutoCSer.Algorithm.UnsafeQuickSort.SortUInt(System.Byte*,System.Byte*)">
            <summary>
            快速排序
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置 - sizeof(uint)</param>
        </member>
        <member name="T:AutoCSer.Algorithm.ModMultiplier">
            <summary>
            整数取余，可用于哈希表操作
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ModMultiplier.multiplier">
            <summary>
            取余转位移乘法乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ModMultiplier.divisor">
            <summary>
            取余的除数
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.ModMultiplier.#ctor(System.Int32)">
            <summary>
            整数取余
            </summary>
            <param name="divisor">取余的除数，必须大于 0</param>
        </member>
        <member name="M:AutoCSer.Algorithm.ModMultiplier.GetMod(System.UInt32)">
            <summary>
            取余
            </summary>
            <param name="value">被除数</param>
            <returns>模数（余数）</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.RadixSort">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.RadixSort.SortSize32">
            <summary>
            32B 基数排序数据量
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.RadixSort.SortSize64">
            <summary>
            64B 基数排序数据量
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sort(System.UInt32*,System.UInt32*,System.UInt32*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sort(System.Int32*,System.Int32*,System.UInt32*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sort(System.UInt64*,System.UInt64*,System.UInt64*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sort(System.Int64*,System.Int64*,System.UInt64*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="T:AutoCSer.Algorithm.ULongQuickRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ULongQuickRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ULongQuickRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongQuickRangeSorter.Sort(System.UInt64*,System.UInt64*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.LongQuickRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.LongQuickRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.LongQuickRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.LongQuickRangeSorterDesc.Sort(System.Int64*,System.Int64*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.LongQuickRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.LongQuickRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.LongQuickRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.LongQuickRangeSorter.Sort(System.Int64*,System.Int64*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.UIntQuickRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UIntQuickRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UIntQuickRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntQuickRangeSorterDesc.Sort(System.UInt32*,System.UInt32*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.UIntQuickRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UIntQuickRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UIntQuickRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntQuickRangeSorter.Sort(System.UInt32*,System.UInt32*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.IntQuickRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntQuickRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntQuickRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.IntQuickRangeSorterDesc.Sort(System.Int32*,System.Int32*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.IntQuickRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntQuickRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntQuickRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.IntQuickRangeSorter.Sort(System.Int32*,System.Int32*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.LongSortIndex">
            <summary>
            排序索引
            </summary>
            <summary>
            排序索引
            </summary>
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.LongSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.LongSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.LongSortIndex.Set(System.Int64,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.LongSortIndex.SortDesc(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.LongSortIndex.Sort(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.UIntSortIndex">
            <summary>
            排序索引
            </summary>
            <summary>
            排序索引
            </summary>
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UIntSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UIntSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntSortIndex.Set(System.UInt32,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntSortIndex.SortDesc(AutoCSer.Algorithm.UIntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntSortIndex.Sort(AutoCSer.Algorithm.UIntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="T:AutoCSer.Algorithm.IntSortIndex">
            <summary>
            排序索引
            </summary>
            <summary>
            排序索引
            </summary>
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.IntSortIndex.Set(System.Int32,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.IntSortIndex.SortDesc(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.IntSortIndex.Sort(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="T:AutoCSer.ArrayHeap`2">
            <summary>
            数组模拟最小堆
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="VT">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ArrayHeap`2.defaultArrayLength">
            <summary>
            默认数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.ArrayHeap`2.Array">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="F:AutoCSer.ArrayHeap`2.Heap">
            <summary>
            最小堆索引
            </summary>
        </member>
        <member name="F:AutoCSer.ArrayHeap`2.isStaticUnmanaged">
            <summary>
            是否固定内存申请
            </summary>
        </member>
        <member name="P:AutoCSer.ArrayHeap`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.#ctor">
            <summary>
            数组模拟最小堆
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.#ctor(System.Boolean)">
            <summary>
            数组模拟最小堆
            </summary>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.Finalize">
            <summary>
             析构释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.Push(`0,`1@)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.create">
            <summary>
            重建数据
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.getPushIndex(`0,System.Int32)">
            <summary>
            获取添加数据位置
            </summary>
            <param name="key"></param>
            <param name="heapIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.RemoveTop">
            <summary>
            删除堆顶数据
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.reset(System.Int32*)">
            <summary>
            初始化索引
            </summary>
            <param name="heapFixed"></param>
        </member>
        <member name="T:AutoCSer.BinarySerializeKeyValue`2">
            <summary>
            键值对（用于二进制序列化屏蔽引用操作）
            </summary>
            <typeparam name="KT">键类型</typeparam>
            <typeparam name="VT">值类型</typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerializeKeyValue`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerializeKeyValue`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerializeKeyValue`2.#ctor(`0,`1)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.BinarySerializeKeyValue`2.Set(`0,`1)">
            <summary>
            重置键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="T:AutoCSer.Breakpoint">
            <summary>
            测试断点
            </summary>
        </member>
        <member name="M:AutoCSer.Breakpoint.ConsoleWriteQueue(System.String,System.String,System.String,System.Int32)">
            <summary>
            测试断点信息添加到输出队列
            </summary>
            <param name="message">断点信息</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Breakpoint.ConsoleWriteQueue(AutoCSer.Net.CommandClientReturnValue,System.String,System.String,System.Int32)">
            <summary>
            返回值状态非成功则添加测试断点信息
            </summary>
            <param name="returnValue">返回值</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>返回值状态是否成功</returns>
        </member>
        <member name="M:AutoCSer.Breakpoint.ConsoleWriteQueue``1(AutoCSer.Net.CommandClientReturnValue{``0},System.String,System.String,System.Int32)">
            <summary>
            返回值状态非成功则添加测试断点信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnValue">返回值</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>返回值状态是否成功</returns>
        </member>
        <member name="M:AutoCSer.Breakpoint.ReturnFalse(System.String,System.String,System.Int32)">
            <summary>
            添加测试断点信息并返回 false
            </summary>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <returns>返回值状态是否成功</returns>
        </member>
        <member name="T:AutoCSer.Diagnostics.ProcessInfo">
            <summary>
            进程启动信息
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.DefaultSwitchDirectorySuffixName">
            <summary>
            默认切换服务目录后缀名称
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.FileName">
            <summary>
            运行文件
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.Arguments">
            <summary>
            命令行参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.WorkingDirectory">
            <summary>
            工作目录
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.WindowStyle">
            <summary>
            进程启动时要使用的窗口状态
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.UseShellExecute">
            <summary>
            是否使用操作系统外壳启动进程
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.IsArgumentArray">
            <summary>
            命令行参数是否 Main 函数传参数组
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.IsErrorDialog">
            <summary>
            是否显示错误弹窗
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessInfo.isCreateWindow">
            <summary>
            是否在新窗口中启动进程
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.#ctor">
            <summary>
            进程启动信息
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.#ctor(AutoCSer.Diagnostics.ProcessInfo,System.Diagnostics.Process)">
            <summary>
            进程启动信息
            </summary>
            <param name="info"></param>
            <param name="process"></param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.#ctor(System.Diagnostics.Process,System.String[])">
            <summary>
            进程启动信息
            </summary>
            <param name="process"></param>
            <param name="arguments">Main 传参数组</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.#ctor(System.IO.FileInfo,System.String[],System.Diagnostics.Process)">
            <summary>
            进程启动信息
            </summary>
            <param name="switchFile">切换进程启动文件信息</param>
            <param name="arguments">Main 传参数组</param>
            <param name="process"></param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.#ctor(System.String,System.String[],System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            进程启动信息
            </summary>
            <param name="fileName">运行文件</param>
            <param name="arguments">命令行参数集合</param>
            <param name="workingDirectory">工作目录</param>
            <param name="windowStyle">进程启动时要使用的窗口状态</param>
            <param name="useShellExecute">是否使用操作系统外壳启动进程</param>
            <param name="isErrorDialog">是否显示错误弹窗</param>
            <param name="isCreateWindow">是否在新窗口中启动进程</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.start">
            <summary>
            启动新进程
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.Start">
            <summary>
            启动新进程
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.StartAsync">
            <summary>
            启动新进程
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessInfo.GetCurrentProcessFileName">
            <summary>
            获取当前进程执行文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Diagnostics.ServerTimestamp">
            <summary>
            服务端时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ServerTimestamp.Time">
            <summary>
            获取时间戳的服务端时间
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ServerTimestamp.Timestamp">
            <summary>
            获取服务端时间的时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ServerTimestamp.TimestampPerSecond">
            <summary>
            每秒始终周期数量
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ServerTimestamp.#ctor(System.Double)">
            <summary>
            服务端时间戳
            </summary>
            <param name="timestampPerSecond">每秒始终周期数量</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ServerTimestamp.#ctor(AutoCSer.Diagnostics.ServerTimestamp)">
            <summary>
            服务端时间戳
            </summary>
            <param name="timestamp">获取服务端时间的时间戳</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ServerTimestamp.UtcToLocalTime">
            <summary>
            UTC 时间转本地时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ServerTimestamp.GetTime(System.Int64)">
            <summary>
            获取服务端时间
            </summary>
            <param name="timestamp">服务端时间戳</param>
            <returns>服务端时间</returns>
        </member>
        <member name="T:AutoCSer.ExceptionRepeat">
            <summary>
            异常信息重复判断
            </summary>
        </member>
        <member name="F:AutoCSer.ExceptionRepeat.message">
            <summary>
            异常提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.ExceptionRepeat.stackTrace">
            <summary>
            异常调用栈
            </summary>
        </member>
        <member name="M:AutoCSer.ExceptionRepeat.IsRepeat(System.Exception)">
            <summary>
            判断异常信息是否和上一次重复
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Expression.ConstantTypeEnum">
            <summary>
            常量类型
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ConstantTypeEnum.None">
            <summary>
            非常量
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ConstantTypeEnum.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ConstantTypeEnum.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="T:AutoCSer.Expression.ContentNode">
            <summary>
            包含内容的取值表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ContentNode.Content">
            <summary>
            节点内容字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Expression.ContentNode.#ctor(AutoCSer.Expression.ValueTypeEnum,AutoCSer.SubString,AutoCSer.Expression.ValueNode,System.Byte)">
            <summary>
            包含内容的取值表达式节点
            </summary>
            <param name="valueType">取值类型</param>
            <param name="content">节点内容字符串</param>
            <param name="next">下一个节点</param>
            <param name="memberDepth">成员回溯深度</param>
        </member>
        <member name="T:AutoCSer.Expression.Builder">
            <summary>
            创建表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.DefaultCheckDepth">
            <summary>
            默认最大解析深度
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.bits">
            <summary>
            字符状态位
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.expressionString">
            <summary>
            表达式所在字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.expressionFixed">
            <summary>
            表达式所在字符串的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.start">
            <summary>
            解析字符串开始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.end">
            <summary>
            解析字符结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.currentStart">
            <summary>
            当前解析内容开始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.current">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.depth">
            <summary>
            检查解析深度
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.isClient">
            <summary>
            是否支持客户端成员 # / $ 索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.Expression">
            <summary>
            表达式，失败为 null
            </summary>
        </member>
        <member name="P:AutoCSer.Expression.Builder.Index">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="M:AutoCSer.Expression.Builder.#ctor(AutoCSer.SubString@,System.Boolean)">
            <summary>
            创建表达式
            </summary>
            <param name="expression">表达式字符串</param>
            <param name="isClient">是否支持客户端成员 # / $ 索引位置</param>
        </member>
        <member name="M:AutoCSer.Expression.Builder.value">
            <summary>
            取值解析
            </summary>
            <returns>null 表示失败</returns>
        </member>
        <member name="M:AutoCSer.Expression.Builder.member(System.Int32)">
            <summary>
            成员解析
            </summary>
            <param name="memberDepth">成员回溯深度</param>
            <returns>null 表示失败</returns>
        </member>
        <member name="M:AutoCSer.Expression.Builder.memberNext(AutoCSer.Expression.ConstantTypeEnum)">
            <summary>
            成员后续解析，调用者需要检查解析深度
            </summary>
            <param name="constantType"></param>
            <returns>null 表示失败，ValueExpression.Null 表示返回 null</returns>
        </member>
        <member name="M:AutoCSer.Expression.Builder.callNext(AutoCSer.Expression.CallNode)">
            <summary>
            方法调用后续解析
            </summary>
            <param name="call"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Expression.Builder.index(AutoCSer.Expression.ValueTypeEnum)">
            <summary>
            索引调用解析
            </summary>
            <param name="valueType"></param>
            <returns>null 表示失败</returns>
        </member>
        <member name="M:AutoCSer.Expression.Builder.signed">
            <summary>
            带符号数解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Expression.Builder.getFloat(AutoCSer.Expression.ValueTypeEnum)">
            <summary>
            小数点开头的浮点数解析
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Expression.Builder.number(System.Char,System.Boolean)">
            <summary>
            数字解析
            </summary>
            <param name="code"></param>
            <param name="isSigned"></param>
            <returns>null 表示失败</returns>
        </member>
        <member name="M:AutoCSer.Expression.Builder.numberNext(AutoCSer.Expression.ValueTypeEnum)">
            <summary>
            数字后续解析
            </summary>
            <param name="valueType"></param>
            <returns>null 表示失败</returns>
        </member>
        <member name="F:AutoCSer.Expression.Builder.memberNameStartBit">
            <summary>
            成员名称开始符号
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.memberNameBit">
            <summary>
            成员名称符号
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.hexBit">
            <summary>
            十六进制字符
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.Builder.Bits">
            <summary>
            字符状态位
            </summary>
        </member>
        <member name="T:AutoCSer.Expression.CallNode">
            <summary>
            方法调用表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.CallNode.Parameters">
            <summary>
            参数节点集合
            </summary>
        </member>
        <member name="M:AutoCSer.Expression.CallNode.#ctor(AutoCSer.Expression.ValueTypeEnum,AutoCSer.LeftArray{AutoCSer.Expression.ValueNode}@)">
            <summary>
            方法调用表达式节点
            </summary>
            <param name="valueType">取值类型</param>
            <param name="parameters">参数节点集合</param>
        </member>
        <member name="T:AutoCSer.Expression.ValueTypeEnum">
            <summary>
            表达式取值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Member">
            <summary>
            成员
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Call">
            <summary>
            方法调用
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.NextMember">
            <summary>
            下一个成员 .
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.IfNotNullMember">
            <summary>
            非 null 成员 ?.
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Client">
            <summary>
            客户端成员 # / $
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.ClientEncode">
            <summary>
            客户端编码调用 $ToHtml()
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.String">
            <summary>
            字符串 "
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Decimalism">
            <summary>
            十进制整数
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Hex">
            <summary>
            十六进制整数 0x
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.SignedDecimalism">
            <summary>
            带符号十进制整数
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.SignedHex">
            <summary>
            带符号十六进制整数 0x
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Decimal">
            <summary>
            小数 .
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.SignedDecimal">
            <summary>
            带符号小数 .
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.True">
            <summary>
            逻辑真值 true
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.False">
            <summary>
            逻辑假值 false
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.LessOrEqual">
            <summary>
            小于等于 
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.NotEqual">
            <summary>
            不等于 !=
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Equal">
            <summary>
            等于 ==
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.GreaterOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.And">
            <summary>
            逻辑与
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Or">
            <summary>
            逻辑或 ||
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Not">
            <summary>
            取反 !
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Add">
            <summary>
            加上 +
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Subtract">
            <summary>
            减去 -
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Multiply">
            <summary>
            乘以 *
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Divide">
            <summary>
            除以 /
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Mod">
            <summary>
            取余数 %
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.LeftShift">
            <summary>
            左移
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.RightShift">
            <summary>
            右移
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.BitAnd">
            <summary>
            二进制位与
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.BitOr">
            <summary>
            二进制或 |
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Xor">
            <summary>
            二进制亦或 ^
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.IfNullThen">
            <summary>
            null 值判定 ??
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Parenthesis">
            <summary>
            小括号 (
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.IfElse">
            <summary>
            三元取值 ?:
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.Index">
            <summary>
            索引调用
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueTypeEnum.IfNotNullIndex">
            <summary>
            非 null 索引 ?[
            </summary>
        </member>
        <member name="T:AutoCSer.Expression.NodeTypeEnum">
            <summary>
            表达式节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.NodeTypeEnum.Value">
            <summary>
            取值
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.NodeTypeEnum.Content">
            <summary>
            内容节点，包括 成员/数字/字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.NodeTypeEnum.Call">
            <summary>
            方法调用
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.NodeTypeEnum.Parenthesis">
            <summary>
            小括号 ()
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.NodeTypeEnum.IfElse">
            <summary>
            三元表达式 ?:
            </summary>
        </member>
        <member name="T:AutoCSer.Expression.IfElseNode">
            <summary>
            三元表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.IfElseNode.Else">
            <summary>
            false 节点
            </summary>
        </member>
        <member name="M:AutoCSer.Expression.IfElseNode.#ctor(AutoCSer.Expression.ValueNode,AutoCSer.Expression.ValueNode)">
            <summary>
            三元表达式节点
            </summary>
            <param name="ifValue">true 节点</param>
            <param name="elseValue">false 节点</param>
        </member>
        <member name="T:AutoCSer.Expression.ParenthesisNode">
            <summary>
            小括号表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ParenthesisNode.Parenthesis">
            <summary>
            括号内节点
            </summary>
        </member>
        <member name="M:AutoCSer.Expression.ParenthesisNode.#ctor(AutoCSer.Expression.ValueNode,AutoCSer.Expression.ValueNode)">
            <summary>
            小括号表达式节点
            </summary>
            <param name="parenthesis">括号内节点</param>
            <param name="next">下一个节点</param>
        </member>
        <member name="T:AutoCSer.Expression.ValueNode">
            <summary>
            取值表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueNode.nodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueNode.ValueType">
            <summary>
            取值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueNode.MemberDepth">
            <summary>
            成员回溯深度
            </summary>
        </member>
        <member name="F:AutoCSer.Expression.ValueNode.Next">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Expression.ValueNode.#ctor">
            <summary>
            空表达式节点
            </summary>
        </member>
        <member name="M:AutoCSer.Expression.ValueNode.#ctor(AutoCSer.Expression.ValueTypeEnum,AutoCSer.Expression.ValueNode,System.Byte)">
            <summary>
            取值表达式节点
            </summary>
            <param name="valueType">取值类型</param>
            <param name="next">下一个节点</param>
            <param name="memberDepth">成员回溯深度</param>
        </member>
        <member name="M:AutoCSer.Expression.ValueNode.#ctor(AutoCSer.Expression.NodeTypeEnum,AutoCSer.Expression.ValueTypeEnum,AutoCSer.Expression.ValueNode,System.Byte)">
            <summary>
            取值表达式节点
            </summary>
            <param name="nodeType">节点类型</param>
            <param name="valueType">取值类型</param>
            <param name="next">下一个节点</param>
            <param name="memberDepth">成员回溯深度</param>
        </member>
        <member name="M:AutoCSer.Expression.ValueNode.CheckNext">
            <summary>
            强制检查是否存在下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Expression.ValueNode.CheckNextNull">
            <summary>
            检查下一个节点是否合法
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Expression.ValueNode.SetNext(AutoCSer.Expression.ValueNode)">
            <summary>
            设置下一个节点
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Expression.ValueNode.Null">
            <summary>
            空表达式节点
            </summary>
        </member>
        <member name="T:AutoCSer.FragmentHashSet256`1">
            <summary>
            256 基分片 哈希表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.FragmentHashSet256`1.hashSets">
            <summary>
            哈希表
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentHashSet256`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.FragmentHashSet256`1.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentHashSet256`1.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentHashSet256`1.ClearArray">
            <summary>
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.FragmentHashSet256`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentHashSet256`1.GetOrCreateHashSet(`0)">
            <summary>
            根据数据获取哈希表，不存在时创建哈希表
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentHashSet256`1.Contains(`0)">
            <summary>
            判断数据是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FragmentHashSet256`1.Remove(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value"></param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.FragmentHashSet256`1.GetArray">
            <summary>
            获取数据集合
            </summary>
            <returns>数据集合</returns>
        </member>
        <member name="T:AutoCSer.HashBytesFragmentDictionary256`1">
            <summary>
            256 基分片 HashBytes 字典
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.HashBytesFragmentDictionary256`1.GetIndex(AutoCSer.Memory.HashBytes)">
            <summary>
            获取分片索引
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.HashSubString">
            <summary>
            字符串 HASH
            </summary>
        </member>
        <member name="F:AutoCSer.HashSubString.String">
            <summary>
            字符子串
            </summary>
        </member>
        <member name="F:AutoCSer.HashSubString.HashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:AutoCSer.HashSubString.#ctor(AutoCSer.SubString)">
            <summary>
            字符串 HASH
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashSubString.#ctor(AutoCSer.SubString@)">
            <summary>
            字符串 HASH
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashSubString.op_Implicit(System.String)~AutoCSer.HashSubString">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.HashSubString.op_Implicit(AutoCSer.SubString)~AutoCSer.HashSubString">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.HashSubString.SetEmpty">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.HashSubString.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashSubString.Equals(AutoCSer.HashSubString)">
            <summary>
            判断字符串是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashSubString.Equals(AutoCSer.HashSubString@)">
            <summary>
            判断字符串是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashSubString.Equals(System.Object)">
            <summary>
            判断字符串是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashSubString.Equals(AutoCSer.SubString@)">
            <summary>
            判断字符串是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashSubString.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.HashSubString.Empty">
            <summary>
            长度为 0 的字符串
            </summary>
        </member>
        <member name="T:AutoCSer.Html.RawNodeTypeEnum">
            <summary>
            原始 HTML 节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNodeTypeEnum.StartTag">
            <summary>
            开始标签 {xxx}
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNodeTypeEnum.Tag">
            <summary>
            自回合标签 {xxx/}
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNodeTypeEnum.Html">
            <summary>
            原始 HTML 代码段
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNodeTypeEnum.Note">
            <summary>
            普通注释 {!--} 或者 {!--xxx--}
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNodeTypeEnum.DataNote">
            <summary>
            文本注释 {![CDATA[xxx]]}
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNodeTypeEnum.NoteTag">
            <summary>
            注释标签 {!xxx}
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNodeTypeEnum.RoundTag">
            <summary>
            回合标签 {/xxx}
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNodeTypeEnum.NullTag">
            <summary>
            空标签 {}
            </summary>
        </member>
        <member name="T:AutoCSer.Html.RawNode">
            <summary>
            原始 HTML 节点，用于简单操作
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNode.range">
            <summary>
            字符串位置
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNode.NodeType">
            <summary>
            HTML 节点类型
            </summary>
        </member>
        <member name="M:AutoCSer.Html.RawNode.#ctor(AutoCSer.Html.RawNodeTypeEnum,System.Int64,System.Int32)">
            <summary>
            原始 HTML 节点
            </summary>
            <param name="nodeType"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:AutoCSer.Html.RawNode.#ctor(AutoCSer.Html.RawNodeTypeEnum,System.Int64,System.Int64)">
            <summary>
            原始 HTML 节点
            </summary>
            <param name="nodeType"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:AutoCSer.Html.RawNode.GetTag(System.Char*)">
            <summary>
            获取标签名称位置
            </summary>
            <param name="htmlFixed"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Html.RawNode.GetAttributeName(System.Char*,System.Int32)">
            <summary>
            获取标签属性名称
            </summary>
            <param name="htmlFixed"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Html.RawNode.GetAttributeValue(System.Char*,System.Int32)">
            <summary>
            获取标签属性值
            </summary>
            <param name="htmlFixed"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Html.RawNode.GetRoundTag(System.Char*)">
            <summary>
            获取回合标签名称位置
            </summary>
            <param name="htmlFixed"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Html.RawNode.GetNodes(System.String)">
            <summary>
            解析 HTML 获取原始 HTML 节点集合
            </summary>
            <param name="html">原始 HTML 代码</param>
            <returns>原始 HTML 节点集合</returns>
        </member>
        <member name="F:AutoCSer.Html.RawNode.SpaceBit">
            <summary>
            空隔字符
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNode.SpaceSplitBit">
            <summary>
            空隔+结束字符
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNode.tagNameBit">
            <summary>
            标签名称结束字符
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNode.TagNameSplitBit">
            <summary>
            标签名称开始字符
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNode.AttributeSplitBit">
            <summary>
            标签属性分隔结束字符
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNode.AttributeNameSplitBit">
            <summary>
            标签属性名称结束字符
            </summary>
        </member>
        <member name="F:AutoCSer.Html.RawNode.Bits">
            <summary>
            字符状态位
            </summary>
        </member>
        <member name="T:AutoCSer.IO.StreamPersistenceLoader">
            <summary>
            日志流持久化初始化加载数据
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.buffer">
            <summary>
            数据加载缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.buffer2">
            <summary>
            数据加载缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.loadBufferWait">
            <summary>
            加载数据等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.readStream">
            <summary>
            持久化数据读取文件流
            </summary>
        </member>
        <member name="P:AutoCSer.IO.StreamPersistenceLoader.persistenceFileName">
            <summary>
            日志流持久化文件名称
            </summary>
        </member>
        <member name="P:AutoCSer.IO.StreamPersistenceLoader.readBufferSize">
            <summary>
            读取文件缓冲区大小，最小为 4KB
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.position">
            <summary>
            已经正常读取文件位置
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.unreadSize">
            <summary>
            未读取数据大小
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.loadCount">
            <summary>
            加载请求数量
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.fileHeadSize">
            <summary>
            文件头部字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.blockHeadSize">
            <summary>
            读取数据块头部字节大小，最小为 8 字节
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.readIndex">
            <summary>
            读取数据缓冲区相对起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.endIndex">
            <summary>
            读取数据缓冲区相对结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.bufferSize">
            <summary>
            读取数据缓冲区大小
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.isReadException">
            <summary>
            读取文件数据是否异常
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoader.loadBufferException">
            <summary>
            加载数据异常
            </summary>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.#ctor(System.Int32,System.Int32)">
            <summary>
            日志流持久化初始化加载数据
            </summary>
            <param name="fileHeadSize">文件头部字节大小</param>
            <param name="blockHeadSize">读取数据块头部字节大小，最小为 8 字节</param>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.Load">
            <summary>
            开始加载数据
            </summary>
            <returns>加载请求数量</returns>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.loadHead(AutoCSer.SubArray{System.Byte})">
            <summary>
            加载文件头部数据
            </summary>
            <param name="data">读取文件数据</param>
            <returns>文件头部大小</returns>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.readFile(AutoCSer.IO.StreamPersistenceLoaderBuffer@,AutoCSer.IO.StreamPersistenceLoaderBuffer@)">
            <summary>
            读取文件数据
            </summary>
            <param name="buffer"></param>
            <param name="buffer2"></param>
            <returns>是否结束</returns>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.readFile(AutoCSer.IO.StreamPersistenceLoaderBuffer@,System.Int32)">
            <summary>
            读取指定字节数据
            </summary>
            <param name="buffer"></param>
            <param name="size"></param>
            <returns>是否结束</returns>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.getReadBuffer(AutoCSer.IO.StreamPersistenceLoaderBuffer@)">
            <summary>
            获取读取数据缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.loadBuffer">
            <summary>
            初始化加载数据
            </summary>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.loadBuffer(AutoCSer.SubArray{System.Byte}@,System.Int64)">
            <summary>
            初始化加载数据
            </summary>
            <param name="data"></param>
            <param name="position"></param>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.Decode(AutoCSer.SubArray{System.Byte}@,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            数据解码
            </summary>
            <param name="transferData">编码后的数据</param>
            <param name="outputData">等待写入的原始数据缓冲区</param>
            <returns>是否解码成功</returns>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoader.load(AutoCSer.SubArray{System.Byte},System.Int64)">
            <summary>
            加载数据
            </summary>
            <param name="data">当前加载数据缓冲区</param>
            <param name="position">当前数据所在持久化流中的位置</param>
        </member>
        <member name="T:AutoCSer.IO.StreamPersistenceLoaderBuffer">
            <summary>
            日志流持久化初始化加载数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoaderBuffer.ReadFileWait">
            <summary>
            读取文件缓冲区等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoaderBuffer.LoadDataWait">
            <summary>
            加载数据等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoaderBuffer.ReadBuffer">
            <summary>
            读取数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoaderBuffer.CopyBuffer">
            <summary>
            复制数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoaderBuffer.ReadBufferStart">
            <summary>
            读取数据缓冲区相对开始位置指针
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoaderBuffer.LoadBuffer">
            <summary>
            读取文件结果
            </summary>
        </member>
        <member name="F:AutoCSer.IO.StreamPersistenceLoaderBuffer.LoadBufferPosition">
            <summary>
            读取文件结果的文件流起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoaderBuffer.SetWait">
            <summary>
            等待锁初始化
            </summary>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoaderBuffer.Free">
            <summary>
            释放缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoaderBuffer.SetReadBuffer(System.Int32)">
            <summary>
            设置读取文件结果
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.IO.StreamPersistenceLoaderBuffer.SetCopyBuffer(System.Int32)">
            <summary>
            设置读取文件结果
            </summary>
            <param name="size"></param>
        </member>
        <member name="T:AutoCSer.Memory.BitMap">
            <summary>
            指针位图
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BitMap.Map">
            <summary>
            位图指针
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.BitMap.#ctor(System.Void*)">
            <summary>
            指针位图
            </summary>
            <param name="map">位图指针,不能为null</param>
        </member>
        <member name="M:AutoCSer.Memory.BitMap.#ctor(System.UInt64*,System.Int32)">
            <summary>
            指针位图
            </summary>
            <param name="map">位图指针,不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.BitMap.Set(System.UInt64*,System.Int32)">
            <summary>
            指针位图
            </summary>
            <param name="map">位图指针,不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.BitMap.Get(System.Int32)">
            <summary>
            获取占位状态
            </summary>
            <param name="bit">位值</param>
            <returns>是否已占位</returns>
        </member>
        <member name="M:AutoCSer.Memory.BitMap.Set(System.Int32)">
            <summary>
            设置占位
            </summary>
            <param name="bit">位值</param>
        </member>
        <member name="M:AutoCSer.Memory.BitMap.IsSet(System.Int32)">
            <summary>
            设置占位
            </summary>
            <param name="bit">位值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.BitMap.Set(System.Int32,System.Int32)">
            <summary>
            设置占位段
            </summary>
            <param name="start">位值</param>
            <param name="count">段长</param>
        </member>
        <member name="T:AutoCSer.Memory.BufferCount">
            <summary>
            数据缓冲区计数
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferCount.Buffer">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferCount.Count">
            <summary>
            当前计数
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.BufferCount.#ctor">
            <summary>
            默认空数据缓冲区计数
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.BufferCount.#ctor(AutoCSer.Memory.ByteArrayPool)">
            <summary>
            数据缓冲区计数
            </summary>
            <param name="pool"></param>
        </member>
        <member name="M:AutoCSer.Memory.BufferCount.Free">
            <summary>
            释放计数
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.BufferCount.Null">
            <summary>
            默认空数据缓冲区计数
            </summary>
        </member>
        <member name="T:AutoCSer.Memory.ByteArrayBufferObject">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.ByteArrayBufferObject.Buffer">
            <summary>
            字节数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBufferObject.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            复制数据
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBufferObject.Finalize">
            <summary>
            意外释放（比如网络反序列成功，后续操作失败会导致对象丢失）
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBufferObject.Free">
            <summary>
            释放缓存区
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ByteArrayBufferObject.GetSubArray">
            <summary>
            获取数组字串
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Memory.HashBytes">
            <summary>
            用于 HASH 的字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.HashBytes.SubArray">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.Memory.HashBytes.HashCode">
            <summary>
            HASH 值
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.#ctor(AutoCSer.SubArray{System.Byte},System.UInt64)">
            <summary>
            字节数组 HASH
            </summary>
            <param name="data">字节数组</param>
            <param name="hashCode"></param>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            字节数组 HASH
            </summary>
            <param name="data">字节数组</param>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.op_Implicit(AutoCSer.SubArray{System.Byte})~AutoCSer.Memory.HashBytes">
            <summary>
            HASH字节数组隐式转换
            </summary>
            <param name="data">字节数组</param>
            <returns>HASH字节数组</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.op_Implicit(System.Byte[])~AutoCSer.Memory.HashBytes">
            <summary>
            HASH字节数组隐式转换
            </summary>
            <param name="data">字节数组</param>
            <returns>HASH字节数组</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.op_Implicit(AutoCSer.Memory.HashBytes)~AutoCSer.SubArray{System.Byte}">
            <summary>
            HASH字节数组隐式转换
            </summary>
            <param name="data">HASH字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.Equals(AutoCSer.Memory.HashBytes)">
            <summary>
            比较字节数组是否相等
            </summary>
            <param name="other">用于HASH的字节数组</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.GetHashCode">
            <summary>
            获取 HASH 值
            </summary>
            <returns>HASH 值</returns>
        </member>
        <member name="M:AutoCSer.Memory.HashBytes.Equals(System.Object)">
            <summary>
            比较字节数组是否相等
            </summary>
            <param name="other">字节数组HASH</param>
            <returns>是否相等</returns>
        </member>
        <member name="T:AutoCSer.MessagePack.DataTypeEnum">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Error">
            <summary>
            错误数据
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Null">
            <summary>
            空指针
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Integer">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Float">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Double">
            <summary>
            双精度浮点数
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Memory">
            <summary>
            内存数据块
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Map">
            <summary>
            K-V
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Extension">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.DataTypeEnum.Reserved">
            <summary>
            保留
            </summary>
        </member>
        <member name="T:AutoCSer.MessagePack.PointerNode">
            <summary>
            数据节点 https://github.com/msgpack/msgpack/blob/master/spec.md
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.PointerNode.Start">
            <summary>
            节点数据起始位置，null 表示解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.MessagePack.PointerNode.End">
            <summary>
            数据结束位置，null 表示解析失败
            </summary>
        </member>
        <member name="P:AutoCSer.MessagePack.PointerNode.DataType">
            <summary>
            节点数据类型
            </summary>
        </member>
        <member name="P:AutoCSer.MessagePack.PointerNode.ItemCount">
            <summary>
            获取元素数量（数组、K-V、内存数据块）
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.#ctor(System.Byte*,System.Byte*)">
            <summary>
            数据节点
            </summary>
            <param name="start">节点数据起始位置</param>
            <param name="end">数据最大结束位置</param>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.#ctor(AutoCSer.Memory.Pointer@,AutoCSer.Memory.Pointer@)">
            <summary>
            数据节点
            </summary>
            <param name="start">节点数据起始位置</param>
            <param name="end">数据最大结束位置</param>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.ignore(System.Byte*)">
            <summary>
            忽略数据并返回数据结束位置
            </summary>
            <param name="start">节点数据起始位置</param>
            <returns>数据结束位置</returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.ignoreArray(System.Byte*,System.UInt32)">
            <summary>
            忽略数组
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.ignoreMap(System.Byte*,System.UInt32)">
            <summary>
            忽略键值对
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.ignore(AutoCSer.Memory.Pointer@)">
            <summary>
            忽略数据并返回数据结束位置
            </summary>
            <param name="start">节点数据起始位置</param>
            <returns>数据结束位置</returns>
        </member>
        <member name="P:AutoCSer.MessagePack.PointerNode.Array">
            <summary>
            获取数组元素集合
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getArray(AutoCSer.Memory.Pointer,System.UInt32)">
            <summary>
            获取数组元素集合
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.GetArray">
            <summary>
            获取数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getArray(System.Byte*,System.UInt32)">
            <summary>
            获取数组元素集合
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.MessagePack.PointerNode.Map">
            <summary>
            获取 Map 元素集合
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getMap(AutoCSer.Memory.Pointer,System.UInt32)">
            <summary>
            获取 Map 元素集合
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.GetMap">
            <summary>
            获取 Map 元素数组
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getMap(System.Byte*,System.UInt32)">
            <summary>
            获取 Map 元素数组
            </summary>
            <param name="start"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.MessagePack.PointerNode.Memory">
            <summary>
            内存数据块
            </summary>
        </member>
        <member name="P:AutoCSer.MessagePack.PointerNode.ByteArray">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.GetString(System.Text.Encoding)">
            <summary>
            获取字符串
            </summary>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.op_Implicit(AutoCSer.MessagePack.PointerNode)~System.Int64">
            <summary>
            隐式转换
            </summary>
            <param name="node">数据节点</param>
            <returns>整数</returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getLong">
            <summary>
            整数
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.op_Implicit(AutoCSer.MessagePack.PointerNode)~System.UInt64">
            <summary>
            隐式转换
            </summary>
            <param name="node">数据节点</param>
            <returns>无符号整数</returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getULong">
            <summary>
            无符号整数
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.op_Implicit(AutoCSer.MessagePack.PointerNode)~System.Boolean">
            <summary>
            隐式转换
            </summary>
            <param name="node">数据节点</param>
            <returns>逻辑值</returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getBool">
            <summary>
            逻辑值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.op_Implicit(AutoCSer.MessagePack.PointerNode)~System.Single">
            <summary>
            隐式转换
            </summary>
            <param name="node">数据节点</param>
            <returns>浮点数</returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getFloat">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.op_Implicit(AutoCSer.MessagePack.PointerNode)~System.Double">
            <summary>
            隐式转换
            </summary>
            <param name="node">数据节点</param>
            <returns>双精度浮点数</returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.getDouble">
            <summary>
            双精度浮点数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.GetData">
            <summary>
            获取数据字节数组
            </summary>
        </member>
        <member name="M:AutoCSer.MessagePack.PointerNode.Create(System.Byte*,System.Byte*,System.Boolean)">
            <summary>
            创建数据节点
            </summary>
            <param name="start">节点数据起始位置</param>
            <param name="end">数据结束位置</param>
            <param name="isFull">默认为 true 表示完整匹配结束位置</param>
            <returns>失败则指针为 null</returns>
        </member>
        <member name="T:AutoCSer.Net.Packet.Arp">
            <summary>
            ARP数据包(对于ARP和RARP请求/应答数据报大小只有28字节，为了达到46字节的最小长度，必须在后面添加18字节的填充字节)
            ARP查询/应答包(ARP是一个无状态的协议，只要有发往本机的ARP应答包，计算机都不加验证的接收，并更新自己的ARP缓存)
            使用ARP欺骗功能前，必须安装winpcap驱动并启动ip路由功能，修改(添加)注册表选项：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\IPEnableRouter = 0x1　
            对于ARP和RARP请求/应答数据报大小只有28字节，为了达到46字节的最小长度，必须在后面添加18字节的填充字节。
            使用sendarp有个问题，在远端主机不在线后（如拔掉网线后），使用该方法仍然能探测到在线。原因是ARP缓存还在，需要使用ARP -D来删除。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Arp.PacketSize">
            <summary>
            ARP数据包长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Arp.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.Hardware">
            <summary>
            硬件类型,0x0001表示10Mb以太网
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.Protocol">
            <summary>
            协议类型,为0x0800表示IP地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.HardwareSize">
            <summary>
            硬件地址长度(即MAC地址长度),以太网为0x06
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.AgreementSize">
            <summary>
            协议地址长度(即IP地址长度),以太网为0x04
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.RequestOrResponse">
            <summary>
            ARP请求包的OP值为1，ARP应答包的OP值为2，RARP请求包的OP值为3，RARP应答包的OP值为4
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.SendMac">
            <summary>
            发送者以太网地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.SendIp">
            <summary>
            发送者的IP地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.DestinationMac">
            <summary>
            目的以太网地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Arp.destinationIp">
            <summary>
            目的IP(查询MAC地址的IP)
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Arp.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            ARP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Arp.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            ARP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.Ethernet">
            <summary>
            以太网数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Ethernet.HeaderSize">
            <summary>
            以太网数据包头部长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Ethernet.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ethernet.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ethernet.DestinationMac">
            <summary>
            以太网目的地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ethernet.SourceMac">
            <summary>
            以太网源地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ethernet.Frame">
            <summary>
            帧类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Ethernet.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            以太网数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Ethernet.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            以太网数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.EthernetCodeEnum">
            <summary>
            以太网会话点到点协议数据包代码
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.EthernetProtocolEnum">
            <summary>
            点到点协议
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.EthernetSessionP2P">
            <summary>
            以太网会话点到点协议数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.EthernetSessionP2P.HeaderSize">
            <summary>
            数据包头长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.EthernetSessionP2P.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.EthernetSessionP2P.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.EthernetSessionP2P.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.EthernetSessionP2P.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.EthernetSessionP2P.Code">
            <summary>
            代码类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.EthernetSessionP2P.SessionId">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.EthernetSessionP2P.packetSize">
            <summary>
            数据包长度(单位未知)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.EthernetSessionP2P.Frame">
            <summary>
            帧类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.EthernetSessionP2P.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            以太网会话点到点协议数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.EthernetSessionP2P.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            以太网会话点到点协议数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.FrameEnum">
            <summary>
            数据链接层帧类型
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.Icmp">
            <summary>
            ICMP数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp.maxType">
            <summary>
            ICMP类型对应数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp.minTypeSize">
            <summary>
            ICMP类型对应数据包最小长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.Type">
            <summary>
            ICMP类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.Code">
            <summary>
            代码
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.CheckSum">
            <summary>
            校验和
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.EchoIdentity">
            <summary>
            回显(ping)通讯标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.EchoSequence">
            <summary>
            回显(ping)序列号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.MaskIdentity">
            <summary>
            掩码通讯标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.MaskSequence">
            <summary>
            掩码序列号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.MaskAddress">
            <summary>
            掩码地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.TimeIdentity">
            <summary>
            时间戳通讯标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.TimeSequence">
            <summary>
            时间戳序列号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.TimeRequest">
            <summary>
            时间戳请求时间，请求端填写发起时间戳，然后发送报文。(返回的是自午夜开始记算的毫秒数)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.TimeReceive">
            <summary>
            时间戳接收时间，应答系统收到报文填写接收时间戳。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.TimeSend">
            <summary>
            时间戳发送时间，发送应答时填写发送时间戳。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.UnreachableMTU">
            <summary>
            下一站网络的MTU
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.RedirectRouterAddress">
            <summary>
            重定向应该使用的路由器IP地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.RouterAdvertisementCount">
            <summary>
            路由器通告地址数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.RouterAdvertisementAddressLength">
            <summary>
            路由器通告地址项长度
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.RouterAdvertisementLifeTime">
            <summary>
            路由器通告生存时间
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp.Expand">
            <summary>
            ICMP数据包扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Icmp.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            ICMP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Icmp.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            ICMP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.Icmp6">
            <summary>
            ICMP V6数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6.minTypeSize">
            <summary>
            ICMP类型对应数据包最小长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6.maxType">
            <summary>
            ICMP类型对应数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.Type">
            <summary>
            ICMP类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.Code">
            <summary>
            代码
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.CheckSum">
            <summary>
            校验和
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.OverflowMTU">
            <summary>
            分组报文太长 发生差错的物理链路的MTU
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.ParameterErrorIndex">
            <summary>
            参数错误相对于原始数据的位置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.EchoIdentity">
            <summary>
            回显(ping)通讯标识
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.EchoSequence">
            <summary>
            回显(ping)序列号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.RouterAdvertisementHops">
            <summary>
            路由器通告 跳数限制
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.RouterAdvertisementManaged">
            <summary>
            路由器通告 受管理的地址配置标志(如果主机启用动态主机配置协议DHCP)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.RouterAdvertisementStateful">
            <summary>
            路由器通告 其它有状态的配置标志
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.RouterAdvertisementLife">
            <summary>
            路由器通告 路由器寿命
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.RouterAdvertisementTime">
            <summary>
            路由器通告 可达时间
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.RouterAdvertisementTimer">
            <summary>
            路由器通告 重传定时器
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.NeighborRequestDestination">
            <summary>
            邻居请求 目标地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.NeighborAdvertisementRouter">
            <summary>
            邻居通告 路由器标志
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.NeighborAdvertisementAnswer">
            <summary>
            邻居通告 响应请求标志
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.NeighborAdvertisementOver">
            <summary>
            邻居通告 覆盖缓存标志
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.NeighborAdvertisementDestination">
            <summary>
            邻居通告 目标地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.RedirectRouter">
            <summary>
            重定向 路由器地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.RedirectDestination">
            <summary>
            重定向 目的地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Icmp6.Expand">
            <summary>
            ICMP数据包扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Icmp6.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            ICMP V6数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Icmp6.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            ICMP V6数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.Icmp6CodeEnum">
            <summary>
            ICMP V6类型相关代码
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.Unreachable_Routing">
            <summary>
            无路由目的不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.Unreachable_Disable">
            <summary>
            与管理受禁的目的地通信
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.Unreachable_Range">
            <summary>
            超出了源地址的范围
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.Unreachable_Address">
            <summary>
            地址不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.Unreachable_Port">
            <summary>
            端口不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.Timeout_Hops">
            <summary>
            传输过程超过了跳数限制
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.Timeout_Assembly">
            <summary>
            分装重组时间到期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.ParameterError_Header">
            <summary>
            错误的首部字段
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.ParameterError_Type">
            <summary>
            无法识别的首部类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6CodeEnum.ParameterError_Option">
            <summary>
            无法识别的IPv6选项
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.Icmp6TypeEnum">
            <summary>
            ICMP V6类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.Unreachable">
            <summary>
            目的不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.Overflow">
            <summary>
            分组报文太长
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.Timeout">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.ParameterError">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.EchoRequest">
            <summary>
            回显(ping)请求
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.EchoAnswer">
            <summary>
            回显(Ping)应答
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.RouterRequest">
            <summary>
            路由器请求
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.RouterAdvertisement">
            <summary>
            路由器通告
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.NeighborRequest">
            <summary>
            邻居请求
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.NeighborAdvertisement">
            <summary>
            邻居通告
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Icmp6TypeEnum.Redirect">
            <summary>
            重定向
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.IcmpCodeEnum">
            <summary>
            ICMP类型相关代码
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.None">
            <summary>
            默认空值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Network">
            <summary>
            网络不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Host">
            <summary>
            主机不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Protocol">
            <summary>
            协议不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Port">
            <summary>
            端口不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Fragment">
            <summary>
            需要进行分片但设置了不分片比特
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Routing">
            <summary>
            源站选路失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_NetworkUnknow">
            <summary>
            目的网络不认识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_HostUnknow">
            <summary>
            目的主机不认识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Isolated">
            <summary>
            源主机被隔离(已作废)
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_NetworkDisable">
            <summary>
            目的网络被强制禁止
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_HostDisable">
            <summary>
            目的主机被强制禁止
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_NetworkTOS">
            <summary>
            由于服务类型TOS，网络不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_HostTOS">
            <summary>
            由于服务类型TOS，主机不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Filter">
            <summary>
            由于过滤，通信被强制禁止
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_UltraVires">
            <summary>
            主机越权
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Unreachable_Priority">
            <summary>
            优先权中止生效
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Redirect_Network">
            <summary>
            对网络重定向
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Redirect_Host">
            <summary>
            对主机重定向
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Redirect_NetworkTOS">
            <summary>
            对服务类型和网络重定向
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Redirect_HostTOS">
            <summary>
            对服务类型和主机重定向
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Timeout_Transmission">
            <summary>
            传输期间生存时间为0
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.Timeout_Assembly">
            <summary>
            在数据报组装期间生存时间为0
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.ParameterError_IpHeader">
            <summary>
            坏的IP首部（包括各种差错）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpCodeEnum.ParameterError_Options">
            <summary>
            缺少必需的选项
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.IcmpTypeEnum">
            <summary>
            ICMP类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.EchoAnswer">
            <summary>
            回显(Ping)应答
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.Unreachable">
            <summary>
            目的不可达
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.SourceClosed">
            <summary>
            源端被关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.Redirect">
            <summary>
            重定向
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.EchoRequest">
            <summary>
            回显(Ping)请求
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.RouterAdvertisement">
            <summary>
            路由器通告
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.RouterRequest">
            <summary>
            路由器请求
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.Timeout">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.ParameterError">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.TimeRequest">
            <summary>
            时间戳请求
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.TimeAnswer">
            <summary>
            时间戳应答
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.InformationRequest">
            <summary>
            信息请求(已作废)
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.InformationAnswer">
            <summary>
            信息应答(已作废)
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.MaskRequest">
            <summary>
            地址掩码请求
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IcmpTypeEnum.MaskAnswer">
            <summary>
            地址掩码应答
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.Igmp">
            <summary>
            IGMP数据包，IGMP报告和查询的生存时间(TTL)一般设置为1，更大的TTL值能被多播路由器转发，一个初始TTL为0的多播数据报将被限制在同一主机。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Igmp.DefaultSize">
            <summary>
            默认IGMP数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Igmp.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Igmp.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Igmp.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Igmp.Type">
            <summary>
            类型为1说明是由多播路由器发出的查询报文，为2说明是主机发出的报告报文。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Igmp.CheckSum">
            <summary>
            校验和
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Igmp.GroupAddress">
            <summary>
            32位组地址(D类IP地址)
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Igmp.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            IGMP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Igmp.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            IGMP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.Ip">
            <summary>
            IPv4 数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Ip.DefaultHeaderSize">
            <summary>
            IP标头默认字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Ip.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.HeaderSize">
            <summary>
            IP标头字节数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.Version">
            <summary>
            IP版本号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.Priority">
            <summary>
            优先权,现在已被忽略
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.ServiceType">
            <summary>
            服务类型TOS字段，暂时大多数TCP/IP实现都不支持TOS特性，4位中只能用1位，下面是推荐值。
            最小时延：如 Telnet，Rlogin，FTP控制，TFTP，SMTP命令，DNS-UDP查询
            最大吞吐量：如 FTP数据，SMTP数据，DNS区域传输
            最高可靠性：如 SNMP，IGP
            最小费用：如 NNTP
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.PacketSize">
            <summary>
            IP数据包总字节数(大多数的链路层都会对它进行分片，主机也要求不能接收超过576B[报文512B]的数据报。事实上现在大多数的实现（特别是那些支持网络文件系统NFS的实现）允许超过8192B的IP数据报。)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.Identity">
            <summary>
            唯一标识主机发送的每一个数据报，通常每发一份它的值就会加1。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.IsFragment">
            <summary>
            是否分片
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.MoreFragment">
            <summary>
            更多分片标志
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.FragmentOffset">
            <summary>
            分片偏移，该片偏移原始数据报开始处的位置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.LifeTime">
            <summary>
            生存时间周期，一般为32或64，每经过一个路由器就减1，如果该字段为0，则该数据报被丢弃。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.Protocol">
            <summary>
            IP协议
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.CheckSum">
            <summary>
            校验和
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.Source">
            <summary>
            源IP地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.Destination">
            <summary>
            目的IP地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.Expand">
            <summary>
            IP头扩展
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.Packet">
            <summary>
            下层应用数据包
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip.headerCheckSum">
            <summary>
            IP头校验和(应用于TCP,UDP等协议)
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Ip.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            初始化IP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Ip.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            初始化IP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Ip.CreateCheckSum(AutoCSer.SubArray{System.Byte}@,System.UInt32)">
            <summary>
            获取校验和，IP、ICMP、IGMP、TCP和UDP协议采用相同的检验和算法(对首部中每个16bit进行二进制反码求和，如果首部在传输过程中没有发生任何差错，那么接收方计算的结果应该为全1。)
            </summary>
            <param name="data">待校验数据</param>
            <param name="checkSum">校验和初始值,默认应为0</param>
            <returns>校验和</returns>
        </member>
        <member name="T:AutoCSer.Net.Packet.Ip6">
            <summary>
            IPv6 数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Ip6.DefaultHeaderSize">
            <summary>
            IP标头默认字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Ip6.ExpandProtocol">
            <summary>
            IP标头扩展首部位图
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Ip6.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Ip6.headerEndIndex">
            <summary>
            IP标头结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.Version">
            <summary>
            IP版本号，值为6
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.FlowType">
            <summary>
            流量类型，默认为0
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.FlowTag">
            <summary>
            标识唯一的流标签(实验阶段的可选字段)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.PacketSize">
            <summary>
            数据包长度(不包括40字节的头部,但包括扩展部分)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.Protocol">
            <summary>
            IP协议
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.Hops">
            <summary>
            跳数限制
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.Source">
            <summary>
            源IP地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.Destination">
            <summary>
            目的IP地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.headerCheckSum">
            <summary>
            IP头校验和(应用于TCP,UDP,ICMPv6等协议)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Ip6.Packet">
            <summary>
            下层应用数据包
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Ip6.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            IPv6包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Ip6.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            IPv6包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.IpProtocolEnum">
            <summary>
            IP 协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Unspecified">
            <summary>
            未指定
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IP">
            <summary>
            IP协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPv6HopByHopOptions">
            <summary>
            IPv6逐跳选项扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Icmp">
            <summary>
            互联网控制报文协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Igmp">
            <summary>
            互联网组管理协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Ggp">
            <summary>
            网关到网关协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPv4">
            <summary>
            IPv4
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Tcp">
            <summary>
            传输控制协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Egp">
            <summary>
            外部网关协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Pup">
            <summary>
            PUP协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Udp">
            <summary>
            用户数据报协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Hmp">
            <summary>
            XNS IDP 协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Idp">
            <summary>
            互联网数据报协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Rdp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.TP">
            <summary>
            SO传输入协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPv6">
            <summary>
            IPv6头部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPv6RoutingHeader">
            <summary>
            IPv6选路选项扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPv6FragmentHeader">
            <summary>
            IPv6分片选项扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Rsvp">
            <summary>
            资源预留协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Gre">
            <summary>
            通用路由封装
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPSecEncapsulatingSecurityPayload">
            <summary>
            IPv6封装安全性选项扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPSecAuthenticationHeader">
            <summary>
            IPv6鉴别首部扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IcmpV6">
            <summary>
            互联网控制报文协议(IPv6)
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPv6NoNextHeader">
            <summary>
            IPv6无下一首部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.IPv6DestinationOptions">
            <summary>
            IPv6目的地选项扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Rcd">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.ND">
            <summary>
            网络硬盘协议(非官方)
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Mtp">
            <summary>
            多播传输协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Encap">
            <summary>
            封装头
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Pim">
            <summary>
            IPv6协议独立组播
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Comp">
            <summary>
            压缩头部协议
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.IpProtocolEnum.Raw">
            <summary>
            原始IP数据包
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.LinuxSLL">
            <summary>
            linuxSLL数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.LinuxSLL.HeaderSize">
            <summary>
            数据包头部长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.LinuxSLL.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.LinuxSLL.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.LinuxSLL.Type">
            <summary>
            数据包类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.LinuxSLL.AddressType">
            <summary>
            地址类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.LinuxSLL.AddressSize">
            <summary>
            地址长度
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.LinuxSLL.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.LinuxSLL.Frame">
            <summary>
            帧类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.LinuxSLL.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            linuxSLL数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.LinuxSLL.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            linuxSLL数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.LinuxTypeEnum">
            <summary>
            linuxSLL数据包类型
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Packet.Tcp">
            <summary>
            TCP数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Tcp.DefaultHeaderSize">
            <summary>
            TCP头默认长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Tcp.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.SourcePort">
            <summary>
            源端口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.DestinationPort">
            <summary>
            目的端口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.SequenceNumber">
            <summary>
            初始连接的请求号，即SEQ值
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.AnswerNumber">
            <summary>
            对方的应答号，即ACK值
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.HeaderSize">
            <summary>
            TCP头长度
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.IsUrgent">
            <summary>
            紧急数据标志URG
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.IsAffirmance">
            <summary>
            确认标志位ACK
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.IsPush">
            <summary>
            PUSH标志位PSH
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.IsReset">
            <summary>
            复位标志位RST
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.IsConnection">
            <summary>
            连接请求标志位SYN(同步)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.IsFinish">
            <summary>
            结束连接请求标志位FIN
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.WindowSize">
            <summary>
            窗口大小
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.CheckSum">
            <summary>
            校验和
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.UrgentPointer">
            <summary>
            紧急指针，只有当URG标志置1时紧急指针才有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.Expand">
            <summary>
            TCP头扩展
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Tcp.Packet">
            <summary>
            下层应用数据包
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Tcp.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            TCP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Tcp.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            TCP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.Packet.Udp">
            <summary>
            UDP数据包
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Udp.HeaderSize">
            <summary>
            UDP头默认长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Packet.Udp.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Udp.IsPacket">
            <summary>
            数据包是否有效
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Udp.SourcePort">
            <summary>
            源端口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Udp.DestinationPort">
            <summary>
            目的端口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Udp.PacketSize">
            <summary>
            UDP数据长度，包括头部8字节
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Udp.CheckSum">
            <summary>
            校验和(UDP和TCP首部都包含一个12字节的伪首部：32位源IP地址,32位目的IP地址,8位保留,8位协议,16位UDP长度)
            如果检验和的计算结果为0，则存入的值为全1（65535），如果传送的检验和是0，则说明发送端没有计算检验和。如果有错误，该报就被丢弃，不产生任何差错报文。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.Packet.Udp.Packet">
            <summary>
            下层应用数据包
            </summary>
        </member>
        <member name="M:AutoCSer.Net.Packet.Udp.#ctor(AutoCSer.SubArray{System.Byte})">
            <summary>
            UDP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.Net.Packet.Udp.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            UDP数据包
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:AutoCSer.Net.RawSocketBuffer">
            <summary>
            原始套接字监听数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketBuffer.bufferCount">
            <summary>
            数据缓冲区计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketBuffer.buffer">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.RawSocketBuffer.Length">
            <summary>
            字节数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.RawSocketBuffer.Ip">
            <summary>
            IPv4 数据包
            </summary>
        </member>
        <member name="P:AutoCSer.Net.RawSocketBuffer.Ip6">
            <summary>
            IPv6 数据包
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RawSocketBuffer.#ctor(AutoCSer.Memory.BufferCount,System.Int32,System.Int32)">
            <summary>
            原始套接字监听数据缓冲区
            </summary>
            <param name="bufferCount">数据缓冲区计数</param>
            <param name="index">起始位置</param>
            <param name="count">字节数量</param>
        </member>
        <member name="M:AutoCSer.Net.RawSocketBuffer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Net.RawSocketListener">
            <summary>
            原始套接字监听（仅支持 Windows）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.defaultBufferSize">
            <summary>
            默认获取的数据包的字节数(默认为以太网)
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.bufferPool">
            <summary>
            缓冲区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.socket">
            <summary>
            监听套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.onReceiveAsyncCallback">
            <summary>
            接收数据异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.async">
            <summary>
            异步套接字操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.ipEndPoint">
            <summary>
            监听地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.queue">
            <summary>
            原始套接字监听数据缓冲区处理队列线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.packetSize">
            <summary>
            数据包字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.maxBufferIndex">
            <summary>
            缓冲区最大可用索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.buffer">
            <summary>
            数据缓冲区计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.bufferIndex">
            <summary>
            缓冲区起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.bufferEndIndex">
            <summary>
            缓冲区结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.RawSocketListener.IsError">
            <summary>
            是否处理错误状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketListener.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RawSocketListener.#ctor(System.Net.IPAddress,System.Action{AutoCSer.Net.RawSocketBuffer},AutoCSer.Memory.ByteArrayPool,System.Int32)">
            <summary>
            原始套接字监听
            </summary>
            <param name="ipAddress">监听地址，无线网卡不支持 IPAddress.Any</param>
            <param name="onPacket">数据包处理委托</param>
            <param name="bufferPool">接收缓冲区池，默认为 128KB</param>
            <param name="packetSize">数据包字节数，默认为 1500</param>
        </member>
        <member name="M:AutoCSer.Net.RawSocketListener.Dispose">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RawSocketListener.closeSocket">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RawSocketListener.start">
            <summary>
            开始监听
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RawSocketListener.receive">
            <summary>
            继续接收数据
            </summary>
            <returns>是否接收成功</returns>
        </member>
        <member name="M:AutoCSer.Net.RawSocketListener.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.RawSocketListener.onReceive(System.Int32)">
            <summary>
            数据接收完成后的回调委托
            </summary>
            <param name="count">接收数据数量</param>
        </member>
        <member name="T:AutoCSer.Net.RawSocketQueue">
            <summary>
            原始套接字监听数据缓冲区处理队列线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketQueue.onPacket">
            <summary>
            数据包处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketQueue.head">
            <summary>
            队列头部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketQueue.end">
            <summary>
            队列尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RawSocketQueue.queueLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RawSocketQueue.#ctor(System.Action{AutoCSer.Net.RawSocketBuffer})">
            <summary>
            原始套接字监听数据缓冲区处理队列线程
            </summary>
            <param name="onPacket">数据包处理委托</param>
        </member>
        <member name="M:AutoCSer.Net.RawSocketQueue.Add(AutoCSer.Net.RawSocketBuffer)">
            <summary>
            添加数据缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Net.RawSocketQueue.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TimestampVerify">
            <summary>
            基于递增登录时间戳验证的服务认证辅助函数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TimestampVerify.Md5(System.Security.Cryptography.MD5,System.String,System.UInt64,System.Int64)">
            <summary>
            MD5 加密
            </summary>
            <param name="md5"></param>
            <param name="verifyString">验证字符串</param>
            <param name="randomPrefix">随机前缀</param>
            <param name="timestamp">待验证时间戳</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TimestampVerify.Md5Equals(System.Byte[],System.Byte[])">
            <summary>
            判断 MD5 值是否相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ObjectReference">
            <summary>
            对象引用
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ObjectReference.value">
            <summary>
            对象数据
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ObjectReference.HashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ObjectReference.#ctor(System.Object)">
            <summary>
            对象引用
            </summary>
            <param name="value">对象数据</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ObjectReference.Equals(AutoCSer.ObjectRoot.ObjectReference)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ObjectReference.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ObjectReference.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ObjectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ObjectType.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.ObjectRoot.ObjectType.IsArray">
            <summary>
            是否数组（包括 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ObjectType.RootFields">
            <summary>
            对象根静态字段集合
            </summary>
        </member>
        <member name="P:AutoCSer.ObjectRoot.ObjectType.IsScan">
            <summary>
            是否需要扫描（仅统计 数组与可循环引用对象）
            </summary>
        </member>
        <member name="P:AutoCSer.ObjectRoot.ObjectType.RootFieldList">
            <summary>
            对象根静态字段集合
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ObjectType.#ctor(System.Type)">
            <summary>
            对象类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ObjectType.Add(System.Reflection.FieldInfo,AutoCSer.ObjectRoot.TypeScanner)">
            <summary>
            添加根静态字段（仅统计 数组与可循环引用对象）
            </summary>
            <param name="fieldInfo">对象根静态字段</param>
            <param name="scanner">类型扫描</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ObjectType.IsScanDerived(System.Type)">
            <summary>
            是否需要扫描派生类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ReflectionArrayScanner">
            <summary>
            反射模式数组扫描
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionArrayScanner.enumerator">
            <summary>
            数组枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionArrayScanner.objectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionArrayScanner.#ctor(System.Object,AutoCSer.ObjectRoot.ReflectionType)">
            <summary>
            反射模式数组扫描
            </summary>
            <param name="value">数组对象</param>
            <param name="objectType">对象类型</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionArrayScanner.Next(AutoCSer.ObjectRoot.ReflectionScanner@)">
            <summary>
            读取下一个数据
            </summary>
            <param name="scanner"></param>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ReflectionArrayType">
            <summary>
            反射模式数组类型
            </summary>
        </member>
        <member name="P:AutoCSer.ObjectRoot.ReflectionArrayType.IsArray">
            <summary>
            是否数组（包括 string）
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionArrayType.ElementType">
            <summary>
            数组元素类型
            </summary>
        </member>
        <member name="P:AutoCSer.ObjectRoot.ReflectionArrayType.ElementCount">
            <summary>
            数组元素统计数量
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionArrayType.#ctor">
            <summary>
            string
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionArrayType.#ctor(System.Type)">
            <summary>
            数组类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionArrayType.GetElementType(AutoCSer.ObjectRoot.ReflectionTypeScanner)">
            <summary>
            获取数组元素类型
            </summary>
            <param name="scanner"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionArrayType.Append(AutoCSer.ObjectRoot.ReflectionScanner@,System.Object,System.Boolean)">
            <summary>
            添加扫描对象
            </summary>
            <param name="scanner"></param>
            <param name="value"></param>
            <param name="isArray">对象是否数组元素，数组元素不统计根静态字段</param>
            <returns>添加对象类型</returns>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ReflectionObjectScanner">
            <summary>
            反射模式对象扫描
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionObjectScanner.value">
            <summary>
            扫描的对象
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionObjectScanner.objectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionObjectScanner.index">
            <summary>
            当前读取字段索引
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionObjectScanner.isArray">
            <summary>
            对象是否数组元素，数组元素不统计根静态字段
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionObjectScanner.#ctor(System.Object,AutoCSer.ObjectRoot.ReflectionObjectType,System.Boolean)">
            <summary>
            反射模式对象扫描
            </summary>
            <param name="value">扫描的对象</param>
            <param name="objectType">对象类型</param>
            <param name="isArray">对象是否数组元素，数组元素不统计根静态字段</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionObjectScanner.Next(AutoCSer.ObjectRoot.ReflectionScanner@)">
            <summary>
            读取下一个数据
            </summary>
            <param name="scanner"></param>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ReflectionObjectType">
            <summary>
            反射模式对象类型
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionObjectType.BaseType">
            <summary>
            父类型
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionObjectType.ScanFields">
            <summary>
            需要扫描的字段集合
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionObjectType.#ctor">
            <summary>
            空对象类型
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionObjectType.#ctor(AutoCSer.ObjectRoot.ReflectionObjectType)">
            <summary>
            接口类型
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionObjectType.#ctor(System.Type)">
            <summary>
            对象类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionObjectType.CreateScanFiled(AutoCSer.ObjectRoot.ReflectionTypeScanner)">
            <summary>
            初始化需要扫描的字段集合
            </summary>
            <param name="scanner">对象扫描</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionObjectType.Append(AutoCSer.ObjectRoot.ReflectionScanner@,System.Object,System.Boolean)">
            <summary>
            添加扫描对象
            </summary>
            <param name="scanner"></param>
            <param name="value"></param>
            <param name="isArray">对象是否数组元素，数组元素不统计根静态字段</param>
            <returns>添加对象类型</returns>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionObjectType.NullType">
            <summary>
            空对象类型
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionObjectType.InterfaceType">
            <summary>
            接口对象类型
            </summary>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ReflectionScanner">
            <summary>
            反射模式对象扫描
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionScanner.Scanner">
            <summary>
            类型扫描
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionScanner.FieldInfo">
            <summary>
            当前扫描静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionScanner.objectReferences">
            <summary>
            对象集合
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionScanner.Arrays">
            <summary>
            扫描数组集合
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionScanner.Objects">
            <summary>
            扫描对象集合
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionScanner.IsLimitExceeded">
            <summary>
            统计对象数量是否超出限制
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionScanner.#ctor(AutoCSer.ObjectRoot.ReflectionTypeScanner,System.Reflection.FieldInfo)">
            <summary>
            反射模式对象扫描
            </summary>
            <param name="scanner">类型扫描</param>
            <param name="fieldInfo">当前扫描静态字段</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionScanner.ScanObject(System.Object,AutoCSer.ObjectRoot.ReflectionType)">
            <summary>
            对象扫描
            </summary>
            <param name="value"></param>
            <param name="objectType"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionScanner.Scan(System.Object,AutoCSer.ObjectRoot.ReflectionType)">
            <summary>
            对象扫描
            </summary>
            <param name="value"></param>
            <param name="objectType"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionScanner.scan">
            <summary>
            对象扫描
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionScanner.Append(AutoCSer.ObjectRoot.ReflectionObjectScanner)">
            <summary>
            添加对象扫描
            </summary>
            <param name="objectScanner"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionScanner.Append(AutoCSer.ObjectRoot.ReflectionArrayScanner)">
            <summary>
            添加数组扫描
            </summary>
            <param name="arrayScanner"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionScanner.AddObject(System.Object)">
            <summary>
            添加统计对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ReflectionType">
            <summary>
            反射模式对象类型
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionType.#ctor(System.Type)">
            <summary>
            反射模式对象类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionType.Append(AutoCSer.ObjectRoot.ReflectionScanner@,System.Object,System.Boolean)">
            <summary>
            添加扫描对象
            </summary>
            <param name="scanner"></param>
            <param name="value"></param>
            <param name="isArray">对象是否数组元素，数组元素不统计根静态字段</param>
            <returns>添加对象类型</returns>
        </member>
        <member name="T:AutoCSer.ObjectRoot.ReflectionTypeScanner">
            <summary>
            反射模式类型扫描（非线程安全）
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.ReflectionTypeScanner.ObjectTypeCache">
            <summary>
            类型统计数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.ObjectRoot.ReflectionTypeScanner.ArrayTypes">
            <summary>
            获取统计数组类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.ObjectRoot.ReflectionTypeScanner.ObjectTypes">
            <summary>
            获取统计数组类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionTypeScanner.#ctor(System.Int32,System.Int32)">
            <summary>
            反射模式对象扫描（非线程安全）
            </summary>
            <param name="maxObjectCount">每个静态根对象最大统计对象数量</param>
            <param name="maxRootFieldCount">静态根对象最大统计数量，超出部分淘汰数量最小的静态根对象</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionTypeScanner.GetObjectType(System.Type)">
            <summary>
            获取对象类型
            </summary>
            <param name="type"></param>
            <returns>对象类型</returns>
        </member>
        <member name="M:AutoCSer.ObjectRoot.ReflectionTypeScanner.scanRoot(System.Reflection.FieldInfo,System.Object)">
            <summary>
            扫描根对象
            </summary>
            <param name="fieldInfo">根对象静态字段</param>
            <param name="value">根对象</param>
        </member>
        <member name="T:AutoCSer.ObjectRoot.TypeScanner">
            <summary>
            类型扫描（非线程安全）
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.TypeScanner.ScanAssemblys">
            <summary>
            已添加扫描程序集
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.TypeScanner.ScanTypes">
            <summary>
            已添加扫描的类型
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.TypeScanner.MaxObjectCount">
            <summary>
            每个静态根对象最大统计对象数量
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectRoot.TypeScanner.MaxRootFieldCount">
            <summary>
            静态根对象最大统计数量，超出部分淘汰数量最小的静态根对象
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.#ctor(System.Int32,System.Int32)">
            <summary>
            对象扫描（非线程安全）
            </summary>
            <param name="maxObjectCount">每个静态根对象最大统计对象数量</param>
            <param name="maxRootFieldCount">静态根对象最大统计数量，超出部分淘汰数量最小的静态根对象</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.check(System.Reflection.Assembly)">
            <summary>
            检测程序集是否需要扫描
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.Scan(System.Reflection.Assembly)">
            <summary>
            添加程序集扫描类型
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.onException(System.Reflection.Assembly,System.Exception)">
            <summary>
            程序集获取类型异常处理
            </summary>
            <param name="assembly"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.ScanCurrentDomain(System.Boolean)">
            <summary>
            扫描当前应用程序集已加载程序集
            </summary>
            <param name="isSystem">是否扫描系统程序集，比如 System. 开始的</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.isSystemAssembly(System.Reflection.Assembly)">
            <summary>
            判断是否系统程序集，比如 System. 开始的
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.check(System.Type)">
            <summary>
            检测类型是否需要扫描
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.Scan(System.Type)">
            <summary>
            添加类型扫描静态字段
            </summary>
            <param name="type">必须是 struct 或者 class，可以是泛型，但是不能是泛型定义类型</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.check(System.Reflection.FieldInfo)">
            <summary>
            检测字段是否需要扫描
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.scan(System.Type)">
            <summary>
            扫描静态字段
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.onException(System.Reflection.FieldInfo,System.Exception)">
            <summary>
            扫描静态字段异常处理
            </summary>
            <param name="fieldInfo"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.scanRoot(System.Reflection.FieldInfo,System.Object)">
            <summary>
            扫描根对象
            </summary>
            <param name="fieldInfo">根对象静态字段</param>
            <param name="value">根对象</param>
        </member>
        <member name="M:AutoCSer.ObjectRoot.TypeScanner.OnLimitExceeded(System.Reflection.FieldInfo)">
            <summary>
            统计对象数量超出限制
            </summary>
            <param name="fieldInfo"></param>
        </member>
        <member name="T:AutoCSer.Range">
            <summary>
            索引范围
            </summary>
        </member>
        <member name="F:AutoCSer.Range.StartIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Range.EndIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.Range.Length">
            <summary>
            范围长度
            </summary>
        </member>
        <member name="M:AutoCSer.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            索引范围
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="M:AutoCSer.Range.#ctor(System.Int64,System.Int64)">
            <summary>
            索引范围
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="M:AutoCSer.Range.Set(System.Int32,System.Int32)">
            <summary>
            重置索引范围
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="M:AutoCSer.Range.Set(System.Int64,System.Int64)">
            <summary>
            重置索引范围
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="T:AutoCSer.Reflection.LoadAssemblyCache">
            <summary>
            动态加载程序集缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.LoadAssemblyCache.cache">
            <summary>
            动态加载程序集缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.LoadAssemblyCache.cacheLock">
            <summary>
            动态加载程序集缓存访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.LoadAssemblyCache.Load(System.Byte[]@)">
            <summary>
            动态加载程序集
            </summary>
            <param name="rawAssembly">程序集文件数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Reflection.XmlDocument">
            <summary>
            XML 文档注释
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocument.xmlParserConfig">
            <summary>
            XML解析配置
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocument.assemblys">
            <summary>
            程序集信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocument.assemblyLock">
            <summary>
            程序集信息集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocument.lastAssembly">
            <summary>
            最后访问的程序集信息
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocument.get(System.Reflection.Assembly)">
            <summary>
            获取程序集信息
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocument.clearAssemblys">
            <summary>
            清理程序集信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocument.Get(System.Type)">
            <summary>
            获取类型描述
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocument.Get(System.Reflection.FieldInfo)">
            <summary>
            获取字段描述
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocument.Get(System.Reflection.PropertyInfo)">
            <summary>
            获取属性描述
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocument.Get(System.Reflection.MethodInfo)">
            <summary>
            获取方法描述
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocument.GetReturn(System.Reflection.MethodInfo)">
            <summary>
            获取方法返回值描述
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocument.Get(System.Reflection.MethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            获取参数描述
            </summary>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Reflection.XmlDocumentAssembly">
            <summary>
            程序集 XML 文档注释信息
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.types">
            <summary>
            类型：类、接口、结构、枚举、委托
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.typeNodes">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.typeNodeLock">
            <summary>
            类型集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.typeNameBuilder">
            <summary>
            类型名称流
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.typeNameString">
            <summary>
            类型名称临时字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.typeNameLock">
            <summary>
            类型名称访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.fields">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.properties">
            <summary>
            属性（包括索引程序或其他索引属性）
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.methods">
            <summary>
            方法（包括一些特殊方法，例如构造函数、运算符等）
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.methodNodes">
            <summary>
            方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.Reflection.XmlDocumentAssembly.methodNodeLock">
            <summary>
            方法集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.#ctor(System.Reflection.Assembly)">
            <summary>
            程序集 XML 文档注释信息
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.get(System.Type)">
            <summary>
            获取类型信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.GetSummary(System.Type)">
            <summary>
            获取类型描述
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.get(System.Reflection.FieldInfo)">
            <summary>
            获取字段信息
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.GetSummary(System.Reflection.FieldInfo)">
            <summary>
            获取字段描述
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.get(System.Reflection.PropertyInfo)">
            <summary>
            获取属性信息
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.GetSummary(System.Reflection.PropertyInfo)">
            <summary>
            获取属性描述
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.get(System.Reflection.MethodInfo)">
            <summary>
            获取方法信息
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.GetSummary(System.Reflection.MethodInfo)">
            <summary>
            获取方法描述
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.GetReturn(System.Reflection.MethodInfo)">
            <summary>
            获取方法返回值描述
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.Get(System.Reflection.MethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            获取参数描述
            </summary>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.LoadMember(AutoCSer.SubString,AutoCSer.XmlNode)">
            <summary>
            加载数据记录
            </summary>
            <param name="name">名称</param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.get(AutoCSer.XmlNode,System.String)">
            <summary>
            获取节点字符串
            </summary>
            <param name="node">成员节点</param>
            <param name="name">节点名称</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Reflection.XmlDocumentAssembly.formatName(System.Char*,System.Char*)">
            <summary>
            名称格式化
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="T:AutoCSer.ReusableHashSet`1">
            <summary>
            可重用哈希表（主要用于非引用类型缓冲区，避免 new / Clear 开销）
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="P:AutoCSer.ReusableHashSet`1.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.ReusableHashSet`1.#ctor(System.Int32)">
            <summary>
            可重用字典
            </summary>
            <param name="capacity">容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.ReusableHashSet`1.Add(`0)">
            <summary>
            新增数据
            </summary>
            <param name="value"></param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashSet`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value"></param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.ReusableHashSet`1.Remove(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value"></param>
            <returns>是否存在数据</returns>
        </member>
        <member name="T:AutoCSer.RingQueue`1">
            <summary>
            环状队列
            </summary>
            <typeparam name="T">队列元素数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.RingQueue`1.queue">
            <summary>
            队列数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.RingQueue`1.readIndex">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="F:AutoCSer.RingQueue`1.writeIndex">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="M:AutoCSer.RingQueue`1.#ctor(System.Int32)">
            <summary>
            环状队列
            </summary>
            <param name="capacity">队列数据数量</param>
        </member>
        <member name="M:AutoCSer.RingQueue`1.TryGetRead(`0@)">
            <summary>
            尝试获取当前读取数据
            </summary>
            <param name="value">当前读取数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RingQueue`1.TryRead(`0@)">
            <summary>
            尝试获取当前读取数据，读取成功则移动当前读取数据位置
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RingQueue`1.MoveRead">
            <summary>
            移动当前读取数据位置
            </summary>
        </member>
        <member name="M:AutoCSer.RingQueue`1.Write(`0)">
            <summary>
            写入新数据
            </summary>
            <param name="value"></param>
            <returns>移除的数据</returns>
        </member>
        <member name="T:AutoCSer.SearchTree.Dictionary`2">
            <summary>
            二叉搜索树字典
            </summary>
            <typeparam name="KT">关键字类型</typeparam>
            <typeparam name="VT">数据类型</typeparam>
        </member>
        <member name="T:AutoCSer.SearchTree.Dictionary`2.Node">
            <summary>
            二叉搜索树字典节点
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.Dictionary`2.Node.Value">
            <summary>
            节点数据
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.#ctor(`0,`1)">
            <summary>
            二叉搜索树字典节点
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Node.KeyValue">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Node.KeyValues">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Node.FristKeyValue">
            <summary>
            获取第一组数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Node.LastKeyValue">
            <summary>
            获取最后一组数据
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Get(`0@)">
            <summary>
            根据关键字获取二叉树节点
            </summary>
            <param name="key">关键字</param>
            <returns>匹配节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.At(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.at(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.changeKeyValue(`0@,`1@)">
            <summary>
            交换节点数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.checkLeft">
            <summary>
            检测左节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.checkRight">
            <summary>
            检测右节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.TryAdd(AutoCSer.KeyValue{`0,`1}@)">
            <summary>
            添加数据
            </summary>
            <param name="keyValue"></param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Set(AutoCSer.KeyValue{`0,`1}@)">
            <summary>
            设置数据
            </summary>
            <param name="keyValue">数据</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Remove(`0@)">
            <summary>
            删除数据
            </summary>
            <param name="key">关键字</param>
            <returns>被删除节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Remove">
            <summary>
            删除当前节点
            </summary>
            <returns>用户替换当前节点的节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.removeMin">
            <summary>
            删除最小节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Enumerable(AutoCSer.SearchTree.EnumerableCount)">
            <summary>
            获取数据集合
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.enumerable(AutoCSer.SearchTree.EnumerableCount)">
            <summary>
            获取数据集合
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.GetArraySkip(AutoCSer.SearchTree.PageArray{`1}@)">
            <summary>
            获取数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.getArray(AutoCSer.SearchTree.PageArray{`1}@)">
            <summary>
            获取数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.GetArraySkip``1(AutoCSer.SearchTree.PageArray{`1,``0}@)">
            <summary>
            获取数组
            </summary>
            <typeparam name="AT"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.getArray``1(AutoCSer.SearchTree.PageArray{`1,``0}@)">
            <summary>
            获取数组
            </summary>
            <typeparam name="arrayType"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.GetDescArraySkip(AutoCSer.SearchTree.PageArray{`1}@)">
            <summary>
            获取数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.getDescArray(AutoCSer.SearchTree.PageArray{`1}@)">
            <summary>
            获取数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.GetFind(AutoCSer.SearchTree.FindArray{`1}@)">
            <summary>
            查找数据
            </summary>
            <param name="array"></param>
        </member>
        <member name="F:AutoCSer.SearchTree.Dictionary`2.Boot">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Count">
            <summary>
            节点数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Height">
            <summary>
            获取树高度，时间复杂度 O(n)
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.KeyValues">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.FristKeyValue">
            <summary>
            获取第一组数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.LastKeyValue">
            <summary>
            获取最后一组数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Item(`0)">
            <summary>
            根据关键字获取或者设置数据
            </summary>
            <param name="key">关键字</param>
            <returns>数据,获取失败KeyNotFoundException</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.#ctor">
            <summary>
            二叉树字典
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Set(`0,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据</param>
            <returns>是否添加了关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Set(`0@,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据</param>
            <returns>是否添加了关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryAdd(`0,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryAdd(`0@,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Remove(`0)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Remove(`0@)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Remove(`0@,`1@)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <param name="value">被删除数据</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.ContainsKey(`0)">
            <summary>
            判断是否包含关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否包含关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.ContainsKey(`0@)">
            <summary>
            判断是否包含关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否包含关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryGetValue(`0,`1@)">
            <summary>
            根据关键字获取数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">目标数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryGetValue(`0@,`1@)">
            <summary>
            根据关键字获取数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">目标数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.IndexOf(`0)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.IndexOf(`0@)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.CountLess(`0@)">
            <summary>
            根据关键字比它小的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.CountThan(`0@)">
            <summary>
            根据关键字比它大的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.At(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryGetValueByIndex(System.Int32,`1@)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetPage(System.Int32,System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="page">分页号,从 1 开始</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetPage``1(System.Int32,System.Int32,System.Func{`1,``0})">
            <summary>
            获取分页数据
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="page">分页号,从 1 开始</param>
            <param name="getValue">获取数据委托</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetPageDesc(System.Int32,System.Int32)">
            <summary>
            获取逆序分页数据
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="page">分页号,从 1 开始</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetRange(System.Int32,System.Int32)">
            <summary>
            获取范围数据集合
            </summary>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetRangeDesc(System.Int32,System.Int32)">
            <summary>
            获取逆序范围数据集合
            </summary>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetFind(System.Func{`1,System.Boolean})">
            <summary>
            查找数据
            </summary>
            <param name="isValue">数据匹配委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetValues(System.Int32,System.Int32)">
            <summary>
            获取范围数据集合
            </summary>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.SearchTree.FindArray`1">
            <summary>
            查找数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.FindArray`1.IsValue">
            <summary>
            数据匹配委托
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.FindArray`1.Array">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.FindArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.SearchTree.EnumerableCount">
            <summary>
            查找计数
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.EnumerableCount.SkipCount">
            <summary>
            跳过记录数量
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.EnumerableCount.GetCount">
            <summary>
            获取记录数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.EnumerableCount.#ctor(System.Int32,System.Int32)">
            <summary>
            查找计数
            </summary>
            <param name="skipCount">跳过记录数量</param>
            <param name="getCount">获取记录数量</param>
        </member>
        <member name="T:AutoCSer.SearchTree.Node`2">
            <summary>
            二叉字典树节点
            </summary>
            <typeparam name="NT">二叉树节点类型</typeparam>
            <typeparam name="KT">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.Node`2.Left">
            <summary>
            左节点
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.Node`2.Right">
            <summary>
            右节点
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.Node`2.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.Node`2.Count">
            <summary>
            节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.#ctor(`1)">
            <summary>
            二叉字典树节点
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:AutoCSer.SearchTree.Node`2.Height">
            <summary>
            节点高度
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Node`2.isLeftAndRight">
            <summary>
            是否同时存在左右节点
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Node`2.leftRightDifferenceCount">
            <summary>
            左右节点数据量差
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.set(`0,`0,System.Int32)">
            <summary>
            设置节点信息
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.set(`0,System.Int32)">
            <summary>
            设置节点信息
            </summary>
            <param name="left"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.IndexOf(`1@)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.CountLess(`1@)">
            <summary>
            根据关键字比它小的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.CountThan(`1@)">
            <summary>
            根据关键字比它大的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.checkRemoveCount1(`0)">
            <summary>
            删除节点计数
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.removeCount1(`0)">
            <summary>
            删除节点计数
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.clearLeft">
            <summary>
            清除左节点并重置节点数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.removeLeftCount">
            <summary>
            删除左节点计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.rightToLeft">
            <summary>
            右节点移动到左节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.rightToLeft(`0)">
            <summary>
            右节点移动到左节点
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.checkLeftRight">
            <summary>
            检测左节点的右节点
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.clearRight">
            <summary>
            清除左节点并重置节点数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.removeRightCount">
            <summary>
            删除左节点计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.leftToRight">
            <summary>
            右节点移动到左节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.leftToRight(`0)">
            <summary>
            右节点移动到左节点
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.checkRightLeft">
            <summary>
            检测右节点的左节点
            </summary>
        </member>
        <member name="T:AutoCSer.SearchTree.PageArray`1">
            <summary>
            分页数组数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`1.SkipCount">
            <summary>
            跳过数据
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`1.Index">
            <summary>
            数组位置
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`1.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.PageArray`1.IsArray">
            <summary>
            数组写入是否完成
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.PageArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns>数组写入是否完成</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.PageArray`1.AddDesc(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns>数组位置</returns>
        </member>
        <member name="T:AutoCSer.SearchTree.PageArray`2">
            <summary>
            分页数组数据
            </summary>
            <typeparam name="VT"></typeparam>
            <typeparam name="AT"></typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`2.SkipCount">
            <summary>
            跳过数据
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`2.Index">
            <summary>
            数组位置
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`2.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`2.GetValue">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.PageArray`2.IsArray">
            <summary>
            数组写入是否完成
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.PageArray`2.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns>数组写入是否完成</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.PageArray`2.AddDesc(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns>数组位置</returns>
        </member>
        <member name="T:AutoCSer.SearchTree.Set`1">
            <summary>
            二叉搜索树集合
            </summary>
            <typeparam name="T">关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.SearchTree.Set`1.Node">
            <summary>
            二叉搜索树集合节点
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.#ctor(`0)">
            <summary>
            二叉搜索树集合
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Node.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Node.Frist">
            <summary>
            获取第一组数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Node.Last">
            <summary>
            获取最后一组数据
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.Get(`0@)">
            <summary>
            根据关键字获取二叉树节点
            </summary>
            <param name="key">关键字</param>
            <returns>匹配节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.At(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.at(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.Add(`0@)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.changeKey(`0@)">
            <summary>
            交换节点数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.checkLeft">
            <summary>
            检测左节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.checkRight">
            <summary>
            检测右节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.Remove(`0@)">
            <summary>
            删除数据
            </summary>
            <param name="key">关键字</param>
            <returns>被删除节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.Remove">
            <summary>
            删除当前节点
            </summary>
            <returns>用户替换当前节点的节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.removeMin">
            <summary>
            删除最小节点
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.SearchTree.Set`1.boot">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Count">
            <summary>
            节点数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Height">
            <summary>
            获取树高度，时间复杂度 O(n)
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Frist">
            <summary>
            获取第一组数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Last">
            <summary>
            获取最后一组数据
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.#ctor">
            <summary>
            二叉树集合
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Add(`0@)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Remove(`0)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Remove(`0@)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Contains(`0)">
            <summary>
            判断是否包含关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否包含关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Contains(`0@)">
            <summary>
            判断是否包含关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否包含关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.IndexOf(`0)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.IndexOf(`0@)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.CountLess(`0@)">
            <summary>
            根据关键字比它小的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.CountThan(`0@)">
            <summary>
            根据关键字比它大的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.At(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.AsciiBuilder">
            <summary>
            状态数据创建器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.values">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.Data">
            <summary>
            状态数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.chars">
            <summary>
            状态字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.prefix">
            <summary>
            前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.table">
            <summary>
            状态矩阵
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.stateCount">
            <summary>
            状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.tableCount">
            <summary>
            矩阵状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.prefixSize">
            <summary>
            前缀数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.charCount">
            <summary>
            状态字符数量
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.#ctor(AutoCSer.KeyValue{System.String,System.Int32}[],System.Boolean)">
            <summary>
            状态数据创建器
            </summary>
            <param name="values">状态集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.count(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算状态数量
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.create(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建状态数据
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.Create(System.String[],System.Boolean)">
            <summary>
            创建状态查找数据
            </summary>
            <param name="states">状态集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
            <returns>状态查找数据</returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.AsciiSearcher">
            <summary>
            ASCII 字节搜索器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.#ctor(AutoCSer.Memory.Pointer)">
            <summary>
            ASCII字节搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.#ctor(AutoCSer.Memory.Pointer@)">
            <summary>
            ASCII字节搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.UnsafeSearch(System.Char*@)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="T:AutoCSer.Threading.AutoWaitCount">
            <summary>
            计数等待
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.AutoWaitCount.count">
            <summary>
            当前计数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.AutoWaitCount.waitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.AutoWaitCount.#ctor(System.Int32)">
            <summary>
            计数等待
            </summary>
            <param name="count">当前计数</param>
        </member>
        <member name="M:AutoCSer.Threading.AutoWaitCount.Free">
            <summary>
            减少计数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.AutoWaitCount.WaitSet(System.Int32)">
            <summary>
            等待计数完成并重置计数
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.AwaitCallBack">
            <summary>
            异步回调 await 包装
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.AwaitCallBack.continuation">
            <summary>
            await 异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.AwaitCallBack.isTaskRun">
            <summary>
            回调是否调用 Task.Run 处理处理
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.AwaitCallBack.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack.#ctor(System.Boolean)">
            <summary>
            异步回调 await 包装
            </summary>
            <param name="isTaskRun">默认为 false 同步回调，设置为 true 调用 Task.Run 处理</param>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack.Wait">
            <summary>
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack.GetResult">
            <summary>
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack.GetAwaiter">
            <summary>
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack.Callback">
            <summary>
            异步回调包装
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.AwaitCallBack`1">
            <summary>
            异步回调 await 包装
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.AwaitCallBack`1.continuation">
            <summary>
            await 异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.AwaitCallBack`1.returnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.AwaitCallBack`1.isTaskRun">
            <summary>
            回调是否调用 Task.Run 处理处理
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.AwaitCallBack`1.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack`1.#ctor(System.Boolean)">
            <summary>
            异步回调 await 包装
            </summary>
            <param name="isTaskRun">默认为 false 同步回调，设置为 true 调用 Task.Run 处理</param>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack`1.Wait">
            <summary>
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack`1.GetResult">
            <summary>
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack`1.GetAwaiter">
            <summary>
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Threading.AwaitCallBack`1.Callback(`0)">
            <summary>
            异步回调
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.CallbackEnumerator`1">
            <summary>
            持续回调转 IAsyncEnumerator{T} 包装，MoveNext 操作不支持多任务并发 await 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumerator`1.moveNext">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumerator`1.returnValueQueue">
            <summary>
            返回值队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumerator`1.queueLock">
            <summary>
            返回值队列访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.CallbackEnumerator`1.Current">
            <summary>
            当前返回数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumerator`1.#ctor(System.Boolean)">
            <summary>
            持续回调转 IAsyncEnumerator{T} 包装
            </summary>
            <param name="isThreadPool">回调处理是否启动线程，回调无阻塞的情况应该设置为 false 直接同步回调</param>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumerator`1.System#IAsyncDisposable#DisposeAsync">
            <summary>
            释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumerator`1.Callback(`0)">
            <summary>
            数据回调
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumerator`1.MoveNext">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumerator`1.System#Collections#Generic#IAsyncEnumerator{T}#MoveNextAsync">
            <summary>
            判断是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumerator`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            获取 IAsyncEnumerator{T}
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumerator`1.GetAsyncEnumerable(AutoCSer.Threading.CallbackEnumerator{`0})">
            <summary>
            获取 IAsyncEnumerable
            </summary>
            <param name="enumeratorCommand"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.CallbackEnumeratorMoveNext">
            <summary>
            持续回调转 IAsyncEnumerator{T} 包装，是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumeratorMoveNext.isThreadPool">
            <summary>
            回调处理是否启动线程
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.CallbackEnumeratorMoveNext.IsCompleted">
            <summary>
            完成状态（重用需求不允许设置 IsCompleted = true 比较设置完以后马上被读取掉导致重复执行）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumeratorMoveNext.IsCurrentMoveNext">
            <summary>
            枚举命令是否存在下一个数据 是否当前等待数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumeratorMoveNext.isNextValue">
            <summary>
            是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumeratorMoveNext.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.CallbackEnumeratorMoveNext.MoveNextTrue">
            <summary>
            枚举命令存在下一个数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumeratorMoveNext.#ctor(System.Boolean)">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
            <param name="isThreadPool">回调处理是否启动线程，回调无阻塞的情况应该设置为 false 直接同步回调</param>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumeratorMoveNext.#ctor(System.Boolean,System.Boolean)">
            <summary>
            枚举命令是否存在下一个数据
            </summary>
            <param name="isThreadPool">回调处理是否启动线程，回调无阻塞的情况应该设置为 false 直接同步回调</param>
            <param name="isNextValue"></param>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumeratorMoveNext.Wait">
            <summary>
            等待下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumeratorMoveNext.GetResult">
            <summary>
            是否成功添加输出队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumeratorMoveNext.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumeratorMoveNext.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumeratorMoveNext.SetNextValue">
            <summary>
            设置是否存在下一个数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.CallbackEnumeratorMoveNext.PushValue">
            <summary>
            添加新数据
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumeratorMoveNext.ThreadPoolNextValueTrue">
            <summary>
            枚举命令存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.CallbackEnumeratorMoveNext.NextValueTrue">
            <summary>
            枚举命令存在下一个数据
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.DistributedMillisecondIdentityGenerator">
            <summary>
            分布式毫秒ID生成器（毫秒内超出计算范围时自动移动到下一个毫秒数据）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DistributedMillisecondIdentityGenerator.distributed">
            <summary>
            分布式编号
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DistributedMillisecondIdentityGenerator.identityIncrement">
            <summary>
            ID 增量
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DistributedMillisecondIdentityGenerator.#ctor(System.Byte,System.Byte,System.Int64)">
            <summary>
            分布式毫秒ID生成器
            </summary>
            <param name="bits">毫秒内计数 2 进制位数 + 分布式编号 2 进制位数</param>
            <param name="distributedBits">分布式编号 2 进制位数</param>
            <param name="identityIncrement">ID 增量</param>
        </member>
        <member name="M:AutoCSer.Threading.DistributedMillisecondIdentityGenerator.#ctor(System.UInt16,System.Byte,System.Byte)">
            <summary>
            分布式毫秒ID生成器
            </summary>
            <param name="distributed">分布式编号</param>
            <param name="distributedBits">分布式编号 2 进制位数，默认为 10 表示支持 1024 台服务器</param>
            <param name="identityBits">毫秒内计数 2 进制位数，默认为 10 表示支持每毫秒 1024 个 ID</param>
        </member>
        <member name="M:AutoCSer.Threading.DistributedMillisecondIdentityGenerator.GetNext">
            <summary>
            获取下一个ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.InterfaceControllerTaskQueue">
            <summary>
            接口任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueue.queue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueue.ThreadId">
            <summary>
            队列线程ID
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueue.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueue.AddOnly(AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueue.Add(AutoCSer.Threading.InterfaceControllerTaskQueue,AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase)">
            <summary>
            添加任务
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueue.Add(AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueue.Add``1(AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode{``0})">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
            <typeparam name="T">返回值类型</typeparam>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueue.CreateController``2(``1)">
            <summary>
            创建接口任务队列调用接口实例
            </summary>
            <typeparam name="T">调用接口类型</typeparam>
            <typeparam name="ST">服务实现实例</typeparam>
            <param name="service">服务实现实例类型</param>
            <returns>调用接口实例</returns>
        </member>
        <member name="T:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode">
            <summary>
            自定义任务队列节点 await AutoCSer.Net.CommandClientReturnValue
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode.queue">
            <summary>
            接口任务队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode.#ctor(AutoCSer.Net.CommandServer.ClientCallbackTypeEnum)">
            <summary>
            接口任务队列节点
            </summary>
            <param name="callbackType">客户端 await 等待返回值回调线程模式</param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode.CheckQueue(AutoCSer.Threading.InterfaceControllerTaskQueue)">
            <summary>
            检查是否已经添加到队列
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode.SetReturn">
            <summary>
            设置返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode`1">
            <summary>
            自定义任务队列节点 await AutoCSer.Net.CommandClientReturnValue{T}
            </summary>
            <typeparam name="T">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode`1.queue">
            <summary>
            接口任务队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode`1.#ctor(AutoCSer.Net.CommandServer.ClientCallbackTypeEnum)">
            <summary>
            接口任务队列节点
            </summary>
            <param name="callbackType">客户端 await 等待返回值回调线程模式</param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode`1.CheckQueue(AutoCSer.Threading.InterfaceControllerTaskQueue)">
            <summary>
            检查是否已经添加到队列
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueCustomNode`1.SetReturn(`0)">
            <summary>
            设置返回值
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="T:AutoCSer.Threading.InterfaceControllerTaskQueueMethodAttribute">
            <summary>
            接口任务队列节点方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueueMethodAttribute.CallbackType">
            <summary>
            数据回调线程模式，默认为 CheckRunTask
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueueMethodAttribute.Default">
            <summary>
            默认接口任务队列节点方法配置
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.InterfaceControllerTaskQueueNode">
            <summary>
            接口任务队列节点 await AutoCSer.Net.CommandClientReturnValue
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode.#ctor(AutoCSer.Net.CommandServer.ClientCallbackTypeEnum)">
            <summary>
            接口任务队列节点
            </summary>
            <param name="callbackType">客户端 await 等待返回值回调线程模式</param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode.Wait">
            <summary>
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode.GetResult">
            <summary>
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode.SetReturnType(AutoCSer.Threading.InterfaceControllerTaskQueueNode)">
            <summary>
            设置返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.InterfaceControllerTaskQueueNode`1">
            <summary>
            接口任务队列节点 await AutoCSer.Net.CommandClientReturnValue{T}
            </summary>
            <typeparam name="T">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueueNode`1.returnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode`1.#ctor(AutoCSer.Net.CommandServer.ClientCallbackTypeEnum)">
            <summary>
            接口任务队列节点
            </summary>
            <param name="callbackType">客户端 await 等待返回值回调线程模式</param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode`1.Wait">
            <summary>
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode`1.GetResult">
            <summary>
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode`1.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode`1.SetReturn(`0,System.Boolean)">
            <summary>
            设置返回值
            </summary>
            <param name="returnValue"></param>
            <param name="isSynchronousThread"></param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNode`1.SetReturn(AutoCSer.Threading.InterfaceControllerTaskQueueNode{`0},`0)">
            <summary>
            设置返回值
            </summary>
            <param name="node"></param>
            <param name="returnValue"></param>
        </member>
        <member name="T:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase">
            <summary>
            接口任务队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.returnType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.callbackType">
            <summary>
            客户端 await 等待返回值回调线程模式
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.#ctor(AutoCSer.Net.CommandServer.ClientCallbackTypeEnum)">
            <summary>
            接口任务队列节点
            </summary>
            <param name="callbackType">客户端 await 等待返回值回调线程模式</param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.RunTask">
            <summary>
            执行任务（需要主动调用 SetReturn）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.RunTask(AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase@)">
            <summary>
            执行任务
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:AutoCSer.Threading.InterfaceControllerTaskQueueNodeBase.SetReturnType(AutoCSer.Net.CommandClientReturnTypeEnum,System.Boolean)">
            <summary>
            设置返回值类型
            </summary>
            <param name="returnType"></param>
            <param name="isSynchronousThread"></param>
        </member>
        <member name="T:AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod">
            <summary>
            接口任务队列节点匹配方法
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod.Method">
            <summary>
            接口任务队列节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod.Parameters">
            <summary>
            接口任务队列节点方法参数集合
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            接口任务队列节点匹配方法
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod.Equals(AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.TaskQueueInterfaceControllerMethod">
            <summary>
            接口任务队列节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceControllerMethod.MethodAttribute">
            <summary>
            接口任务队列节点方法配置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceControllerMethod.ServiceMethod">
            <summary>
            服务实例方法
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueInterfaceControllerMethod.#ctor(System.Type,AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod,System.Reflection.MethodInfo)">
            <summary>
            接口任务队列节点方法
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="serviceMethod"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueInterfaceControllerMethod.GetMethod(System.Type,System.Collections.Generic.Dictionary{AutoCSer.Threading.TaskQueueInterfaceControllerMatchMethod,System.Reflection.MethodInfo},AutoCSer.LeftArray{AutoCSer.Threading.TaskQueueInterfaceControllerMethod}@)">
            <summary>
            获取接口方法集合
            </summary>
            <param name="type"></param>
            <param name="serviceMethods"></param>
            <param name="methods"></param>
            <returns>错误信息</returns>
        </member>
        <member name="T:AutoCSer.Threading.LocalMillisecondIdentityGenerator">
            <summary>
            本地毫秒ID生成器（毫秒内超出计算范围时自动移动到下一个毫秒数据）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LocalMillisecondIdentityGenerator.#ctor(System.Byte)">
            <summary>
            毫秒ID生成器
            </summary>
            <param name="bits">毫秒内计数 2 进制位数，默认为 20 表示支持持续 278 年每秒 10亿 个 ID</param>
        </member>
        <member name="M:AutoCSer.Threading.LocalMillisecondIdentityGenerator.GetNext">
            <summary>
            获取下一个ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager">
            <summary>
            可重入异步锁管理（非线程安全，不支持多线程并发操作同一个异步上下文）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager.Manager">
            <summary>
            可重入异步锁管理
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager.Get">
            <summary>
            获取可重入异步锁管理，第一次（最外层）调用该方法的调用点为当前异步可重入锁的异步上下文，对于上层异步调用无效
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager.locks">
            <summary>
            异步锁重入计数
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager.Count">
            <summary>
            当前异步上下文锁数量
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager.enter(AutoCSer.Threading.SemaphoreSlimLock)">
            <summary>
            申请锁计数
            </summary>
            <param name="semaphoreSlimLock"></param>
        </member>
        <member name="M:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager.Enter(AutoCSer.Threading.SemaphoreSlimLock)">
            <summary>
            申请锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager.EnterAsync(AutoCSer.Threading.SemaphoreSlimLock)">
            <summary>
            申请锁
            </summary>
            <param name="semaphoreSlimLock"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.ReentrantSemaphoreSlimLockManager.Exit(AutoCSer.Threading.SemaphoreSlimLock)">
            <summary>
            释放锁计数
            </summary>
            <param name="semaphoreSlimLock"></param>
            <returns>失败表示没有找到需要释放的锁，意味着应用层出现锁申请与释放不匹配的情况</returns>
        </member>
        <member name="T:AutoCSer.Threading.SynchronizationContextAction">
            <summary>
            同步上下文调用
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SynchronizationContextAction.call">
            <summary>
            调用委托
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SynchronizationContextAction.#ctor(System.Action)">
            <summary>
            同步上下文调用
            </summary>
            <param name="call">调用委托</param>
        </member>
        <member name="M:AutoCSer.Threading.SynchronizationContextAction.Call(System.Object)">
            <summary>
            调用委托
            </summary>
            <param name="_"></param>
        </member>
        <member name="T:AutoCSer.Threading.SynchronizationContextAction`1">
            <summary>
            同步上下文调用
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.SynchronizationContextAction`1.call">
            <summary>
            调用委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.SynchronizationContextAction`1.parameter">
            <summary>
            调用参数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.SynchronizationContextAction`1.#ctor(System.Action{`0},`0)">
            <summary>
            同步上下文调用
            </summary>
            <param name="call">调用委托</param>
            <param name="parameter">调用参数</param>
        </member>
        <member name="M:AutoCSer.Threading.SynchronizationContextAction`1.Call(System.Object)">
            <summary>
            调用委托
            </summary>
            <param name="_"></param>
        </member>
        <member name="T:AutoCSer.Threading.TaskQueue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueue.queue">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueue.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueue.AddOnly(AutoCSer.Threading.QueueTaskNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueue.Add(AutoCSer.Net.CommandServerCallQueueCustomNode)">
            <summary>
            添加任务
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.Threading.TaskQueueInterfaceController">
            <summary>
            控制器接口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceController.ObjectConstructorInfo">
            <summary>
            object 构造函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceController.NodeConstructorParameterTypes">
            <summary>
            接口任务队列节点构造函数参数集合信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceController.NodeConstructorInfo">
            <summary>
            接口任务队列节点构造函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceController.InterfaceControllerTaskQueueAdd">
            <summary>
            添加任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceController.InterfaceControllerTaskQueueNodeSetReturnType">
            <summary>
            设置返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceController.nodeTypeIndex">
            <summary>
            任务节点类型序号
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueInterfaceController.GetNodeTypeName">
            <summary>
            获取任务节点类型序号
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.TaskQueueInterfaceController`2">
            <summary>
            控制器接口信息
            </summary>
            <typeparam name="T">调用接口类型</typeparam>
            <typeparam name="ST">服务实现实例</typeparam>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueInterfaceController`2.Create(AutoCSer.Threading.InterfaceControllerTaskQueue,`1)">
            <summary>
            创建接口任务队列控制器
            </summary>
            <param name="queue"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceController`2.callConstructor">
            <summary>
            控制器构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueInterfaceController`2.controllerConstructorException">
            <summary>
            控制器构造错误
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TaskQueueBase">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueBase.threadHandle">
            <summary>
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueBase.waitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskQueueBase.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueBase.#ctor">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskQueueBase.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TaskRunTimer">
            <summary>
            定时任务运行时间
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskRunTimer.runTime">
            <summary>
            下一次运行时间
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TaskRunTimer.intervalSeconds">
            <summary>
            运行间隔秒数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TaskRunTimer.#ctor(System.Double)">
            <summary>
            定时任务运行时间
            </summary>
            <param name="intervalSeconds">运行间隔秒数</param>
        </member>
        <member name="M:AutoCSer.Threading.TaskRunTimer.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            按天运行的定时任务运行时间
            </summary>
            <param name="hour">开始执行小时</param>
            <param name="minute">开始执行分钟</param>
            <param name="second">开始执行秒数</param>
            <param name="intervalSeconds">间隔执行秒数</param>
        </member>
        <member name="M:AutoCSer.Threading.TaskRunTimer.Delay">
            <summary>
            等待运行时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.XmlDeserializer">
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 解析器
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
            <summary>
            XML 反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Decimal@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.UInt64@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.UInt64}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.UInt64}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.AllMemberAttribute">
            <summary>
            默认解析所有成员
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="P:AutoCSer.XmlDeserializer.ArrayItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.attributes">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.valueStart">
            <summary>
            当前数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.valueSize">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.attributeNameStartIndex">
            <summary>
            属性名称起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.attributeNameEndIndex">
            <summary>
            属性名称结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.sign">
            <summary>
            数字符号
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.IsCData">
            <summary>
            当前数据是否CDATA
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.isTagEnd">
            <summary>
            名称解析节点是否结束
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.#ctor">
            <summary>
            XML 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserialize``1(AutoCSer.SubString@,``0@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserialize``1(System.String,``0@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserialize``1(System.Char*,System.Int32,``0@)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="length"></param>
            <param name="value">目标数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserialize``1(``0@)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">目标数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserializeValue``1(``0@)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.freeThreadStatic">
            <summary>
            释放 XML 解析器（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Free">
            <summary>
            释放 XML 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.space">
            <summary>
            空格过滤
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.attribute">
            <summary>
            属性解析
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.attributeName">
            <summary>
            属性名称解析
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.attributeValue">
            <summary>
            属性值解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IsValue">
            <summary>
            判断否存存在数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IgnoreValue">
            <summary>
            忽略数据
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.getName(System.Int32@)">
            <summary>
            获取节点名称
            </summary>
            <param name="nameSize">节点名称长度</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.getNameOnly(System.Int32@)">
            <summary>
            获取节点名称
            </summary>
            <param name="nameSize">节点名称长度</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.CheckNameEnd(System.Char*,System.Int32)">
            <summary>
            节点名称结束检测
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.CheckNameEnd(AutoCSer.Memory.Pointer@)">
            <summary>
            节点名称结束检测
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IsName(System.Byte*,System.Int32@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IsNameEnd(System.Byte*)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.GetName(AutoCSer.Memory.Pointer@,System.Byte@)">
            <summary>
            获取节点名称
            </summary>
            <param name="name">节点名称</param>
            <param name="isTagEnd">名称解析节点是否结束</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IsArrayItem(System.Char*,System.Int32)">
            <summary>
            是否存在数组数据
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IsArrayItem(AutoCSer.Memory.Pointer@)">
            <summary>
            是否存在数组数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IsEnumNumberUnsigned">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IsEnumNumberSigned">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.searchValue">
            <summary>
            查找数据起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IgnoreSearchValue">
            <summary>
            忽略数据
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.IsNextFlagEnum">
            <summary>
            枚举值是否结束
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.SearchValueEnd">
            <summary>
            数据结束处理
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.NextEnumChar">
            <summary>
            读取下一个枚举字符
            </summary>
            <returns>枚举字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.NextCDataEnumChar">
            <summary>
            读取下一个枚举字符
            </summary>
            <returns>枚举字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.decodeChar(System.Char@)">
            <summary>
            字符解码
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.SearchCDataValue">
            <summary>
            查找CDATA数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.getValue">
            <summary>
            获取文本数据
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.getValueEnd">
            <summary>
            数据结束处理
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.endSpace">
            <summary>
            空格过滤
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserializeHex32(System.UInt32@)">
            <summary>
            解析16进制数字
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserializeUInt32(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.DeserializeNumber(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.DeserializeNumber(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.DeserializeNumber(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.DeserializeNumber(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.DeserializeNumber(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.DeserializeNumber(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserializeHex64">
            <summary>
            解析16进制数字
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserializeUInt64(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.DeserializeNumber(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.DeserializeNumber(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Deserialize``1(AutoCSer.XmlDeserializer,``0@)">
            <summary>
            JSON 反序列化
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Array``1(AutoCSer.XmlDeserializer,``0[]@)">
            <summary>
            数组解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.LeftArray``1(AutoCSer.XmlDeserializer,AutoCSer.LeftArray{``0}@)">
            <summary>
            数组解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.ListArray``1(AutoCSer.XmlDeserializer,AutoCSer.ListArray{``0}@)">
            <summary>
            数组解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.enumerable``1">
            <summary>
            集合解析
            </summary>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Collection``2(AutoCSer.XmlDeserializer,``0@)">
            <summary>
            集合反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="collection"></param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Nullable``1(AutoCSer.XmlDeserializer,System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.baseDeserialize``2(``0@)">
            <summary>
            基类转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Base``2(AutoCSer.XmlDeserializer,``0@)">
            <summary>
            基类转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.keyValuePair``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            键值对解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.KeyValuePair``2(AutoCSer.XmlDeserializer,System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            键值对解析
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.NotSupport``1(AutoCSer.XmlDeserializer,``0@)">
            <summary>
            自定义反序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Constructor``1(``0@)">
            <summary>
            构造函数调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.CustomDeserialize``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.SetCustomError(System.String)">
            <summary>
            设置反序列化自定义错误状态
            </summary>
            <param name="customError">自定义错误</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.isNaN">
            <summary>
            是否非数字 NaN
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.isPositiveInfinity">
            <summary>
            是否 Infinity
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.isNegativeInfinity">
            <summary>
            是否 -Infinity
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Single@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Double@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Char@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserializeHex2">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deserializeHex4">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.deSerialize(AutoCSer.GuidCreator@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Guid@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.searchCData2">
            <summary>
            查找CDATA数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.decodeString(System.Char*,System.Char*)">
            <summary>
            字符串解码
            </summary>
            <param name="write"></param>
            <param name="writeEnd"></param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(AutoCSer.SubString@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,AutoCSer.SubString@)">
            <summary>
            字符串解析
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Object@)">
            <summary>
            对象解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Object@)">
            <summary>
            对象解析
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(AutoCSer.XmlNode@)">
            <summary>
            XML节点解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,AutoCSer.XmlNode@)">
            <summary>
            对象解析
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Deserialize``1(System.String,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Deserialize``1(System.String,``0@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Deserialize``1(AutoCSer.SubString,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Deserialize``1(AutoCSer.SubString,``0@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Deserialize``1(AutoCSer.SubString@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.Deserialize``1(AutoCSer.SubString@,``0@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.UnsafeDeserialize``1(System.Char*,System.Int32,``0@)">
            <summary>
            XML 反序列化
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="length">XML 长度</param>
            <param name="value">目标数据</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.ThreadStaticDeserialize``1(System.String,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.ThreadStaticDeserialize``1(System.String,``0@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString,``0@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.ThreadStaticDeserialize``1(AutoCSer.SubString@,``0@,AutoCSer.XmlDeserializeConfig)">
            <summary>
            XML 反序列化（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>反序列化状态</returns>
        </member>
        <member name="T:AutoCSer.XmlDeserializer.DeserializeDelegate`1">
            <summary>
            解析委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.deserializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.GetDeserializeDelegate(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.spaceBit">
            <summary>
            XML解析空格[ ,\t,\r,\n]
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.targetStartCheckBit">
            <summary>
            XML解析名称检测
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.attributeNameSearchBit">
            <summary>
            XML解析属性名称查找
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.EncodeSpaceBit">
            <summary>
            XML序列化转换字符[ ,\t,\r,\n,&amp;,>,&lt;]
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.EncodeBit">
            <summary>
            XML序列化转换字符[&amp;,>,&lt;]
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.DeserializeBits">
            <summary>
            字符状态位
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializer.decodeSearcher">
            <summary>
            字符 Decode 转码
            </summary>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Int64@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Int64}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Int64}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.UInt32@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.UInt32}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.UInt32}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Int32@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Int32}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Int32}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.UInt16@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.UInt16}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.UInt16}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Int16@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Int16}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Int16}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Byte@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Byte}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Byte}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.SByte@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.SByte}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.SByte}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Boolean@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Boolean}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Single@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Single}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Single}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Double@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Double}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Double}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Decimal@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Decimal}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Decimal}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Char@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Char}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Char}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.DateTime@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.DateTime}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.DateTime}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.TimeSpan@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.TimeSpan}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.TimeSpan}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Guid@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Nullable{System.Guid}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.primitiveDeserialize(AutoCSer.XmlDeserializer,System.Nullable{System.Guid}@)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.DateTime@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.TimeSpan@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlDeserializer.PrimitiveDeserialize(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="T:AutoCSer.Xml.EnumULongDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.EnumULongDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumULongDeserialize`1.tryDeserializeNumber(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.EnumULongDeserialize`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumULongDeserialize`1.DeserializeFlags(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.Common">
            <summary>
            公共调用
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Common.getTypeSerializeDelegate(System.Type,AutoCSer.Extensions.Metadata.GenericType@,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Common.GetTypeSerializeDelegate(AutoCSer.Extensions.Metadata.GenericType,AutoCSer.TextSerialize.DelegateReference@,AutoCSer.XmlSerializeAttribute@)">
            <summary>
            获取类型默认序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="serializeDelegateReference"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.Common.memberSerializeDelegates">
            <summary>
            成员序列化委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Common.memberSerializeDelegateLock">
            <summary>
            成员序列化委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Common.GetMemberSerializeDelegate(System.Type)">
            <summary>
            获取成员序列化委托
            </summary>
            <param name="type">成员类型</param>
        </member>
        <member name="M:AutoCSer.Xml.Common.getMemberSerializeDelegate(System.Type)">
            <summary>
            获取成员序列化委托
            </summary>
            <param name="type">成员类型</param>
        </member>
        <member name="M:AutoCSer.Xml.Common.CheckCompleted(System.Type,AutoCSer.TextSerialize.DelegateReference@)">
            <summary>
            计算状态完成检查
            </summary>
            <param name="type"></param>
            <param name="reference"></param>
        </member>
        <member name="M:AutoCSer.Xml.Common.Check(AutoCSer.TextSerialize.LoopTypeArray@,System.Type,System.Collections.Generic.HashSet{AutoCSer.HashObject{System.Type}})">
            <summary>
            循环引用检查
            </summary>
            <param name="array"></param>
            <param name="type"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.Common.isOutputSubStringMethod">
            <summary>
            是否输出字符串函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Common.isOutputStringMethod">
            <summary>
            是否输出字符串函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Common.isOutputMethod">
            <summary>
            是否输出对象函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Common.GetIsOutputDelegate(System.Type)">
            <summary>
            获取是否输出对象函数信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Common.GetIsOutputNullable(System.Type)">
            <summary>
            获取是否输出可空对象函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组转换委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Xml.Common.getTypeDeserializeDelegate(System.Type,AutoCSer.Extensions.Metadata.GenericType@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Common.GetTypeDeserializeDelegate(AutoCSer.Extensions.Metadata.GenericType,AutoCSer.XmlSerializeAttribute@)">
            <summary>
            获取类型默认反序列化委托
            </summary>
            <param name="genericType"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.Common.memberDeserializeDelegates">
            <summary>
            成员反序列化委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Common.memberDeserializeDelegateLock">
            <summary>
            成员反序列化委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Common.GetMemberDeserializeDelegate(System.Type)">
            <summary>
            获取成员反序列化委托
            </summary>
            <param name="type">成员类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Common.getMemberDeserializeDelegate(System.Type)">
            <summary>
            获取成员反序列化委托
            </summary>
            <param name="type">成员类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Common.CreateDynamicMethod(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建成员反序列化委托
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Common.CreateDynamicMethod(System.Type,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            创建成员反序列化委托
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <param name="propertyMethod"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.CustomConfig">
            <summary>
            自定义全局配置
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.GetCustomSerializeDelegate(System.Type)">
            <summary>
            根据类型获取 XML 自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.XmlSerializer，第二参数类型为具体数据类型，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.Write(AutoCSer.XmlSerializer,System.DateTime)">
            <summary>
            写入时间值
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.Write(AutoCSer.XmlSerializer,System.TimeSpan)">
            <summary>
            写入时间值
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.NotSupport``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            自定义序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
            <returns>未写入字符数量</returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.GeteCustomDeserializDelegate(System.Type)">
            <summary>
            根据类型获取 XML 自定义类型(比如泛型)序列化函数，必须是静态方法，第一个参数类型为 AutoCSer.XmlDeserializer，第二参数类型为具体数据类型 ref，返回值类型为 void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.Deserialize(AutoCSer.XmlDeserializer,AutoCSer.Memory.Pointer,System.Single@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.Deserialize(AutoCSer.XmlDeserializer,AutoCSer.Memory.Pointer,System.Double@)">
            <summary>
            自定义反序列化浮点数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.Deserialize(AutoCSer.XmlDeserializer,AutoCSer.Memory.Pointer,System.Decimal@)">
            <summary>
            自定义反序列化小数
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.Deserialize(AutoCSer.XmlDeserializer,AutoCSer.Memory.Pointer,System.DateTime@)">
            <summary>
            自定义反序列化时间值
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.Deserialize(AutoCSer.XmlDeserializer,AutoCSer.Memory.Pointer,System.TimeSpan@)">
            <summary>
            自定义反序列化时间值
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.CustomConfig.NotSupport``1(AutoCSer.XmlDeserializer,``0@)">
            <summary>
            自定义反序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deserializer">XML 反序列化</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.CustomSerializeGenericType">
            <summary>
            自定义 XML 序列化泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.CustomSerializeGenericType.SerializeDelegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.CustomSerializeGenericType.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.CustomSerializeGenericType.create``1">
            <summary>
            创建自定义 XML 序列化泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.CustomSerializeGenericType.createMethod">
            <summary>
            创建泛型类型元数据 函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.CustomSerializeGenericType.Get(System.Type)">
            <summary>
            获取自定义 XML 序列化泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.CustomSerializeGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Xml.CustomSerializeGenericType`1.Serialize(AutoCSer.XmlSerializer,`0)">
            <summary>
            自定义序列化
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="P:AutoCSer.Xml.CustomSerializeGenericType`1.SerializeDelegate">
            <summary>
            自定义序列化委托
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.CustomSerializeGenericType`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            自定义反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
        </member>
        <member name="P:AutoCSer.Xml.CustomSerializeGenericType`1.DeserializeDelegate">
            <summary>
            自定义反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.DeserializeResult">
            <summary>
            XML 解析结果
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeResult.Index">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeResult.Xml">
            <summary>
            XML 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeResult.CustomError">
            <summary>
            自定义错误
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.DeserializeResult.#ctor(AutoCSer.Metadata.MemberMap)">
            <summary>
            XML 反序列化状态结果
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Xml.DeserializeResult.#ctor(AutoCSer.Xml.DeserializeStateEnum,System.Int32,System.String,System.String)">
            <summary>
            XML 反序列化状态结果
            </summary>
            <param name="state"></param>
            <param name="index"></param>
            <param name="xml"></param>
            <param name="customError"></param>
        </member>
        <member name="M:AutoCSer.Xml.DeserializeResult.#ctor(AutoCSer.Xml.DeserializeStateEnum,AutoCSer.SubString@,System.Int32,System.String)">
            <summary>
            XML 反序列化状态结果
            </summary>
            <param name="state"></param>
            <param name="xml"></param>
            <param name="index"></param>
            <param name="customError"></param>
        </member>
        <member name="M:AutoCSer.Xml.DeserializeResult.op_Implicit(AutoCSer.Xml.DeserializeResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.DeserializeStateEnum">
            <summary>
            XML 解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NullXml">
            <summary>
            XML字符串参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.HeaderError">
            <summary>
            xml头部解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NoteError">
            <summary>
            注释错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundBootNodeEnd">
            <summary>
            没有找到根节点结束标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundBootNodeStart">
            <summary>
            没有找到根节点开始标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundTagStart">
            <summary>
            没有找到名称标签开始符号
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundTagEnd">
            <summary>
            没有找到匹配的结束标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundAttributeName">
            <summary>
            属性名称解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundAttributeValue">
            <summary>
            属性值解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotArrayItem">
            <summary>
            数组节点解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundValue">
            <summary>
            没有找到预期数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundValueEnd">
            <summary>
            没有找到预期数据结束
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotFoundCDATAStart">
            <summary>
            没有找到预期的CDATA开始
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotNumber">
            <summary>
            非数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotHex">
            <summary>
            16进制数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NoFoundEnumValue">
            <summary>
            没有找到匹配的枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotEnumChar">
            <summary>
            非枚举字符
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotBool">
            <summary>
            逻辑值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotChar">
            <summary>
            字符解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotDateTime">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotTimeSpan">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotGuid">
            <summary>
            Guid解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.DecodeError">
            <summary>
            字符解码失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.CrashEnd">
            <summary>
            非正常意外结束
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.ConstructorNull">
            <summary>
            构造函数返回 null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.MemberMap">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.NotSupport">
            <summary>
            不支持的类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.DeserializeStateEnum.CustomError">
            <summary>
            自定义反序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.EnumDeserialize`1">
            <summary>
            枚举值解析
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.Xml.EnumDeserialize`1.enumSearcher">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumDeserialize`1.deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumDeserialize`1.getIndex(AutoCSer.XmlDeserializer,`0@,System.Int32@,System.Int32@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
            <param name="index">第一个枚举索引</param>
            <param name="nextIndex">第二个枚举索引</param>
        </member>
        <member name="T:AutoCSer.Xml.ICustomSerialize">
            <summary>
            仅用于快速判断是否可能实现接口 ICustomSerialize{T}
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.ICustomSerialize`1">
            <summary>
            自定义序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.Xml.ICustomSerialize`1.Serialize(AutoCSer.XmlSerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Xml.ICustomSerialize`1.Deserialize(AutoCSer.XmlDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.Xml.MemberNameSearcher">
            <summary>
            成员名称搜索数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.MemberNameSearcher.type">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.MemberNameSearcher.Names">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.MemberNameSearcher.Searcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.MemberNameSearcher.#ctor">
            <summary>
            空成员名称搜索数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.MemberNameSearcher.#ctor(System.Type,System.String[])">
            <summary>
            成员名称搜索数据
            </summary>
            <param name="type"></param>
            <param name="names"></param>
        </member>
        <member name="F:AutoCSer.Xml.MemberNameSearcher.Null">
            <summary>
            空成员名称搜索数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.MemberNameSearcher.cache">
            <summary>
            成员名称查找数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.MemberNameSearcher.cacheLock">
            <summary>
            成员名称查找数据缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.MemberNameSearcher.lastSearcher">
            <summary>
            最后一次访问的搜索数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.MemberNameSearcher.Get(System.Type,System.String[])">
            <summary>
            获取成员名称查找数据
            </summary>
            <param name="type">类型</param>
            <param name="names"></param>
            <returns>成员名称查找数据</returns>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMemberDynamicMethod">
            <summary>
            序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.getCharStreamMethod">
            <summary>
            获取字符串输出缓冲区属性方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.SetItemNameMethod">
            <summary>
            设置集合子节点名称函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.nameStart(System.String,AutoCSer.XmlSerializeMemberAttribute)">
            <summary>
            添加成员
            </summary>
            <param name="name"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,System.Reflection.MethodInfo,AutoCSer.XmlSerializeMemberAttribute)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="serializeMethod"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.checkNull(System.Type,System.Reflection.MethodInfo)">
            <summary>
            null 值检查
            </summary>
            <param name="memberType"></param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,System.Reflection.MethodInfo,AutoCSer.XmlSerializeMemberAttribute)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="serializeMethod"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.WriteName(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.String,System.Boolean)">
            <summary>
            写入名称
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="name"></param>
            <param name="isEnd"></param>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.genericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.#ctor(AutoCSer.Metadata.GenericType)">
            <summary>
            动态函数
            </summary>
            <param name="genericType"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.nameStart(System.String,AutoCSer.XmlSerializeMemberAttribute)">
            <summary>
            添加成员
            </summary>
            <param name="name"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,System.Reflection.MethodInfo,AutoCSer.XmlSerializeMemberAttribute)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="serializeMethod"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.checkNull(System.Type,System.Reflection.MethodInfo)">
            <summary>
            null 值检查
            </summary>
            <param name="memberType"></param>
            <param name="serializeMethod"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,System.Reflection.MethodInfo,AutoCSer.XmlSerializeMemberAttribute)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="serializeMethod"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Create(System.Type)">
            <summary>
            创建成员转换委托
            </summary>
            <param name="type">委托类型</param>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Xml.StateSearcher">
            <summary>
            枚举状态查找器
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.#ctor(AutoCSer.Memory.Pointer@)">
            <summary>
            名称查找器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.SearchEnum(AutoCSer.XmlDeserializer)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="deserializer">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchEnumOnly(AutoCSer.XmlDeserializer)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="deserializer">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchCDataEnum(AutoCSer.XmlDeserializer)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="deserializer">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.SearchFlagEnum(AutoCSer.XmlDeserializer)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="deserializer">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchFlagEnum(AutoCSer.XmlDeserializer)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="deserializer">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchCDataFlagEnum(AutoCSer.XmlDeserializer)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="deserializer">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.NextFlagEnum(AutoCSer.XmlDeserializer)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="deserializer">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="T:AutoCSer.Xml.ThreadStaticDeserializer">
            <summary>
            反序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ThreadStaticDeserializer.Deserializer">
            <summary>
            XML 反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ThreadStaticDeserializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ThreadStaticDeserializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ThreadStaticDeserializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.ThreadStaticDeserializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.ThreadStaticSerializer">
            <summary>
            序列化线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ThreadStaticSerializer.Serializer">
            <summary>
            XML 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ThreadStaticSerializer.value">
            <summary>
            线程静态变量
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ThreadStaticSerializer.createLock">
            <summary>
            创建线程静态变量访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ThreadStaticSerializer.Get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.ThreadStaticSerializer.get">
            <summary>
            默认线程静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.TypeDeserializer`1">
            <summary>
            类型反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="T:AutoCSer.Xml.TypeDeserializer`1.TryDeserializeFilter">
            <summary>
            成员解析器过滤
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeDeserializer`1.TryDeserializeFilter.deserialize">
            <summary>
            成员解析器
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeDeserializer`1.TryDeserializeFilter.itemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeDeserializer`1.TryDeserializeFilter.memberMapIndex">
            <summary>
            成员位图索引
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.TryDeserializeFilter.Set(System.Reflection.Emit.DynamicMethod,AutoCSer.Metadata.MemberIndexInfo,AutoCSer.XmlSerializeMemberAttribute)">
            <summary>
            设置数据
            </summary>
            <param name="dynamicMethod"></param>
            <param name="member"></param>
            <param name="memberAttribute"></param>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.TryDeserializeFilter.Call(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.TryDeserializeFilter.Call(AutoCSer.XmlDeserializer,AutoCSer.Metadata.MemberMap{`0},`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="memberMap">成员位图</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.TryDeserializeFilter.TryCall(AutoCSer.XmlDeserializer,AutoCSer.Metadata.MemberMap{`0},`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="memberMap">成员位图</param>
            <param name="value">目标数据</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.TypeDeserializer`1.DefaultDeserializer">
            <summary>
            解析委托
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeDeserializer`1.memberDeserializers">
            <summary>
            成员解析器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeDeserializer`1.memberSearcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeDeserializer`1.memberNames">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.deserializeValue(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.deserializeClass(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.DeserializeMembers(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数据成员解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.Array(AutoCSer.XmlDeserializer,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="deserializer">XML解析器</param>
            <param name="array">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.ArrayIndex(AutoCSer.XmlDeserializer,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="deserializer">XML解析器</param>
            <param name="array">目标数据</param>
            <returns>数据数量,-1表示失败</returns>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.Enumerable(AutoCSer.XmlDeserializer,AutoCSer.Memory.Pointer)">
            <summary>
            集合解析
            </summary>
            <param name="deserializer">XML解析器</param>
            <param name="arrayItemName">集合子节点名称</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.noMemberValue(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            无成员对象解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeDeserializer`1.noMember(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            无成员对象解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeSerializer`1">
            <summary>
            类型序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.DefaultSerializer">
            <summary>
            转换委托
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.memberSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.SerializeDelegateReference">
            <summary>
            XML 序列化委托循环引用信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.emptyString">
            <summary>
            空节点输出字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.Serialize(AutoCSer.XmlSerializer,`0@)">
            <summary>
            对象转换XML字符串
            </summary>
            <param name="serializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.Serialize(AutoCSer.XmlSerializer,`0)">
            <summary>
            对象转换XML字符串
            </summary>
            <param name="serializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.MemberSerialize(AutoCSer.XmlSerializer,`0)">
            <summary>
            对象成员序列化
            </summary>
            <param name="serializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.WriteEmptyString(AutoCSer.Memory.CharStream)">
            <summary>
            写入空节点输出字符串
            </summary>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.emptyMember(AutoCSer.XmlSerializer,`0)">
            <summary>
            XML 序列化
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.emptyMemberMap(AutoCSer.Metadata.MemberMap{`0},AutoCSer.XmlSerializer,`0,AutoCSer.Memory.CharStream)">
            <summary>
            XML 序列化
            </summary>
            <param name="memberMap"></param>
            <param name="serializer"></param>
            <param name="value"></param>
            <param name="charStream"></param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.nullMember(AutoCSer.XmlSerializer,`0)">
            <summary>
            XML 序列化
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.nullMemberMap(AutoCSer.Metadata.MemberMap{`0},AutoCSer.XmlSerializer,`0,AutoCSer.Memory.CharStream)">
            <summary>
            XML 序列化
            </summary>
            <param name="memberMap"></param>
            <param name="serializer"></param>
            <param name="value"></param>
            <param name="charStream"></param>
        </member>
        <member name="T:AutoCSer.Xml.EnumLongDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.EnumLongDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumLongDeserialize`1.tryDeserializeNumber(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.EnumLongDeserialize`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumLongDeserialize`1.DeserializeFlags(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.EnumUIntDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.EnumUIntDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumUIntDeserialize`1.tryDeserializeNumber(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.EnumUIntDeserialize`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumUIntDeserialize`1.DeserializeFlags(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.EnumIntDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.EnumIntDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumIntDeserialize`1.tryDeserializeNumber(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.EnumIntDeserialize`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumIntDeserialize`1.DeserializeFlags(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.EnumUShortDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.EnumUShortDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumUShortDeserialize`1.tryDeserializeNumber(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.EnumUShortDeserialize`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumUShortDeserialize`1.DeserializeFlags(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.EnumShortDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.EnumShortDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumShortDeserialize`1.tryDeserializeNumber(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.EnumShortDeserialize`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumShortDeserialize`1.DeserializeFlags(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.EnumByteDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.EnumByteDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumByteDeserialize`1.tryDeserializeNumber(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.EnumByteDeserialize`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumByteDeserialize`1.DeserializeFlags(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.EnumSByteDeserialize`1">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.EnumSByteDeserialize`1.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.EnumSByteDeserialize`1.tryDeserializeNumber(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            数值解析
            </summary>
            <param name="deserializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.EnumSByteDeserialize`1.Deserialize(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.EnumSByteDeserialize`1.DeserializeFlags(AutoCSer.XmlDeserializer,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="deserializer">XML 反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.XmlSerializer">
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
            <summary>
            XML 序列化
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.DateTime)">
            <summary>
            数据转换
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.DateTime)">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.DateTime})">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Char)">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Char})">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Decimal)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Decimal})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.UInt64})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.enumULong``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.EnumULong``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.XmlSerializer.CustomConfig">
            <summary>
            XML 自定义全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializer.ConfigurationAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializer.AllMemberAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializer.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.GetCharStream(AutoCSer.XmlSerializer)">
            <summary>
            获取 XML 字符串输出缓冲区
            </summary>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.XmlSerializer.itemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.GetItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.SetItemName(AutoCSer.XmlSerializer,System.String)">
            <summary>
            设置集合子节点名称
            </summary>
            <param name="xmlSerializer"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.#ctor(System.Boolean)">
            <summary>
            XML 序列化
            </summary>
            <param name="isThreadStatic">是否单线程模式</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.serialize``1(``0@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.serialize``1(``0@,AutoCSer.Memory.CharStream,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="charStream">Xml输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.serializeThreadStatic``1(``0@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换XML字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.serialize``1(``0@)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.freeThreadStatic">
            <summary>
            释放资源（线程静态实例模式）
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.WriteLoopReference">
            <summary>
            循环引用对象处理
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.nameStart(System.Char*,System.Int32)">
            <summary>
            标签开始
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.nameEnd(System.Char*,System.Int32)">
            <summary>
            标签结束
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.encodeSpaceSize(System.Char)">
            <summary>
            计算编码增加长度
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.encodeSpace(System.Byte*@,System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="data"></param>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.serialize(System.Char*,System.Int32)">
            <summary>
            字符串转换
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.emptyString">
            <summary>
            输出空字符串
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            转换 XML 字符串
            </summary>
            <param name="serializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Base``2(AutoCSer.XmlSerializer,``0)">
            <summary>
            基类序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="BT"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.nullable``1(System.Nullable{``0}@)">
            <summary>
            可空类型序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Nullable``1(AutoCSer.XmlSerializer,System.Nullable{``0})">
            <summary>
            可空类型序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.array``1(``0[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Array``1(AutoCSer.XmlSerializer,``0[])">
            <summary>
            数组序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.collection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            集合序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Collection``2(AutoCSer.XmlSerializer,``0)">
            <summary>
            集合序列化
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="VT"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.NotSupport``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            自定义序列化不支持类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Boolean)">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Single)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Double)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Decimal)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.SerializeDateTime(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.SerializeTimeSpan(System.TimeSpan)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Guid)">
            <summary>
            Guid 转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerializeNotEmpty(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(AutoCSer.SubString)">
            <summary>
            字符串转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,AutoCSer.SubString)">
            <summary>
            字符串转换
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Object)">
            <summary>
            object 转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Object)">
            <summary>
            object 转换
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Object``1(``0)">
            <summary>
            object 对象转换XML字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Object``1(AutoCSer.XmlSerializer,System.Object)">
            <summary>
            object 对象转换XML字符串
            </summary>
            <param name="serializer"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(AutoCSer.XmlNode)">
            <summary>
            Node 转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,AutoCSer.XmlNode)">
            <summary>
            Node 转换
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.CustomSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.IsOutputSubString(AutoCSer.XmlSerializer,AutoCSer.SubString)">
            <summary>
            是否输出字符串
            </summary>
            <param name="xmlSerializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.isOutputString(System.String)">
            <summary>
            是否输出字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.IsOutputString(AutoCSer.XmlSerializer,System.String)">
            <summary>
            是否输出字符串
            </summary>
            <param name="xmlSerializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.IsOutput(AutoCSer.XmlSerializer,System.Object)">
            <summary>
            是否输出对象
            </summary>
            <param name="xmlSerializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.IsOutputNullable``1(AutoCSer.XmlSerializer,System.Nullable{``0})">
            <summary>
            是否输出可空对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlSerializer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(``0,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(``0@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(``0,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(``0@,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(``0,AutoCSer.Memory.CharStream,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="charStream">XML 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(``0@,AutoCSer.Memory.CharStream,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="charStream">XML 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.SerializeObject(System.Object,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.SerializeObject(System.Object,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(System.Object,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="objectValue">数据对象</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串 + 警告提示状态</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.SerializeObject(System.Object,AutoCSer.Memory.CharStream,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <param name="value">数据对象</param>
            <param name="charStream">XML 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.Serialize``1(System.Object,AutoCSer.Memory.CharStream,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="objectValue">数据对象</param>
            <param name="charStream">XML 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.ThreadStaticSerialize``1(``0,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.ThreadStaticSerialize``1(``0@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.ThreadStaticSerialize``1(``0,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="M:AutoCSer.XmlSerializer.ThreadStaticSerialize``1(``0@,AutoCSer.TextSerialize.WarningEnum@,AutoCSer.XmlSerializeConfig)">
            <summary>
            对象转换 XML 字符串（线程静态实例模式）
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="warning">警告提示状态</param>
            <param name="config">配置参数</param>
            <returns>XML 字符串</returns>
        </member>
        <member name="F:AutoCSer.XmlSerializer.SerializeDelegates">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Single)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Single})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Double)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Double})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.TimeSpan)">
            <summary>
            数据转换
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.TimeSpan)">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.TimeSpan})">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.enumLong``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.EnumLong``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.enumUInt``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.EnumUInt``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.enumInt``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.EnumInt``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.enumUShort``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.EnumUShort``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.enumShort``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.EnumShort``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.enumByte``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.EnumByte``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.enumSByte``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.EnumSByte``1(AutoCSer.XmlSerializer,``0)">
            <summary>
            枚举值序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Int64})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.UInt32})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Int32})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.UInt16})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Int16})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Byte})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.PrimitiveSerialize(System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.SByte})">
            <summary>
            数字转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Boolean)">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Boolean})">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Guid)">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.XmlSerializer.primitiveSerialize(AutoCSer.XmlSerializer,System.Nullable{System.Guid})">
            <summary>
            数据转换
            </summary>
            <param name="serializer"></param>
            <param name="value">数据</param>
        </member>
        <member name="T:AutoCSer.XmlNode">
            <summary>
            XML节点
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNode.attributes">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNode.nodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.XmlNode.Nodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNode.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="M:AutoCSer.XmlNode.GetString">
            <summary>
            获取字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.XmlNode.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.XmlNode.Item(System.String)">
            <summary>
            根据名称获取 XML 节点
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlNode.SetString(System.String)">
            <summary>
            设置字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.XmlNode.SetString(System.String,System.Int32,System.Int32)">
            <summary>
            设置字符串
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.XmlNode.SetNode(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.SubString,AutoCSer.XmlNode}}@)">
            <summary>
            设置子节点集合
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:AutoCSer.XmlNode.SetAttribute(System.String,AutoCSer.KeyValue{AutoCSer.Range,AutoCSer.Range}[])">
            <summary>
            属性集合
            </summary>
            <param name="xml"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:AutoCSer.XmlNode.GetAttribute(System.Char*,System.Int32,AutoCSer.Range@)">
            <summary>
            获取属性索引位置
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.XmlNode.GetAttribute(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="name">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="T:AutoCSer.XmlNodeTypeEnum">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNodeTypeEnum.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNodeTypeEnum.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNodeTypeEnum.EncodeString">
            <summary>
            未解码字符串
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNodeTypeEnum.TempString">
            <summary>
            未解码可修改字符串
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNodeTypeEnum.Node">
            <summary>
            子节点
            </summary>
        </member>
        <member name="F:AutoCSer.XmlNodeTypeEnum.ErrorString">
            <summary>
            字符串解析失败
            </summary>
        </member>
        <member name="T:AutoCSer.XmlDeserializeConfig">
            <summary>
            XML 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializeConfig.BootNodeName">
            <summary>
            根节点名称默认为 xml (不能包含非法字符)
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializeConfig.ItemName">
            <summary>
            集合子节点名称默认为 item (不能包含非法字符)
            </summary>
        </member>
        <member name="F:AutoCSer.XmlDeserializeConfig.IsAttribute">
            <summary>
            是否保存属性索引
            </summary>
        </member>
        <member name="T:AutoCSer.XmlSerializeAttribute">
            <summary>
            XML 序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializeAttribute.AnonymousTypeMember">
            <summary>
            匿名类型序列化配置
            </summary>
        </member>
        <member name="T:AutoCSer.XmlSerializeConfig">
            <summary>
            XML 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializeConfig.DefaultItemName">
            <summary>
            默认集合子节点名称 item
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializeConfig.Header">
            <summary>
            XML头部
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializeConfig.BootNodeName">
            <summary>
            根节点名称默认为 xml
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializeConfig.ItemName">
            <summary>
            集合子节点名称默认为 item
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializeConfig.IsOutputNull">
            <summary>
            是否输出空对象
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializeConfig.IsOutputEmptyString">
            <summary>
            是否输出长度为 0 的字符串，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.XmlSerializeMemberAttribute">
            <summary>
            XML 序列化成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.XmlSerializeMemberAttribute.ItemName">
            <summary>
            集合子节点名称(不能包含非法字符)
            </summary>
        </member>
    </members>
</doc>
