//This file is automatically generated by a program. Please do not modify it by yourself.
//本文件由程序自动生成，请不要自行修改
using System;
using System.Numerics;
using AutoCSer;

#if NoAutoCSer
#else
#pragma warning disable

namespace AutoCSer.CodeGenerator.TemplateGenerator
{
    internal partial class CommandServerMethodIndexEnumType
    {
        /// <summary>
        /// 生成代码
        /// </summary>
        /// <param name="isOut">是否输出类定义代码</param>
        protected override void create(bool _isOut_)
        {
            if (outStart(_isOut_))
            {
                
            _if_ = false;
                    if (IsGeneratorAttribute)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
        /// <summary>
        /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
        /// </summary>
        [AutoCSer.Net.CommandServer.ServerControllerInterface(typeof(");
            _code_.Add(MethodIndexEnumTypeName);
            _code_.Add(@"))]
        ");
            _code_.Add(TypeNameDefinition);
            _code_.Add(@" { }");
            }
            _if_ = false;
                    if (IsGeneratorEnum)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
        /// <summary>
        /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@" (The method sequence number maps the enumeration type)
        /// </summary>
        public enum ");
            _code_.Add(MethodIndexEnumTypeName);
            _code_.Add(@"
        {");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.CommandServerMethodIndexEnumType.MethodInfo[] _value1_;
                    _value1_ = Methods;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.CommandServerMethodIndexEnumType.MethodInfo _value2_ in _value1_)
                        {
            _if_ = false;
                    if (_value2_.EnumName != default(string))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.Method != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <summary>
            /// [");
            _code_.Add(_value2_.MethodIndex.ToString());
            _code_.Add(@"] ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.XmlFullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@" ");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.MethodIsReturn)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// 返回值 ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.MethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.XmlFullName);
                    }
                }
            _code_.Add(@" ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorReturnXmlDocument);
                    }
                }
            }
            _code_.Add(@"
            /// </summary>");
            }
            _code_.Add(@"
            ");
            _code_.Add(_value2_.EnumName);
            _code_.Add(@" = ");
            _code_.Add(_value2_.MethodIndex.ToString());
            _code_.Add(@",");
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
            _code_.Add(@"
        }");
            }
                if (_isOut_) outEnd();
            }
        }
    }
}
#if !DotNet45
namespace AutoCSer.CodeGenerator.TemplateGenerator
{
    internal partial class NetCoreWebView
    {
        /// <summary>
        /// 生成代码
        /// </summary>
        /// <param name="isOut">是否输出类定义代码</param>
        protected override void create(bool _isOut_)
        {
            if (outStart(_isOut_))
            {
                
            _code_.Add(@"
            /// <summary>
            /// Get the request path. By default, it is the type namespace + the type name
            /// 获取请求路径，默认为 类型命名空间 + 类型名称
            /// </summary>
            protected override string defaultRequestPath { get { return """);
            _code_.Add(RequestPath);
            _code_.Add(@"""; } }");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value1_ = default(AutoCSer.CodeGenerator.Metadata.MethodIndex);
                    _value1_ = Method;
            _if_ = false;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value1_.ParameterCount != default(int))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            ");
            _if_ = false;
                    if (IsQueryName)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <summary>
            /// The client queries the passed parameters
            /// 客户端查询传参
            /// </summary>
            public ");
            }
            _code_.Add(@"struct __QUERYPARAMETER__
            {
#pragma warning disable CS0649");
                {
                    System.Collections.Generic.IEnumerable<AutoCSer.CodeGenerator.Metadata.MethodParameter> _value2_;
                    _value2_ = LoadParameters;
                    if (_value2_ != null)
                    {
                        int _loopIndex2_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value3_ in _value2_)
                        {
            _code_.Add(@"
                public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value4_ = _value3_.ParameterType;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value4_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value3_.ParameterName);
            _code_.Add(@";");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex2_;
                    }
                }
            _code_.Add(@"
#pragma warning restore CS0649
            }");
            _if_ = false;
                    if (IsQueryName)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
#pragma warning disable CS0649
            /// <summary>
            /// The client queries the passed parameters
            /// 客户端查询传参
            /// </summary>
            public __QUERYPARAMETER__ ");
            _code_.Add(QueryParameterName);
            _code_.Add(@";
#pragma warning restore CS0649");
            }
            }
            }
                }
            _code_.Add(@"
            /// <summary>
            /// Initialize and load the data (basic operations are handled by the code generation component)
            /// 初始化加载数据（基本操作用代码生成组件处理）
            /// </summary>
            /// <param name=""httpContext"">HTTP Context
            /// HTTP 上下文</param>
            /// <param name=""viewRequest"">Data view information
            /// 数据视图信息</param>
            /// <returns></returns>
            protected override async System.Threading.Tasks.Task<AutoCSer.NetCoreWeb.ResponseResult> load(Microsoft.AspNetCore.Http.HttpContext httpContext, AutoCSer.NetCoreWeb.ViewRequest viewRequest)
            {");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value1_ = default(AutoCSer.CodeGenerator.Metadata.MethodIndex);
                    _value1_ = Method;
            _if_ = false;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value1_.ParameterCount != default(int))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                AutoCSer.NetCoreWeb.ResponseResult<__QUERYPARAMETER__> parameter = await getParameter<__QUERYPARAMETER__>(httpContext, viewRequest);
                if (!parameter.IsSuccess) return parameter;
                ");
            _if_ = false;
                if (!(bool)IsQueryName)
                {
                    _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                __QUERYPARAMETER__ ");
            }
            _code_.Add(QueryParameterName);
            _code_.Add(@" = parameter.Result;");
            _if_ = false;
                    if (CheckParameters != default(AutoCSer.CodeGenerator.TemplateGenerator.NetCoreWebView.CheckParameter[]))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                AutoCSer.NetCoreWeb.ParameterChecker checker = default(AutoCSer.NetCoreWeb.ParameterChecker);");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.NetCoreWebView.CheckParameter[] _value2_;
                    _value2_ = CheckParameters;
                    if (_value2_ != null)
                    {
                        int _loopIndex2_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.NetCoreWebView.CheckParameter _value3_ in _value2_)
                        {
            _if_ = false;
                    if (_value3_.IsCheckNull)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter);
                    _value4_ = _value3_.Parameter;
            _if_ = false;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                if (!AutoCSer.NetCoreWeb.ParameterChecker.CheckNull(");
            _code_.Add(QueryParameterName);
            _code_.Add(@"/**/.");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@", """);
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""", """);
            _code_.Add(_value4_.XmlDocumentCodeString);
            _code_.Add(@""", ref checker)) return checker.ErrorResult;");
            }
                }
            }
            _if_ = false;
                    if (_value3_.IsCheckEquatable)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter);
                    _value4_ = _value3_.Parameter;
            _if_ = false;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                if (!AutoCSer.NetCoreWeb.ParameterChecker.CheckEquatable(");
            _code_.Add(QueryParameterName);
            _code_.Add(@"/**/.");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@", """);
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""", """);
            _code_.Add(_value4_.XmlDocumentCodeString);
            _code_.Add(@""", ref checker)) return checker.ErrorResult;");
            }
                }
            }
            _if_ = false;
                    if (_value3_.IsCheckCollection)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter);
                    _value4_ = _value3_.Parameter;
            _if_ = false;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                if (!AutoCSer.NetCoreWeb.ParameterChecker.CheckCollection(");
            _code_.Add(QueryParameterName);
            _code_.Add(@"/**/.");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@", """);
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""", """);
            _code_.Add(_value4_.XmlDocumentCodeString);
            _code_.Add(@""", ref checker)) return checker.ErrorResult;");
            }
                }
            }
            _if_ = false;
                    if (_value3_.IsCheckString)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter);
                    _value4_ = _value3_.Parameter;
            _if_ = false;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                if (!AutoCSer.NetCoreWeb.ParameterChecker.CheckString(");
            _code_.Add(QueryParameterName);
            _code_.Add(@"/**/.");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@", """);
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""", """);
            _code_.Add(_value4_.XmlDocumentCodeString);
            _code_.Add(@""", ref checker)) return checker.ErrorResult;");
            }
                }
            }
            _if_ = false;
                    if (_value3_.IsCheckConstraint)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter);
                    _value4_ = _value3_.Parameter;
            _if_ = false;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                if (!AutoCSer.NetCoreWeb.ParameterChecker.CheckConstraint(");
            _code_.Add(QueryParameterName);
            _code_.Add(@"/**/.");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@", """);
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""", """);
            _code_.Add(_value4_.XmlDocumentCodeString);
            _code_.Add(@""", ref checker)) return checker.ErrorResult;");
            }
                }
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex2_;
                    }
                }
            }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter _value2_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter);
                    _value2_ = AccessTokenParameter;
            _if_ = false;
                    if (_value2_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                if (viewRequest.IsAccessTokenParameter)
                {
                    AutoCSer.NetCoreWeb.ResponseResult checkResult = await viewRequest.ViewMiddleware.CheckAccessTokenParameter(");
            _code_.Add(QueryParameterName);
            _code_.Add(@"/**/.");
            _code_.Add(_value2_.ParameterName);
            _code_.Add(@");
                    if (!checkResult.IsSuccess) return checkResult;
                }");
            }
                }
            }
            _code_.Add(@"
                AutoCSer.NetCoreWeb.ResponseResult loadResult = await LoadView(");
            _if_ = false;
                    if (IsHttpContextParameter)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"httpContext");
            }
            _if_ = false;
                    if (IsHttpContextParameterJoin)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _if_ = false;
                    if (IsViewMiddlewareParameter)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"viewRequest.ViewMiddleware");
            }
            _if_ = false;
                    if (IsViewMiddlewareParameterJoin)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
                {
                    System.Collections.Generic.IEnumerable<AutoCSer.CodeGenerator.Metadata.MethodParameter> _value2_;
                    _value2_ = LoadParameters;
                    if (_value2_ != null)
                    {
                        int _loopIndex2_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value3_ in _value2_)
                        {
            _code_.Add(QueryParameterName);
            _code_.Add(@"/**/.");
            _code_.Add(_value3_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex2_;
                    }
                }
            _code_.Add(@");
                if (!loadResult.IsSuccess) return loadResult;");
            }
                }
            _code_.Add(@"
                AutoCSer.NetCoreWeb.ViewResponse response = getResponse();
                try
                {
                    AutoCSer.Memory.CharStream stream = responseStart(httpContext, viewRequest, ref response);
                    ");
            _code_.Add(ViewCode);
            _code_.Add(@"
                    await responseEnd(httpContext, viewRequest, response);
                    return AutoCSer.NetCoreWeb.ResponseStateEnum.Success;
                }
                finally { response.Free(); }
            }");
                if (_isOut_) outEnd();
            }
        }
    }
}
#endif
namespace AutoCSer.CodeGenerator.TemplateGenerator
{
    internal partial class CommandClientReturnValueController
    {
        /// <summary>
        /// 生成代码
        /// </summary>
        /// <param name="isOut">是否输出类定义代码</param>
        protected override void create(bool _isOut_)
        {
            if (outStart(_isOut_))
            {
                
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.CommandClientReturnValueController.ControllerInterface[] _value1_;
                    _value1_ = ControllerInterfaces;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.CommandClientReturnValueController.ControllerInterface _value2_ in _value1_)
                        {
            _code_.Add(@"
        /// <summary>
        /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.PropertyIndex _value3_ = _value2_.Property;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.PropertyIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@" (Direct return value API encapsulation)
        /// </summary>
        public sealed class ");
            _code_.Add(_value2_.ReturnValueControllerTypeName);
            _code_.Add(@" : AutoCSer.Net.CommandServer.ClientReturnValueController<");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = CurrentType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@">
        {
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.PropertyIndex _value3_ = _value2_.Property;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.PropertyIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@" (Direct return value API encapsulation)
            /// </summary>
            /// <param name=""client"">Command client socket event</param>
            /// <param name=""isIgnoreError"">A default value of false indicates that exceptions and error messages are not ignored</param>
            public ");
            _code_.Add(_value2_.ReturnValueControllerTypeName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = CurrentType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" client, bool isIgnoreError = false) : base(client, isIgnoreError) { }");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.CommandClientReturnValueController.ControllerMethod[] _value3_;
                    _value3_ = _value2_.Methods;
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.CommandClientReturnValueController.ControllerMethod _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value5_ = _value4_.Method;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value5_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value6_ = _value4_.Method;
                    if (_value6_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value5_ = _value6_.Parameters;
                    }
                }
                    if (_value5_ != null)
                    {
                        int _loopIndex5_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value6_ in _value5_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value6_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value6_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex5_;
                    }
                }
            _if_ = false;
                    if (_value4_.IsSynchronous)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsReturnValue)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <returns>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value5_ = _value4_.Method;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value5_.CodeGeneratorReturnXmlDocument);
                    }
                }
            _code_.Add(@"</returns>");
            }
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.MethodReturnType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value6_ = _value4_.Method;
                    if (_value6_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value5_ = _value6_.Parameters;
                    }
                }
                    if (_value5_ != null)
                    {
                        int _loopIndex5_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value6_ in _value5_)
                        {
            _code_.Add(_value6_.RefOutString);
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value7_ = _value6_.ParameterType;
                    if (_value7_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value7_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value6_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex5_;
                    }
                }
            _code_.Add(@")
            {
                ");
            _if_ = false;
                    if (_value4_.IsReturnValue)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                return ");
            }
            _code_.Add(@"base.client.");
            _code_.Add(_value2_.MemberName);
            _code_.Add(@"/**/.");
            _code_.Add(_value4_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value6_ = _value4_.Method;
                    if (_value6_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value5_ = _value6_.Parameters;
                    }
                }
                    if (_value5_ != null)
                    {
                        int _loopIndex5_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value6_ in _value5_)
                        {
            _code_.Add(_value6_.RefOutString);
            _code_.Add(_value6_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex5_;
                    }
                }
            _code_.Add(@")");
            _if_ = false;
                    if (_value4_.IsGetReturnValue)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@".GetValue(base.isIgnoreError)");
            }
            _code_.Add(@";
            }");
            }
            _if_ = false;
                if (!(bool)_value4_.IsSynchronous)
                {
                    _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.MethodReturnType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value6_ = _value4_.Method;
                    if (_value6_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value5_ = _value6_.Parameters;
                    }
                }
                    if (_value5_ != null)
                    {
                        int _loopIndex5_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value6_ in _value5_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value7_ = _value6_.ParameterType;
                    if (_value7_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value7_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value6_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex5_;
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value5_ = _value4_.CallbackType;
            _if_ = false;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value5_.FullName);
            _code_.Add(@" ");
            _code_.Add(_value4_.CallbackParameterName);
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value5_ = _value4_.KeepCallbackType;
            _if_ = false;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value5_.FullName);
            _code_.Add(@" ");
            _code_.Add(_value4_.KeepCallbackParameterName);
            }
                }
            _code_.Add(@")
            {
                return base.client.");
            _code_.Add(_value2_.MemberName);
            _code_.Add(@"/**/.");
            _code_.Add(_value4_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value6_ = _value4_.Method;
                    if (_value6_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value5_ = _value6_.Parameters;
                    }
                }
                    if (_value5_ != null)
                    {
                        int _loopIndex5_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value6_ in _value5_)
                        {
            _code_.Add(_value6_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex5_;
                    }
                }
            _if_ = false;
                    if (_value4_.CallbackParameterName != default(string))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.CallbackReturnValueType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@"(");
            _code_.Add(_value4_.CallbackParameterName);
            _code_.Add(@")");
            }
            _if_ = false;
                    if (_value4_.KeepCallbackParameterName != default(string))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.KeepCallbackReturnValueType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@"(");
            _code_.Add(_value4_.KeepCallbackParameterName);
            _code_.Add(@")");
            }
            _code_.Add(@");
            }
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value5_ = _value4_.Method;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value5_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value6_ = _value4_.Method;
                    if (_value6_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value5_ = _value6_.Parameters;
                    }
                }
                    if (_value5_ != null)
                    {
                        int _loopIndex5_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value6_ in _value5_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value6_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value6_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex5_;
                    }
                }
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.MethodReturnType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value6_ = _value4_.Method;
                    if (_value6_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value5_ = _value6_.Parameters;
                    }
                }
                    if (_value5_ != null)
                    {
                        int _loopIndex5_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value6_ in _value5_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value7_ = _value6_.ParameterType;
                    if (_value7_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value7_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value6_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex5_;
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value5_ = _value4_.CallbackType;
            _if_ = false;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value5_.FullName);
            _code_.Add(@" ");
            _code_.Add(_value4_.CallbackParameterName);
            _if_ = false;
                if (!(bool)_value4_.IsTwoStageReturnValueParameter)
                {
                    _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", Action<AutoCSer.Net.CommandClientReturnValue> ");
            _code_.Add(_value4_.ErrorCallbackParameterName);
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value5_ = _value4_.KeepCallbackType;
            _if_ = false;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value5_.FullName);
            _code_.Add(@" ");
            _code_.Add(_value4_.KeepCallbackParameterName);
            _code_.Add(@", Action<AutoCSer.Net.CommandClientReturnValue> ");
            _code_.Add(_value4_.ErrorKeepCallbackParameterName);
            }
                }
            _code_.Add(@")
            {
                return base.client.");
            _code_.Add(_value2_.MemberName);
            _code_.Add(@"/**/.");
            _code_.Add(_value4_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value6_ = _value4_.Method;
                    if (_value6_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value5_ = _value6_.Parameters;
                    }
                }
                    if (_value5_ != null)
                    {
                        int _loopIndex5_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value6_ in _value5_)
                        {
            _code_.Add(_value6_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex5_;
                    }
                }
            _if_ = false;
                    if (_value4_.CallbackParameterName != default(string))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.CallbackReturnValueType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@"(");
            _code_.Add(_value4_.CallbackParameterName);
            _if_ = false;
                if (!(bool)_value4_.IsTwoStageReturnValueParameter)
                {
                    _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            _code_.Add(_value4_.ErrorCallbackParameterName);
            }
            _code_.Add(@")");
            }
            _if_ = false;
                    if (_value4_.KeepCallbackParameterName != default(string))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value4_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.KeepCallbackReturnValueType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@"(");
            _code_.Add(_value4_.KeepCallbackParameterName);
            _code_.Add(@", ");
            _code_.Add(_value4_.ErrorKeepCallbackParameterName);
            _code_.Add(@")");
            }
            _code_.Add(@");
            }");
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _code_.Add(@"
        }
        /// <summary>
        /// Get the direct return value API encapsulation (");
            _code_.Add(_value2_.MemberName);
            _code_.Add(@")
        /// </summary>
        /// <param name=""isIgnoreError"">A default value of false indicates that exceptions and error messages are not ignored</param>
        /// <returns>");
                {
                    AutoCSer.CodeGenerator.Metadata.PropertyIndex _value3_ = _value2_.Property;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.PropertyIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@" (Direct return value API encapsulation)</returns>
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public ");
            _code_.Add(_value2_.ReturnValueControllerTypeName);
            _code_.Add(@" ");
            _code_.Add(_value2_.GetReturnValueControllerMethodName);
            _code_.Add(@"(bool isIgnoreError = false) { return new ");
            _code_.Add(_value2_.ReturnValueControllerTypeName);
            _code_.Add(@"(this, isIgnoreError); }");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
                if (_isOut_) outEnd();
            }
        }
    }
}
#if !DotNet45
namespace AutoCSer.CodeGenerator.TemplateGenerator
{
    internal partial class NetCoreWebViewMiddleware
    {
        /// <summary>
        /// 生成代码
        /// </summary>
        /// <param name="isOut">是否输出类定义代码</param>
        protected override void create(bool _isOut_)
        {
            if (outStart(_isOut_))
            {
                
            _code_.Add(@"
            /// <summary>
            /// The default constructor is used for code generation
            /// 默认构造方法，用于代码生成
            /// </summary>
            private ");
            _code_.Add(TypeName);
            _code_.Add(@"() { }
            /// <summary>
            /// Data view middleware
            /// 数据视图中间件
            /// </summary>
            /// <param name=""nextRequest""></param>
            public ");
            _code_.Add(TypeName);
            _code_.Add(@"(Microsoft.AspNetCore.Http.RequestDelegate nextRequest) : base(nextRequest)
            {");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.NetCoreWebViewMiddleware.ViewLoadMethod[] _value1_;
                    _value1_ = Views;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.NetCoreWebViewMiddleware.ViewLoadMethod _value2_ in _value1_)
                        {
            _code_.Add(@"
                appendView(new AutoCSer.NetCoreWeb.ViewRequest(this, typeof(");
            _code_.Add(_value2_.NetCoreWebViewTypeFullName);
            _code_.Add(@"), () => new ");
            _code_.Add(_value2_.NetCoreWebViewTypeFullName);
            _code_.Add(@"()");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter);
                    _value3_ = _value2_.Parameter;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", typeof(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value4_ = _value3_.ParameterType;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value4_.FullName);
                    }
                }
            _code_.Add(@"), """);
            _code_.Add(_value3_.ParameterName);
            _code_.Add(@"""");
            }
                }
            _code_.Add(@"));");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
            _code_.Add(@"
                AutoCSer.Extensions.Extension.AutoCSerExtensions(load()).Catch();
            }");
                if (_isOut_) outEnd();
            }
        }
    }
}
#endif
namespace AutoCSer.CodeGenerator.TemplateGenerator
{
    internal partial class CommandClientControllerInterface
    {
        /// <summary>
        /// 生成代码
        /// </summary>
        /// <param name="isOut">是否输出类定义代码</param>
        protected override void create(bool _isOut_)
        {
            if (outStart(_isOut_))
            {
                
            _code_.Add(@"
        /// <summary>
        /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@" client interface
        /// </summary>");
            _if_ = false;
                    if (IsCodeGeneratorControllerAttribute)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
        [AutoCSer.CodeGenerator.CommandClientController(typeof(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.FullName);
                    }
                }
            _code_.Add(@"))]");
            }
            _code_.Add(@"
        ");
            _code_.Add(TypeNameDefinition);
            _code_.Add(@"
        {");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.CommandClientControllerInterface.ControllerMethod[] _value1_;
                    _value1_ = Methods;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.CommandClientControllerInterface.ControllerMethod _value2_ in _value1_)
                        {
            _if_ = false;
                    if (_value2_.Method != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
            _if_ = false;
                    if (_value2_.TaskQueueKeyType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <param name=""queueKey"">Queue keyword</param>");
            }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.TwoStageReturnValueType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <param name=""callback"">");
            _code_.Add(_value2_.CallbackCodeGeneratorXmlDocument);
            _code_.Add(@"</param>
            /// <param name=""keepCallback"">");
            _code_.Add(_value2_.KeepCallbackCodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
            }
            _if_ = false;
                    if (_value2_.MethodIsReturn)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <returns>");
            _code_.Add(_value2_.CodeGeneratorReturnXmlDocument);
            _code_.Add(@"</returns>");
            }
            _code_.Add(@"
            ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.MethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.TaskQueueKeyType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(_value3_.FullName);
            _code_.Add(@" queueKey");
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = _value4_.Parameters;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]))
                    {
                    if (_value5_.Length != default(int))
                    {
                        _if_ = true;
                    }
                }
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(_value4_.RefOutString);
            _if_ = false;
                    if (_value4_.IsRedirectType)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"[AutoCSer.Net.CommandServer.MethodParameterType(typeof(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@"))]");
            }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.RedirectType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.TwoStageReturnValueType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsTwoStageInputParameter)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"Action<AutoCSer.Net.CommandClientReturnValue<");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.TwoStageReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@">> callback, Action<AutoCSer.Net.CommandClientReturnValue<");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.ReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@">, AutoCSer.Net.KeepCallbackCommand> keepCallback");
            }
            _code_.Add(@");");
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
            _code_.Add(@"
        }");
                if (_isOut_) outEnd();
            }
        }
    }
}
namespace AutoCSer.CodeGenerator.TemplateGenerator
{
    internal partial class StreamPersistenceMemoryDatabaseLocalClientNodeInterface
    {
        /// <summary>
        /// 生成代码
        /// </summary>
        /// <param name="isOut">是否输出类定义代码</param>
        protected override void create(bool _isOut_)
        {
            if (outStart(_isOut_))
            {
                
            _code_.Add(@"
        /// <summary>
        /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@" local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.GenericDefinitionFullName);
                    }
                }
            _code_.Add(@"))]
        ");
            _code_.Add(TypeNameDefinition);
            _if_ = false;
                    if (IsCustomServiceNode)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@" : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode");
            }
            _code_.Add(@"
        {");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseLocalClientNodeInterface.NodeMethod[] _value1_;
                    _value1_ = Methods;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseLocalClientNodeInterface.NodeMethod _value2_ in _value1_)
                        {
            _if_ = false;
                    if (_value2_.Method != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.MethodIsReturn)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <returns>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorReturnXmlDocument);
                    }
                }
            _code_.Add(@"</returns>");
            }
            _code_.Add(@"
            ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.MethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.CallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" __callback__");
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.KeepCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" __keepCallback__");
            }
                }
            _code_.Add(@");");
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
            _code_.Add(@"
        }");
            _if_ = false;
                    if (IsReturnValueNode)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
        /// <summary>
        /// Get the direct return value API encapsulation (");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.XmlFullName);
                    }
                }
            _code_.Add(@")
        /// </summary>
        public sealed partial class ");
            _code_.Add(ReturnValueNodeTypeName);
            _if_ = false;
                    if (IsGenericTypeDefinition)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"<");
            _code_.Add(ReturnValueNodeCurrentType);
            _code_.Add(@">");
            }
            _code_.Add(@" : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientReturnValueNode<");
            _code_.Add(ClientNodeTypeName);
            _code_.Add(@">
        {
            /// <summary>
            /// Get the direct return value API encapsulation (");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.XmlFullName);
                    }
                }
            _code_.Add(@")
            /// </summary>
            /// <param name=""node"">Log stream persistence memory database local client node cache for client singleton</param>
            /// <param name=""isIgnoreError"">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name=""isSynchronousCallback"">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public ");
            _code_.Add(ReturnValueNodeTypeName);
            _code_.Add(@"(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache<");
            _code_.Add(ClientNodeTypeName);
            _code_.Add(@"> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseLocalClientNodeInterface.NodeMethod[] _value1_;
                    _value1_ = Methods;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseLocalClientNodeInterface.NodeMethod _value2_ in _value1_)
                        {
            _if_ = false;
                    if (_value2_.Method != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.IsSynchronous)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.MethodIsReturn)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <returns>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorReturnXmlDocument);
                    }
                }
            _code_.Add(@"</returns>");
            }
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.ReturnValueMethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _code_.Add(@")
            {
                return ");
            _if_ = false;
                    if (_value2_.IsGetReturnValue)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"base.getReturnValue(");
            }
            _code_.Add(@"base.node.");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _code_.Add(@")");
            _if_ = false;
                    if (_value2_.IsGetReturnValue)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@")");
            }
            _code_.Add(@";
            }");
            }
            _if_ = false;
                if (!(bool)_value2_.IsSynchronous)
                {
                    _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.ReturnValueMethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnValueCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" callback");
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnValueKeepCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" keepCallback");
            }
                }
            _code_.Add(@")
            {
                ");
            _if_ = false;
                    if (_value2_.IsReturnValue)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                return ");
            }
            _code_.Add(@"base.node.");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.ReturnValueCallbackType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.CallbackReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@"(callback)");
            }
            _if_ = false;
                    if (_value2_.ReturnValueKeepCallbackType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.KeepCallbackReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@"(keepCallback)");
            }
            _code_.Add(@");
            }
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.ReturnValueMethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnValueCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" callback, Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> ");
            _code_.Add(_value2_.ErrorCallbackParameterName);
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnValueKeepCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" keepCallback, Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> ");
            _code_.Add(_value2_.ErrorKeepCallbackParameterName);
            }
                }
            _code_.Add(@")
            {
                ");
            _if_ = false;
                    if (_value2_.IsReturnValue)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
                return ");
            }
            _code_.Add(@"base.node.");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.ReturnValueCallbackType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.CallbackReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@"(callback, ");
            _code_.Add(_value2_.ErrorCallbackParameterName);
            _code_.Add(@")");
            }
            _if_ = false;
                    if (_value2_.ReturnValueKeepCallbackType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.KeepCallbackReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@"(keepCallback, ");
            _code_.Add(_value2_.ErrorKeepCallbackParameterName);
            _code_.Add(@")");
            }
            _code_.Add(@");
            }");
            }
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
            _code_.Add(@"
        }");
            }
                if (_isOut_) outEnd();
            }
        }
    }
}
namespace AutoCSer.CodeGenerator.TemplateGenerator
{
    internal partial class StreamPersistenceMemoryDatabaseNode
    {
        /// <summary>
        /// 生成代码
        /// </summary>
        /// <param name="isOut">是否输出类定义代码</param>
        protected override void create(bool _isOut_)
        {
            if (outStart(_isOut_))
            {
                
            _code_.Add(@"
        /// <summary>
        /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(");
            _code_.Add(MethodIndexEnumTypeName);
            _code_.Add(@"))]
        ");
            _code_.Add(TypeNameDefinition);
            _code_.Add(@" { }
        /// <summary>
        /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@" (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum ");
            _code_.Add(MethodIndexEnumTypeName);
            _code_.Add(@"
        {");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseNode.NodeMethod[] _value1_;
                    _value1_ = Methods;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseNode.NodeMethod _value2_ in _value1_)
                        {
            _if_ = false;
                    if (_value2_.EnumName != default(string))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.Method != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <summary>
            /// [");
            _code_.Add(_value2_.MethodIndex.ToString());
            _code_.Add(@"] ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.XmlFullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@" ");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    if (_value3_.IsReturn)
                    {
                        _if_ = true;
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@"
            /// 返回值 ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.MethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.XmlFullName);
                    }
                }
            _code_.Add(@" ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorReturnXmlDocument);
                    }
                }
            }
            _code_.Add(@"
            /// </summary>");
            }
            _code_.Add(@"
            ");
            _code_.Add(_value2_.EnumName);
            _code_.Add(@" = ");
            _code_.Add(_value2_.MethodIndex.ToString());
            _code_.Add(@",");
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
            _code_.Add(@"
        }");
                if (_isOut_) outEnd();
            }
        }
    }
}
namespace AutoCSer.CodeGenerator.TemplateGenerator
{
    internal partial class StreamPersistenceMemoryDatabaseClientNode
    {
        /// <summary>
        /// 生成代码
        /// </summary>
        /// <param name="isOut">是否输出类定义代码</param>
        protected override void create(bool _isOut_)
        {
            if (outStart(_isOut_))
            {
                
            _code_.Add(@"
        /// <summary>
        /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@" client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.GenericDefinitionFullName);
                    }
                }
            _code_.Add(@"))]
        ");
            _code_.Add(TypeNameDefinition);
            _if_ = false;
                    if (IsCustomServiceNode)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@" : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode");
            }
            _code_.Add(@"
        {");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseClientNode.NodeMethod[] _value1_;
                    _value1_ = Methods;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseClientNode.NodeMethod _value2_ in _value1_)
                        {
            _if_ = false;
                    if (_value2_.Method != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.MethodIsReturn)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <returns>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorReturnXmlDocument);
                    }
                }
            _code_.Add(@"</returns>");
            }
            _code_.Add(@"
            ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.MethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnRequestParameterType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(_value3_.FullName);
            _code_.Add(@" returnValue");
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = _value4_.Parameters;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]))
                    {
                    if (_value5_.Length != default(int))
                    {
                        _if_ = true;
                    }
                }
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.CallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" callback");
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.KeepCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" keepCallback");
            }
                }
            _code_.Add(@");");
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
            _code_.Add(@"
        }");
            _if_ = false;
                    if (IsReturnValueNode)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
        /// <summary>
        /// Get the direct return value API encapsulation (");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.XmlFullName);
                    }
                }
            _code_.Add(@")
        /// </summary>
        public sealed partial class ");
            _code_.Add(ReturnValueNodeTypeName);
            _if_ = false;
                    if (IsGenericTypeDefinition)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"<");
            _code_.Add(ReturnValueNodeCurrentType);
            _code_.Add(@">");
            }
            _code_.Add(@" : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientReturnValueNode<");
            _code_.Add(ClientNodeTypeName);
            _code_.Add(@">
        {
            /// <summary>
            /// Get the direct return value API encapsulation (");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value1_ = CurrentType;
                    if (_value1_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value1_.XmlFullName);
                    }
                }
            _code_.Add(@")
            /// </summary>
            /// <param name=""node"">Log stream persistence memory database client node cache for client singleton</param>
            /// <param name=""isIgnoreError"">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name=""isSynchronousCallback"">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public ");
            _code_.Add(ReturnValueNodeTypeName);
            _code_.Add(@"(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache<");
            _code_.Add(ClientNodeTypeName);
            _code_.Add(@"> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }");
                {
                    AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseClientNode.NodeMethod[] _value1_;
                    _value1_ = Methods;
                    if (_value1_ != null)
                    {
                        int _loopIndex1_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.TemplateGenerator.StreamPersistenceMemoryDatabaseClientNode.NodeMethod _value2_ in _value1_)
                        {
            _if_ = false;
                    if (_value2_.Method != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.IsSynchronous)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.MethodIsReturn)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            /// <returns>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorReturnXmlDocument);
                    }
                }
            _code_.Add(@"</returns>");
            }
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.ReturnValueMethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnRequestParameterType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(_value3_.FullName);
            _code_.Add(@" returnValue");
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = _value4_.Parameters;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]))
                    {
                    if (_value5_.Length != default(int))
                    {
                        _if_ = true;
                    }
                }
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _code_.Add(@")
            {
                return base.node.");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnRequestParameterType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"returnValue");
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = _value4_.Parameters;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]))
                    {
                    if (_value5_.Length != default(int))
                    {
                        _if_ = true;
                    }
                }
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _code_.Add(@")");
            _if_ = false;
                    if (_value2_.IsGetReturnValue)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@".GetValue(isIgnoreError)");
            }
            _code_.Add(@";
            }");
            }
            _if_ = false;
                if (!(bool)_value2_.IsSynchronous)
                {
                    _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.ReturnValueMethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnRequestParameterType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(_value3_.FullName);
            _code_.Add(@" returnValue");
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = _value4_.Parameters;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]))
                    {
                    if (_value5_.Length != default(int))
                    {
                        _if_ = true;
                    }
                }
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnValueCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" callback");
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnValueKeepCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" keepCallback");
            }
                }
            _code_.Add(@")
            {
                return base.node.");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnRequestParameterType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"returnValue");
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = _value4_.Parameters;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]))
                    {
                    if (_value5_.Length != default(int))
                    {
                        _if_ = true;
                    }
                }
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.ReturnValueCallbackType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.CallbackReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@"(callback)");
            }
            _if_ = false;
                    if (_value2_.ReturnValueKeepCallbackType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.KeepCallbackReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@"(keepCallback)");
            }
            _code_.Add(@");
            }
            /// <summary>
            /// ");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value3_ = _value2_.Method;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
            _code_.Add(_value3_.CodeGeneratorXmlDocument);
                    }
                }
            _code_.Add(@"
            /// </summary>");
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(@"
            /// <param name=""");
            _code_.Add(_value4_.ParameterName);
            _code_.Add(@""">");
            _code_.Add(_value4_.CodeGeneratorXmlDocument);
            _code_.Add(@"</param>");
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _code_.Add(@"
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.ReturnValueMethodReturnType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnRequestParameterType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(_value3_.FullName);
            _code_.Add(@" returnValue");
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = _value4_.Parameters;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]))
                    {
                    if (_value5_.Length != default(int))
                    {
                        _if_ = true;
                    }
                }
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value5_ = _value4_.ParameterType;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value5_.FullName);
                    }
                }
            _code_.Add(@" ");
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnValueCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" callback, Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult> ");
            _code_.Add(_value2_.ErrorCallbackParameterName);
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnValueKeepCallbackType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(_value3_.FullName);
            _code_.Add(@" keepCallback, Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult> ");
            _code_.Add(_value2_.ErrorKeepCallbackParameterName);
            }
                }
            _code_.Add(@")
            {
                return base.node.");
            _code_.Add(_value2_.MethodName);
            _code_.Add(@"(");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = default(AutoCSer.CodeGenerator.Metadata.ExtensionType);
                    _value3_ = _value2_.ReturnRequestParameterType;
            _if_ = false;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@"returnValue");
            _if_ = false;
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value5_ = _value4_.Parameters;
                    if (_value5_ != default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]))
                    {
                    if (_value5_.Length != default(int))
                    {
                        _if_ = true;
                    }
                }
                    }
                }
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            }
                }
                {
                    AutoCSer.CodeGenerator.Metadata.MethodParameter[] _value3_ = default(AutoCSer.CodeGenerator.Metadata.MethodParameter[]);
                {
                    AutoCSer.CodeGenerator.Metadata.MethodIndex _value4_ = _value2_.Method;
                    if (_value4_ != default(AutoCSer.CodeGenerator.Metadata.MethodIndex))
                    {
                    _value3_ = _value4_.Parameters;
                    }
                }
                    if (_value3_ != null)
                    {
                        int _loopIndex3_ = _loopIndex_;
                        _loopIndex_ = 0;
                        foreach (AutoCSer.CodeGenerator.Metadata.MethodParameter _value4_ in _value3_)
                        {
            _code_.Add(_value4_.ParameterJoinName);
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex3_;
                    }
                }
            _if_ = false;
                    if (_value2_.ReturnValueCallbackType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.CallbackReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@"(callback, ");
            _code_.Add(_value2_.ErrorCallbackParameterName);
            _code_.Add(@")");
            }
            _if_ = false;
                    if (_value2_.ReturnValueKeepCallbackType != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _if_ = false;
                    if (_value2_.IsJoinKeepCallback)
                    {
                        _if_ = true;
                }
            if (_if_)
            {
            _code_.Add(@", ");
            }
            _code_.Add(@"new ");
                {
                    AutoCSer.CodeGenerator.Metadata.ExtensionType _value3_ = _value2_.KeepCallbackReturnValueType;
                    if (_value3_ != default(AutoCSer.CodeGenerator.Metadata.ExtensionType))
                    {
            _code_.Add(_value3_.FullName);
                    }
                }
            _code_.Add(@"(keepCallback, ");
            _code_.Add(_value2_.ErrorKeepCallbackParameterName);
            _code_.Add(@")");
            }
            _code_.Add(@");
            }");
            }
            }
                            ++_loopIndex_;
                        }
                        _loopIndex_ = _loopIndex1_;
                    }
                }
            _code_.Add(@"
        }");
            }
                if (_isOut_) outEnd();
            }
        }
    }
}
#endif