//This file is automatically generated by a program. Please do not modify it by yourself.
//本文件由程序自动生成，请不要自行修改
using System;
using System.Numerics;
using AutoCSer;

#if NoAutoCSer
#else
#pragma warning disable
namespace AutoCSer.Document.ServiceThreadStrategy.Server.TaskQueue
{
        /// <summary>
        /// Server controller Task asynchronous read/write queue API sample interface 
///            服务端控制器 Task 异步读写队列 API 示例接口 client interface
        /// </summary>
        public partial interface ITaskQueueControllerClientController
        {
            /// <summary>
            /// One-time response API example 
///            一次性响应 API 示例
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns>The return value type must be System.Threading.Tasks.Task or System.Threading.Tasks.Task{T}</returns>
            AutoCSer.Net.ReturnCommand<int> Add(int left, int right);
            /// <summary>
            /// Example of asynchronous stream API 
///            异步流 API 示例
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns>The return value type must be System.Collections.Generic.IAsyncEnumerable{T}</returns>
            AutoCSer.Net.EnumeratorCommand<int> AsyncEnumerable(int left, int right);
            /// <summary>
            /// Unresponsive API example 
///            无响应 API 示例
            /// </summary>
            /// <param name="value"></param>
            AutoCSer.Net.SendOnlyCommand Call(int value);
            /// <summary>
            /// Callback delegate API example 
///            回调委托 API 示例
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns>For the callback delegate wrapper, the last parameter type must be AutoCSer.Net.CommandServerKeepCallback{T} 
///            回调委托包装，最后一个参数类型必须是 AutoCSer.Net.CommandServerKeepCallback{T}</returns>
            AutoCSer.Net.EnumeratorCommand<int> Callback(int left, int right);
            /// <summary>
            /// Callback count delegate API example 
///            回调计数委托 API 示例
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns>For the callback delegate wrapper, the last parameter type must be AutoCSer.Net.CommandServerKeepCallbackCount{T} 
///            回调委托包装，最后一个参数类型必须是 AutoCSer.Net.CommandServerKeepCallbackCount{T}</returns>
            AutoCSer.Net.EnumeratorCommand<int> CallbackCount(int left, int right);
            /// <summary>
            /// Collection encapsulation API example 
///            集合封装 API 示例
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns>The return value type must be System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{T}}</returns>
            AutoCSer.Net.EnumeratorCommand<int> Enumerable(int left, int right);
        }
}namespace AutoCSer.Document.ServiceThreadStrategy.Server.TaskQueue
{
        /// <summary>
        /// Server controller Task asynchronous read/write queue API sample interface 
///            服务端控制器 Task 异步读写队列 API 示例接口
        /// </summary>
        [AutoCSer.Net.CommandServer.ServerControllerInterface(typeof(ITaskQueueControllerMethodEnum))]
        public partial interface ITaskQueueController { }
        /// <summary>
        /// Server controller Task asynchronous read/write queue API sample interface 
///            服务端控制器 Task 异步读写队列 API 示例接口 (The method sequence number maps the enumeration type)
        /// </summary>
        public enum ITaskQueueControllerMethodEnum
        {
            /// <summary>
            /// [0] One-time response API example 
///            一次性响应 API 示例
            /// AutoCSer.Net.CommandServerCallTaskQueue queue The current execution queue context must be defined before the first data parameter 
///            当前执行队列上下文，必须定义在第一个数据参数之前
            /// int left 
            /// int right 
            /// 返回值 int The return value type must be System.Threading.Tasks.Task or System.Threading.Tasks.Task{T}
            /// </summary>
            Add = 0,
            /// <summary>
            /// [1] Example of asynchronous stream API 
///            异步流 API 示例
            /// AutoCSer.Net.CommandServerCallTaskQueue queue The current execution queue context must be defined before the first data parameter 
///            当前执行队列上下文，必须定义在第一个数据参数之前
            /// int left 
            /// int right 
            /// 返回值 int The return value type must be System.Collections.Generic.IAsyncEnumerable{T}
            /// </summary>
            AsyncEnumerable = 1,
            /// <summary>
            /// [2] Unresponsive API example 
///            无响应 API 示例
            /// AutoCSer.Net.CommandServerCallTaskQueue queue The current execution queue context must be defined before the first data parameter 
///            当前执行队列上下文，必须定义在第一个数据参数之前
            /// int value 
            /// </summary>
            Call = 2,
            /// <summary>
            /// [3] Callback delegate API example 
///            回调委托 API 示例
            /// AutoCSer.Net.CommandServerCallTaskQueue queue The current execution queue context must be defined before the first data parameter 
///            当前执行队列上下文，必须定义在第一个数据参数之前
            /// int left 
            /// int right 
            /// AutoCSer.Net.CommandServerKeepCallback{int} callback For the callback delegate wrapper, the last parameter type must be AutoCSer.Net.CommandServerKeepCallback{T} 
///            回调委托包装，最后一个参数类型必须是 AutoCSer.Net.CommandServerKeepCallback{T}
            /// 返回值 int The return value type must be System.Threading.Tasks.Task
            /// </summary>
            Callback = 3,
            /// <summary>
            /// [4] Callback count delegate API example 
///            回调计数委托 API 示例
            /// AutoCSer.Net.CommandServerCallTaskQueue queue The current execution queue context must be defined before the first data parameter 
///            当前执行队列上下文，必须定义在第一个数据参数之前
            /// int left 
            /// int right 
            /// AutoCSer.Net.CommandServerKeepCallbackCount{int} callback For the callback delegate wrapper, the last parameter type must be AutoCSer.Net.CommandServerKeepCallbackCount{T} 
///            回调委托包装，最后一个参数类型必须是 AutoCSer.Net.CommandServerKeepCallbackCount{T}
            /// 返回值 int The return value type must be System.Threading.Tasks.Task
            /// </summary>
            CallbackCount = 4,
            /// <summary>
            /// [5] Collection encapsulation API example 
///            集合封装 API 示例
            /// AutoCSer.Net.CommandServerCallTaskQueue queue The current execution queue context must be defined before the first data parameter 
///            当前执行队列上下文，必须定义在第一个数据参数之前
            /// int left 
            /// int right 
            /// 返回值 int The return value type must be System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{T}}
            /// </summary>
            Enumerable = 5,
        }
}
#endif