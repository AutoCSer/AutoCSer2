//This file is automatically generated by a program. Please do not modify it by yourself.
//本文件由程序自动生成，请不要自行修改
using System;
using System.Numerics;
using AutoCSer;

#if NoAutoCSer
#else
#pragma warning disable
namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// Example of a persistent pre-check node interface 
///            持久化前置检查节点接口示例 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.Document.MemoryDatabaseCustomNode.IBeforePersistenceNode))]
        public partial interface IBeforePersistenceNodeClientNode
        {
            /// <summary>
            /// Add a new data 
///            添加一个新数据
            /// </summary>
            /// <param name="value"></param>
            /// <returns>New data identity. Return 0 if failed 
///            新数据 ID，失败返回 0</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<long> AppendEntity(AutoCSer.Document.MemoryDatabaseCustomNode.IdentityEntity value);
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <param name="identity"></param>
            /// <returns>If the identity is not found, return -1 
///            没有找到 ID 则返回 -1</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<long> GetCount(long identity);
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            /// <param name="identity"></param>
            /// <returns>Return false if the identity is not found 
///            没有找到 ID 则返回 false</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Increment(long identity);
            /// <summary>
            /// Delete data 
///            删除数据
            /// </summary>
            /// <param name="identity"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Remove(long identity);
        }
        /// <summary>
        /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.IBeforePersistenceNode)
        /// </summary>
        public sealed partial class IBeforePersistenceNodeReturnValueNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientReturnValueNode<IBeforePersistenceNodeClientNode>
        {
            /// <summary>
            /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.IBeforePersistenceNode)
            /// </summary>
            /// <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            /// <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public IBeforePersistenceNodeReturnValueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache<IBeforePersistenceNodeClientNode> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }
            /// <summary>
            /// Add a new data 
///            添加一个新数据
            /// </summary>
            /// <param name="value"></param>
            /// <returns>New data identity. Return 0 if failed 
///            新数据 ID，失败返回 0</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<long> AppendEntity(AutoCSer.Document.MemoryDatabaseCustomNode.IdentityEntity value)
            {
                return base.node.AppendEntity(value).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <param name="identity"></param>
            /// <returns>If the identity is not found, return -1 
///            没有找到 ID 则返回 -1</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<long> GetCount(long identity)
            {
                return base.node.GetCount(identity).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            /// <param name="identity"></param>
            /// <returns>Return false if the identity is not found 
///            没有找到 ID 则返回 false</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<bool> Increment(long identity)
            {
                return base.node.Increment(identity).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Delete data 
///            删除数据
            /// </summary>
            /// <param name="identity"></param>
            /// <returns></returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<bool> Remove(long identity)
            {
                return base.node.Remove(identity).GetValue(isIgnoreError);
            }
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// Counter node interface example 
///            计数器节点接口示例 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.Document.MemoryDatabaseCustomNode.ICounterNode))]
        public partial interface ICounterNodeClientNode
        {
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <returns>Current count 
///            当前计数</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<long> GetCount();
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter Increment();
        }
        /// <summary>
        /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.ICounterNode)
        /// </summary>
        public sealed partial class ICounterNodeReturnValueNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientReturnValueNode<ICounterNodeClientNode>
        {
            /// <summary>
            /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.ICounterNode)
            /// </summary>
            /// <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            /// <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public ICounterNodeReturnValueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache<ICounterNodeClientNode> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <returns>Current count 
///            当前计数</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<long> GetCount()
            {
                return base.node.GetCount().GetValue(isIgnoreError);
            }
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue Increment()
            {
                return base.node.Increment().GetValue(isIgnoreError);
            }
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// Customize the basic service node interface 
///            自定义基础服务节点接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.Document.MemoryDatabaseCustomNode.ICustomServiceNode))]
        public partial interface ICustomServiceNodeClientNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode
        {
            /// <summary>
            /// Create a sample node for persistent pre-checking IBeforePersistenceNode 
///            创建持久化前置检查示例节点 IBeforePersistenceNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="capacity">Container initialization size 
///            容器初始化大小</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateBeforePersistenceNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int capacity);
            /// <summary>
            /// Create a counter node ICounterNode 
///            创建计数器节点 ICounterNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateCounterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo);
            /// <summary>
            /// Create a dictionary counter node IDictionaryCounterNode{T} 
///            创建字典计数器节点 IDictionaryCounterNode{T}
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="keyType">Keyword type 
///            关键字类型</param>
            /// <param name="capacity">Container initialization size 
///            容器初始化大小</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateDictionaryCounterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, AutoCSer.Reflection.RemoteType keyType, int capacity);
            /// <summary>
            /// Create a dictionary counter node that supports snapshot cloning IDictionarySnapshotCloneCounterNode{T} 
///            创建支持快照克隆的字典计数器节点 IDictionarySnapshotCloneCounterNode{T}
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="keyType">Keyword type 
///            关键字类型</param>
            /// <param name="capacity">Container initialization size 
///            容器初始化大小</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateDictionarySnapshotCloneCounterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, AutoCSer.Reflection.RemoteType keyType, int capacity);
            /// <summary>
            /// Create a API sample node for initialize and load the persistent data ILoadPersistenceNode 
///            创建初始化加载持久化数据 API 示例节点 ILoadPersistenceNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateLoadPersistenceNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo);
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// Dictionary counter node interface example 
///            字典计数器节点接口示例 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.Document.MemoryDatabaseCustomNode.IDictionaryCounterNode<>))]
        public partial interface IDictionaryCounterNodeClientNode<T>
        {
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>If the key is null, -1 will be returned 
///            key 为 null 则返回 -1</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<long> GetCount(T key);
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>If the key is null, it returns false 
///            key 为 null 则返回 false</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Increment(T key);
            /// <summary>
            /// Delete the count 
///            删除计数
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>Returning false indicates that the keyword does not exist 
///            返回 false 表示关键字不存在</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Remove(T key);
        }
        /// <summary>
        /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.IDictionaryCounterNode{T})
        /// </summary>
        public sealed partial class IDictionaryCounterNodeReturnValueNode<T> : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientReturnValueNode<IDictionaryCounterNodeClientNode<T>>
        {
            /// <summary>
            /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.IDictionaryCounterNode{T})
            /// </summary>
            /// <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            /// <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public IDictionaryCounterNodeReturnValueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache<IDictionaryCounterNodeClientNode<T>> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>If the key is null, -1 will be returned 
///            key 为 null 则返回 -1</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<long> GetCount(T key)
            {
                return base.node.GetCount(key).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>If the key is null, it returns false 
///            key 为 null 则返回 false</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<bool> Increment(T key)
            {
                return base.node.Increment(key).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Delete the count 
///            删除计数
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>Returning false indicates that the keyword does not exist 
///            返回 false 表示关键字不存在</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<bool> Remove(T key)
            {
                return base.node.Remove(key).GetValue(isIgnoreError);
            }
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// An example of the dictionary counter node interface supporting snapshot cloning 
///            支持快照克隆的字典计数器节点接口示例 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.Document.MemoryDatabaseCustomNode.IDictionarySnapshotCloneCounterNode<>))]
        public partial interface IDictionarySnapshotCloneCounterNodeClientNode<T>
        {
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>If the key is null, -1 will be returned 
///            key 为 null 则返回 -1</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<long> GetCount(T key);
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>If the key is null, it returns false 
///            key 为 null 则返回 false</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Increment(T key);
            /// <summary>
            /// Delete the count 
///            删除计数
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>Returning false indicates that the keyword does not exist 
///            返回 false 表示关键字不存在</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Remove(T key);
        }
        /// <summary>
        /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.IDictionarySnapshotCloneCounterNode{T})
        /// </summary>
        public sealed partial class IDictionarySnapshotCloneCounterNodeReturnValueNode<T> : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientReturnValueNode<IDictionarySnapshotCloneCounterNodeClientNode<T>>
        {
            /// <summary>
            /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.IDictionarySnapshotCloneCounterNode{T})
            /// </summary>
            /// <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            /// <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public IDictionarySnapshotCloneCounterNodeReturnValueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache<IDictionarySnapshotCloneCounterNodeClientNode<T>> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>If the key is null, -1 will be returned 
///            key 为 null 则返回 -1</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<long> GetCount(T key)
            {
                return base.node.GetCount(key).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>If the key is null, it returns false 
///            key 为 null 则返回 false</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<bool> Increment(T key)
            {
                return base.node.Increment(key).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Delete the count 
///            删除计数
            /// </summary>
            /// <param name="key">The keyword for counting 
///            计数关键字</param>
            /// <returns>Returning false indicates that the keyword does not exist 
///            返回 false 表示关键字不存在</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<bool> Remove(T key)
            {
                return base.node.Remove(key).GetValue(isIgnoreError);
            }
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// The API sample node interface for initialize and load the persistent data 
///            初始化加载持久化数据 API 示例节点接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.Document.MemoryDatabaseCustomNode.ILoadPersistenceNode))]
        public partial interface ILoadPersistenceNodeClientNode
        {
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <returns>Current count 
///            当前计数</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<long> GetCount();
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter Increment();
        }
        /// <summary>
        /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.ILoadPersistenceNode)
        /// </summary>
        public sealed partial class ILoadPersistenceNodeReturnValueNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientReturnValueNode<ILoadPersistenceNodeClientNode>
        {
            /// <summary>
            /// Get the direct return value API encapsulation (AutoCSer.Document.MemoryDatabaseCustomNode.ILoadPersistenceNode)
            /// </summary>
            /// <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            /// <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public ILoadPersistenceNodeReturnValueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache<ILoadPersistenceNodeClientNode> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }
            /// <summary>
            /// Get the current count 
///            获取当前计数
            /// </summary>
            /// <returns>Current count 
///            当前计数</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<long> GetCount()
            {
                return base.node.GetCount().GetValue(isIgnoreError);
            }
            /// <summary>
            /// Count +1 
///            计数 +1
            /// </summary>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue Increment()
            {
                return base.node.Increment().GetValue(isIgnoreError);
            }
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// Example of a persistent pre-check node interface 
///            持久化前置检查节点接口示例
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IBeforePersistenceNodeMethodEnum))]
        public partial interface IBeforePersistenceNode { }
        /// <summary>
        /// Example of a persistent pre-check node interface 
///            持久化前置检查节点接口示例 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IBeforePersistenceNodeMethodEnum
        {
            /// <summary>
            /// [0] Add a new data 
///            添加一个新数据
            /// AutoCSer.Document.MemoryDatabaseCustomNode.IdentityEntity value 
            /// 返回值 long New data identity. Return 0 if failed 
///            新数据 ID，失败返回 0
            /// </summary>
            AppendEntity = 0,
            /// <summary>
            /// [1] Add a new data (Check the input parameters before the persistence operation) 
///            添加一个新数据（持久化操作之前检查输入参数）
            /// AutoCSer.Document.MemoryDatabaseCustomNode.IdentityEntity value 
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{long} 
            /// </summary>
            AppendEntityBeforePersistence = 1,
            /// <summary>
            /// [2] Get the current count 
///            获取当前计数
            /// long identity 
            /// 返回值 long If the identity is not found, return -1 
///            没有找到 ID 则返回 -1
            /// </summary>
            GetCount = 2,
            /// <summary>
            /// [3] Count +1 
///            计数 +1
            /// long identity 
            /// 返回值 bool Return false if the identity is not found 
///            没有找到 ID 则返回 false
            /// </summary>
            Increment = 3,
            /// <summary>
            /// [4] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.Document.MemoryDatabaseCustomNode.IdentityEntity value data
            /// </summary>
            SnapshotSetEntity = 4,
            /// <summary>
            /// [5] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// long identity Current allocation identity 
///            当前分配 ID
            /// </summary>
            SnapshotSetIdentity = 5,
            /// <summary>
            /// [6] Delete data 
///            删除数据
            /// long identity 
            /// 返回值 bool 
            /// </summary>
            Remove = 6,
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// Counter node interface example 
///            计数器节点接口示例
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(ICounterNodeMethodEnum))]
        public partial interface ICounterNode { }
        /// <summary>
        /// Counter node interface example 
///            计数器节点接口示例 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum ICounterNodeMethodEnum
        {
            /// <summary>
            /// [0] Get the current count 
///            获取当前计数
            /// 返回值 long Current count 
///            当前计数
            /// </summary>
            GetCount = 0,
            /// <summary>
            /// [1] Count +1 
///            计数 +1
            /// </summary>
            Increment = 1,
            /// <summary>
            /// [2] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// long value data
            /// </summary>
            SnapshotSet = 2,
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// Customize the basic service node interface 
///            自定义基础服务节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(ICustomServiceNodeMethodEnum))]
        public partial interface ICustomServiceNode { }
        /// <summary>
        /// Customize the basic service node interface 
///            自定义基础服务节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum ICustomServiceNodeMethodEnum
        {
            /// <summary>
            /// [0] Create a array node IArrayNode{T} 
///            创建数组节点 IArrayNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int length Array length
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateArrayNode = 0,
            /// <summary>
            /// [1] Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// uint capacity The number of binary bits 
///            二进制位数量
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateBitmapNode = 1,
            /// <summary>
            /// [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
///            创建字典节点 IByteArrayDictionaryNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayDictionaryNode = 2,
            /// <summary>
            /// [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
///            创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayFragmentDictionaryNode = 3,
            /// <summary>
            /// [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
///            创建队列节点（先进先出） IByteArrayQueueNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayQueueNode = 4,
            /// <summary>
            /// [5] Create a stack node IByteArrayStackNode (Last in, first out) 
///            创建栈节点（后进先出） IByteArrayStackNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayStackNode = 5,
            /// <summary>
            /// [6] Create a dictionary node IDictionaryNode{KT,VT} 
///            创建字典节点 IDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDictionaryNode = 6,
            /// <summary>
            /// [7] Create distributed lock nodes IDistributedLockNode{KT} 
///            创建分布式锁节点 IDistributedLockNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDistributedLockNode = 7,
            /// <summary>
            /// [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
///            创建字典节点 IFragmentDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateFragmentDictionaryNode = 8,
            /// <summary>
            /// [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
///            创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateFragmentHashSetNode = 9,
            /// <summary>
            /// [10] Create a dictionary node IHashBytesDictionaryNode 
///            创建字典节点 IHashBytesDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashBytesDictionaryNode = 10,
            /// <summary>
            /// [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
///            创建字典节点 IHashBytesFragmentDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashBytesFragmentDictionaryNode = 11,
            /// <summary>
            /// [12] Create a hash table node IHashSetNode{KT} 
///            创建哈希表节点 IHashSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashSetNode = 12,
            /// <summary>
            /// [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// long identity Initial Allocation identity 
///            起始分配 ID
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateIdentityGeneratorNode = 13,
            /// <summary>
            /// [14] Create a array node ILeftArrayNode{T} 
///            创建数组节点 ILeftArrayNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateLeftArrayNode = 14,
            /// <summary>
            /// [15] Create a message processing node IMessageNode{T} 
///            创建消息处理节点 IMessageNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType messageType Message data type 
///            消息数据类型
            /// int arraySize The size of the message array being processed 
///            正在处理的消息数组大小
            /// int timeoutSeconds The number of seconds of message processing timeout 
///            消息处理超时秒数
            /// int checkTimeoutSeconds Check the interval in seconds for message timeouts 
///            消息超时检查间隔秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateMessageNode = 15,
            /// <summary>
            /// [16] Create a queue node IQueueNode{T} (First in, first Out) 
///            创建队列节点（先进先出） IQueueNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateQueueNode = 16,
            /// <summary>
            /// [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
///            创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSearchTreeDictionaryNode = 17,
            /// <summary>
            /// [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
///            创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSearchTreeSetNode = 18,
            /// <summary>
            /// [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
///            创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int arraySize The size of the message array being processed 
///            正在处理的消息数组大小
            /// int timeoutSeconds The number of seconds of message processing timeout 
///            消息处理超时秒数
            /// int checkTimeoutSeconds Check the interval in seconds for message timeouts 
///            消息超时检查间隔秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateServerByteArrayMessageNode = 19,
            /// <summary>
            /// [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
///            创建排序字典节点 ISortedDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedDictionaryNode = 20,
            /// <summary>
            /// [21] Create a sorting list node ISortedListNode{KT,VT} 
///            创建排序列表节点 ISortedListNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedListNode = 21,
            /// <summary>
            /// [22] Create sorted collection node ISortedSetNode{KT} 
///            创建排序集合节点 ISortedSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedSetNode = 22,
            /// <summary>
            /// [23] Create a stack node IStackNode{T} (Last in, first out) 
///            创建栈节点（后进先出） IStackNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateStackNode = 23,
            /// <summary>
            /// [24] Delete the node 
///            删除节点
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// 返回值 bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNode = 24,
            /// <summary>
            /// [25] Create a server registration node IServerRegistryNode 
///            创建服务注册节点 IServerRegistryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int loadTimeoutSeconds Cold start session timeout seconds 
///            冷启动会话超时秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateServerRegistryNode = 25,
            /// <summary>
            /// [26] Create a service process daemon node IProcessGuardNode 
///            创建服务进程守护节点 IProcessGuardNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateProcessGuardNode = 26,
            /// <summary>
            /// [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapClientFilterNode = 27,
            /// <summary>
            /// [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapFilterNode = 28,
            /// <summary>
            /// [29] Delete the node 
///            删除节点
            /// string key Node global keyword 
///            节点全局关键字
            /// 返回值 bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNodeByKey = 29,
            /// <summary>
            /// [30] Create an archive node only IOnlyPersistenceNode{T} 
///            创建仅存档节点 IOnlyPersistenceNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType valueType Archive data type 
///            存档数据类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateOnlyPersistenceNode = 30,
            /// <summary>
            /// [31] Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateUniformProbabilityClientStatisticsNode = 31,
            /// <summary>
            /// [32] Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateUniformProbabilityTotalStatisticsNode = 32,
            /// <summary>
            /// [256] Create a sample node for persistent pre-checking IBeforePersistenceNode 
///            创建持久化前置检查示例节点 IBeforePersistenceNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateBeforePersistenceNode = 256,
            /// <summary>
            /// [257] Create a counter node ICounterNode 
///            创建计数器节点 ICounterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateCounterNode = 257,
            /// <summary>
            /// [258] Create a dictionary counter node IDictionaryCounterNode{T} 
///            创建字典计数器节点 IDictionaryCounterNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDictionaryCounterNode = 258,
            /// <summary>
            /// [259] Create a dictionary counter node that supports snapshot cloning IDictionarySnapshotCloneCounterNode{T} 
///            创建支持快照克隆的字典计数器节点 IDictionarySnapshotCloneCounterNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDictionarySnapshotCloneCounterNode = 259,
            /// <summary>
            /// [260] Create a API sample node for initialize and load the persistent data ILoadPersistenceNode 
///            创建初始化加载持久化数据 API 示例节点 ILoadPersistenceNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateLoadPersistenceNode = 260,
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// Dictionary counter node interface example 
///            字典计数器节点接口示例
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IDictionaryCounterNodeMethodEnum))]
        public partial interface IDictionaryCounterNode<T> { }
        /// <summary>
        /// Dictionary counter node interface example 
///            字典计数器节点接口示例 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IDictionaryCounterNodeMethodEnum
        {
            /// <summary>
            /// [0] Get the current count 
///            获取当前计数
            /// T key The keyword for counting 
///            计数关键字
            /// 返回值 long If the key is null, -1 will be returned 
///            key 为 null 则返回 -1
            /// </summary>
            GetCount = 0,
            /// <summary>
            /// [1] Count +1 
///            计数 +1
            /// T key The keyword for counting 
///            计数关键字
            /// 返回值 bool If the key is null, it returns false 
///            key 为 null 则返回 false
            /// </summary>
            Increment = 1,
            /// <summary>
            /// [2] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.BinarySerializeKeyValue{T,long} value data
            /// </summary>
            SnapshotSet = 2,
            /// <summary>
            /// [3] Delete the count 
///            删除计数
            /// T key The keyword for counting 
///            计数关键字
            /// 返回值 bool Returning false indicates that the keyword does not exist 
///            返回 false 表示关键字不存在
            /// </summary>
            Remove = 3,
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// An example of the dictionary counter node interface supporting snapshot cloning 
///            支持快照克隆的字典计数器节点接口示例
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IDictionarySnapshotCloneCounterNodeMethodEnum))]
        public partial interface IDictionarySnapshotCloneCounterNode<T> { }
        /// <summary>
        /// An example of the dictionary counter node interface supporting snapshot cloning 
///            支持快照克隆的字典计数器节点接口示例 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IDictionarySnapshotCloneCounterNodeMethodEnum
        {
            /// <summary>
            /// [0] Get the current count 
///            获取当前计数
            /// T key The keyword for counting 
///            计数关键字
            /// 返回值 long If the key is null, -1 will be returned 
///            key 为 null 则返回 -1
            /// </summary>
            GetCount = 0,
            /// <summary>
            /// [1] Count +1 
///            计数 +1
            /// T key The keyword for counting 
///            计数关键字
            /// 返回值 bool If the key is null, it returns false 
///            key 为 null 则返回 false
            /// </summary>
            Increment = 1,
            /// <summary>
            /// [2] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.Document.MemoryDatabaseCustomNode.SnapshotCloneCounter{T} value data
            /// </summary>
            SnapshotSet = 2,
            /// <summary>
            /// [3] Delete the count 
///            删除计数
            /// T key The keyword for counting 
///            计数关键字
            /// 返回值 bool Returning false indicates that the keyword does not exist 
///            返回 false 表示关键字不存在
            /// </summary>
            Remove = 3,
        }
}namespace AutoCSer.Document.MemoryDatabaseCustomNode
{
        /// <summary>
        /// The API sample node interface for initialize and load the persistent data 
///            初始化加载持久化数据 API 示例节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(ILoadPersistenceNodeMethodEnum))]
        public partial interface ILoadPersistenceNode { }
        /// <summary>
        /// The API sample node interface for initialize and load the persistent data 
///            初始化加载持久化数据 API 示例节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum ILoadPersistenceNodeMethodEnum
        {
            /// <summary>
            /// [0] Get the current count 
///            获取当前计数
            /// 返回值 long Current count 
///            当前计数
            /// </summary>
            GetCount = 0,
            /// <summary>
            /// [1] Count +1 
///            计数 +1
            /// </summary>
            Increment = 1,
            /// <summary>
            /// [2] Count +1 (Initialize and load the persistent data) 
///            计数 +1（初始化加载持久化数据）
            /// </summary>
            IncrementLoadPersistence = 2,
            /// <summary>
            /// [3] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// long value data
            /// </summary>
            SnapshotSet = 3,
        }
}
#endif