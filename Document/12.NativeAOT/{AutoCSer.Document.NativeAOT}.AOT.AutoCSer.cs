//This file is automatically generated by a program. Please do not modify it by yourself.
//本文件由程序自动生成，请不要自行修改
using System;
using System.Numerics;
using AutoCSer;

#if NoAutoCSer
#else
#pragma warning disable
namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// Example of JSON hybrid binary serialization 
///            JSON 混杂二进制序列化 示例
        /// </summary>
    internal partial class BinaryJsonMix
    {
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void JsonSerialize(AutoCSer.JsonSerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix value)
            {
                value.jsonSerialize(serializer);
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="memberMap"></param>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            /// <param name="stream"></param>
            internal static void JsonSerializeMemberMap(AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix> memberMap, JsonSerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix value, AutoCSer.Memory.CharStream stream)
            {
                value.jsonSerialize(memberMap, serializer, stream);
            }
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void jsonSerialize(AutoCSer.JsonSerializer __serializer__)
            {
                AutoCSer.Memory.CharStream __stream__ = __serializer__.CharStream;
                __stream__.SimpleWrite(@"""String"":");
                if (String == null) __stream__.WriteJsonNull();
                else __serializer__.JsonSerialize(String);
                __stream__.Write(',');
                __stream__.SimpleWrite(@"""Value"":");
                __serializer__.JsonSerialize(Value);
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="__memberMap__"></param>
            /// <param name="__serializer__"></param>
            /// <param name="__stream__"></param>
            private void jsonSerialize(AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix> __memberMap__, JsonSerializer __serializer__, AutoCSer.Memory.CharStream __stream__)
            {
                bool isNext = false;
                if (__memberMap__.IsMember(0))
                {
                    if (isNext) __stream__.Write(',');
                    else isNext = true;
                    __stream__.SimpleWrite(@"""String"":");
                    if (String == null) __stream__.WriteJsonNull();
                    else __serializer__.JsonSerialize(String);
                }
                if (__memberMap__.IsMember(1))
                {
                    if (isNext) __stream__.Write(',');
                    else isNext = true;
                    __stream__.SimpleWrite(@"""Value"":");
                    __serializer__.JsonSerialize(Value);
                }
            }
            /// <summary>
            /// Get the collection of JSON serialized member types
            /// 获取 JSON 序列化成员类型集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.LeftArray<Type> JsonSerializeMemberTypes()
            {
                AutoCSer.LeftArray<Type> types = new LeftArray<Type>(2);
                types.Add(typeof(string));
                types.Add(typeof(int));
                return types;
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix value, ref AutoCSer.Memory.Pointer names)
            {
                value.jsonDeserialize(deserializer, ref names);
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            /// <param name="memberMap"></param>
            internal static void JsonDeserializeMemberMap(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix value, ref AutoCSer.Memory.Pointer names, AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix> memberMap)
            {
                value.jsonDeserialize(deserializer, ref names, memberMap);
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__names__"></param>
            private void jsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Memory.Pointer __names__)
            {
                if (__deserializer__.IsName(ref __names__))
                {
                    var String = this.String;
                    __deserializer__.JsonDeserialize(ref String);
                    this.String = String;
                    if (!AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) return;
                }
                else return;
                if (__deserializer__.IsName(ref __names__))
                {
                    var Value = this.Value;
                    __deserializer__.JsonDeserialize(ref Value);
                    this.Value = Value;
                    if (!AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) return;
                }
                else return;
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__names__"></param>
            /// <param name="__memberMap__"></param>
            private void jsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Memory.Pointer __names__, AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix> __memberMap__)
            {
                if (__deserializer__.IsName(ref __names__))
                {
                    var String = this.String;
                    __deserializer__.JsonDeserialize(ref String);
                    this.String = String;
                    if (AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) __memberMap__.SetMember(0);
                    else return;
                }
                else return;
                if (__deserializer__.IsName(ref __names__))
                {
                    var Value = this.Value;
                    __deserializer__.JsonDeserialize(ref Value);
                    this.Value = Value;
                    if (AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) __memberMap__.SetMember(1);
                    else return;
                }
                else return;
            }
            /// <summary>
            /// Member JSON deserialization
            /// 成员 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__value__"></param>
            /// <param name="__memberIndex__"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix __value__, int __memberIndex__)
            {
                switch (__memberIndex__)
                {
                    case 0:
                        var String = __value__.String;
                        __deserializer__.JsonDeserialize(ref String);
                        __value__.String = String;
                        return;
                    case 1:
                        var Value = __value__.Value;
                        __deserializer__.JsonDeserialize(ref Value);
                        __value__.Value = Value;
                        return;
                }
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> JsonDeserializeMemberNames()
            {
                return jsonDeserializeMemberName();
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            private static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> jsonDeserializeMemberName()
            {
                AutoCSer.LeftArray<string> names = new AutoCSer.LeftArray<string>(2);
                AutoCSer.LeftArray<int> indexs = new AutoCSer.LeftArray<int>(2);
                names.Add(nameof(String));
                indexs.Add(0);
                names.Add(nameof(Value));
                indexs.Add(1);
                return new AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>>(names, indexs);
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void JsonSerialize()
            {
                AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix value = default(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix);
                JsonSerialize(null, value);
                JsonSerializeMemberMap(null, null, value, null);
                JsonSerializeMemberTypes();
                AutoCSer.Memory.Pointer names = default(AutoCSer.Memory.Pointer);
                JsonDeserialize(null, ref value, ref names);
                JsonDeserializeMemberMap(null, ref value, ref names, null);
                JsonDeserialize(null, ref value, 0);
                JsonDeserializeMemberNames();
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix));
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix));
            }
    }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// Example of JSON hybrid binary serialization 
///            JSON 混杂二进制序列化 示例
        /// </summary>
    internal partial class BinaryJsonMix
    {
            /// <summary>
            /// Call the default constructor
            /// 调用默认构造函数
            /// </summary>
            internal static AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix DefaultConstructor()
            {
                return new AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix();
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void DefaultConstructorReflection()
            {
                DefaultConstructor();
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix>();
            }
    }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// JSON mixed binary serialization example deserialization data 
///            JSON 混杂二进制序列化 示例 反序列化数据
        /// </summary>
    internal partial class BinaryJsonMixDeserialize
    {
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void JsonSerialize(AutoCSer.JsonSerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize value)
            {
                value.jsonSerialize(serializer);
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="memberMap"></param>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            /// <param name="stream"></param>
            internal static void JsonSerializeMemberMap(AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize> memberMap, JsonSerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize value, AutoCSer.Memory.CharStream stream)
            {
                value.jsonSerialize(memberMap, serializer, stream);
            }
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void jsonSerialize(AutoCSer.JsonSerializer __serializer__)
            {
                AutoCSer.Memory.CharStream __stream__ = __serializer__.CharStream;
                __stream__.SimpleWrite(@"""String"":");
                if (String == null) __stream__.WriteJsonNull();
                else __serializer__.JsonSerialize(String);
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="__memberMap__"></param>
            /// <param name="__serializer__"></param>
            /// <param name="__stream__"></param>
            private void jsonSerialize(AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize> __memberMap__, JsonSerializer __serializer__, AutoCSer.Memory.CharStream __stream__)
            {
                bool isNext = false;
                if (__memberMap__.IsMember(0))
                {
                    if (isNext) __stream__.Write(',');
                    else isNext = true;
                    __stream__.SimpleWrite(@"""String"":");
                    if (String == null) __stream__.WriteJsonNull();
                    else __serializer__.JsonSerialize(String);
                }
            }
            /// <summary>
            /// Get the collection of JSON serialized member types
            /// 获取 JSON 序列化成员类型集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.LeftArray<Type> JsonSerializeMemberTypes()
            {
                AutoCSer.LeftArray<Type> types = new LeftArray<Type>(1);
                types.Add(typeof(string));
                return types;
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize value, ref AutoCSer.Memory.Pointer names)
            {
                value.jsonDeserialize(deserializer, ref names);
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            /// <param name="memberMap"></param>
            internal static void JsonDeserializeMemberMap(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize value, ref AutoCSer.Memory.Pointer names, AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize> memberMap)
            {
                value.jsonDeserialize(deserializer, ref names, memberMap);
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__names__"></param>
            private void jsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Memory.Pointer __names__)
            {
                if (__deserializer__.IsName(ref __names__))
                {
                    __deserializer__.JsonDeserialize(ref this.String);
                    if (!AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) return;
                }
                else return;
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__names__"></param>
            /// <param name="__memberMap__"></param>
            private void jsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Memory.Pointer __names__, AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize> __memberMap__)
            {
                if (__deserializer__.IsName(ref __names__))
                {
                    __deserializer__.JsonDeserialize(ref this.String);
                    if (AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) __memberMap__.SetMember(0);
                    else return;
                }
                else return;
            }
            /// <summary>
            /// Member JSON deserialization
            /// 成员 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__value__"></param>
            /// <param name="__memberIndex__"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize __value__, int __memberIndex__)
            {
                switch (__memberIndex__)
                {
                    case 0:
                        __deserializer__.JsonDeserialize(ref __value__.String);
                        return;
                }
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> JsonDeserializeMemberNames()
            {
                return jsonDeserializeMemberName();
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            private static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> jsonDeserializeMemberName()
            {
                AutoCSer.LeftArray<string> names = new AutoCSer.LeftArray<string>(1);
                AutoCSer.LeftArray<int> indexs = new AutoCSer.LeftArray<int>(1);
                names.Add(nameof(String));
                indexs.Add(0);
                return new AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>>(names, indexs);
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void JsonSerialize()
            {
                AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize value = default(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize);
                JsonSerialize(null, value);
                JsonSerializeMemberMap(null, null, value, null);
                JsonSerializeMemberTypes();
                AutoCSer.Memory.Pointer names = default(AutoCSer.Memory.Pointer);
                JsonDeserialize(null, ref value, ref names);
                JsonDeserializeMemberMap(null, ref value, ref names, null);
                JsonDeserialize(null, ref value, 0);
                JsonDeserializeMemberNames();
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize));
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize));
            }
    }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// JSON mixed binary serialization example deserialization data 
///            JSON 混杂二进制序列化 示例 反序列化数据
        /// </summary>
    internal partial class BinaryJsonMixDeserialize
    {
            /// <summary>
            /// Call the default constructor
            /// 调用默认构造函数
            /// </summary>
            internal static AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize DefaultConstructor()
            {
                return new AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize();
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void DefaultConstructorReflection()
            {
                DefaultConstructor();
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize>();
            }
    }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// Example of automatically implement property binary serialization 
///            自动属性二进制序列化 示例
        /// </summary>
    internal partial class BinaryProperty
    {
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741825)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(Value);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                var Value = this.Value;
                __deserializer__.BinaryDeserialize(ref Value);
                this.Value = Value;
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 1, 1073741825);
                typeInfo.Add(typeof(int));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty value = default(AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty>();
            }
    }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// Example of automatically implement property binary serialization 
///            自动属性二进制序列化 示例
        /// </summary>
    internal partial class BinaryProperty
    {
            /// <summary>
            /// Call the default constructor
            /// 调用默认构造函数
            /// </summary>
            internal static AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty DefaultConstructor()
            {
                return new AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty();
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void DefaultConstructorReflection()
            {
                DefaultConstructor();
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty>();
            }
    }
}namespace AutoCSer.Document.NativeAOT.Service
{
        /// <summary>
        /// Example of service controller client interface            
///                                                                                                                          服务控制器客户端接口示例
        /// </summary>
        [AutoCSer.Net.CommandClientControllerType(typeof(ServiceControllerClientController))]
        public partial interface IServiceControllerClientController { }
        /// <summary>
        /// Example of service controller client interface            
///                                                                                                                          服务控制器客户端接口示例 client controller
        /// </summary>
        internal unsafe partial class ServiceControllerClientController : AutoCSer.Net.CommandClientController<AutoCSer.Document.NativeAOT.Service.IServiceControllerClientController, AutoCSer.Document.NativeAOT.Service.IServiceController>, IServiceControllerClientController
        {
            private ServiceControllerClientController(AutoCSer.Net.CommandClientSocket socket, string controllerName, int startMethodIndex, string?[]? serverMethodNames) : base(socket, controllerName, startMethodIndex, serverMethodNames, -2147483648) { }
            internal static AutoCSer.Net.CommandClientController __CommandClientControllerConstructor__(AutoCSer.Net.CommandClientSocket socket, string controllerName, int startMethodIndex, string?[]? serverMethodNames)
            {
                return new ServiceControllerClientController(socket, controllerName, startMethodIndex, serverMethodNames);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip0__
            {
                internal int left;
                internal int right;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__ip0__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(8))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.left);
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.right);
                }
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__ip0__ value = default(AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__ip0__);
                SimpleSerialize(null, ref value);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__ip0__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __op0__
            {
                internal int ReturnValue;
                private static int getReturnValue(__op0__ parameter)
                {
                    return parameter.ReturnValue;
                }
                internal static readonly Func<__op0__, int> GetReturnValue = getReturnValue;
                
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__op0__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.ReturnValue);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__op0__ value = default(AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__op0__);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__op0__));
            }
            }
            /// <summary>
            /// Test API
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns></returns>
            AutoCSer.Net.ReturnCommand<int> AutoCSer.Document.NativeAOT.Service.IServiceControllerClientController/**/.Add(int left, int right)
            {
                __ip0__ __inputParameter__ = new __ip0__
                {
                    left = left,
                    right = right,
                };
                var __returnValue__ = base.ReturnValueOutput<__ip0__, int, __op0__>(0
                    , __op0__/**/.GetReturnValue
                    , ref __inputParameter__
                    );
                return __returnValue__;
            }
            /// <summary>
            /// 获取客户端接口方法信息集合
            /// </summary>
            internal static AutoCSer.LeftArray<AutoCSer.Net.CommandServer.ClientMethod> __CommandClientControllerMethods__()
            {
                AutoCSer.LeftArray<AutoCSer.Net.CommandServer.ClientMethod> methods = new AutoCSer.LeftArray<AutoCSer.Net.CommandServer.ClientMethod>(1);
                methods.Add(new AutoCSer.Net.CommandServer.ClientMethod(typeof(IServiceControllerClientController), "Add", 0, 1, 1, AutoCSer.Net.CommandServer.ClientCallbackTypeEnum.CheckRunTask, 0, 0, 0, 0));
                return methods;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void __CommandClientControllerConstructor__()
            {
                __CommandClientControllerConstructor__(null, null, 0, null);
                AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.Document.NativeAOT.Service.IServiceControllerMethodEnum));
                __CommandClientControllerMethods__();
                AutoCSer.AotReflection.Interfaces(typeof(ServiceControllerClientController));
            }
        }
}namespace AutoCSer.Document.NativeAOT.Service
{
        /// <summary>
        /// Example of service controller interface 
///            服务控制器接口示例 client interface
        /// </summary>
        [AutoCSer.CodeGenerator.CommandClientController(typeof(AutoCSer.Document.NativeAOT.Service.IServiceController))]
        public partial interface IServiceControllerClientController
        {
            /// <summary>
            /// Test API
            /// </summary>
            /// <param name="left"></param>
            /// <param name="right"></param>
            /// <returns></returns>
            AutoCSer.Net.ReturnCommand<int> Add(int left, int right);
        }
}namespace AutoCSer.Document.NativeAOT.Service
{
        /// <summary>
        /// Example of service controller interface 
///            服务控制器接口示例
        /// </summary>
        [AutoCSer.Net.CommandServer.ServerControllerInterface(typeof(IServiceControllerMethodEnum))]
        public partial interface IServiceController { }
        /// <summary>
        /// Example of service controller interface 
///            服务控制器接口示例 (The method sequence number maps the enumeration type)
        /// </summary>
        public enum IServiceControllerMethodEnum
        {
            /// <summary>
            /// [0] Test API
            /// int left 
            /// int right 
            /// 返回值 int 
            /// </summary>
            Add = 0,
        }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// Example of JSON serialization 
///            JSON 序列化 示例
        /// </summary>
    internal partial class JsonProperty
    {
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void JsonSerialize(AutoCSer.JsonSerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty value)
            {
                value.jsonSerialize(serializer);
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="memberMap"></param>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            /// <param name="stream"></param>
            internal static void JsonSerializeMemberMap(AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty> memberMap, JsonSerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty value, AutoCSer.Memory.CharStream stream)
            {
                value.jsonSerialize(memberMap, serializer, stream);
            }
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void jsonSerialize(AutoCSer.JsonSerializer __serializer__)
            {
                AutoCSer.Memory.CharStream __stream__ = __serializer__.CharStream;
                __stream__.SimpleWrite(@"""Value"":");
                __serializer__.JsonSerialize(Value);
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="__memberMap__"></param>
            /// <param name="__serializer__"></param>
            /// <param name="__stream__"></param>
            private void jsonSerialize(AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty> __memberMap__, JsonSerializer __serializer__, AutoCSer.Memory.CharStream __stream__)
            {
                bool isNext = false;
                if (__memberMap__.IsMember(0))
                {
                    if (isNext) __stream__.Write(',');
                    else isNext = true;
                    __stream__.SimpleWrite(@"""Value"":");
                    __serializer__.JsonSerialize(Value);
                }
            }
            /// <summary>
            /// Get the collection of JSON serialized member types
            /// 获取 JSON 序列化成员类型集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.LeftArray<Type> JsonSerializeMemberTypes()
            {
                AutoCSer.LeftArray<Type> types = new LeftArray<Type>(1);
                types.Add(typeof(int));
                return types;
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty value, ref AutoCSer.Memory.Pointer names)
            {
                value.jsonDeserialize(deserializer, ref names);
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            /// <param name="memberMap"></param>
            internal static void JsonDeserializeMemberMap(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty value, ref AutoCSer.Memory.Pointer names, AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty> memberMap)
            {
                value.jsonDeserialize(deserializer, ref names, memberMap);
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__names__"></param>
            private void jsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Memory.Pointer __names__)
            {
                if (__deserializer__.IsName(ref __names__))
                {
                    var Value = this.Value;
                    __deserializer__.JsonDeserialize(ref Value);
                    this.Value = Value;
                    if (!AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) return;
                }
                else return;
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__names__"></param>
            /// <param name="__memberMap__"></param>
            private void jsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Memory.Pointer __names__, AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty> __memberMap__)
            {
                if (__deserializer__.IsName(ref __names__))
                {
                    var Value = this.Value;
                    __deserializer__.JsonDeserialize(ref Value);
                    this.Value = Value;
                    if (AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) __memberMap__.SetMember(0);
                    else return;
                }
                else return;
            }
            /// <summary>
            /// Member JSON deserialization
            /// 成员 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__value__"></param>
            /// <param name="__memberIndex__"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty __value__, int __memberIndex__)
            {
                switch (__memberIndex__)
                {
                    case 0:
                        var Value = __value__.Value;
                        __deserializer__.JsonDeserialize(ref Value);
                        __value__.Value = Value;
                        return;
                }
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> JsonDeserializeMemberNames()
            {
                return jsonDeserializeMemberName();
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            private static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> jsonDeserializeMemberName()
            {
                AutoCSer.LeftArray<string> names = new AutoCSer.LeftArray<string>(1);
                AutoCSer.LeftArray<int> indexs = new AutoCSer.LeftArray<int>(1);
                names.Add(nameof(Value));
                indexs.Add(0);
                return new AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>>(names, indexs);
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void JsonSerialize()
            {
                AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty value = default(AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty);
                JsonSerialize(null, value);
                JsonSerializeMemberMap(null, null, value, null);
                JsonSerializeMemberTypes();
                AutoCSer.Memory.Pointer names = default(AutoCSer.Memory.Pointer);
                JsonDeserialize(null, ref value, ref names);
                JsonDeserializeMemberMap(null, ref value, ref names, null);
                JsonDeserialize(null, ref value, 0);
                JsonDeserializeMemberNames();
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty));
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty));
            }
    }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// Example of JSON serialization 
///            JSON 序列化 示例
        /// </summary>
    internal partial class JsonProperty
    {
            /// <summary>
            /// Call the default constructor
            /// 调用默认构造函数
            /// </summary>
            internal static AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty DefaultConstructor()
            {
                return new AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty();
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void DefaultConstructorReflection()
            {
                DefaultConstructor();
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty>();
            }
    }
}namespace AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService
{
        /// <summary>
        /// Customize the basic service node interface 
///            自定义基础服务节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.ICustomServiceNode), typeof(CustomServiceNodeLocalClient))]
        public partial interface ICustomServiceNodeLocalClientNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode
        {
            /// <summary>
            /// Create dictionary generics to expand custom node IStringDictionaryNode 
///            创建字典泛型展开自定义节点 IStringDictionaryNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="capacity">Container initialization size 
///            容器初始化大小</param>
            /// <param name="groupType">Reusable dictionary recombination operation type 
///            可重用字典重组操作类型</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> CreateStringDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int capacity, AutoCSer.ReusableDictionaryGroupTypeEnum groupType);
        }
        /// <summary>
        /// Customize the basic service node interface 
///            自定义基础服务节点接口 local client node
        /// </summary>
        internal unsafe partial class CustomServiceNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<ICustomServiceNodeLocalClientNode>, ICustomServiceNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private CustomServiceNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static ICustomServiceNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new CustomServiceNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip0__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                internal uint capacity;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__ value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(capacity);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.capacity);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 4, 1073741828);
                typeInfo.Add(typeof(uint));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip1__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                internal long identity;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__ value)
            {
                if (serializer.WriteMemberCountVerify(12, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(identity);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.identity);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 4, 1073741828);
                typeInfo.Add(typeof(long));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip2__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__ value)
            {
                if (serializer.WriteMemberCountVerify(4, 1073741825)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.Simple(index);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 1, 1073741825);
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip3__
            {
                internal string key;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.key);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.key, __end__);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip4__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                internal int size;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__ value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(size);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.size);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 4, 1073741828);
                typeInfo.Add(typeof(int));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip6__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                internal byte indexBits;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__ value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(indexBits);
                __serializer__.FixedFillSize(3);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.indexBits);
                __deserializer__.FixedFillSize(3);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 4, 1073741828);
                typeInfo.Add(typeof(byte));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip256__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                internal int capacity;
                internal AutoCSer.ReusableDictionaryGroupTypeEnum groupType;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__ value)
            {
                if (serializer.WriteMemberCountVerify(12, 1073741829)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(capacity);
                __serializer__.Stream.Write((byte)this.groupType);
                __serializer__.FixedFillSize(3);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.capacity);
                this.groupType = (AutoCSer.ReusableDictionaryGroupTypeEnum)__deserializer__.FixedEnumByte();
                __deserializer__.FixedFillSize(3);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 5, 1073741829);
                typeInfo.Add(typeof(int));
                typeInfo.Add(typeof(AutoCSer.ReusableDictionaryGroupTypeEnum));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__>();
            }
            }
            /// <summary>
            /// Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="capacity">The number of binary bits 
///            二进制位数量</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode/**/.CreateBitmapNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, uint capacity)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip0__>(this, 0
                    , new __ip0__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        capacity = capacity,
                    }
                    );
            }

            /// <summary>
            /// Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="identity">Initial Allocation identity 
///            起始分配 ID</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode/**/.CreateIdentityGeneratorNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, long identity)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip1__>(this, 1
                    , new __ip1__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        identity = identity,
                    }
                    );
            }

            /// <summary>
            /// Delete the node 
///            删除节点
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <returns>Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode/**/.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip2__>(this, 2
                    , new __ip2__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// Delete the node 
///            删除节点
            /// </summary>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <returns>Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode/**/.RemoveNodeByKey(string key)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip3__>(this, 3
                    , new __ip3__
                    {
                        key = key,
                    }
                    );
            }

            /// <summary>
            /// Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode/**/.CreateManyHashBitMapClientFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int size)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip4__>(this, 4
                    , new __ip4__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        size = size,
                    }
                    );
            }

            /// <summary>
            /// Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode/**/.CreateManyHashBitMapFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int size)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip4__>(this, 5
                    , new __ip4__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        size = size,
                    }
                    );
            }

            /// <summary>
            /// Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="indexBits">The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode/**/.CreateUniformProbabilityClientStatisticsNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, byte indexBits)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip6__>(this, 6
                    , new __ip6__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        indexBits = indexBits,
                    }
                    );
            }

            /// <summary>
            /// Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="indexBits">The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode/**/.CreateUniformProbabilityTotalStatisticsNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, byte indexBits)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip6__>(this, 7
                    , new __ip6__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        indexBits = indexBits,
                    }
                    );
            }

            /// <summary>
            /// Create dictionary generics to expand custom node IStringDictionaryNode 
///            创建字典泛型展开自定义节点 IStringDictionaryNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="capacity">Container initialization size 
///            容器初始化大小</param>
            /// <param name="groupType">Reusable dictionary recombination operation type 
///            可重用字典重组操作类型</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> ICustomServiceNodeLocalClientNode/**/.CreateStringDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int capacity, AutoCSer.ReusableDictionaryGroupTypeEnum groupType)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip256__>(this, 256
                    , new __ip256__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        capacity = capacity,
                        groupType = groupType,
                    }
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(ICustomServiceNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(CustomServiceNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(CustomServiceNodeLocalClient));
            }
        }
}namespace AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService
{
        /// <summary>
        /// Dictionary generic expansion custom node interface example 
///            字典泛型展开自定义节点接口示例 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.IStringDictionaryNode), typeof(StringDictionaryNodeLocalClient))]
        public partial interface IStringDictionaryNodeLocalClientNode
        {
            /// <summary>
            /// 
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> Clear();
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> ContainsKey(string key);
            /// <summary>
            /// 
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> Count();
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<string>>> GetRemove(string key);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="keys"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<string[]>> GetValueArray(string[] keys);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Remove(string key);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="keys"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> RemoveKeys(string[] keys);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="capacity"></param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> Renew(int capacity);
            /// <summary>
            /// 
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> ReusableClear();
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <param name="value"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Set(string key, string value);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <param name="value"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> TryAdd(string key, string value);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<string>>> TryGetValue(string key);
        }
        /// <summary>
        /// Dictionary generic expansion custom node interface example 
///            字典泛型展开自定义节点接口示例 local client node
        /// </summary>
        internal unsafe partial class StringDictionaryNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<IStringDictionaryNodeLocalClientNode>, IStringDictionaryNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private StringDictionaryNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static IStringDictionaryNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new StringDictionaryNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip1__
            {
                internal string key;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.key);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.key, __end__);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip4__
            {
                internal string[] keys;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__ value)
            {
                if (serializer.WriteMemberCountVerify(4, 1073741825)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(keys);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.keys);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 1, 1073741825);
                typeInfo.Add(typeof(string[]));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip7__
            {
                internal int capacity;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.capacity);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.capacity);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip9__
            {
                internal string key;
                internal string value;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(8))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.key);
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.value);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.key, __end__);
                if (__start__ == null || __start__ > __end__) return null;
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.value, __end__);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip10__
            {
                internal AutoCSer.KeyValue<string,string> value;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__ value)
            {
                if (serializer.WriteMemberCountVerify(4, 1073741825)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(value);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.value);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 1, 1073741825);
                typeInfo.Add(typeof(AutoCSer.KeyValue<string,string>));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__ value = default(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__>();
            }
            }
            /// <summary>
            /// 
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> IStringDictionaryNodeLocalClientNode/**/.Clear()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode/**/.Create(this, 0
                    , true
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IStringDictionaryNodeLocalClientNode/**/.ContainsKey(string key)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip1__>(this, 1
                    , new __ip1__
                    {
                        key = key,
                    }
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> IStringDictionaryNodeLocalClientNode/**/.Count()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode<int>/**/.Create(this, 2
                    , true
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<string>>> IStringDictionaryNodeLocalClientNode/**/.GetRemove(string key)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<string>, __ip1__>(this, 3
                    , new __ip1__
                    {
                        key = key,
                    }
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="keys"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<string[]>> IStringDictionaryNodeLocalClientNode/**/.GetValueArray(string[] keys)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<string[], __ip4__>(this, 4
                    , new __ip4__
                    {
                        keys = keys,
                    }
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IStringDictionaryNodeLocalClientNode/**/.Remove(string key)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip1__>(this, 5
                    , new __ip1__
                    {
                        key = key,
                    }
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="keys"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> IStringDictionaryNodeLocalClientNode/**/.RemoveKeys(string[] keys)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<int, __ip4__>(this, 6
                    , new __ip4__
                    {
                        keys = keys,
                    }
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="capacity"></param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> IStringDictionaryNodeLocalClientNode/**/.Renew(int capacity)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode/**/.Create(this, 7
                    , new __ip7__
                    {
                        capacity = capacity,
                    }
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> IStringDictionaryNodeLocalClientNode/**/.ReusableClear()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode/**/.Create(this, 8
                    , true
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <param name="value"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IStringDictionaryNodeLocalClientNode/**/.Set(string key, string value)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip9__>(this, 9
                    , new __ip9__
                    {
                        key = key,
                        value = value,
                    }
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <param name="value"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IStringDictionaryNodeLocalClientNode/**/.TryAdd(string key, string value)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip9__>(this, 11
                    , new __ip9__
                    {
                        key = key,
                        value = value,
                    }
                    );
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<string>>> IStringDictionaryNodeLocalClientNode/**/.TryGetValue(string key)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<string>, __ip1__>(this, 12
                    , new __ip1__
                    {
                        key = key,
                    }
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(IStringDictionaryNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(StringDictionaryNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(StringDictionaryNodeLocalClient));
            }
        }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// Example of XML serialization 
///            XML 序列化 示例
        /// </summary>
    internal partial class XmlProperty
    {
            /// <summary>
            /// XML serialization
            /// XML 序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void XmlSerialize(AutoCSer.XmlSerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty value)
            {
                value.xmlSerialize(serializer);
            }
            /// <summary>
            /// XML serialization of member bitmap is supported
            /// 支持成员位图的 XML 序列化
            /// </summary>
            /// <param name="memberMap"></param>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            /// <param name="stream"></param>
            internal static void XmlSerializeMemberMap(AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty> memberMap, XmlSerializer serializer, AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty value, AutoCSer.Memory.CharStream stream)
            {
                value.xmlSerialize(memberMap, serializer, stream);
            }
            /// <summary>
            /// XML serialization
            /// XML 序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void xmlSerialize(AutoCSer.XmlSerializer __serializer__)
            {
                AutoCSer.Memory.CharStream __stream__ = __serializer__.CharStream;
                {
                    __stream__.SimpleWrite(@"<Value>");
                    __serializer__.XmlSerialize(Value);
                    __stream__.SimpleWrite(@"</Value>");
                }
            }
            /// <summary>
            /// XML serialization of member bitmap is supported
            /// 支持成员位图的 XML 序列化
            /// </summary>
            /// <param name="__memberMap__"></param>
            /// <param name="__serializer__"></param>
            /// <param name="__stream__"></param>
            private void xmlSerialize(AutoCSer.Metadata.MemberMap<AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty> __memberMap__, XmlSerializer __serializer__, AutoCSer.Memory.CharStream __stream__)
            {
                if (__memberMap__.IsMember(0))
                {
                    __stream__.SimpleWrite(@"<Value>");
                    __serializer__.XmlSerialize(Value);
                    __stream__.SimpleWrite(@"</Value>");
                }
            }
            /// <summary>
            /// Member XML deserialization
            /// 成员 XML 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__value__"></param>
            /// <param name="__memberIndex__"></param>
            internal static void XmlDeserialize(AutoCSer.XmlDeserializer __deserializer__, ref AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty __value__, int __memberIndex__)
            {
                switch (__memberIndex__)
                {
                    case 0:
                        var Value = __value__.Value;
                        __deserializer__.XmlDeserialize(ref Value);
                        __value__.Value = Value;
                        return;
                }
            }
            /// <summary>
            /// Gets an XML deserialized collection of member names and a collection of member indexes
            /// 获取 XML 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<KeyValue<int, string>>> XmlDeserializeMemberNames()
            {
                return xmlDeserializeMemberName();
            }
            /// <summary>
            /// Gets an XML deserialized collection of member names and a collection of member indexes
            /// 获取 XML 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            private static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<KeyValue<int, string>>> xmlDeserializeMemberName()
            {
                AutoCSer.LeftArray<string> names = new AutoCSer.LeftArray<string>(1);
                AutoCSer.LeftArray<KeyValue<int, string>> indexs = new AutoCSer.LeftArray<KeyValue<int, string>>(1);
                names.Add(nameof(Value));
                indexs.Add(new KeyValue<int, string>(0, null));
                return new AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<KeyValue<int, string>>>(names, indexs);
            }
            /// <summary>
            /// Get the collection of XML serialized member types
            /// 获取 XML 序列化成员类型集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.LeftArray<Type> XmlSerializeMemberTypes()
            {
                AutoCSer.LeftArray<Type> types = new LeftArray<Type>(1);
                types.Add(typeof(int));
                return types;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void XmlSerialize()
            {
                AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty value = default(AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty);
                XmlSerialize(null, value);
                XmlSerializeMemberMap(null, null, value, null);
                XmlDeserialize(null, ref value, 0);
                XmlDeserializeMemberNames();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty));
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty));
                XmlSerializeMemberTypes();
            }
    }
}namespace AutoCSer.Document.NativeAOT.DataSerialize
{
        /// <summary>
        /// Example of XML serialization 
///            XML 序列化 示例
        /// </summary>
    internal partial class XmlProperty
    {
            /// <summary>
            /// Call the default constructor
            /// 调用默认构造函数
            /// </summary>
            internal static AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty DefaultConstructor()
            {
                return new AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty();
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void DefaultConstructorReflection()
            {
                DefaultConstructor();
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty>();
            }
    }
}namespace AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService
{
        /// <summary>
        /// Customize the basic service node interface 
///            自定义基础服务节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(ICustomServiceNodeMethodEnum), typeof(CustomServiceNodeMethodParameterCreator))]
        public partial interface ICustomServiceNode { }
        /// <summary>
        /// Customize the basic service node interface 
///            自定义基础服务节点接口 (node method sequence number mapping enumeration type)
        /// </summary>
        public enum ICustomServiceNodeMethodEnum
        {
            /// <summary>
            /// [0] Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// uint capacity The number of binary bits 
///            二进制位数量
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateBitmapNode = 0,
            /// <summary>
            /// [1] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// long identity Initial Allocation identity 
///            起始分配 ID
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateIdentityGeneratorNode = 1,
            /// <summary>
            /// [2] Delete the node 
///            删除节点
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// Return value : bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNode = 2,
            /// <summary>
            /// [3] Delete the node 
///            删除节点
            /// string key Node global keyword 
///            节点全局关键字
            /// Return value : bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNodeByKey = 3,
            /// <summary>
            /// [4] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapClientFilterNode = 4,
            /// <summary>
            /// [5] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapFilterNode = 5,
            /// <summary>
            /// [6] Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateUniformProbabilityClientStatisticsNode = 6,
            /// <summary>
            /// [7] Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateUniformProbabilityTotalStatisticsNode = 7,
            /// <summary>
            /// [256] Create dictionary generics to expand custom node IStringDictionaryNode 
///            创建字典泛型展开自定义节点 IStringDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateStringDictionaryNode = 256,
        }
        /// <summary>
        /// Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode server node method
        /// </summary>
        internal sealed class ICustomServiceNode_CreateBitmapNode_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__>
        {
            internal ICustomServiceNode_CreateBitmapNode_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).CreateBitmapNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.capacity));
            }
        }
        /// <summary>
        /// Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode server node method
        /// </summary>
        internal sealed class ICustomServiceNode_CreateIdentityGeneratorNode_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__>
        {
            internal ICustomServiceNode_CreateIdentityGeneratorNode_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).CreateIdentityGeneratorNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.identity));
            }
        }
        /// <summary>
        /// Delete the node 
///            删除节点 server node method
        /// </summary>
        internal sealed class ICustomServiceNode_RemoveNode_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__>
        {
            internal ICustomServiceNode_RemoveNode_2() : base(2, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)7) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).RemoveNode(parameter.index));
            }
        }
        /// <summary>
        /// Delete the node 
///            删除节点 server node method
        /// </summary>
        internal sealed class ICustomServiceNode_RemoveNodeByKey_3 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__>
        {
            internal ICustomServiceNode_RemoveNodeByKey_3() : base(3, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)15) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).RemoveNodeByKey(parameter.key));
            }
        }
        /// <summary>
        /// Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode server node method
        /// </summary>
        internal sealed class ICustomServiceNode_CreateManyHashBitMapClientFilterNode_4 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__>
        {
            internal ICustomServiceNode_CreateManyHashBitMapClientFilterNode_4() : base(4, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).CreateManyHashBitMapClientFilterNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.size));
            }
        }
        /// <summary>
        /// Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode server node method
        /// </summary>
        internal sealed class ICustomServiceNode_CreateManyHashBitMapFilterNode_5 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__>
        {
            internal ICustomServiceNode_CreateManyHashBitMapFilterNode_5() : base(5, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).CreateManyHashBitMapFilterNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.size));
            }
        }
        /// <summary>
        /// Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode server node method
        /// </summary>
        internal sealed class ICustomServiceNode_CreateUniformProbabilityClientStatisticsNode_6 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__>
        {
            internal ICustomServiceNode_CreateUniformProbabilityClientStatisticsNode_6() : base(6, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).CreateUniformProbabilityClientStatisticsNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.indexBits));
            }
        }
        /// <summary>
        /// Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode server node method
        /// </summary>
        internal sealed class ICustomServiceNode_CreateUniformProbabilityTotalStatisticsNode_7 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__>
        {
            internal ICustomServiceNode_CreateUniformProbabilityTotalStatisticsNode_7() : base(7, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).CreateUniformProbabilityTotalStatisticsNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.indexBits));
            }
        }
        /// <summary>
        /// Create dictionary generics to expand custom node IStringDictionaryNode 
///            创建字典泛型展开自定义节点 IStringDictionaryNode server node method
        /// </summary>
        internal sealed class ICustomServiceNode_CreateStringDictionaryNode_256 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__>
        {
            internal ICustomServiceNode_CreateStringDictionaryNode_256() : base(256, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<ICustomServiceNode>(methodParameter).CreateStringDictionaryNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.capacity, parameter.groupType));
            }
        }
        /// <summary>
        /// Customize the basic service node interface 
///            自定义基础服务节点接口 (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class CustomServiceNodeMethodParameterCreator
        {
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new ICustomServiceNode_CreateBitmapNode_0(),
                        new ICustomServiceNode_CreateIdentityGeneratorNode_1(),
                        new ICustomServiceNode_RemoveNode_2(),
                        new ICustomServiceNode_RemoveNodeByKey_3(),
                        new ICustomServiceNode_CreateManyHashBitMapClientFilterNode_4(),
                        new ICustomServiceNode_CreateManyHashBitMapFilterNode_5(),
                        new ICustomServiceNode_CreateUniformProbabilityClientStatisticsNode_6(),
                        new ICustomServiceNode_CreateUniformProbabilityTotalStatisticsNode_7(),
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new ICustomServiceNode_CreateStringDictionaryNode_256(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(CustomServiceNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService
{
        /// <summary>
        /// Dictionary generic expansion custom node interface example 
///            字典泛型展开自定义节点接口示例
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IStringDictionaryNodeMethodEnum), typeof(StringDictionaryNodeMethodParameterCreator))]
        public partial interface IStringDictionaryNode { }
        /// <summary>
        /// Dictionary generic expansion custom node interface example 
///            字典泛型展开自定义节点接口示例 (node method sequence number mapping enumeration type)
        /// </summary>
        public enum IStringDictionaryNodeMethodEnum
        {
            /// <summary>
            /// [0] 
            /// </summary>
            Clear = 0,
            /// <summary>
            /// [1] 
            /// string key 
            /// Return value : bool 
            /// </summary>
            ContainsKey = 1,
            /// <summary>
            /// [2] 
            /// Return value : int 
            /// </summary>
            Count = 2,
            /// <summary>
            /// [3] 
            /// string key 
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{string} 
            /// </summary>
            GetRemove = 3,
            /// <summary>
            /// [4] 
            /// string[] keys 
            /// Return value : string[] 
            /// </summary>
            GetValueArray = 4,
            /// <summary>
            /// [5] 
            /// string key 
            /// Return value : bool 
            /// </summary>
            Remove = 5,
            /// <summary>
            /// [6] 
            /// string[] keys 
            /// Return value : int 
            /// </summary>
            RemoveKeys = 6,
            /// <summary>
            /// [7] 
            /// int capacity 
            /// </summary>
            Renew = 7,
            /// <summary>
            /// [8] 
            /// </summary>
            ReusableClear = 8,
            /// <summary>
            /// [9] 
            /// string key 
            /// string value 
            /// Return value : bool 
            /// </summary>
            Set = 9,
            /// <summary>
            /// [10] 
            /// AutoCSer.KeyValue{string,string} value 
            /// </summary>
            SnapshotAdd = 10,
            /// <summary>
            /// [11] 
            /// string key 
            /// string value 
            /// Return value : bool 
            /// </summary>
            TryAdd = 11,
            /// <summary>
            /// [12] 
            /// string key 
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{string} 
            /// </summary>
            TryGetValue = 12,
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_Clear_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod
        {
            internal IStringDictionaryNode_Clear_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void Call(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IStringDictionaryNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IStringDictionaryNode>)node).Clear();
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod.Callback(ref callback);
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_ContainsKey_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>
        {
            internal IStringDictionaryNode_ContainsKey_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)14) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).ContainsKey(parameter.key));
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_Count_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod
        {
            internal IStringDictionaryNode_Count_2() : base(2, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6) { }
            public override void CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IStringDictionaryNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IStringDictionaryNode>)node).Count(), ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6);
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_GetRemove_3 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>
        {
            internal IStringDictionaryNode_GetRemove_3() : base(3, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)27) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).GetRemove(parameter.key));
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_GetValueArray_4 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__>
        {
            internal IStringDictionaryNode_GetValueArray_4() : base(4, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)2) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).GetValueArray(parameter.keys));
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_Remove_5 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>
        {
            internal IStringDictionaryNode_Remove_5() : base(5, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)31) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).Remove(parameter.key));
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_RemoveKeys_6 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__>
        {
            internal IStringDictionaryNode_RemoveKeys_6() : base(6, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)7) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).RemoveKeys(parameter.keys));
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_Renew_7 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__>
        {
            internal IStringDictionaryNode_Renew_7() : base(7, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)27) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).Renew(parameter.capacity);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_ReusableClear_8 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod
        {
            internal IStringDictionaryNode_ReusableClear_8() : base(8, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void Call(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IStringDictionaryNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IStringDictionaryNode>)node).ReusableClear();
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod.Callback(ref callback);
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_Set_9 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__>
        {
            internal IStringDictionaryNode_Set_9() : base(9, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)31) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).Set(parameter.key, parameter.value));
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_SnapshotAdd_10 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__>
        {
            internal IStringDictionaryNode_SnapshotAdd_10() : base(10, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)1) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).SnapshotAdd(parameter.value);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_TryAdd_11 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__>
        {
            internal IStringDictionaryNode_TryAdd_11() : base(11, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)31) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).TryAdd(parameter.key, parameter.value));
            }
        }
        /// <summary>
        ///  server node method
        /// </summary>
        internal sealed class IStringDictionaryNode_TryGetValue_12 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>
        {
            internal IStringDictionaryNode_TryGetValue_12() : base(12, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)10) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IStringDictionaryNode>(methodParameter).TryGetValue(parameter.key));
            }
        }
        /// <summary>
        /// Dictionary generic expansion custom node interface example 
///            字典泛型展开自定义节点接口示例 (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class StringDictionaryNodeMethodParameterCreator
        {
            private static void SnapshotAdd_SnapshotSerialize(AutoCSer.BinarySerializer serializer, AutoCSer.KeyValue<string,string> value)
            {
                AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__ snapshotMethodParameter = new AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__ { value = value };
                serializer.InternalIndependentSerializeNotNull(ref snapshotMethodParameter);
            }
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new IStringDictionaryNode_Clear_0(),
                        new IStringDictionaryNode_ContainsKey_1(),
                        new IStringDictionaryNode_Count_2(),
                        new IStringDictionaryNode_GetRemove_3(),
                        new IStringDictionaryNode_GetValueArray_4(),
                        new IStringDictionaryNode_Remove_5(),
                        new IStringDictionaryNode_RemoveKeys_6(),
                        new IStringDictionaryNode_Renew_7(),
                        new IStringDictionaryNode_ReusableClear_8(),
                        new IStringDictionaryNode_Set_9(),
                        new IStringDictionaryNode_SnapshotAdd_10(),
                        new IStringDictionaryNode_TryAdd_11(),
                        new IStringDictionaryNode_TryGetValue_12(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo(10, typeof(AutoCSer.KeyValue<string,string>), SnapshotAdd_SnapshotSerialize),
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(StringDictionaryNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.Document.NativeAOT
{
    /// <summary>
    /// 触发 AOT 编译
    /// </summary>
    public static class AotMethod
    {
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            /// <returns></returns>
            public static bool Call()
            {
                if (AutoCSer.Date.StartTimestamp == long.MinValue)
                {
                    AutoCSer.AotMethod.Call();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.AotMethod.Call();
                    AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix/**/.JsonSerialize();
                    AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix/**/.DefaultConstructorReflection();
                    AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize/**/.JsonSerialize();
                    AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize/**/.DefaultConstructorReflection();
                    AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty/**/.BinarySerialize();
                    AutoCSer.Document.NativeAOT.DataSerialize.BinaryProperty/**/.DefaultConstructorReflection();
                    AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__ip0__.SimpleSerialize();
                    AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__op0__.SimpleSerialize();
                    AutoCSer.Document.NativeAOT.Service.ServiceControllerClientController.__CommandClientControllerConstructor__();
                    AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty/**/.JsonSerialize();
                    AutoCSer.Document.NativeAOT.DataSerialize.JsonProperty/**/.DefaultConstructorReflection();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip0__.BinarySerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip1__.BinarySerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip2__.BinarySerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip3__.SimpleSerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip4__.BinarySerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip6__.BinarySerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.__ip256__.BinarySerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeLocalClient.LocalClientNode();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip1__.SimpleSerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip4__.BinarySerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip7__.SimpleSerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip9__.SimpleSerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.__ip10__.BinarySerialize();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeLocalClient.LocalClientNode();
                    AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty/**/.XmlSerialize();
                    AutoCSer.Document.NativeAOT.DataSerialize.XmlProperty/**/.DefaultConstructorReflection();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.CustomServiceNodeMethodParameterCreator.MethodParameterCreator();
                    AutoCSer.Document.NativeAOT.MemoryDatabaseLocalService.StringDictionaryNodeMethodParameterCreator.MethodParameterCreator();

                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix>));
                    AutoCSer.BinarySerializer.Json<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix>(null, default(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize>));
                    AutoCSer.BinarySerializer.Json<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize>(null, default(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<int>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<uint>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>));
                    AutoCSer.BinarySerializer.Simple<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>(null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<string>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo>));
                    AutoCSer.BinarySerializer.Json<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo>(null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<long>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<byte>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.ReusableDictionaryGroupTypeEnum>));
                    AutoCSer.BinarySerializer.EnumByte<AutoCSer.ReusableDictionaryGroupTypeEnum>(null, default(AutoCSer.ReusableDictionaryGroupTypeEnum));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<string[]>));
                    AutoCSer.BinarySerializer.Array<string>(null, default(string[]));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.KeyValue<string,string>>));
                    binaryDeserializeMemberTypes();
                    AutoCSer.AotReflection.FieldsAndProperties(typeof(AutoCSer.KeyValue<string,string>));

                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.Json.TypeSerializer<string>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.Json.TypeSerializer<int>));

                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.Xml.TypeSerializer<int>));

                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.Create<AutoCSer.KeyValue<string,string>>(null);
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode.Create<AutoCSer.KeyValue<string,string>>(null);
                    return true;
                }
                return false;
            }
            /// <summary>
            /// Binary deserialization member type activation reflection
            /// 二进制反序列化成员类型激活反射
            /// </summary>
            private static void binaryDeserializeMemberTypes()
            {
                AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix t1 = default(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix);
                AutoCSer.BinaryDeserializer.Json<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMix>(null, ref t1);
                AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize t2 = default(AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize);
                AutoCSer.BinaryDeserializer.Json<AutoCSer.Document.NativeAOT.DataSerialize.BinaryJsonMixDeserialize>(null, ref t2);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex t3 = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex);
                AutoCSer.BinaryDeserializer.Simple<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>(null, ref t3);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo t4 = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo);
                AutoCSer.BinaryDeserializer.Json<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo>(null, ref t4);
                AutoCSer.ReusableDictionaryGroupTypeEnum t5 = default(AutoCSer.ReusableDictionaryGroupTypeEnum);
                AutoCSer.BinaryDeserializer.EnumByte<AutoCSer.ReusableDictionaryGroupTypeEnum>(null, ref t5);
                string[] t6 = default(string[]);
                AutoCSer.BinaryDeserializer.Array<string>(null, ref t6);
            }
    }
}
#endif