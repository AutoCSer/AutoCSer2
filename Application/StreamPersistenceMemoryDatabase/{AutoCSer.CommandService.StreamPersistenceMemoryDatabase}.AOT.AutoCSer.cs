//This file is automatically generated by a program. Please do not modify it by yourself.
//本文件由程序自动生成，请不要自行修改
using System;
using System.Numerics;
using AutoCSer;

#if NoAutoCSer
#else
#pragma warning disable
namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Create node index information 
///            创建节点索引信息
        /// </summary>
    public partial class CreateNodeIndex
    {
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex value)
            {
                if (serializer.WriteMemberCountVerify(4, 1073741825)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.Simple(Index);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.Index);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 1, 1073741825);
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex>();
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Create node index information 
///            创建节点索引信息
        /// </summary>
    public partial class CreateNodeIndex
    {
            /// <summary>
            /// Call the default constructor
            /// 调用默认构造函数
            /// </summary>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex DefaultConstructor()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex();
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void DefaultConstructorReflection()
            {
                DefaultConstructor();
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex>();
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Auto-increment identity segments 
///            自增 ID 分段
        /// </summary>
    public partial struct IdentityFragment
    {
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment value)
            {
                serializer.Simple(value);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment value)
            {
                deserializer.Simple(ref value);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                return new AutoCSer.BinarySerialize.TypeInfo(true, 0, 1073741826);
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment>();
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Multi-hash bitmap data 
///            多哈希位图数据
        /// </summary>
    public partial struct ManyHashBitMap
    {
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap value)
            {
                if (serializer.WriteMemberCountVerify(4, 1073741826)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(Map);
                __serializer__.Simple(SizeDivision);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.Map);
                __deserializer__.Simple(ref this.SizeDivision);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 2, 1073741826);
                typeInfo.Add(typeof(ulong[]));
                typeInfo.Add(typeof(AutoCSer.Algorithm.IntegerDivision));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap>();
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// The identifier of the message being processed 
///            正在处理的消息标识
        /// </summary>
    public partial struct MessageIdeneity
    {
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value)
            {
                serializer.Simple(value);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value)
            {
                deserializer.Simple(ref value);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                return new AutoCSer.BinarySerialize.TypeInfo(true, 0, 1073741827);
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity>();
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Node index information 
///            节点索引信息
        /// </summary>
    public partial struct NodeIndex
    {
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex value)
            {
                serializer.Simple(value);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex value)
            {
                deserializer.Simple(ref value);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                return new AutoCSer.BinarySerialize.TypeInfo(true, 0, 1073741826);
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>();
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Server-side node information 
///            服务端节点信息
        /// </summary>
    public partial class NodeInfo
    {
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void JsonSerialize(AutoCSer.JsonSerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo value)
            {
                value.jsonSerialize(serializer);
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="memberMap"></param>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            /// <param name="stream"></param>
            internal static void JsonSerializeMemberMap(AutoCSer.Metadata.MemberMap<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo> memberMap, JsonSerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo value, AutoCSer.Memory.CharStream stream)
            {
                value.jsonSerialize(memberMap, serializer, stream);
            }
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void jsonSerialize(AutoCSer.JsonSerializer __serializer__)
            {
                AutoCSer.Memory.CharStream __stream__ = __serializer__.CharStream;
                __stream__.SimpleWrite(@"""RemoteType"":");
                __serializer__.JsonSerializeType(RemoteType);
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="__memberMap__"></param>
            /// <param name="__serializer__"></param>
            /// <param name="__stream__"></param>
            private void jsonSerialize(AutoCSer.Metadata.MemberMap<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo> __memberMap__, JsonSerializer __serializer__, AutoCSer.Memory.CharStream __stream__)
            {
                bool isNext = false;
                if (__memberMap__.IsMember(0))
                {
                    if (isNext) __stream__.Write(',');
                    else isNext = true;
                    __stream__.SimpleWrite(@"""RemoteType"":");
                    __serializer__.JsonSerializeType(RemoteType);
                }
            }
            /// <summary>
            /// Get the collection of JSON serialized member types
            /// 获取 JSON 序列化成员类型集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.LeftArray<Type> JsonSerializeMemberTypes()
            {
                AutoCSer.LeftArray<Type> types = new LeftArray<Type>(1);
                types.Add(typeof(AutoCSer.Reflection.RemoteType));
                return types;
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo value, ref AutoCSer.Memory.Pointer names)
            {
                value.jsonDeserialize(deserializer, ref names);
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            /// <param name="memberMap"></param>
            internal static void JsonDeserializeMemberMap(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo value, ref AutoCSer.Memory.Pointer names, AutoCSer.Metadata.MemberMap<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo> memberMap)
            {
                value.jsonDeserialize(deserializer, ref names, memberMap);
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__names__"></param>
            private void jsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Memory.Pointer __names__)
            {
                if (__deserializer__.IsName(ref __names__))
                {
                    __deserializer__.JsonDeserialize(ref this.RemoteType);
                    if (!AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) return;
                }
                else return;
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__names__"></param>
            /// <param name="__memberMap__"></param>
            private void jsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.Memory.Pointer __names__, AutoCSer.Metadata.MemberMap<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo> __memberMap__)
            {
                if (__deserializer__.IsName(ref __names__))
                {
                    __deserializer__.JsonDeserialize(ref this.RemoteType);
                    if (AutoCSer.JsonDeserializer.NextNameIndex(__deserializer__, ref __names__)) __memberMap__.SetMember(0);
                    else return;
                }
                else return;
            }
            /// <summary>
            /// Member JSON deserialization
            /// 成员 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__value__"></param>
            /// <param name="__memberIndex__"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo __value__, int __memberIndex__)
            {
                switch (__memberIndex__)
                {
                    case 0:
                        __deserializer__.JsonDeserialize(ref __value__.RemoteType);
                        return;
                }
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> JsonDeserializeMemberNames()
            {
                return jsonDeserializeMemberName();
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            private static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> jsonDeserializeMemberName()
            {
                AutoCSer.LeftArray<string> names = new AutoCSer.LeftArray<string>(1);
                AutoCSer.LeftArray<int> indexs = new AutoCSer.LeftArray<int>(1);
                names.Add(nameof(RemoteType));
                indexs.Add(0);
                return new AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>>(names, indexs);
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void JsonSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo);
                JsonSerialize(null, value);
                JsonSerializeMemberMap(null, null, value, null);
                JsonSerializeMemberTypes();
                AutoCSer.Memory.Pointer names = default(AutoCSer.Memory.Pointer);
                JsonDeserialize(null, ref value, ref names);
                JsonDeserializeMemberMap(null, ref value, ref names, null);
                JsonDeserialize(null, ref value, 0);
                JsonDeserializeMemberNames();
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// 重建持久化文件调用结果
        /// </summary>
    public partial struct RebuildResult
    {
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.Stream.Write((byte)this.CallState);
                __serializer__.Stream.Write((byte)this.LoadExceptionNodeState);
                __serializer__.FixedFillSize(2);
                __serializer__.BinarySerialize(LoadExceptionNodeKey);
                __serializer__.Simple(LoadExceptionNodeType);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                this.CallState = (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)__deserializer__.FixedEnumByte();
                this.LoadExceptionNodeState = (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)__deserializer__.FixedEnumByte();
                __deserializer__.FixedFillSize(2);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.LoadExceptionNodeKey);
                __deserializer__.Simple(ref this.LoadExceptionNodeType);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 3, 1073741828);
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.Reflection.RemoteType));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult>();
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// The identifier of the message being processed 
///            正在处理的消息标识
        /// </summary>
    public partial struct MessageIdeneity
    {
            /// <summary>
            /// JSON serialization
            /// JSON 序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void JsonSerialize(AutoCSer.JsonSerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value)
            {
            }
            /// <summary>
            /// JSON serialization of member bitmaps is supported
            /// 支持成员位图的 JSON 序列化
            /// </summary>
            /// <param name="memberMap"></param>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            /// <param name="stream"></param>
            internal static void JsonSerializeMemberMap(AutoCSer.Metadata.MemberMap<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity> memberMap, JsonSerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value, AutoCSer.Memory.CharStream stream)
            {
            }
            /// <summary>
            /// JSON deserialization
            /// JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value, ref AutoCSer.Memory.Pointer names)
            {
            }
            /// <summary>
            /// JSON deserialization of member bitmaps is supported
            /// 支持成员位图的 JSON 反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            /// <param name="names"></param>
            /// <param name="memberMap"></param>
            internal static void JsonDeserializeMemberMap(AutoCSer.JsonDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value, ref AutoCSer.Memory.Pointer names, AutoCSer.Metadata.MemberMap<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity> memberMap)
            {
            }
            /// <summary>
            /// Member JSON deserialization
            /// 成员 JSON 反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            /// <param name="__value__"></param>
            /// <param name="__memberIndex__"></param>
            internal static void JsonDeserialize(AutoCSer.JsonDeserializer __deserializer__, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity __value__, int __memberIndex__)
            {
            }
            /// <summary>
            /// Gets the JSON deserialization member name collection and member index collection
            /// 获取 JSON 反序列化成员名称集合与成员索引集合
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>> JsonDeserializeMemberNames()
            {
                return default(AutoCSer.KeyValue<AutoCSer.LeftArray<string>, AutoCSer.LeftArray<int>>);
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void JsonSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity);
                JsonSerialize(null, value);
                JsonSerializeMemberMap(null, null, value, null);
                AutoCSer.Memory.Pointer names = default(AutoCSer.Memory.Pointer);
                JsonDeserialize(null, ref value, ref names);
                JsonDeserializeMemberMap(null, ref value, ref names, null);
                JsonDeserialize(null, ref value, 0);
                JsonDeserializeMemberNames();
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity));
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity));
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Bitmap node interface 
///            位图节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode), typeof(BitmapNodeLocalClient))]
        public partial interface IBitmapNodeLocalClientNode
        {
            /// <summary>
            /// Clear bit status 
///            清除位状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> ClearBit(uint index);
            /// <summary>
            /// Clear all data 
///            清除所有数据
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> ClearMap();
            /// <summary>
            /// Read bit status 
///            读取位状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>A non-0 indicates that the binary bit is in the set state. If the index exceeds, there will be no return value 
///            非 0 表示二进制位为已设置状态，索引超出则无返回值</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>>> GetBit(uint index);
            /// <summary>
            /// Clear the bit state and return to the state before setting 
///            清除位状态并返回设置之前的状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Clear the state before the operation. A non-0 state indicates that the binary bit was in the set state before. If the index exceeds, there will be no return value 
///            清除操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>>> GetBitClearBit(uint index);
            /// <summary>
            /// Reverse the bit state and return the state before the operation 
///            位状态取反并返回操作之前的状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Take the state before the reverse operation. If it is not 0, it indicates that the binary bit is in the set state before. If the index exceeds, there will be no return value 
///            取反操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>>> GetBitInvertBit(uint index);
            /// <summary>
            /// Set the bit state and return the state before setting 
///            设置位状态并返回设置之前的状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>The state before setting: A non-0 indicates that the binary bit was in the set state before, and there is no return value if the index exceeds 
///            设置之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>>> GetBitSetBit(uint index);
            /// <summary>
            /// Get the number of bitmap binary bits 
///            获取位图二进制位数量
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<uint>> GetCapacity();
            /// <summary>
            /// Reverse the bit state 
///            位状态取反
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> InvertBit(uint index);
            /// <summary>
            /// Set bit status 
///            设置位状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> SetBit(uint index);
        }
        /// <summary>
        /// Bitmap node interface 
///            位图节点接口 local client node
        /// </summary>
        internal unsafe partial class BitmapNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<IBitmapNodeLocalClientNode>, IBitmapNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private BitmapNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static IBitmapNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new BitmapNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip0__
            {
                internal uint index;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.index);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.index);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip9__
            {
                internal byte[] map;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.map);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.map, __end__);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__));
            }
            }
            /// <summary>
            /// Clear bit status 
///            清除位状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IBitmapNodeLocalClientNode/**/.ClearBit(uint index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip0__>(this, 0
                    , new __ip0__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// Clear all data 
///            清除所有数据
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> IBitmapNodeLocalClientNode/**/.ClearMap()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode/**/.Create(this, 1
                    , true
                    );
            }

            /// <summary>
            /// Read bit status 
///            读取位状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>A non-0 indicates that the binary bit is in the set state. If the index exceeds, there will be no return value 
///            非 0 表示二进制位为已设置状态，索引超出则无返回值</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>>> IBitmapNodeLocalClientNode/**/.GetBit(uint index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>, __ip0__>(this, 2
                    , new __ip0__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// Clear the bit state and return to the state before setting 
///            清除位状态并返回设置之前的状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Clear the state before the operation. A non-0 state indicates that the binary bit was in the set state before. If the index exceeds, there will be no return value 
///            清除操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>>> IBitmapNodeLocalClientNode/**/.GetBitClearBit(uint index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>, __ip0__>(this, 3
                    , new __ip0__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// Reverse the bit state and return the state before the operation 
///            位状态取反并返回操作之前的状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Take the state before the reverse operation. If it is not 0, it indicates that the binary bit is in the set state before. If the index exceeds, there will be no return value 
///            取反操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>>> IBitmapNodeLocalClientNode/**/.GetBitInvertBit(uint index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>, __ip0__>(this, 4
                    , new __ip0__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// Set the bit state and return the state before setting 
///            设置位状态并返回设置之前的状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>The state before setting: A non-0 indicates that the binary bit was in the set state before, and there is no return value if the index exceeds 
///            设置之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>>> IBitmapNodeLocalClientNode/**/.GetBitSetBit(uint index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<int>, __ip0__>(this, 5
                    , new __ip0__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// Get the number of bitmap binary bits 
///            获取位图二进制位数量
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<uint>> IBitmapNodeLocalClientNode/**/.GetCapacity()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode<uint>/**/.Create(this, 6
                    , true
                    );
            }

            /// <summary>
            /// Reverse the bit state 
///            位状态取反
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IBitmapNodeLocalClientNode/**/.InvertBit(uint index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip0__>(this, 7
                    , new __ip0__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// Set bit status 
///            设置位状态
            /// </summary>
            /// <param name="index">Bit index position 
///            位索引位置</param>
            /// <returns>Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IBitmapNodeLocalClientNode/**/.SetBit(uint index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip0__>(this, 8
                    , new __ip0__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(IBitmapNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(BitmapNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(BitmapNodeLocalClient));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// 64-bit auto-increment identity node interface 
///            64 位自增ID 节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNode), typeof(IdentityGeneratorNodeLocalClient))]
        public partial interface IIdentityGeneratorNodeLocalClientNode
        {
            /// <summary>
            /// Get the next increment identity 
///            获取下一个自增ID
            /// </summary>
            /// <returns>The next increment identity returns a negative number on failure 
///            下一个自增ID，失败返回负数</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<long>> Next();
            /// <summary>
            /// Gets the auto-increment identity segment 
///            获取自增 ID 分段
            /// </summary>
            /// <param name="count">Get the quantity of data 
///            获取数据数量</param>
            /// <returns>Auto-increment identity segment 
///            自增 ID 分段</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment>> NextFragment(int count);
        }
        /// <summary>
        /// 64-bit auto-increment identity node interface 
///            64 位自增ID 节点接口 local client node
        /// </summary>
        internal unsafe partial class IdentityGeneratorNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<IIdentityGeneratorNodeLocalClientNode>, IIdentityGeneratorNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private IdentityGeneratorNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static IIdentityGeneratorNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new IdentityGeneratorNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip1__
            {
                internal int count;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.count);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.count);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip2__
            {
                internal long identity;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(8))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.identity);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.identity);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__));
            }
            }
            /// <summary>
            /// Get the next increment identity 
///            获取下一个自增ID
            /// </summary>
            /// <returns>The next increment identity returns a negative number on failure 
///            下一个自增ID，失败返回负数</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<long>> IIdentityGeneratorNodeLocalClientNode/**/.Next()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode<long>/**/.Create(this, 0
                    , true
                    );
            }

            /// <summary>
            /// Gets the auto-increment identity segment 
///            获取自增 ID 分段
            /// </summary>
            /// <param name="count">Get the quantity of data 
///            获取数据数量</param>
            /// <returns>Auto-increment identity segment 
///            自增 ID 分段</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment>> IIdentityGeneratorNodeLocalClientNode/**/.NextFragment(int count)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment, __ip1__>(this, 1
                    , new __ip1__
                    {
                        count = count,
                    }
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(IIdentityGeneratorNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(IdentityGeneratorNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(IdentityGeneratorNodeLocalClient));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
///            多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器） local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNode), typeof(ManyHashBitMapClientFilterNodeLocalClient))]
        public partial interface IManyHashBitMapClientFilterNodeLocalClientNode
        {
            /// <summary>
            /// Get data 
///            获取数据
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<System.IDisposable> GetData(System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap>> __callback__, System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> __keepCallback__);
            /// <summary>
            /// Get the bitmap size (number of bits) 
///            获取位图大小（位数量）
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> GetSize();
            /// <summary>
            /// Set bit 
///            设置位
            /// </summary>
            /// <param name="bit">The set binary bit 
///            设置的二进制位</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> SetBit(int bit);
        }
        /// <summary>
        /// Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
///            多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器） local client node
        /// </summary>
        internal unsafe partial class ManyHashBitMapClientFilterNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<IManyHashBitMapClientFilterNodeLocalClientNode>, IManyHashBitMapClientFilterNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private ManyHashBitMapClientFilterNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static IManyHashBitMapClientFilterNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new ManyHashBitMapClientFilterNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip2__
            {
                internal int bit;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.bit);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.bit);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip4__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap map;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__ value)
            {
                if (serializer.WriteMemberCountVerify(4, 1073741825)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(map);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.map);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 1, 1073741825);
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__>();
            }
            }
            /// <summary>
            /// Get data 
///            获取数据
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<System.IDisposable> IManyHashBitMapClientFilterNodeLocalClientNode/**/.GetData(System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap>> __callback__, System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> __keepCallback__)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceTwoStageCallbackNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap, int>(this, 0
                    , __callback__
                    , __keepCallback__
                    , false
                    );
            }

            /// <summary>
            /// Get the bitmap size (number of bits) 
///            获取位图大小（位数量）
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> IManyHashBitMapClientFilterNodeLocalClientNode/**/.GetSize()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode<int>/**/.Create(this, 1
                    , true
                    );
            }

            /// <summary>
            /// Set bit 
///            设置位
            /// </summary>
            /// <param name="bit">The set binary bit 
///            设置的二进制位</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> IManyHashBitMapClientFilterNodeLocalClientNode/**/.SetBit(int bit)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode/**/.Create(this, 2
                    , new __ip2__
                    {
                        bit = bit,
                    }
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(IManyHashBitMapClientFilterNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(ManyHashBitMapClientFilterNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(ManyHashBitMapClientFilterNodeLocalClient));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Multi-hash bitmap filter node interface (similar to Bloom Filter) 
///            多哈希位图过滤节点接口（类似布隆过滤器） local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNode), typeof(ManyHashBitMapFilterNodeLocalClient))]
        public partial interface IManyHashBitMapFilterNodeLocalClientNode
        {
            /// <summary>
            /// Binary bit set matching 
///            位置集合匹配
            /// </summary>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <param name="bits">Binary bit set 
///            位置集合</param>
            /// <returns>Returning Null indicates that the bitmap does not match 
///            返回 Null 表示位图不匹配</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.NullableBoolEnum>> CheckBits(int size, uint[] bits);
            /// <summary>
            /// Get the bitmap size (number of bits) 
///            获取位图大小（位数量）
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> GetSize();
            /// <summary>
            /// Set bit 
///            设置位
            /// </summary>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <param name="bits">Binary bit set 
///            位置集合</param>
            /// <returns>Returning false indicates that the bitmap size does not match 
///            返回 false 表示位图大小不匹配</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> SetBits(int size, uint[] bits);
        }
        /// <summary>
        /// Multi-hash bitmap filter node interface (similar to Bloom Filter) 
///            多哈希位图过滤节点接口（类似布隆过滤器） local client node
        /// </summary>
        internal unsafe partial class ManyHashBitMapFilterNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<IManyHashBitMapFilterNodeLocalClientNode>, IManyHashBitMapFilterNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private ManyHashBitMapFilterNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static IManyHashBitMapFilterNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new ManyHashBitMapFilterNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip0__
            {
                internal uint[] bits;
                internal int size;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__ value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741826)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(size);
                __serializer__.BinarySerialize(bits);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.size);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.bits);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 2, 1073741826);
                typeInfo.Add(typeof(int));
                typeInfo.Add(typeof(uint[]));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip4__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap map;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__ value)
            {
                if (serializer.WriteMemberCountVerify(4, 1073741825)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(map);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.map);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 1, 1073741825);
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__>();
            }
            }
            /// <summary>
            /// Binary bit set matching 
///            位置集合匹配
            /// </summary>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <param name="bits">Binary bit set 
///            位置集合</param>
            /// <returns>Returning Null indicates that the bitmap does not match 
///            返回 Null 表示位图不匹配</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.NullableBoolEnum>> IManyHashBitMapFilterNodeLocalClientNode/**/.CheckBits(int size, uint[] bits)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.NullableBoolEnum, __ip0__>(this, 0
                    , new __ip0__
                    {
                        bits = bits,
                        size = size,
                    }
                    );
            }

            /// <summary>
            /// Get the bitmap size (number of bits) 
///            获取位图大小（位数量）
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> IManyHashBitMapFilterNodeLocalClientNode/**/.GetSize()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode<int>/**/.Create(this, 1
                    , true
                    );
            }

            /// <summary>
            /// Set bit 
///            设置位
            /// </summary>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <param name="bits">Binary bit set 
///            位置集合</param>
            /// <returns>Returning false indicates that the bitmap size does not match 
///            返回 false 表示位图大小不匹配</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IManyHashBitMapFilterNodeLocalClientNode/**/.SetBits(int size, uint[] bits)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip0__>(this, 2
                    , new __ip0__
                    {
                        bits = bits,
                        size = size,
                    }
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(IManyHashBitMapFilterNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(ManyHashBitMapFilterNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(ManyHashBitMapFilterNodeLocalClient));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Service basic operation interface 
///            服务基础操作接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode), typeof(ServiceNodeLocalClient))]
        public partial interface IServiceNodeLocalClientNode
        {
            /// <summary>
            /// Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="capacity">The number of binary bits 
///            二进制位数量</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> CreateBitmapNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, uint capacity);
            /// <summary>
            /// Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="identity">Initial Allocation identity 
///            起始分配 ID</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> CreateIdentityGeneratorNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, long identity);
            /// <summary>
            /// Delete the node 
///            删除节点
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <returns>Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index);
            /// <summary>
            /// Delete the node 
///            删除节点
            /// </summary>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <returns>Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> RemoveNodeByKey(string key);
            /// <summary>
            /// Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> CreateManyHashBitMapClientFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int size);
            /// <summary>
            /// Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> CreateManyHashBitMapFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int size);
            /// <summary>
            /// Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="indexBits">The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> CreateUniformProbabilityClientStatisticsNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, byte indexBits);
            /// <summary>
            /// Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="indexBits">The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> CreateUniformProbabilityTotalStatisticsNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, byte indexBits);
        }
        /// <summary>
        /// Service basic operation interface 
///            服务基础操作接口 local client node
        /// </summary>
        internal unsafe partial class ServiceNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<IServiceNodeLocalClientNode>, IServiceNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private ServiceNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static IServiceNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new ServiceNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip0__
            {
                internal uint capacity;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__ value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(capacity);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.capacity);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 4, 1073741828);
                typeInfo.Add(typeof(uint));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip1__
            {
                internal long identity;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__ value)
            {
                if (serializer.WriteMemberCountVerify(12, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(identity);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.identity);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 4, 1073741828);
                typeInfo.Add(typeof(long));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip2__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__ value)
            {
                if (serializer.WriteMemberCountVerify(4, 1073741825)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.Simple(index);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 1, 1073741825);
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip3__
            {
                internal string key;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.key);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.key, __end__);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip4__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                internal int size;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__ value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(size);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.size);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 4, 1073741828);
                typeInfo.Add(typeof(int));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__>();
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip6__
            {
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index;
                internal byte indexBits;
                internal string key;
                internal AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo;
                
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="serializer"></param>
            /// <param name="value"></param>
            internal static void BinarySerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__ value)
            {
                if (serializer.WriteMemberCountVerify(8, 1073741828)) value.binarySerialize(serializer);
            }
            /// <summary>
            /// Binary serialization
            /// 二进制序列化
            /// </summary>
            /// <param name="__serializer__"></param>
            private void binarySerialize(AutoCSer.BinarySerializer __serializer__)
            {
                __serializer__.BinarySerialize(indexBits);
                __serializer__.FixedFillSize(3);
                __serializer__.Simple(index);
                __serializer__.BinarySerialize(key);
                __serializer__.Json(nodeInfo);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="deserializer"></param>
            /// <param name="value"></param>
            internal static void BinaryDeserialize(AutoCSer.BinaryDeserializer deserializer, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__ value)
            {
                value.binaryDeserialize(deserializer);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.BinaryDeserialize(ref this.indexBits);
                __deserializer__.FixedFillSize(3);
                binaryFieldDeserialize(__deserializer__);
            }
            /// <summary>
            /// Binary deserialization
            /// 二进制反序列化
            /// </summary>
            /// <param name="__deserializer__"></param>
            private void binaryFieldDeserialize(AutoCSer.BinaryDeserializer __deserializer__)
            {
                __deserializer__.Simple(ref this.index);
                __deserializer__.BinaryDeserialize(ref this.key);
                __deserializer__.Json(ref this.nodeInfo);
            }
            /// <summary>
            /// Get the binary serialization type information
            /// 获取二进制序列化类型信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.BinarySerialize.TypeInfo BinarySerializeMemberTypes()
            {
                AutoCSer.BinarySerialize.TypeInfo typeInfo = new AutoCSer.BinarySerialize.TypeInfo(false, 4, 1073741828);
                typeInfo.Add(typeof(byte));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                typeInfo.Add(typeof(string));
                typeInfo.Add(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                return typeInfo;
            }
            /// <summary>
            /// 二进制序列化代码生成调用激活 AOT 反射
            /// </summary>
            internal static void BinarySerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__);
                BinarySerialize(null, value);
                BinaryDeserialize(null, ref value);
                AutoCSer.AotReflection.ConstructorNonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__));
                BinarySerializeMemberTypes();
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__));
                AutoCSer.Metadata.DefaultConstructor.GetIsSerializeConstructor<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__>();
            }
            }
            /// <summary>
            /// Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="capacity">The number of binary bits 
///            二进制位数量</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> IServiceNodeLocalClientNode/**/.CreateBitmapNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, uint capacity)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip0__>(this, 0
                    , new __ip0__
                    {
                        capacity = capacity,
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                    }
                    );
            }

            /// <summary>
            /// Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="identity">Initial Allocation identity 
///            起始分配 ID</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> IServiceNodeLocalClientNode/**/.CreateIdentityGeneratorNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, long identity)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip1__>(this, 1
                    , new __ip1__
                    {
                        identity = identity,
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                    }
                    );
            }

            /// <summary>
            /// Delete the node 
///            删除节点
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <returns>Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IServiceNodeLocalClientNode/**/.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip2__>(this, 2
                    , new __ip2__
                    {
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// Delete the node 
///            删除节点
            /// </summary>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <returns>Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IServiceNodeLocalClientNode/**/.RemoveNodeByKey(string key)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<bool, __ip3__>(this, 3
                    , new __ip3__
                    {
                        key = key,
                    }
                    );
            }

            /// <summary>
            /// Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> IServiceNodeLocalClientNode/**/.CreateManyHashBitMapClientFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int size)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip4__>(this, 4
                    , new __ip4__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        size = size,
                    }
                    );
            }

            /// <summary>
            /// Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="size">Bitmap size (number of bits) 
///            位图大小（位数量）</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> IServiceNodeLocalClientNode/**/.CreateManyHashBitMapFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, int size)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip4__>(this, 5
                    , new __ip4__
                    {
                        index = index,
                        key = key,
                        nodeInfo = nodeInfo,
                        size = size,
                    }
                    );
            }

            /// <summary>
            /// Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="indexBits">The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> IServiceNodeLocalClientNode/**/.CreateUniformProbabilityClientStatisticsNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, byte indexBits)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip6__>(this, 6
                    , new __ip6__
                    {
                        index = index,
                        indexBits = indexBits,
                        key = key,
                        nodeInfo = nodeInfo,
                    }
                    );
            }

            /// <summary>
            /// Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="indexBits">The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>> IServiceNodeLocalClientNode/**/.CreateUniformProbabilityTotalStatisticsNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, byte indexBits)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode/**/.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, __ip6__>(this, 7
                    , new __ip6__
                    {
                        index = index,
                        indexBits = indexBits,
                        key = key,
                        nodeInfo = nodeInfo,
                    }
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(IServiceNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(ServiceNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(ServiceNodeLocalClient));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Client statistics node interface based on uniform probability (similar to HyperLogLog, suitable for small containers) 
///            基于均匀概率的客户端同步总量统计节点接口（类似 HyperLogLog，适合小容器） local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IUniformProbabilityClientStatisticsNode), typeof(UniformProbabilityClientStatisticsNodeLocalClient))]
        public partial interface IUniformProbabilityClientStatisticsNodeLocalClientNode
        {
            /// <summary>
            /// Get data 
///            获取数据
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<System.IDisposable> GetData(System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<byte[]>> __callback__, System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> __keepCallback__);
            /// <summary>
            /// Try to modify the number of binary bits at the specified index position 
///            尝试修改指定索引位置的二进制位数量
            /// </summary>
            /// <param name="index">Index position 
///            索引位置</param>
            /// <param name="bits">The number of the last consecutive binary bits 1 
///            最后连续的二进制位 1 的数量</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> SetIndexBit(int index, byte bits);
        }
        /// <summary>
        /// Client statistics node interface based on uniform probability (similar to HyperLogLog, suitable for small containers) 
///            基于均匀概率的客户端同步总量统计节点接口（类似 HyperLogLog，适合小容器） local client node
        /// </summary>
        internal unsafe partial class UniformProbabilityClientStatisticsNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<IUniformProbabilityClientStatisticsNodeLocalClientNode>, IUniformProbabilityClientStatisticsNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private UniformProbabilityClientStatisticsNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static IUniformProbabilityClientStatisticsNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new UniformProbabilityClientStatisticsNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip1__
            {
                internal byte[] bitCountArray;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.bitCountArray);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.bitCountArray, __end__);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip2__
            {
                internal byte bits;
                internal int index;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(8))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.index);
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.bits);
                    __stream__.TryMoveSize(3);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.index);
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.bits);
                __start__ += 3;
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__));
            }
            }
            /// <summary>
            /// Get data 
///            获取数据
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<System.IDisposable> IUniformProbabilityClientStatisticsNodeLocalClientNode/**/.GetData(System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<byte[]>> __callback__, System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> __keepCallback__)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceTwoStageCallbackNode/**/.Create<byte[], int>(this, 0
                    , __callback__
                    , __keepCallback__
                    , false
                    );
            }

            /// <summary>
            /// Try to modify the number of binary bits at the specified index position 
///            尝试修改指定索引位置的二进制位数量
            /// </summary>
            /// <param name="index">Index position 
///            索引位置</param>
            /// <param name="bits">The number of the last consecutive binary bits 1 
///            最后连续的二进制位 1 的数量</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> IUniformProbabilityClientStatisticsNodeLocalClientNode/**/.SetIndexBit(int index, byte bits)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode/**/.Create(this, 2
                    , new __ip2__
                    {
                        bits = bits,
                        index = index,
                    }
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(IUniformProbabilityClientStatisticsNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(UniformProbabilityClientStatisticsNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(UniformProbabilityClientStatisticsNodeLocalClient));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Total statistics node interface based on uniform probability (similar to HyperLogLog) 
///            基于均匀概率的总量统计节点接口（类似 HyperLogLog） local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IUniformProbabilityTotalStatisticsNode), typeof(UniformProbabilityTotalStatisticsNodeLocalClient))]
        public partial interface IUniformProbabilityTotalStatisticsNodeLocalClientNode
        {
            /// <summary>
            /// Add statistical data 
///            添加统计数据
            /// </summary>
            /// <param name="value"></param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> Append(ulong value);
            /// <summary>
            /// Get the statistical quantity 
///            获取统计数量
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<double>> Count();
            /// <summary>
            /// Get the number of index binary bits 
///            获取索引二进制位数量
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<byte>> GetIndexBits();
        }
        /// <summary>
        /// Total statistics node interface based on uniform probability (similar to HyperLogLog) 
///            基于均匀概率的总量统计节点接口（类似 HyperLogLog） local client node
        /// </summary>
        internal unsafe partial class UniformProbabilityTotalStatisticsNodeLocalClient : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode<IUniformProbabilityTotalStatisticsNodeLocalClientNode>, IUniformProbabilityTotalStatisticsNodeLocalClientNode
        {
            /// <summary>
            /// Local client node
            /// 本地客户端节点
            /// </summary>
            /// <param name="key">Node global keyword
            /// 节点全局关键字</param>
            /// <param name="creator">A delegate to create a node operation object
            /// 创建节点操作对象委托</param>
            /// <param name="client">Log stream persistence in-memory database local client
            /// 日志流持久化内存数据库本地客户端</param>
            /// <param name="index">Node index information
            /// 节点索引信息</param>
            /// <param name="isPersistenceCallbackExceptionRenewNode">Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            /// 服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            private UniformProbabilityTotalStatisticsNodeLocalClient(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
                : base(key, creator, client, index, isPersistenceCallbackExceptionRenewNode) { }
            internal static IUniformProbabilityTotalStatisticsNodeLocalClientNode LocalClientNodeConstructor(string key, Func<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex, string, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>>> creator, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient client, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, bool isPersistenceCallbackExceptionRenewNode)
            {
                return new UniformProbabilityTotalStatisticsNodeLocalClient(key, creator, client, index, isPersistenceCallbackExceptionRenewNode);
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip0__
            {
                internal ulong value;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(8))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.value);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.value);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__));
            }
            }
            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            internal struct __ip3__
            {
                internal byte[] bitCountArray;
                
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__ value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(4))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.bitCountArray);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__ value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.bitCountArray, __end__);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__ value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__));
            }
            }
            /// <summary>
            /// Add statistical data 
///            添加统计数据
            /// </summary>
            /// <param name="value"></param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> IUniformProbabilityTotalStatisticsNodeLocalClientNode/**/.Append(ulong value)
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode/**/.Create(this, 0
                    , new __ip0__
                    {
                        value = value,
                    }
                    );
            }

            /// <summary>
            /// Get the statistical quantity 
///            获取统计数量
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<double>> IUniformProbabilityTotalStatisticsNodeLocalClientNode/**/.Count()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode<double>/**/.Create(this, 1
                    , true
                    );
            }

            /// <summary>
            /// Get the number of index binary bits 
///            获取索引二进制位数量
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<byte>> IUniformProbabilityTotalStatisticsNodeLocalClientNode/**/.GetIndexBits()
            {
                
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode<byte>/**/.Create(this, 2
                    , true
                    );
            }

            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal static void LocalClientNode()
            {
                LocalClientNodeConstructor(null, null, null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex), false);
                AutoCSer.AotReflection.NonPublicFields(typeof(IUniformProbabilityTotalStatisticsNodeMethodEnum));
                AutoCSer.AotReflection.NonPublicMethods(typeof(UniformProbabilityTotalStatisticsNodeLocalClient));
                AutoCSer.AotReflection.Interfaces(typeof(UniformProbabilityTotalStatisticsNodeLocalClient));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Bitmap node interface 
///            位图节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IBitmapNodeMethodEnum), typeof(BitmapNodeMethodParameterCreator))]
        public partial interface IBitmapNode { }
        /// <summary>
        /// Bitmap node interface 
///            位图节点接口 (node method sequence number mapping enumeration type)
        /// </summary>
        public enum IBitmapNodeMethodEnum
        {
            /// <summary>
            /// [0] Clear bit status 
///            清除位状态
            /// uint index Bit index position 
///            位索引位置
            /// Return value : bool Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围
            /// </summary>
            ClearBit = 0,
            /// <summary>
            /// [1] Clear all data 
///            清除所有数据
            /// </summary>
            ClearMap = 1,
            /// <summary>
            /// [2] Read bit status 
///            读取位状态
            /// uint index Bit index position 
///            位索引位置
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int} A non-0 indicates that the binary bit is in the set state. If the index exceeds, there will be no return value 
///            非 0 表示二进制位为已设置状态，索引超出则无返回值
            /// </summary>
            GetBit = 2,
            /// <summary>
            /// [3] Clear the bit state and return to the state before setting 
///            清除位状态并返回设置之前的状态
            /// uint index Bit index position 
///            位索引位置
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int} Clear the state before the operation. A non-0 state indicates that the binary bit was in the set state before. If the index exceeds, there will be no return value 
///            清除操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值
            /// </summary>
            GetBitClearBit = 3,
            /// <summary>
            /// [4] Reverse the bit state and return the state before the operation 
///            位状态取反并返回操作之前的状态
            /// uint index Bit index position 
///            位索引位置
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int} Take the state before the reverse operation. If it is not 0, it indicates that the binary bit is in the set state before. If the index exceeds, there will be no return value 
///            取反操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值
            /// </summary>
            GetBitInvertBit = 4,
            /// <summary>
            /// [5] Set the bit state and return the state before setting 
///            设置位状态并返回设置之前的状态
            /// uint index Bit index position 
///            位索引位置
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int} The state before setting: A non-0 indicates that the binary bit was in the set state before, and there is no return value if the index exceeds 
///            设置之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值
            /// </summary>
            GetBitSetBit = 5,
            /// <summary>
            /// [6] Get the number of bitmap binary bits 
///            获取位图二进制位数量
            /// Return value : uint 
            /// </summary>
            GetCapacity = 6,
            /// <summary>
            /// [7] Reverse the bit state 
///            位状态取反
            /// uint index Bit index position 
///            位索引位置
            /// Return value : bool Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围
            /// </summary>
            InvertBit = 7,
            /// <summary>
            /// [8] Set bit status 
///            设置位状态
            /// uint index Bit index position 
///            位索引位置
            /// Return value : bool Returning false indicates that the index is out of range 
///            返回 false 表示索引超出范围
            /// </summary>
            SetBit = 8,
            /// <summary>
            /// [9] Add snapshot data 
///            添加快照数据
            /// byte[] map 
            /// </summary>
            SnapshotSet = 9,
        }
        /// <summary>
        /// Clear bit status 
///            清除位状态 server node method
        /// </summary>
        internal sealed class IBitmapNode_ClearBit_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>
        {
            internal IBitmapNode_ClearBit_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)47) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IBitmapNode>(methodParameter).ClearBit(parameter.index));
            }
        }
        /// <summary>
        /// Clear all data 
///            清除所有数据 server node method
        /// </summary>
        internal sealed class IBitmapNode_ClearMap_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod
        {
            internal IBitmapNode_ClearMap_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void Call(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IBitmapNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IBitmapNode>)node).ClearMap();
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod.Callback(ref callback);
            }
        }
        /// <summary>
        /// Read bit status 
///            读取位状态 server node method
        /// </summary>
        internal sealed class IBitmapNode_GetBit_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>
        {
            internal IBitmapNode_GetBit_2() : base(2, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)10) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IBitmapNode>(methodParameter).GetBit(parameter.index));
            }
        }
        /// <summary>
        /// Clear the bit state and return to the state before setting 
///            清除位状态并返回设置之前的状态 server node method
        /// </summary>
        internal sealed class IBitmapNode_GetBitClearBit_3 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>
        {
            internal IBitmapNode_GetBitClearBit_3() : base(3, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)43) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IBitmapNode>(methodParameter).GetBitClearBit(parameter.index));
            }
        }
        /// <summary>
        /// Reverse the bit state and return the state before the operation 
///            位状态取反并返回操作之前的状态 server node method
        /// </summary>
        internal sealed class IBitmapNode_GetBitInvertBit_4 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>
        {
            internal IBitmapNode_GetBitInvertBit_4() : base(4, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)43) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IBitmapNode>(methodParameter).GetBitInvertBit(parameter.index));
            }
        }
        /// <summary>
        /// Set the bit state and return the state before setting 
///            设置位状态并返回设置之前的状态 server node method
        /// </summary>
        internal sealed class IBitmapNode_GetBitSetBit_5 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>
        {
            internal IBitmapNode_GetBitSetBit_5() : base(5, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)43) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IBitmapNode>(methodParameter).GetBitSetBit(parameter.index));
            }
        }
        /// <summary>
        /// Get the number of bitmap binary bits 
///            获取位图二进制位数量 server node method
        /// </summary>
        internal sealed class IBitmapNode_GetCapacity_6 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod
        {
            internal IBitmapNode_GetCapacity_6() : base(6, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)7) { }
            public override void CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IBitmapNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IBitmapNode>)node).GetCapacity(), ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)7);
            }
        }
        /// <summary>
        /// Reverse the bit state 
///            位状态取反 server node method
        /// </summary>
        internal sealed class IBitmapNode_InvertBit_7 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>
        {
            internal IBitmapNode_InvertBit_7() : base(7, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)47) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IBitmapNode>(methodParameter).InvertBit(parameter.index));
            }
        }
        /// <summary>
        /// Set bit status 
///            设置位状态 server node method
        /// </summary>
        internal sealed class IBitmapNode_SetBit_8 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>
        {
            internal IBitmapNode_SetBit_8() : base(8, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)47) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IBitmapNode>(methodParameter).SetBit(parameter.index));
            }
        }
        /// <summary>
        /// Add snapshot data 
///            添加快照数据 server node method
        /// </summary>
        internal sealed class IBitmapNode_SnapshotSet_9 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__>
        {
            internal IBitmapNode_SnapshotSet_9() : base(9, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)9) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IBitmapNode>(methodParameter).SnapshotSet(parameter.map);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Bitmap node interface 
///            位图节点接口 (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class BitmapNodeMethodParameterCreator
        {
            private static void SnapshotSet_SnapshotSerialize(AutoCSer.BinarySerializer serializer, byte[] value)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__ snapshotMethodParameter = new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__ { map = value };
                serializer.SimpleSerialize(ref snapshotMethodParameter);
            }
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new IBitmapNode_ClearBit_0(),
                        new IBitmapNode_ClearMap_1(),
                        new IBitmapNode_GetBit_2(),
                        new IBitmapNode_GetBitClearBit_3(),
                        new IBitmapNode_GetBitInvertBit_4(),
                        new IBitmapNode_GetBitSetBit_5(),
                        new IBitmapNode_GetCapacity_6(),
                        new IBitmapNode_InvertBit_7(),
                        new IBitmapNode_SetBit_8(),
                        new IBitmapNode_SnapshotSet_9(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo(9, typeof(byte[]), SnapshotSet_SnapshotSerialize),
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(BitmapNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// 64-bit auto-increment identity node interface 
///            64 位自增ID 节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IIdentityGeneratorNodeMethodEnum), typeof(IdentityGeneratorNodeMethodParameterCreator))]
        public partial interface IIdentityGeneratorNode { }
        /// <summary>
        /// 64-bit auto-increment identity node interface 
///            64 位自增ID 节点接口 (node method sequence number mapping enumeration type)
        /// </summary>
        public enum IIdentityGeneratorNodeMethodEnum
        {
            /// <summary>
            /// [0] Get the next increment identity 
///            获取下一个自增ID
            /// Return value : long The next increment identity returns a negative number on failure 
///            下一个自增ID，失败返回负数
            /// </summary>
            Next = 0,
            /// <summary>
            /// [1] Gets the auto-increment identity segment 
///            获取自增 ID 分段
            /// int count Get the quantity of data 
///            获取数据数量
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment Auto-increment identity segment 
///            自增 ID 分段
            /// </summary>
            NextFragment = 1,
            /// <summary>
            /// [2] Add snapshot data 
///            添加快照数据
            /// long identity 
            /// </summary>
            SnapshotSet = 2,
        }
        /// <summary>
        /// Get the next increment identity 
///            获取下一个自增ID server node method
        /// </summary>
        internal sealed class IIdentityGeneratorNode_Next_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod
        {
            internal IIdentityGeneratorNode_Next_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)7) { }
            public override void CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IIdentityGeneratorNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IIdentityGeneratorNode>)node).Next(), ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)7);
            }
        }
        /// <summary>
        /// Gets the auto-increment identity segment 
///            获取自增 ID 分段 server node method
        /// </summary>
        internal sealed class IIdentityGeneratorNode_NextFragment_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__>
        {
            internal IIdentityGeneratorNode_NextFragment_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)11) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IIdentityGeneratorNode>(methodParameter).NextFragment(parameter.count));
            }
        }
        /// <summary>
        /// Add snapshot data 
///            添加快照数据 server node method
        /// </summary>
        internal sealed class IIdentityGeneratorNode_SnapshotSet_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__>
        {
            internal IIdentityGeneratorNode_SnapshotSet_2() : base(2, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)9) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IIdentityGeneratorNode>(methodParameter).SnapshotSet(parameter.identity);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// 64-bit auto-increment identity node interface 
///            64 位自增ID 节点接口 (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class IdentityGeneratorNodeMethodParameterCreator
        {
            private static void SnapshotSet_SnapshotSerialize(AutoCSer.BinarySerializer serializer, long value)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__ snapshotMethodParameter = new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__ { identity = value };
                serializer.SimpleSerialize(ref snapshotMethodParameter);
            }
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new IIdentityGeneratorNode_Next_0(),
                        new IIdentityGeneratorNode_NextFragment_1(),
                        new IIdentityGeneratorNode_SnapshotSet_2(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo(2, typeof(long), SnapshotSet_SnapshotSerialize),
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(IdentityGeneratorNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
///            多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器）
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IManyHashBitMapClientFilterNodeMethodEnum), typeof(ManyHashBitMapClientFilterNodeMethodParameterCreator))]
        public partial interface IManyHashBitMapClientFilterNode { }
        /// <summary>
        /// Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
///            多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器） (node method sequence number mapping enumeration type)
        /// </summary>
        public enum IManyHashBitMapClientFilterNodeMethodEnum
        {
            /// <summary>
            /// [0] Get data 
///            获取数据
            /// </summary>
            GetData = 0,
            /// <summary>
            /// [1] Get the bitmap size (number of bits) 
///            获取位图大小（位数量）
            /// Return value : int 
            /// </summary>
            GetSize = 1,
            /// <summary>
            /// [2] Set bit 
///            设置位
            /// int bit The set binary bit 
///            设置的二进制位
            /// </summary>
            SetBit = 2,
            /// <summary>
            /// [3] Set bit (Check the input parameters before the persistence operation) 
///            设置位（持久化操作之前检查输入参数）
            /// int bit The set binary bit 
///            设置的二进制位
            /// Return value : bool Returning true indicates that a persistence operation is required 
///            返回 true 表示需要持久化操作
            /// </summary>
            SetBitBeforePersistence = 3,
            /// <summary>
            /// [4] Add snapshot data 
///            添加快照数据
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap map Multi-hash bitmap data 
///            多哈希位图数据
            /// </summary>
            SnapshotSet = 4,
        }
        /// <summary>
        /// Get data 
///            获取数据 server node method
        /// </summary>
        internal sealed class IManyHashBitMapClientFilterNode_GetData_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.TwoStageCallbackMethod
        {
            internal IManyHashBitMapClientFilterNode_GetData_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)134) { }
            public override void TwoStageCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback, ref AutoCSer.Net.CommandServerKeepCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter> keepCallback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IManyHashBitMapClientFilterNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IManyHashBitMapClientFilterNode>)node).GetData(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap>.Create(ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)130), AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback<int>.Create(ref keepCallback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)134));
            }
        }
        /// <summary>
        /// Get the bitmap size (number of bits) 
///            获取位图大小（位数量） server node method
        /// </summary>
        internal sealed class IManyHashBitMapClientFilterNode_GetSize_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod
        {
            internal IManyHashBitMapClientFilterNode_GetSize_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6) { }
            public override void CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IManyHashBitMapClientFilterNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IManyHashBitMapClientFilterNode>)node).GetSize(), ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6);
            }
        }
        /// <summary>
        /// Set bit 
///            设置位 server node method
        /// </summary>
        internal sealed class IManyHashBitMapClientFilterNode_SetBit_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__>
        {
            internal IManyHashBitMapClientFilterNode_SetBit_2() : base(2, 3, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)43) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IManyHashBitMapClientFilterNode>(methodParameter).SetBit(parameter.bit);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Set bit (Check the input parameters before the persistence operation) 
///            设置位（持久化操作之前检查输入参数） server node method
        /// </summary>
        internal sealed class IManyHashBitMapClientFilterNode_SetBitBeforePersistence_3 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__>
        {
            internal IManyHashBitMapClientFilterNode_SetBitBeforePersistence_3() : base(3, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)40) { }
            public override bool CallBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__>)methodParameter);
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IManyHashBitMapClientFilterNode>(methodParameter).SetBitBeforePersistence(parameter.bit);
            }
        }
        /// <summary>
        /// Add snapshot data 
///            添加快照数据 server node method
        /// </summary>
        internal sealed class IManyHashBitMapClientFilterNode_SnapshotSet_4 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__>
        {
            internal IManyHashBitMapClientFilterNode_SnapshotSet_4() : base(4, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)1) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IManyHashBitMapClientFilterNode>(methodParameter).SnapshotSet(parameter.map);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
///            多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器） (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class ManyHashBitMapClientFilterNodeMethodParameterCreator
        {
            private static void SnapshotSet_SnapshotSerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap value)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__ snapshotMethodParameter = new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__ { map = value };
                serializer.InternalIndependentSerializeNotNull(ref snapshotMethodParameter);
            }
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new IManyHashBitMapClientFilterNode_GetData_0(),
                        new IManyHashBitMapClientFilterNode_GetSize_1(),
                        new IManyHashBitMapClientFilterNode_SetBit_2(),
                        new IManyHashBitMapClientFilterNode_SetBitBeforePersistence_3(),
                        new IManyHashBitMapClientFilterNode_SnapshotSet_4(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo(4, typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap), SnapshotSet_SnapshotSerialize),
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(ManyHashBitMapClientFilterNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Multi-hash bitmap filter node interface (similar to Bloom Filter) 
///            多哈希位图过滤节点接口（类似布隆过滤器）
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IManyHashBitMapFilterNodeMethodEnum), typeof(ManyHashBitMapFilterNodeMethodParameterCreator))]
        public partial interface IManyHashBitMapFilterNode { }
        /// <summary>
        /// Multi-hash bitmap filter node interface (similar to Bloom Filter) 
///            多哈希位图过滤节点接口（类似布隆过滤器） (node method sequence number mapping enumeration type)
        /// </summary>
        public enum IManyHashBitMapFilterNodeMethodEnum
        {
            /// <summary>
            /// [0] Binary bit set matching 
///            位置集合匹配
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// uint[] bits Binary bit set 
///            位置集合
            /// Return value : AutoCSer.NullableBoolEnum Returning Null indicates that the bitmap does not match 
///            返回 Null 表示位图不匹配
            /// </summary>
            CheckBits = 0,
            /// <summary>
            /// [1] Get the bitmap size (number of bits) 
///            获取位图大小（位数量）
            /// Return value : int 
            /// </summary>
            GetSize = 1,
            /// <summary>
            /// [2] Set bit 
///            设置位
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// uint[] bits Binary bit set 
///            位置集合
            /// Return value : bool Returning false indicates that the bitmap size does not match 
///            返回 false 表示位图大小不匹配
            /// </summary>
            SetBits = 2,
            /// <summary>
            /// [3] Set bit (Check the input parameters before the persistence operation) 
///            设置位（持久化操作之前检查输入参数）
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// uint[] bits Binary bit set 
///            位置集合
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} Returning false indicates that the bitmap size does not match 
///            返回 false 表示位图大小不匹配
            /// </summary>
            SetBitsBeforePersistence = 3,
            /// <summary>
            /// [4] Add snapshot data 
///            添加快照数据
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap map Multi-hash bitmap data 
///            多哈希位图数据
            /// </summary>
            SnapshotSet = 4,
        }
        /// <summary>
        /// Binary bit set matching 
///            位置集合匹配 server node method
        /// </summary>
        internal sealed class IManyHashBitMapFilterNode_CheckBits_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>
        {
            internal IManyHashBitMapFilterNode_CheckBits_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IManyHashBitMapFilterNode>(methodParameter).CheckBits(parameter.size, parameter.bits));
            }
        }
        /// <summary>
        /// Get the bitmap size (number of bits) 
///            获取位图大小（位数量） server node method
        /// </summary>
        internal sealed class IManyHashBitMapFilterNode_GetSize_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod
        {
            internal IManyHashBitMapFilterNode_GetSize_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6) { }
            public override void CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IManyHashBitMapFilterNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IManyHashBitMapFilterNode>)node).GetSize(), ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6);
            }
        }
        /// <summary>
        /// Set bit 
///            设置位 server node method
        /// </summary>
        internal sealed class IManyHashBitMapFilterNode_SetBits_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>
        {
            internal IManyHashBitMapFilterNode_SetBits_2() : base(2, 3, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)39) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IManyHashBitMapFilterNode>(methodParameter).SetBits(parameter.size, parameter.bits));
            }
        }
        /// <summary>
        /// Set bit (Check the input parameters before the persistence operation) 
///            设置位（持久化操作之前检查输入参数） server node method
        /// </summary>
        internal sealed class IManyHashBitMapFilterNode_SetBitsBeforePersistence_3 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>
        {
            internal IManyHashBitMapFilterNode_SetBitsBeforePersistence_3() : base(3, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)36) { }
            public override AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> CallOutputBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__>)methodParameter);
                return AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.GetBeforePersistenceResponseParameter(methodParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IManyHashBitMapFilterNode>(methodParameter).SetBitsBeforePersistence(parameter.size, parameter.bits));

            }
        }
        /// <summary>
        /// Add snapshot data 
///            添加快照数据 server node method
        /// </summary>
        internal sealed class IManyHashBitMapFilterNode_SnapshotSet_4 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__>
        {
            internal IManyHashBitMapFilterNode_SnapshotSet_4() : base(4, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)1) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IManyHashBitMapFilterNode>(methodParameter).SnapshotSet(parameter.map);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Multi-hash bitmap filter node interface (similar to Bloom Filter) 
///            多哈希位图过滤节点接口（类似布隆过滤器） (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class ManyHashBitMapFilterNodeMethodParameterCreator
        {
            private static void SnapshotSet_SnapshotSerialize(AutoCSer.BinarySerializer serializer, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap value)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__ snapshotMethodParameter = new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__ { map = value };
                serializer.InternalIndependentSerializeNotNull(ref snapshotMethodParameter);
            }
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new IManyHashBitMapFilterNode_CheckBits_0(),
                        new IManyHashBitMapFilterNode_GetSize_1(),
                        new IManyHashBitMapFilterNode_SetBits_2(),
                        new IManyHashBitMapFilterNode_SetBitsBeforePersistence_3(),
                        new IManyHashBitMapFilterNode_SnapshotSet_4(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo(4, typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap), SnapshotSet_SnapshotSerialize),
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(ManyHashBitMapFilterNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Service basic operation interface 
///            服务基础操作接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IServiceNodeMethodEnum), typeof(ServiceNodeMethodParameterCreator))]
        public partial interface IServiceNode { }
        /// <summary>
        /// Service basic operation interface 
///            服务基础操作接口 (node method sequence number mapping enumeration type)
        /// </summary>
        public enum IServiceNodeMethodEnum
        {
            /// <summary>
            /// [0] Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// uint capacity The number of binary bits 
///            二进制位数量
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateBitmapNode = 0,
            /// <summary>
            /// [1] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// long identity Initial Allocation identity 
///            起始分配 ID
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateIdentityGeneratorNode = 1,
            /// <summary>
            /// [2] Delete the node 
///            删除节点
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// Return value : bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNode = 2,
            /// <summary>
            /// [3] Delete the node 
///            删除节点
            /// string key Node global keyword 
///            节点全局关键字
            /// Return value : bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNodeByKey = 3,
            /// <summary>
            /// [4] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapClientFilterNode = 4,
            /// <summary>
            /// [5] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapFilterNode = 5,
            /// <summary>
            /// [6] Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateUniformProbabilityClientStatisticsNode = 6,
            /// <summary>
            /// [7] Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            /// Return value : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateUniformProbabilityTotalStatisticsNode = 7,
        }
        /// <summary>
        /// Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode server node method
        /// </summary>
        internal sealed class IServiceNode_CreateBitmapNode_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__>
        {
            internal IServiceNode_CreateBitmapNode_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IServiceNode>(methodParameter).CreateBitmapNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.capacity));
            }
        }
        /// <summary>
        /// Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode server node method
        /// </summary>
        internal sealed class IServiceNode_CreateIdentityGeneratorNode_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__>
        {
            internal IServiceNode_CreateIdentityGeneratorNode_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IServiceNode>(methodParameter).CreateIdentityGeneratorNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.identity));
            }
        }
        /// <summary>
        /// Delete the node 
///            删除节点 server node method
        /// </summary>
        internal sealed class IServiceNode_RemoveNode_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__>
        {
            internal IServiceNode_RemoveNode_2() : base(2, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)7) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IServiceNode>(methodParameter).RemoveNode(parameter.index));
            }
        }
        /// <summary>
        /// Delete the node 
///            删除节点 server node method
        /// </summary>
        internal sealed class IServiceNode_RemoveNodeByKey_3 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__>
        {
            internal IServiceNode_RemoveNodeByKey_3() : base(3, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)15) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IServiceNode>(methodParameter).RemoveNodeByKey(parameter.key));
            }
        }
        /// <summary>
        /// Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode server node method
        /// </summary>
        internal sealed class IServiceNode_CreateManyHashBitMapClientFilterNode_4 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__>
        {
            internal IServiceNode_CreateManyHashBitMapClientFilterNode_4() : base(4, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IServiceNode>(methodParameter).CreateManyHashBitMapClientFilterNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.size));
            }
        }
        /// <summary>
        /// Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode server node method
        /// </summary>
        internal sealed class IServiceNode_CreateManyHashBitMapFilterNode_5 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__>
        {
            internal IServiceNode_CreateManyHashBitMapFilterNode_5() : base(5, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IServiceNode>(methodParameter).CreateManyHashBitMapFilterNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.size));
            }
        }
        /// <summary>
        /// Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode server node method
        /// </summary>
        internal sealed class IServiceNode_CreateUniformProbabilityClientStatisticsNode_6 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__>
        {
            internal IServiceNode_CreateUniformProbabilityClientStatisticsNode_6() : base(6, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IServiceNode>(methodParameter).CreateUniformProbabilityClientStatisticsNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.indexBits));
            }
        }
        /// <summary>
        /// Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode server node method
        /// </summary>
        internal sealed class IServiceNode_CreateUniformProbabilityTotalStatisticsNode_7 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__>
        {
            internal IServiceNode_CreateUniformProbabilityTotalStatisticsNode_7() : base(7, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)3) { }
            public override void CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback(methodParameter, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IServiceNode>(methodParameter).CreateUniformProbabilityTotalStatisticsNode(parameter.index, parameter.key, parameter.nodeInfo, parameter.indexBits));
            }
        }
        /// <summary>
        /// Service basic operation interface 
///            服务基础操作接口 (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class ServiceNodeMethodParameterCreator
        {
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new IServiceNode_CreateBitmapNode_0(),
                        new IServiceNode_CreateIdentityGeneratorNode_1(),
                        new IServiceNode_RemoveNode_2(),
                        new IServiceNode_RemoveNodeByKey_3(),
                        new IServiceNode_CreateManyHashBitMapClientFilterNode_4(),
                        new IServiceNode_CreateManyHashBitMapFilterNode_5(),
                        new IServiceNode_CreateUniformProbabilityClientStatisticsNode_6(),
                        new IServiceNode_CreateUniformProbabilityTotalStatisticsNode_7(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(ServiceNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Client statistics node interface based on uniform probability (similar to HyperLogLog, suitable for small containers) 
///            基于均匀概率的客户端同步总量统计节点接口（类似 HyperLogLog，适合小容器）
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IUniformProbabilityClientStatisticsNodeMethodEnum), typeof(UniformProbabilityClientStatisticsNodeMethodParameterCreator))]
        public partial interface IUniformProbabilityClientStatisticsNode { }
        /// <summary>
        /// Client statistics node interface based on uniform probability (similar to HyperLogLog, suitable for small containers) 
///            基于均匀概率的客户端同步总量统计节点接口（类似 HyperLogLog，适合小容器） (node method sequence number mapping enumeration type)
        /// </summary>
        public enum IUniformProbabilityClientStatisticsNodeMethodEnum
        {
            /// <summary>
            /// [0] Get data 
///            获取数据
            /// </summary>
            GetData = 0,
            /// <summary>
            /// [1] Add snapshot data 
///            添加快照数据
            /// byte[] bitCountArray 
            /// </summary>
            SnapshotSet = 1,
            /// <summary>
            /// [2] Try to modify the number of binary bits at the specified index position 
///            尝试修改指定索引位置的二进制位数量
            /// int index Index position 
///            索引位置
            /// byte bits The number of the last consecutive binary bits 1 
///            最后连续的二进制位 1 的数量
            /// </summary>
            SetIndexBit = 2,
            /// <summary>
            /// [3] Try to modify the number of binary bits at the specified index position (Initialize and load the persistent data) 
///            尝试修改指定索引位置的二进制位数量（初始化加载持久化数据）
            /// int index Index position 
///            索引位置
            /// byte bits The number of the last consecutive binary bits 1 
///            最后连续的二进制位 1 的数量
            /// </summary>
            SetIndexBitLoadPersistence = 3,
        }
        /// <summary>
        /// Get data 
///            获取数据 server node method
        /// </summary>
        internal sealed class IUniformProbabilityClientStatisticsNode_GetData_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.TwoStageCallbackMethod
        {
            internal IUniformProbabilityClientStatisticsNode_GetData_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)150) { }
            public override void TwoStageCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback, ref AutoCSer.Net.CommandServerKeepCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter> keepCallback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IUniformProbabilityClientStatisticsNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IUniformProbabilityClientStatisticsNode>)node).GetData(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback<byte[]>.Create(ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)150), AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback<int>.Create(ref keepCallback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)150));
            }
        }
        /// <summary>
        /// Add snapshot data 
///            添加快照数据 server node method
        /// </summary>
        internal sealed class IUniformProbabilityClientStatisticsNode_SnapshotSet_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__>
        {
            internal IUniformProbabilityClientStatisticsNode_SnapshotSet_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)9) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IUniformProbabilityClientStatisticsNode>(methodParameter).SnapshotSet(parameter.bitCountArray);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Try to modify the number of binary bits at the specified index position 
///            尝试修改指定索引位置的二进制位数量 server node method
        /// </summary>
        internal sealed class IUniformProbabilityClientStatisticsNode_SetIndexBit_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__>
        {
            internal IUniformProbabilityClientStatisticsNode_SetIndexBit_2() : base(2, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)11) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IUniformProbabilityClientStatisticsNode>(methodParameter).SetIndexBit(parameter.index, parameter.bits);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Try to modify the number of binary bits at the specified index position (Initialize and load the persistent data) 
///            尝试修改指定索引位置的二进制位数量（初始化加载持久化数据） server node method
        /// </summary>
        internal sealed class IUniformProbabilityClientStatisticsNode_SetIndexBitLoadPersistence_3 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__>
        {
            internal IUniformProbabilityClientStatisticsNode_SetIndexBitLoadPersistence_3() : base(3, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)8) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IUniformProbabilityClientStatisticsNode>(methodParameter).SetIndexBitLoadPersistence(parameter.index, parameter.bits);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Client statistics node interface based on uniform probability (similar to HyperLogLog, suitable for small containers) 
///            基于均匀概率的客户端同步总量统计节点接口（类似 HyperLogLog，适合小容器） (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class UniformProbabilityClientStatisticsNodeMethodParameterCreator
        {
            private static void SnapshotSet_SnapshotSerialize(AutoCSer.BinarySerializer serializer, byte[] value)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__ snapshotMethodParameter = new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__ { bitCountArray = value };
                serializer.SimpleSerialize(ref snapshotMethodParameter);
            }
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new IUniformProbabilityClientStatisticsNode_GetData_0(),
                        new IUniformProbabilityClientStatisticsNode_SnapshotSet_1(),
                        new IUniformProbabilityClientStatisticsNode_SetIndexBit_2(),
                        new IUniformProbabilityClientStatisticsNode_SetIndexBitLoadPersistence_3(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(3),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo(1, typeof(byte[]), SnapshotSet_SnapshotSerialize),
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(UniformProbabilityClientStatisticsNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Total statistics node interface based on uniform probability (similar to HyperLogLog) 
///            基于均匀概率的总量统计节点接口（类似 HyperLogLog）
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IUniformProbabilityTotalStatisticsNodeMethodEnum), typeof(UniformProbabilityTotalStatisticsNodeMethodParameterCreator))]
        public partial interface IUniformProbabilityTotalStatisticsNode { }
        /// <summary>
        /// Total statistics node interface based on uniform probability (similar to HyperLogLog) 
///            基于均匀概率的总量统计节点接口（类似 HyperLogLog） (node method sequence number mapping enumeration type)
        /// </summary>
        public enum IUniformProbabilityTotalStatisticsNodeMethodEnum
        {
            /// <summary>
            /// [0] Add statistical data 
///            添加统计数据
            /// ulong value 
            /// </summary>
            Append = 0,
            /// <summary>
            /// [1] Get the statistical quantity 
///            获取统计数量
            /// Return value : double 
            /// </summary>
            Count = 1,
            /// <summary>
            /// [2] Get the number of index binary bits 
///            获取索引二进制位数量
            /// Return value : byte 
            /// </summary>
            GetIndexBits = 2,
            /// <summary>
            /// [3] Add snapshot data 
///            添加快照数据
            /// byte[] bitCountArray 
            /// </summary>
            SnapshotSet = 3,
        }
        /// <summary>
        /// Add statistical data 
///            添加统计数据 server node method
        /// </summary>
        internal sealed class IUniformProbabilityTotalStatisticsNode_Append_0 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__>
        {
            internal IUniformProbabilityTotalStatisticsNode_Append_0() : base(0, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)11) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IUniformProbabilityTotalStatisticsNode>(methodParameter).Append(parameter.value);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Get the statistical quantity 
///            获取统计数量 server node method
        /// </summary>
        internal sealed class IUniformProbabilityTotalStatisticsNode_Count_1 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod
        {
            internal IUniformProbabilityTotalStatisticsNode_Count_1() : base(1, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6) { }
            public override void CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IUniformProbabilityTotalStatisticsNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IUniformProbabilityTotalStatisticsNode>)node).Count(), ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6);
            }
        }
        /// <summary>
        /// Get the number of index binary bits 
///            获取索引二进制位数量 server node method
        /// </summary>
        internal sealed class IUniformProbabilityTotalStatisticsNode_GetIndexBits_2 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod
        {
            internal IUniformProbabilityTotalStatisticsNode_GetIndexBits_2() : base(2, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6) { }
            public override void CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode node, ref AutoCSer.Net.CommandServerCallback<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter> callback)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IUniformProbabilityTotalStatisticsNode>.GetTarget((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode<IUniformProbabilityTotalStatisticsNode>)node).GetIndexBits(), ref callback, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)6);
            }
        }
        /// <summary>
        /// Add snapshot data 
///            添加快照数据 server node method
        /// </summary>
        internal sealed class IUniformProbabilityTotalStatisticsNode_SnapshotSet_3 : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__>
        {
            internal IUniformProbabilityTotalStatisticsNode_SnapshotSet_3() : base(3, -2147483648, (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)9) { }
            public override void CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter methodParameter)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__ parameter = AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__>.GetParameter((AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__>)methodParameter);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget<IUniformProbabilityTotalStatisticsNode>(methodParameter).SnapshotSet(parameter.bitCountArray);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(methodParameter);
            }
        }
        /// <summary>
        /// Total statistics node interface based on uniform probability (similar to HyperLogLog) 
///            基于均匀概率的总量统计节点接口（类似 HyperLogLog） (Create the calling method and parameter information)
        /// </summary>
        internal sealed partial class UniformProbabilityTotalStatisticsNodeMethodParameterCreator
        {
            private static void SnapshotSet_SnapshotSerialize(AutoCSer.BinarySerializer serializer, byte[] value)
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__ snapshotMethodParameter = new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__ { bitCountArray = value };
                serializer.SimpleSerialize(ref snapshotMethodParameter);
            }
            /// <summary>
            /// Get the method information of generate server-side node
            /// 获取生成服务端节点方法信息
            /// </summary>
            /// <returns></returns>
            internal static AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod GetServerNodeCreatorMethod()
            {
                return new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreatorMethod(new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[]
                    {
                        new IUniformProbabilityTotalStatisticsNode_Append_0(),
                        new IUniformProbabilityTotalStatisticsNode_Count_1(),
                        new IUniformProbabilityTotalStatisticsNode_GetIndexBits_2(),
                        new IUniformProbabilityTotalStatisticsNode_SnapshotSet_3(),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethodInfo(-2147483648),
                    }, new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo[]
                    {
                        new AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodCreatorInfo(3, typeof(byte[]), SnapshotSet_SnapshotSerialize),
                    });
            }
            internal static void MethodParameterCreator()
            {
                GetServerNodeCreatorMethod();
                AutoCSer.AotReflection.NonPublicMethods(typeof(UniformProbabilityTotalStatisticsNodeMethodParameterCreator));
            }
        }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Auto-increment identity segments 
///            自增 ID 分段
        /// </summary>
    public partial struct IdentityFragment
    {
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(12))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.identity);
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.count);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.identity);
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.count);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment));
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// The identifier of the message being processed 
///            正在处理的消息标识
        /// </summary>
    public partial struct MessageIdeneity
    {
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(16))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.Identity);
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.ArrayIndex);
                    __stream__.Write((byte)this.Flags);
                    __stream__.TryMoveSize(3);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.Identity);
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.ArrayIndex);
                byte Flags = 0;
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref Flags);
                this.Flags = (AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageFlagsEnum)Flags;
                __start__ += 3;
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity));
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
        /// <summary>
        /// Node index information 
///            节点索引信息
        /// </summary>
    public partial struct NodeIndex
    {
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="stream"></param>
            /// <param name="value"></param>
            internal static void SimpleSerialize(AutoCSer.Memory.UnmanagedStream stream, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex value)
            {
                value.simpleSerialize(stream);
            }
            /// <summary>
            /// Simple binary serialization
            /// 简单二进制序列化
            /// </summary>
            /// <param name="__stream__"></param>
            private void simpleSerialize(AutoCSer.Memory.UnmanagedStream __stream__)
            {
                if (__stream__.TryPrepSize(8))
                {
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.Identity);
                    AutoCSer.SimpleSerialize.Serializer.Serialize(__stream__, this.Index);
                }
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="start"></param>
            /// <param name="value"></param>
            /// <param name="end"></param>
            /// <returns></returns>
            internal unsafe static byte* SimpleDeserialize(byte* start, ref AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex value, byte* end)
            {
                return value.simpleDeserialize(start, end);
            }
            /// <summary>
            /// Simple binary deserialization
            /// 简单二进制反序列化
            /// </summary>
            /// <param name="__start__"></param>
            /// <param name="__end__"></param>
            /// <returns></returns>
            private unsafe byte* simpleDeserialize(byte* __start__, byte* __end__)
            {
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.Identity);
                __start__ = AutoCSer.SimpleSerialize.Deserializer.Deserialize(__start__, ref this.Index);
                if (__start__ == null || __start__ > __end__) return null;
                return __start__;
            }
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            internal unsafe static void SimpleSerialize()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex value = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex);
                SimpleSerialize(null, ref value);
                SimpleDeserialize(null, ref value, null);
                AutoCSer.AotReflection.NonPublicMethods(typeof(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
            }
    }
}namespace AutoCSer.CommandService.StreamPersistenceMemoryDatabase
{
    /// <summary>
    /// 触发 AOT 编译
    /// </summary>
    public static class AotMethod
    {
            /// <summary>
            /// AOT code generation call activation reflection
            /// AOT 代码生成调用激活反射
            /// </summary>
            /// <returns></returns>
            public static bool Call()
            {
                if (AutoCSer.Date.StartTimestamp == long.MinValue)
                {
                    AutoCSer.AotMethod.Call();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.AotMethod.Call();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex/**/.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex/**/.DefaultConstructorReflection();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment/**/.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap/**/.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity/**/.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex/**/.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo/**/.JsonSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult/**/.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity/**/.JsonSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip0__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.__ip9__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeLocalClient.LocalClientNode();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip1__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.__ip2__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeLocalClient.LocalClientNode();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip2__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.__ip4__.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeLocalClient.LocalClientNode();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip0__.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.__ip4__.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeLocalClient.LocalClientNode();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip0__.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip1__.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip2__.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip3__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip4__.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.__ip6__.BinarySerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeLocalClient.LocalClientNode();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip1__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.__ip2__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeLocalClient.LocalClientNode();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip0__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.__ip3__.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeLocalClient.LocalClientNode();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeMethodParameterCreator.MethodParameterCreator();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNodeMethodParameterCreator.MethodParameterCreator();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNodeMethodParameterCreator.MethodParameterCreator();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNodeMethodParameterCreator.MethodParameterCreator();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNodeMethodParameterCreator.MethodParameterCreator();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityClientStatisticsNodeMethodParameterCreator.MethodParameterCreator();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.UniformProbabilityTotalStatisticsNodeMethodParameterCreator.MethodParameterCreator();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment/**/.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity/**/.SimpleSerialize();
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex/**/.SimpleSerialize();

                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>));
                    AutoCSer.BinarySerializer.Simple<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>(null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter>));
                    AutoCSer.BinarySerializer.ICustom<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter>(null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<ulong[]>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.Algorithm.IntegerDivision>));
                    AutoCSer.BinarySerializer.Simple<AutoCSer.Algorithm.IntegerDivision>(null, default(AutoCSer.Algorithm.IntegerDivision));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo>));
                    AutoCSer.BinarySerializer.Json<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo>(null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum>));
                    AutoCSer.BinarySerializer.EnumByte<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum>(null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<string>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.Reflection.RemoteType>));
                    AutoCSer.BinarySerializer.Simple<AutoCSer.Reflection.RemoteType>(null, default(AutoCSer.Reflection.RemoteType));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter>));
                    AutoCSer.BinarySerializer.ICustom<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter>(null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter>));
                    AutoCSer.BinarySerializer.ICustom<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter>(null, default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<int>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<uint[]>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<uint>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<long>));
                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.BinarySerialize.TypeSerializer<byte>));
                    binaryDeserializeMemberTypes();

                    AutoCSer.AotReflection.NonPublicFields(typeof(AutoCSer.Json.TypeSerializer<AutoCSer.Reflection.RemoteType>));


                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.Create<byte[]>(null);
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode.Create<byte[]>(null);
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.Create<long>(null);
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode.Create<long>(null);
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap>(null);
                    AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode.Create<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap>(null);
                    return true;
                }
                return false;
            }
            /// <summary>
            /// Binary deserialization member type activation reflection
            /// 二进制反序列化成员类型激活反射
            /// </summary>
            private static void binaryDeserializeMemberTypes()
            {
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex t1 = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex);
                AutoCSer.BinaryDeserializer.Simple<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex>(null, ref t1);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter t2 = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter);
                AutoCSer.BinaryDeserializer.ICustom<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter>(null, ref t2);
                AutoCSer.Algorithm.IntegerDivision t3 = default(AutoCSer.Algorithm.IntegerDivision);
                AutoCSer.BinaryDeserializer.Simple<AutoCSer.Algorithm.IntegerDivision>(null, ref t3);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo t4 = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo);
                AutoCSer.BinaryDeserializer.Json<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo>(null, ref t4);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum t5 = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum);
                AutoCSer.BinaryDeserializer.EnumByte<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum>(null, ref t5);
                AutoCSer.Reflection.RemoteType t6 = default(AutoCSer.Reflection.RemoteType);
                AutoCSer.BinaryDeserializer.Simple<AutoCSer.Reflection.RemoteType>(null, ref t6);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter t7 = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter);
                AutoCSer.BinaryDeserializer.ICustom<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter>(null, ref t7);
                AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter t8 = default(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter);
                AutoCSer.BinaryDeserializer.ICustom<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter>(null, ref t8);
            }
    }
}
#endif