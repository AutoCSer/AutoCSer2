<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.CommandService.StreamPersistenceMemoryDatabase</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameter`1">
            <summary>
            返回参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameter`1.#ctor(`0)">
            <summary>
            返回参数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameter`1.serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameter`1.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameter`1.CreateKeepCallback">
            <summary>
            创建持续回调返回参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterAwaiter`1">
            <summary>
            返回参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterAwaiter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode)">
            <summary>
            返回参数
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterAwaiter`1.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1">
            <summary>
            await ResponseValueResult{T}, which returns binary serialized data
            await ResponseValueResult{T}，返回二进制序列化数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.command">
            <summary>
            The return value command
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.value">
            <summary>
            Return data
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.#ctor">
            <summary>
            Return binary serialized data
            返回二进制序列化数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Set the return parameters
            设置返回参数
            </summary>
            <param name="responseParameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.onCompleted">
            <summary>
            The asynchronous operation has been completed
            异步操作已完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.Wait">
            <summary>
            Wait for the command call to return the result
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.GetResult">
            <summary>
            Get the result of the command call
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinarySerializeResponseParameterValueResultAwaiter`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandBinarySerializeResponseParameter`1">
            <summary>
            回调委托返回参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandBinarySerializeResponseParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}})">
            <summary>
            返回参数
            </summary>
            <param name="node"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandBinarySerializeResponseParameter`1.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter">
            <summary>
            回调委托返回参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter.node">
            <summary>
            Client node
            客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter.nodeIndex">
            <summary>
            Request the index information of the node for passing parameters
            请求传参的节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter.callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            返回参数
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="callback">回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter.Callback(AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            返回结果回调
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter`1">
            <summary>
            回调委托返回参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter`1.node">
            <summary>
            Client node
            客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter`1.nodeIndex">
            <summary>
            Request the index information of the node for passing parameters
            请求传参的节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter`1.callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter`1.Value">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}})">
            <summary>
            返回参数
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="callback">回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,`0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}})">
            <summary>
            返回参数
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="value">返回值</param>
            <param name="callback">回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandResponseParameter`1.Callback(AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            返回结果回调
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandSimpleSerializeResponseParameter`1">
            <summary>
            回调委托返回参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandSimpleSerializeResponseParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}})">
            <summary>
            返回参数
            </summary>
            <param name="node"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallbackCommandSimpleSerializeResponseParameter`1.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.Unknown">
            <summary>
            Unknown error or exception
            未知错误或者异常
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.Success">
            <summary>
            The call was successful
            调用成功
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.PersistenceCallbackException">
            <summary>
            The persistence was successful but an execution exception occurred. This node may be in an error state. If it is due to insufficient memory, the service needs to be restarted and reloaded. For program logic exceptions, the erroneous logic also needs to be fixed
            持久化成功但是执行异常，该节点可能处于错误状态，如果是内存不足异常则需要重启服务重新加载，对于程序逻辑异常还需要修复该错误逻辑
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NodeIndexOutOfRange">
            <summary>
            The node number exceeds the index range
            节点编号超出索引范围
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NodeIdentityNotMatch">
            <summary>
            Node identity does not match
            节点标识不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.Disposed">
            <summary>
            The service has released resources
            服务已释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.IgnorePersistenceCallbackException">
            <summary>
            The persistent callback exception writes location information, and the server will ignore the request
            持久化回调异常写入位置信息，服务端将忽略该请求
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundSessionObject">
            <summary>
            The deserialization parameter operation did not find the socket session object
            反序列化参数操作没有找到套接字会话对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundClientNodeCreator">
            <summary>
            The generation of the client node failed
            客户端节点生成失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundNodeKey">
            <summary>
            No nodes that match the keywords were found
            没有找到匹配关键字的节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.OnlySupportInterface">
            <summary>
            The creation of server nodes only supports interface types, indicating that the invocation of generic type parameters is incorrect
            创建服务端节点仅支持接口类型，说明调用泛型类型参数不正确
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NullNodeInfo">
            <summary>
            The request parameters lack node information
            请求参数缺少节点信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundNodeCreator">
            <summary>
            The server node generation failed, indicating that the interface type does not conform to the node definition
            服务端节点生成失败，说明该接口类型不符合节点定义
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NodeTypeNotMatch">
            <summary>
            The node type do not match
            节点类型不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.OnlyMaster">
            <summary>
            This call only supports the main service node
            该调用仅支持主服务节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NullKey">
            <summary>
            The key word is null
            关键字为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundMethod">
            <summary>
            The call method was not found, indicating that the definitions of the server and the client do not match
            没有找到调用方法，说明服务端与客户端定义不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.MethodIndexOutOfRange">
            <summary>
            The method number is beyond the index range
            方法编号超出索引范围
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.CallTypeNotMatch">
            <summary>
            If the types of the called methods do not match, it indicates that the definitions of the server and the client do not match
            调用方法类型不匹配，说明服务端与客户端定义不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotAllowClientCall">
            <summary>
            The calling method is not allowed to be invoked by the client
            调用方法不允许客户端调用
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.PersistenceSerializeException">
            <summary>
            Persistent serialization exception
            持久化序列化异常
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.PersistenceWriteException">
            <summary>
            Persistent write exception
            持久化写入异常
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.LoadParameterSizeError">
            <summary>
            The buffer sizes of the loaded data parameters are inconsistent
            加载数据参数缓冲区大小不一致
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.LoadParameterDeserializeError">
            <summary>
            The deserialization of the loaded data parameters failed
            加载数据参数反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.LoadException">
            <summary>
            Node loading execution is abnormal
            节点加载执行异常
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.LoadRepairNodeMethodException">
            <summary>
            Node repair method loading exception
            节点修复方法加载异常
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.PersistenceRebuilding">
            <summary>
            Reconstruction of log stream persistence files
            日志流持久化文件重建中
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundSnapshotNode">
            <summary>
            The snapshot interface was not found
            没有找到快照接口
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundSnapshotMethod">
            <summary>
            No method matching the snapshot interface type was found
            没有找到与快照接口类型匹配的方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NoReturnValue">
            <summary>
            The call has no return value, indicating that ValueResult{T}.IsValue is false
            调用无返回值，表示 ValueResult{T}.IsValue 为 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.IllegalInputParameter">
            <summary>
            Illegal output of parameters
            非法输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NodeMethodParameterIsByRef">
            <summary>
            The input parameters of node methods are not allowed to be modified by ref/out
            节点方法输入参数不允许使用 ref / out 修饰
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.SendOnlyNotSupportReturnType">
            <summary>
            Unresponsive methods do not support return values
            无响应方法不支持返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.SendOnlyMustInputParameter">
            <summary>
            Unresponsive methods must have input parameters
            无响应方法必须存在输入参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.BeforePersistenceMethodReturnTypeError">
            <summary>
            Persistent check method return value type must be a bool or AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T}
            持久化检查方法返回值类型必须为 bool 或者 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T}
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.BeforePersistenceMethodCallTypeError">
            <summary>
            The persistence check method call type does not match
            持久化检查方法调用类型不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundRepairMethodDeclaringType">
            <summary>
            The definition type of the repair method was not found in the dynamic loader
            动态加载程序集中没有找到修复方法的定义类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundRepairMethod">
            <summary>
            No repair method was found in the dynamic loader
            动态加载程序集中没有找到修复方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.RepairMethodNotStatic">
            <summary>
            The repair method must be a static method
            修复方法必须为静态方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.RepairMethodIsGenericMethodDefinition">
            <summary>
            The repair method cannot be defined by a generic method
            修复方法不能是泛型方法定义
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.RepairMethodReturnTypeNotMatch">
            <summary>
            The return value type of the repair method is inconsistent with the original interface definition
            修复方法返回值类型与原接口定义不一致
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.RepairMethodNotFoundNodeTypeParameter">
            <summary>
            The first input parameter of the repair method must be the node interface type
            修复方法第一个输入参数必须是节点接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.RepairMethodParameterCountNotMatch">
            <summary>
            The number of input parameters in the repair method is inconsistent with the original interface definition (except that the first output parameter must be of the node interface type).
            修复方法输入参数数量与原接口定义不一致（除了第一个输出参数必须是节点接口类型）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.RepairMethodParameterTypeNotMatch">
            <summary>
            The input parameter types of the repair method are inconsistent with the original interface definitions
            修复方法输入参数类型与原接口定义不一致
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.BindMethodIndexUsed">
            <summary>
            The binding method number has been used. To modify this method, please call the repair function
            绑定方法编号已被使用，要修改该方法请调用修复功能
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.BindMethodNotSupportBeforePersistence">
            <summary>
            The binding method does not support checking parameter methods before persistence
            绑定方法不支持持久化之前检查参数方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.SlaveTimestampNotMatch">
            <summary>
            Create a timestamp mismatch from the node client
            从节点客户端创建时间戳不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.FileHeadNotMatch">
            <summary>
            If the data in the file header does not match, it indicates that the server's persistent file has been rebuild
            文件头部数据不匹配，说明服务端持久化文件被重建
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.FilePositionOutOfRange">
            <summary>
            The file persistence location is not within the range, indicating that the server has rebuild and processed it
            文件持久化位置不在范围内，说明服务端重建处理过
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.CanNotCreateSlave">
            <summary>
            The current configuration  StreamPersistenceMemoryDatabaseServiceConfig.CanCreateSlave don't allow you to create a node
            当前配置 StreamPersistenceMemoryDatabaseServiceConfig.CanCreateSlave 不允许创建从节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.PositionNotMatch">
            <summary>
            The persistent location does not match
            持久化位置不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.StateNotMatch">
            <summary>
            The current status does not match
            当前状态不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.CustomDeserializeError">
            <summary>
            The custom deserialization failed
            自定义反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.ReadFileSizeError">
            <summary>
            File data reading failed
            文件读取数据失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.CallFail">
            <summary>
            The client call failed
            客户端调用失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotFoundRemoteType">
            <summary>
            Could not find the generic type, or generic type does not meet the AutoCSer.Common.Config.CheckRemoteType legitimacy check condition
            没有找到泛型类型，或者泛型类型不满足 AutoCSer.Common.Config.CheckRemoteType 合法性检查条件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.RemoteTypeError">
            <summary>
            Generic types do not meet the requirements
            泛型类型不满足要求
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NullResponseParameter">
            <summary>
            No data was returned
            没有返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.CustomStateError">
            <summary>
            Custom operation status error
            自定义操作状态错误
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.CustomException">
            <summary>
            Custom operation exception
            自定义操作异常
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.NotSupportPersistence">
            <summary>
            Persistent operations are not supported
            不支持持久化操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.UnknownPersistenceType">
            <summary>
            Unknown persistence type
            未知的持久化类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum.Callbacked">
            <summary>
            Callback already (available for counting)
            已回调（可用于计数）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`2">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <typeparam name="NT">Basic service operation client interface type
            服务基础操作客户端接口类型</typeparam>
            <typeparam name="ET">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`2.Client">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`2.clientLock">
            <summary>
            Log stream persistence memory database client access lock
            日志流持久化内存数据库客户端访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`2.createClient">
            <summary>
            Create a log stream persistence in-memory database client instance
            创建日志流持久化内存数据库客户端实例
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`2.#ctor(AutoCSer.Net.CommandClientSocketEventCache{`1},System.Func{`1,AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent})">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="client">Command client socket events
            命令客户端套接字事件</param>
            <param name="createClient">Create a log stream persistence in-memory database client instance
            创建日志流持久化内存数据库客户端实例</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`2.#ctor(AutoCSer.Net.ICommandClient,System.Func{`1,AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent})">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="client">Command client</param>
            <param name="createClient">Create a log stream persistence in-memory database client instance
            创建日志流持久化内存数据库客户端实例</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`2.#ctor(AutoCSer.Net.CommandClientConfig,System.Func{`1,AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent})">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="config">Command client configuration
            命令客户端配置</param>
            <param name="createClient">Create a log stream persistence in-memory database client instance
            创建日志流持久化内存数据库客户端实例</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`2.getClient">
            <summary>
            Get the log stream persistent memory database client
            获取日志流持久化内存数据库客户端
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`1">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`1.#ctor(AutoCSer.Net.CommandClientSocketEventCache{`0},System.Func{`0,AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent})">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="client">Command client socket events
            命令客户端套接字事件</param>
            <param name="createClient">Create a log stream persistence in-memory database client instance
            创建日志流持久化内存数据库客户端实例</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`1.#ctor(AutoCSer.Net.ICommandClient,System.Func{`0,AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent})">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="client">Command client</param>
            <param name="createClient">Create a log stream persistence in-memory database client instance
            创建日志流持久化内存数据库客户端实例</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientCache`1.#ctor(AutoCSer.Net.CommandClientConfig,System.Func{`0,AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent})">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="config">Command client configuration
            命令客户端配置</param>
            <param name="createClient">Create a log stream persistence in-memory database client instance
            创建日志流持久化内存数据库客户端实例</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientTaskCache`1">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <typeparam name="T">Basic service operation client interface type
            服务基础操作客户端接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientTaskCache`1.clientTask">
            <summary>
            Log stream persistence in-memory database client
            日志流持久化内存数据库客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientTaskCache`1.GetClient">
            <summary>
            Get the log stream persistent memory database client
            获取日志流持久化内存数据库客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientTaskCache`1.getClient">
            <summary>
            Get the log stream persistent memory database client
            获取日志流持久化内存数据库客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientTaskCache`1.CreateNode``1(System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient{`0},System.Threading.Tasks.Task{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0}}})">
            <summary>
            Get the log stream persistent in-memory database client node
            获取日志流持久化内存数据库客户端节点
            </summary>
            <typeparam name="NT">Client node type
            客户端节点类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient">
            <summary>
            Distributed client
            分布式客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.clients">
            <summary>
            Client collection
            客户端集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.clientLock">
            <summary>
            The access lock of the client collection
            客户端集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.#ctor">
            <summary>
            Distributed client
            分布式客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.createClient(System.String)">
            <summary>
            Create the client based on the global keywords of the node
            根据节点全局关键字创建客户端
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns>Log stream persistence in-memory database client
            日志流持久化内存数据库客户端</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.getClient(System.String)">
            <summary>
            Get the client
            获取客户端
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.GetClient(System.String)">
            <summary>
            Get the client based on the global key of the node
            根据节点全局关键字获取客户端
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns>Log stream persistence in-memory database client
            日志流持久化内存数据库客户端</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.GetOrCreateNode``1(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}},System.Boolean)">
            <summary>
            Get the client node. If the server does not exist, create the node
            获取客户端节点，服务端不存在则创建节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">The delegate for creating the client node
            创建客户端节点委托</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>The client node interface object is derived from AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}
            客户端节点接口对象派生自 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.GetOrCreateNode``2(System.String,``1,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,``1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}},System.Boolean)">
            <summary>
            Get the client node. If the server does not exist, create the node
            获取客户端节点，服务端不存在则创建节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
            <typeparam name="PT">Additional parameter type
            附加参数类型</typeparam>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="parameter">Additional parameters
            附加参数</param>
            <param name="creator">The delegate for creating the client node
            创建客户端节点委托</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>The client node interface object is derived from AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}
            客户端节点接口对象派生自 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.getAllClients">
            <summary>
            Get the collection of all clients
            获取所有客户端集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.RepairNodeMethod``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{``0},System.Reflection.MethodInfo)">
            <summary>
            All client fixes interface method errors and forcibly overwrites the original interface method calls. Except for the first parameter being the operation node object, the method definitions must be consistent
            所有客户端 修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClient.BindNodeMethod``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{``0},System.Reflection.MethodInfo)">
            <summary>
            All clients bind new methods to dynamically add interface functionality. The initial state of the new method number must be idle
            所有客户端 绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClientRepairNodeMethodState">
            <summary>
            分布式客户端修复接口方法状态结果
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClientRepairNodeMethodState.ReturnType">
            <summary>
            RPC 调用状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClientRepairNodeMethodState.State">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClientRepairNodeMethodState.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClientRepairNodeMethodState.ErrorClient">
            <summary>
            调用错误的客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClientRepairNodeMethodState.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient)">
            <summary>
            分布式客户端修复接口方法状态结果
            </summary>
            <param name="returnType"></param>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedClientRepairNodeMethodState.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient)">
            <summary>
            分布式客户端修复接口方法状态结果
            </summary>
            <param name="state"></param>
            <param name="client"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackCommandResponse`1">
            <summary>
            持续回调委托
            </summary>
            <typeparam name="T">Return value type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackCommandResponse`1.callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackCommandResponse`1.#ctor(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            持续回调委托
            </summary>
            <param name="callback">回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackCommandResponse`1.Callback(AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            回调操作
            </summary>
            <param name="result"></param>
            <param name="command"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.Key">
            <summary>
            Node global keyword
            节点全局关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.Creator">
            <summary>
            A delegate to create a node operation object
            创建节点操作对象委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.Client">
            <summary>
            Log stream persistence in-memory database client
            日志流持久化内存数据库客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.Index">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.isRenewing">
            <summary>
            Is it under reconstruction
            是否重建中
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.isReindex">
            <summary>
            Is the index being retrieved again
            是否正在重新获取索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.IsSynchronousCallback">
            <summary>
            Whether to synchronize the callback of the IO thread
            是否 IO 线程同步回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.isPersistenceCallbackExceptionRenewNode">
            <summary>
            Persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the exception is repair and restart the server, If this parameter is set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.#ctor(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}}},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Boolean)">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">A delegate to create a node operation object
            创建节点操作对象委托</param>
            <param name="client">Log stream persistence in-memory database local client
            日志流持久化内存数据库本地客户端</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.CheckState(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Check the return status of the error
            检查错误返回状态
            </summary>
            <param name="nodeIndex"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.Renew(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Trigger node reconstruction
            触发节点重建
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.renew">
            <summary>
            Trigger node reconstruction
            触发节点重建
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.Reindex(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            The index is invalid. Get the index again
            索引已失效，重新获取获取索引
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode.reindex">
            <summary>
            The index is invalid. Get the index again
            索引已失效，重新获取获取索引
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode`1">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode`1.synchronousNode">
            <summary>
            The IO thread synchronizes the client node
            IO 线程同步客户端节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode`1.#ctor(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}}},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Boolean)">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">A delegate to create a node operation object
            创建节点操作对象委托</param>
            <param name="client">Log stream persistence in-memory database local client
            日志流持久化内存数据库本地客户端</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode`1.renew">
            <summary>
            Trigger node reconstruction
            触发节点重建
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode`1.reindex">
            <summary>
            The index is invalid. Get the index again
            索引已失效，重新获取获取索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode`1.createSynchronousCallback">
            <summary>
            Create an IO thread synchronizes the client node
            创建 IO 线程同步回调节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode`1.GetSynchronousCallback(`0)">
            <summary>
            Get the IO thread synchronizes the client node, node call await subsequent operations do not allow the existence of synchronous blocking logic or long time occupied CPU operations
            获取 IO 线程同步回调节点，节点调用 await 后续操作不允许存在同步阻塞逻辑或者长时间占用 CPU 运算
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator">
            <summary>
            生成客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator.NodeConstructorParameterTypes">
            <summary>
            客户端节点方法构造函数参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator.LocalServiceCallNodeCreate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator.LocalServiceCallbackNodeCreate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator.LocalServiceCallInputOutputNodeCreateMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator.LocalServiceCallbackInputOutputNodeCreateMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator.LocalServiceInputKeepCallbackEnumeratorNodeCreateMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator.LocalServiceInputKeepCallbackNodeCreateMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator`1">
            <summary>
            生成客户端节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator`1.Create(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}}},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Boolean)">
            <summary>
            创建客户端节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">A delegate to create a node operation object
            创建节点操作对象委托</param>
            <param name="client">Log stream persistence in-memory database local client
            日志流持久化内存数据库本地客户端</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator`1.GetNodeInfo(System.Exception@)">
            <summary>
            获取服务端节点信息
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator`1.nodeInfo">
            <summary>
            服务端信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator`1.creator">
            <summary>
            创建客户端节点委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator`1.creatorException">
            <summary>
            节点构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNodeCreator`1.creatorMessages">
            <summary>
            节点构造提示信息
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1">
            <summary>
            Keep the callback output
            保持回调输出
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.node">
            <summary>
            Client node
            客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.EnumeratorCommand">
            <summary>
            Callback command
            回调命令
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.Socket">
            <summary>
            Command client socket
            命令客户端套接字
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.IsSuccess">
            <summary>
            Whether the command was successfully added to the output queue
            命令是否成功添加到输出队列
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.ReturnType">
            <summary>
            The return value type of the callback command
            回调命令返回值类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.#ctor">
            <summary>
            Empty response (Command submission failed)
            空响应（命令提交失败）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,AutoCSer.Net.EnumeratorCommand{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Keep the callback output
            保持回调输出
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="enumeratorCommand">Callback command
            回调命令</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.GetAsyncEnumerable">
            <summary>
            Get the IAsyncEnumerable
            获取 IAsyncEnumerable
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.GetAsyncEnumerable``1(System.Func{`0,``0})">
            <summary>
            Convert the data and get the IAsyncEnumerable
            数据转换并获取 IAsyncEnumerable
            </summary>
            <typeparam name="VT">Target data type
            目标数据类型</typeparam>
            <param name="getValue">Delegate for data transformation
            数据转换委托</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.nodeIndex">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.MoveNext">
            <summary>
            await bool, the collection enumeration command returns true when the next data exists
            await bool，集合枚举命令存在下一个数据返回 true
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.MoveNextAsync">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.Current">
            <summary>
            Get current data
            获取当前数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.DisposeAsync">
            <summary>
            Release resources
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse`1.NullResponse">
            <summary>
            Empty response (Command submission failed)
            空响应（命令提交失败）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode">
            <summary>
            Client node
            客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.Key">
            <summary>
            节点全局关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.Creator">
            <summary>
            创建节点操作对象委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.Client">
            <summary>
            Log stream persistence in-memory database client
            日志流持久化内存数据库客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.Index">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.isRenewing">
            <summary>
            是否重建中
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.isReindex">
            <summary>
            是否正在重新获取索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.IsSynchronousCallback">
            <summary>
            Whether to synchronize the callback of the IO thread
            是否 IO 线程同步回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.isPersistenceCallbackExceptionRenewNode">
            <summary>
            服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端，该参数设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.#ctor(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}},AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Boolean)">
            <summary>
            Client node
            客户端节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">创建节点操作对象委托</param>
            <param name="client">日志流持久化内存数据库客户端</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.CheckStateAsync(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            检查返回错误状态
            </summary>
            <param name="nodeIndex"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.Renew(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Trigger node reconstruction
            触发节点重建
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.renew">
            <summary>
            Trigger node reconstruction
            触发节点重建
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.Reindex(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            The index is invalid. Get the index again
            索引已失效，重新获取获取索引
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.reindex">
            <summary>
            The index is invalid. Get the index again
            索引已失效，重新获取获取索引
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode.DefaultAttribute">
            <summary>
            默认客户端节点自定义属性
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode`1">
            <summary>
            Client node
            客户端节点
            </summary>
            <typeparam name="T">客户端节点接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode`1.synchronousNode">
            <summary>
            IO 线程同步客户端节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode`1.#ctor(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}},AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Boolean)">
            <summary>
            Client node
            客户端节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">创建节点操作对象委托</param>
            <param name="client">日志流持久化内存数据库客户端</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode`1.renew">
            <summary>
            Trigger node reconstruction
            触发节点重建
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode`1.reindex">
            <summary>
            The index is invalid. Get the index again
            索引已失效，重新获取获取索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode`1.createSynchronousCallback">
            <summary>
            创建 IO 线程同步回调节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode`1.GetSynchronousCallback(`0)">
            <summary>
            获取 IO 线程同步回调节点，节点调用 await 后续操作不允许存在同步阻塞逻辑或者长时间占用 CPU 运算
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeAttribute">
            <summary>
            Custom configuration of client node
            客户端节点自定义配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeAttribute.LocalClientNodeConstructorMethodName">
            <summary>
            Local client node constructor name
            本地客户端节点构造函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeAttribute.LocalClientNodeMethodName">
            <summary>
            The name of the method for activating AOT reflection at the local client node
            本地客户端节点激活 AOT 反射的方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeAttribute.ServerNodeType">
            <summary>
            The matching server node interface type
            匹配服务端节点接口类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeAttribute.#ctor(System.Type)">
            <summary>
            Custom configuration of client node
            客户端节点自定义属性
            </summary>
            <param name="serverNodeType">The matching server node interface type
            匹配服务端节点接口类型</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator">
            <summary>
            生成客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.NodeConstructorParameterTypes">
            <summary>
            客户端节点方法构造函数参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCall">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallWrite">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallCommand">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallWriteCommand">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallInputOutputMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallInputOutputWriteMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallInputOutputCommandMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallInputOutputWriteCommandMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientInputKeepCallbackMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientInputKeepCallbackWriteMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientInputKeepCallbackCommandMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientInputKeepCallbackWriteCommandMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallOutputResponseParameter">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallOutputWriteResponseParameter">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallOutputCommandResponseParameter">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientCallOutputWriteCommandResponseParameter">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientKeepCallbackResponseParameter">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientKeepCallbackWriteResponseParameter">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientKeepCallbackCommandResponseParameter">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator.StreamPersistenceMemoryDatabaseClientKeepCallbackWriteCommandResponseParameter">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator`1">
            <summary>
            生成客户端节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator`1.Create(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}},AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Boolean)">
            <summary>
            创建客户端节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">创建节点操作对象委托</param>
            <param name="client">日志流持久化内存数据库客户端</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator`1.GetNodeInfo(System.Exception@)">
            <summary>
            获取服务端节点信息
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator`1.NodeInfo">
            <summary>
            服务端信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator`1.creator">
            <summary>
            创建客户端节点委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator`1.creatorException">
            <summary>
            节点构造错误
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeCreator`1.creatorMessages">
            <summary>
            节点构造提示信息
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod">
            <summary>
            客户端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod.LocalClientSendOnlyMethodReturnType">
            <summary>
            本地客户端 SendOnly 方法返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod.QueueNodeType">
            <summary>
            队列节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod.IsCallback">
             <summary>
            客户端是否委托回调 API
             </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod.IsReturnResponseParameter">
            <summary>
            是否返回参数类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod.#ctor(System.Type,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            客户端节点方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="isLocalClient"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod)">
            <summary>
            设置服务端节点方法数据
            </summary>
            <param name="method"></param>
            <returns>错误信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod.GetMethod(System.Type,AutoCSer.LeftArray{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod}@,System.Boolean)">
            <summary>
            获取客户端节点接口方法集合
            </summary>
            <param name="type"></param>
            <param name="methods"></param>
            <param name="isLocalClient"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient">
            <summary>
            Log stream persistence in-memory database service local client
            日志流持久化内存数据库本地服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.Service">
            <summary>
            Log stream persistence memory database local service
            日志流持久化内存数据库本地服务
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.PersistencePosition">
            <summary>
            The written location of the persistent stream
            持久化流已写入位置
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.RebuildSnapshotPosition">
            <summary>
            Rebuild the end position of the snapshot
            重建快照结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService)">
            <summary>
            Log stream persistence in-memory database service local client
            日志流持久化内存数据库本地服务客户端
            </summary>
            <param name="service">Log stream persistence memory database local service
            日志流持久化内存数据库本地服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.GetOrCreateNode``1(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}}},System.Boolean)">
            <summary>
            Get the client node. If the server does not exist, create the node
            获取客户端本地客户端节点，服务端不存在则创建节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">The delegate for creating the client node
            创建客户端节点委托</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>The client node interface object is derived from AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}
            客户端节点接口对象派生自 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.GetOrCreateNode``2(System.String,``1,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,``1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}}},System.Boolean)">
            <summary>
            Get the client node. If the server does not exist, create the node
            获取客户端本地客户端节点，服务端不存在则创建节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
            <typeparam name="PT">Additional parameter type
            附加参数类型</typeparam>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="parameter">Additional parameters
            附加参数</param>
            <param name="creator">The delegate for creating the client node
            创建客户端节点委托</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>The client node interface object is derived from AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}
            客户端节点接口对象派生自 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.GetOrCreateNodeIndex``1(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}}})">
            <summary>
            Get the node identifier and create a node when it does not exist
            获取节点标识，不存在节点时创建节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">The delegate for creating the client node
            创建客户端节点委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.Rebuild">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient.AppendQueueNode``1(System.Func{``0})">
            <summary>
            Add non-persistent queue tasks (without modifying the status of in-memory data)
            添加非持久化队列任务（不修改内存数据状态）
            </summary>
            <typeparam name="T">Return the data type of the result
            返回结果数据类型</typeparam>
            <param name="getResult">The delegate to get the result
            获取结果数据委托</param>
            <returns>Queue node
            队列节点</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1">
            <summary>
            Log stream persistence in-memory database service local client
            日志流持久化内存数据库本地服务客户端
            </summary>
            <typeparam name="CT">Service basic operation client interface type
            服务基础操作客户端接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.ClientNode">
            <summary>
            Service basic operation client
            服务基础操作客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService)">
            <summary>
            Log stream persistence in-memory database service local client
            日志流持久化内存数据库本地服务客户端
            </summary>
            <param name="service">Log stream persistence memory database local service
            日志流持久化内存数据库本地服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateBinaryMessageNode``1(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the local client node for message processing. If the server does not exist, create node MessageNode{BinaryMessage{T}}
            获取消息处理本地客户端节点，服务端不存在则创建节点 MessageNode{BinaryMessage{T}}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateMessageNode``1(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the local client node for message processing. If the server does not exist, create node MessageNode{T}
            获取消息处理本地客户端节点，服务端不存在则创建节点 MessageNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateDistributedLockNode``1(System.String,System.Boolean)">
            <summary>
            Get the distributed lock local client node. If the server does not exist, create node DistributedLockNode{KT}
            获取分布式锁本地客户端节点，服务端不存在则创建节点 DistributedLockNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateFragmentDictionaryNode``2(System.String,System.Boolean)">
            <summary>
            Get the local client node of the dictionary. If the server does not exist, create node FragmentDictionaryNode{KT,VT}
            获取字典本地客户端节点，服务端不存在则创建节点 FragmentDictionaryNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateDictionaryNode``2(System.String,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum,System.Boolean)">
            <summary>
            Get the local client node of the dictionary. If the server does not exist, create node DictionaryNode{KT,VT}
            获取字典本地客户端节点，服务端不存在则创建节点 DictionaryNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateSearchTreeDictionaryNode``2(System.String,System.Boolean)">
            <summary>
            Get the local client node of the binary search tree. If the server does not exist, create node SearchTreeDictionaryNode{KT,VT}
            获取二叉搜索树本地客户端节点，服务端不存在则创建节点 SearchTreeDictionaryNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateSortedDictionaryNode``2(System.String,System.Boolean)">
            <summary>
            Get the local client node of the sorting dictionary. If the server does not exist, create node SortedDictionaryNode{KT,VT}
            获取排序字典本地客户端节点，服务端不存在则创建节点 SortedDictionaryNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateSortedListNode``2(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the sorting list of local client nodes. If the server does not exist, create node SortedListNode{KT,VT}
            获取排序列表本地客户端节点，服务端不存在则创建节点 SortedListNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateFragmentHashSetNode``1(System.String,System.Boolean)">
            <summary>
            Get 256 base fragment hash table local client nodes. If the server does not exist, create node FragmentHashSetNode{KT}
            获取 256 基分片哈希表本地客户端节点，服务端不存在则创建节点 FragmentHashSetNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateHashSetNode``1(System.String,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum,System.Boolean)">
            <summary>
            Get the local client node of the hash table. If the server does not exist, create node HashSetNode{KT}
            获取哈希表本地客户端节点，服务端不存在则创建节点 HashSetNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateSearchTreeSetNode``1(System.String,System.Boolean)">
            <summary>
            Get the binary search tree set of local client nodes. If the server does not exist, create node SearchTreeSetNode{KT}
            获取二叉搜索树集合本地客户端节点，服务端不存在则创建节点 SearchTreeSetNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateSortedSetNode``1(System.String,System.Boolean)">
            <summary>
            Get the local client nodes of the sorted collection. If the server does not exist, create node SortedSetNode{KT}
            获取排序集合本地客户端节点，服务端不存在则创建节点 SortedSetNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateQueueNode``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the queue node (first-in-first-out). If the server does not exist, create node QueueNode{T}
            获取队列节点（先进先出），服务端不存在则创建节点 QueueNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateStackNode``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the stack node (last in, first out). If the server does not exist, create node StackNode{T}
            获取栈节点（后进先出），服务端不存在则创建节点 StackNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateLeftArrayNode``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the local client nodes of the array. If the server does not exist, create node LeftArrayNode{T}
            获取数组本地客户端节点，服务端不存在则创建节点 LeftArrayNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateArrayNode``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the local client nodes of the array. If the server does not exist, create node ArrayNode{T}
            获取数组本地客户端节点，服务端不存在则创建节点 ArrayNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="length">Array length</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateOnlyPersistenceNode``1(System.String)">
            <summary>
            Get archive-only data local client nodes. If the server does not exist, create node OnlyPersistenceNode{T}
            获取仅存档本地客户端节点，服务端不存在则创建节点 OnlyPersistenceNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateIdentityGeneratorNode(System.String,System.Int64,System.Boolean)">
            <summary>
            Get a 64-bit auto-increment identity local client node. If the server does not exist, create node IdentityGeneratorNode
            获取 64 位自增ID 本地客户端节点，服务端不存在则创建节点 IdentityGeneratorNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="identity">Initial Allocation identity
            起始分配 ID</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.GetOrCreateBitmapNode(System.String,System.UInt32,System.Boolean)">
            <summary>
            Get the local client node of the bitmap. If the server does not exist, create node BitmapNode
            获取位图本地客户端节点，服务端不存在则创建节点 BitmapNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient`1.CreateNode``1(System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient{`0},System.Threading.Tasks.Task{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{``0}}})">
            <summary>
            Get the log stream persistent in-memory database client node
            获取日志流持久化内存数据库客户端节点
            </summary>
            <typeparam name="NT">Client node type
            客户端节点类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1">
            <summary>
            The local service invocation keep callback output
            本地服务调用保持回调输出
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.callback">
            <summary>
            The local service invocation callback object
            本地服务调用回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.moveNext">
            <summary>
            Whether the next data exists in the collection enumeration command
            集合枚举命令是否存在下一个数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.returnValueQueue">
            <summary>
            Return value queue
            返回值队列
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.current">
            <summary>
            Current returned data
            当前返回数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.Current">
            <summary>
            Get current data
            获取当前数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.ReturnType">
            <summary>
            The return value type of the callback command
            回调命令返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.isSynchronousCallback">
            <summary>
            Whether to synchronize the callback of the IO thread
            是否 IO 线程同步回调
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.Exception">
            <summary>
            Exception information
            异常信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback{`0},System.Boolean)">
            <summary>
            The local service invocation keep callback output
            本地服务调用保持回调输出
            </summary>
            <param name="callback">The local service invocation callback object
            本地服务调用回调对象</param>
            <param name="isSynchronousCallback">Whether to synchronize the callback of the IO thread
            是否 IO 线程同步回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.DisposeAsync">
            <summary>
            Release resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.CancelKeep(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            Cancel output
            取消输出
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter)">
            <summary>
            Return the data callback operation
            返回数据回调操作
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.MoveNext">
            <summary>
            await bool, the collection enumeration command returns true when the next data exists
            await bool，集合枚举命令存在下一个数据返回 true
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.AutoCSer#IEnumeratorTask#MoveNextAsync">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.System#Collections#Generic#IAsyncEnumerator{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#LocalResult{T}}#MoveNextAsync">
            <summary>
            Whether the next data exists
            是否存在下一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.GetAsyncEnumerable">
            <summary>
            Get the IAsyncEnumerable
            获取 IAsyncEnumerable
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback`1.GetAsyncEnumerable``1(System.Func{`0,``0})">
            <summary>
            Convert the data and get the IAsyncEnumerable
            数据转换并获取 IAsyncEnumerable
            </summary>
            <typeparam name="VT">Target data type
            目标数据类型</typeparam>
            <param name="getValue">Delegate for data transformation
            数据转换委托</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult">
            <summary>
            The local service returns the result
            本地服务返回结果
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Call status
            调用状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult">
            <summary>
            Implicit conversion
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1">
            <summary>
            The local service returns the result
            本地服务返回结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.Value">
            <summary>
            Return value
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.Exception">
            <summary>
            Exception information
            异常信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Error call state
            错误调用状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.#ctor(`0)">
            <summary>
            Return result
            返回结果
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.Exception)">
            <summary>
            Error call state
            错误调用状态
            </summary>
            <param name="state"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.op_Implicit(`0)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0})~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult">
            <summary>
            Error return result
            错误返回结果
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}">
            <summary>
            Error return result
            错误返回结果
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.Cast``1(``0)">
            <summary>
            Return the result type conversion
            返回结果类型转换
            </summary>
            <typeparam name="VT">Target type
            目标类型</typeparam>
            <param name="defaultValue">Default value of success status
            成功状态默认值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult`1.GetPageResult``1">
            <summary>
            Get the error paging data
            获取错误分页数据
            </summary>
            <typeparam name="PT"></typeparam>
            <returns>Error paging data
            错误分页数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult">
            <summary>
            Return result
            返回结果
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.ReturnType">
            <summary>
            The return value type of the network client
            网络客户端返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Return the calling state
            返回调用状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Error call return type
            错误调用返回类型
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.Set(AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.String)">
            <summary>
            Set the error call status
            设置错误调用状态
            </summary>
            <param name="returnType"></param>
            <param name="state"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.String)">
            <summary>
            Error call state
            错误调用状态
            </summary>
            <param name="state"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult">
            <summary>
            Implicit conversion
            </summary>
            <param name="state"></param>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.SuccessTask">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.DisposedTask">
            <summary>
            The service has released resources
            服务已释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.FalseTask">
            <summary>
            false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult.TrueTask">
            <summary>
            true
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1">
            <summary>
            Return result
            返回结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.Value">
            <summary>
            Return value
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.ReturnType">
            <summary>
            The return value type of the network client
            网络客户端返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Error call return type
            错误调用返回类型
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Error call state
            错误调用状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.String)">
            <summary>
            Error call state
            错误调用状态
            </summary>
            <param name="state"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.#ctor(`0)">
            <summary>
            Return result
            返回结果
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.Cast``1(``0)">
            <summary>
            Return the result type conversion
            返回结果类型转换
            </summary>
            <typeparam name="VT">Target type
            目标类型</typeparam>
            <param name="defaultValue">Default value of success status
            成功状态默认值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.op_Implicit(AutoCSer.Net.CommandClientReturnTypeEnum)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.op_Implicit(`0)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}">
            <summary>
            Error return result
            错误返回结果
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0})~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult">
            <summary>
            Error return result
            错误返回结果
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult`1.GetPageResult``1">
            <summary>
            Get the error paging data
            获取错误分页数据
            </summary>
            <typeparam name="PT"></typeparam>
            <returns>Error paging data
            错误分页数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex">
            <summary>
            Create node index information
            创建节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex.Index">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnlyPersistenceNode`1">
            <summary>
            仅存档节点（用于大量数据快速存档，不修改内存数据，也不定义快照操作）
            </summary>
            <typeparam name="T">Archive data type
            存档数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnlyPersistenceNode`1.SaveLoadPersistence(`0)">
            <summary>
            Load the archived data for scanning the archived mode (initializing the loading of persistent data)
            加载保存数据，用于扫描存档模式（初始化加载持久化数据）
            </summary>
            <param name="value">Data to be archive
            待存档数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnlyPersistenceNode`1.Save(`0)">
            <summary>
            Data archiving
            数据存档
            </summary>
            <param name="value">Data to be archive
            待存档数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnlyPersistenceNode`1.SaveSendOnlyLoadPersistence(`0)">
            <summary>
            Load the archived data for scanning the archived mode (initializing the loading of persistent data)
            加载保存数据，用于扫描存档模式（初始化加载持久化数据）
            </summary>
            <param name="value">Data to be archive
            待存档数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnlyPersistenceNode`1.SaveSendOnly(`0)">
            <summary>
            Data archiving (The server does not respond)
            数据存档（服务端不响应）
            </summary>
            <param name="value">Data to be archive
            待存档数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNode`1">
            <summary>
            Archive-only data node interface (It is used for the rapid archiving of large amounts of concurrent data without modifying memory data or defining snapshot operations)
            仅存档数据节点接口（用于大量并发数据快速存档，不修改内存数据，也不定义快照操作）
            </summary>
            <typeparam name="T">Archive data type
            存档数据类型</typeparam>
            <summary>
            Archive-only data node interface (It is used for the rapid archiving of large amounts of concurrent data without modifying memory data or defining snapshot operations) 
                       仅存档数据节点接口（用于大量并发数据快速存档，不修改内存数据，也不定义快照操作）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNode`1.SaveLoadPersistence(`0)">
            <summary>
            Load the archived data for scanning the archived mode (initializing the loading of persistent data)
            加载存档数据，用于扫描存档模式（初始化加载持久化数据）
            </summary>
            <param name="value">Data to be archive
            待存档数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNode`1.Save(`0)">
            <summary>
            Data archiving
            数据存档
            </summary>
            <param name="value">Data to be archive
            待存档数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNode`1.SaveSendOnlyLoadPersistence(`0)">
            <summary>
            Load the archived data for scanning the archived mode (initializing the loading of persistent data)
            加载保存数据，用于扫描存档模式（初始化加载持久化数据）
            </summary>
            <param name="value">Data to be archive
            待存档数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNode`1.SaveSendOnly(`0)">
            <summary>
            Data archiving (The server does not respond)
            数据存档（服务端不响应）
            </summary>
            <param name="value">Data to be archive
            待存档数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CommandListenerSwitchProcess">
            <summary>
            命令服务切换进程
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CommandListenerSwitchProcess.commandListener">
            <summary>
            命令服务端监听
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CommandListenerSwitchProcess.startErrorMessage">
            <summary>
            服务启动失败输出错误信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CommandListenerSwitchProcess.#ctor(System.String[])">
            <summary>
            命令服务切换进程
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CommandListenerSwitchProcess.onStart">
            <summary>
            开始运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CommandListenerSwitchProcess.createCommandListener">
            <summary>
            创建命令服务端监听
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CommandListenerSwitchProcess.onExit">
            <summary>
            退出运行
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterContext">
            <summary>
            请求参数反序列化上下文
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterContext.socket">
            <summary>
            Command server socket
            命令服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterContext.controller">
            <summary>
            Command service controller
            命令服务控制器
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterContext.service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterContext.#ctor(AutoCSer.Net.CommandServerSocket)">
            <summary>
            请求参数反序列化上下文
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterContext.GetService(System.Object)">
            <summary>
            获取日志流持久化内存数据库服务
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterContext.GetService(AutoCSer.BinaryDeserializer)">
            <summary>
            获取日志流持久化内存数据库服务
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreatingNodeInfo">
            <summary>
            创建节点信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreatingNodeInfo.nodeInfo">
            <summary>
            服务端节点信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreatingNodeInfo.Index">
            <summary>
            节点索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreatingNodeInfo.#ctor(System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建节点信息
            </summary>
            <param name="index"></param>
            <param name="nodeInfo"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreatingNodeInfo.Check(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            检查节点信息是否匹配
            </summary>
            <param name="nodeInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese">
            <summary>
            扩展中文配置
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServerNodeCreateFailed(System.Type)">
            <summary>
            服务端节点创建失败
            </summary>
            <param name="type">服务端节点接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServerSnapshotNodeNotImplemented(System.Type)">
            <summary>
            服务端节点类型未实现快照接口
            </summary>
            <param name="type">服务端节点类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServiceLoaderFailed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.String,System.Int64,System.Int32)">
            <summary>
            内存数据库初始化加载数据失败
            </summary>
            <param name="state">错误状态</param>
            <param name="fileName">加载的持久化文件名称</param>
            <param name="position">当前数据块所在持久化流中的位置</param>
            <param name="bufferIndex">当前数据块内索引位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServiceLoaderFailed(System.String,System.Int64,System.Int32)">
            <summary>
            内存数据库初始化加载数据失败
            </summary>
            <param name="fileName">加载的持久化文件名称</param>
            <param name="position">当前数据块所在持久化流中的位置</param>
            <param name="bufferIndex">当前数据块内索引位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServiceLoaderExceptionPositionFileSizeUnrecognized(System.String,System.Int64)">
            <summary>
            持久化回调异常位置文件长度不可识别
            </summary>
            <param name="fileName">持久化回调异常位置文件名称</param>
            <param name="unreadSize">未读数据字节数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServiceLoaderExceptionPositionRebuildPositionNotMatch(System.String,System.UInt64,System.UInt64)">
            <summary>
            持久化回调异常位置文件重建索引位置与数据库文件位置不匹配
            </summary>
            <param name="fileName">持久化回调异常位置文件名称</param>
            <param name="rebuildPosition">持久化流重建起始位置</param>
            <param name="databaseRebuildPosition">内存数据库持久化流重建起始位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServiceLoaderExceptionPositionFileHeaderNotMatch(System.String)">
            <summary>
            持久化回调异常位置文件头部识别失败
            </summary>
            <param name="fileName">持久化回调异常位置文件名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServiceLoaderExceptionPositionFileHeaderSizeNotMatch(System.String,System.Int32,System.Int32)">
            <summary>
            持久化回调异常位置文件头部数据不足
            </summary>
            <param name="fileName">持久化回调异常位置文件名称</param>
            <param name="unreadSize">文件未读数据字节数量</param>
            <param name="fileHeadSize">文件头部需求字节数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServiceLoaderFileHeaderNotMatch(System.String)">
            <summary>
            持久化文件头部识别失败
            </summary>
            <param name="fileName">持久化文件名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetServiceLoaderFileVersionNotSupported(System.String,System.Byte)">
            <summary>
            持久化文件头部版本号不被支持
            </summary>
            <param name="fileName">持久化文件名称</param>
            <param name="verison">内存数据库版本号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetNotFoundPersistenceFile(System.String)">
            <summary>
            持久化文件缺失
            </summary>
            <param name="fileName">持久化文件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetNotFoundExceptionPositionFile(System.String)">
            <summary>
            持久化回调异常位置文件缺失
            </summary>
            <param name="fileName">持久化回调异常位置文件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetClientNodeCreatorException(System.Type,System.Type)">
            <summary>
            内存数据库创建客户端节点异常信息
            </summary>
            <param name="clientType">客户端节点接口类型</param>
            <param name="serverType">服务端节点接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetClientNodeCreatorNotMatchType(System.Type)">
            <summary>
            客户端节点没有找到匹配的服务端节点接口类型
            </summary>
            <param name="type">客户端节点接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetClientNodeCreatorWarning(System.Type,System.String[])">
            <summary>
            节点客户端生成警告信息
            </summary>
            <param name="type">客户端节点接口类型</param>
            <param name="messages">节点构造提示信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetGuardProcessStartFailed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            守护的新进程启动失败
            </summary>
            <param name="process">退出的进程信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.GetCommandListenerStartFailed(AutoCSer.Net.CommandListener)">
            <summary>
            服务启动失败
            </summary>
            <param name="listener">命令服务端监听</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Chinese.Default">
            <summary>
            默认扩展中文配置
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration">
            <summary>
            扩展系统语言文化配置
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServerNodeCreateFailed(System.Type)">
            <summary>
            服务端节点创建失败
            </summary>
            <param name="type">服务端节点接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServerSnapshotNodeNotImplemented(System.Type)">
            <summary>
            服务端节点类型未实现快照接口
            </summary>
            <param name="type">服务端节点类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServiceLoaderFailed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.String,System.Int64,System.Int32)">
            <summary>
            内存数据库初始化加载数据失败
            </summary>
            <param name="state">错误状态</param>
            <param name="fileName">加载的持久化文件名称</param>
            <param name="position">当前数据块所在持久化流中的位置</param>
            <param name="bufferIndex">当前数据块内索引位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServiceLoaderFailed(System.String,System.Int64,System.Int32)">
            <summary>
            内存数据库初始化加载数据失败
            </summary>
            <param name="fileName">加载的持久化文件名称</param>
            <param name="position">当前数据块所在持久化流中的位置</param>
            <param name="bufferIndex">当前数据块内索引位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServiceLoaderExceptionPositionFileSizeUnrecognized(System.String,System.Int64)">
            <summary>
            持久化回调异常位置文件长度不可识别
            </summary>
            <param name="fileName">持久化回调异常位置文件名称</param>
            <param name="unreadSize">未读数据字节数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServiceLoaderExceptionPositionRebuildPositionNotMatch(System.String,System.UInt64,System.UInt64)">
            <summary>
            持久化回调异常位置文件重建索引位置与数据库文件位置不匹配
            </summary>
            <param name="fileName">持久化回调异常位置文件名称</param>
            <param name="rebuildPosition">持久化流重建起始位置</param>
            <param name="databaseRebuildPosition">内存数据库持久化流重建起始位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServiceLoaderExceptionPositionFileHeaderNotMatch(System.String)">
            <summary>
            持久化回调异常位置文件头部识别失败
            </summary>
            <param name="fileName">持久化回调异常位置文件名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServiceLoaderExceptionPositionFileHeaderSizeNotMatch(System.String,System.Int32,System.Int32)">
            <summary>
            持久化回调异常位置文件头部数据不足
            </summary>
            <param name="fileName">持久化回调异常位置文件名称</param>
            <param name="unreadSize">文件未读数据字节数量</param>
            <param name="fileHeadSize">文件头部需求字节数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServiceLoaderFileHeaderNotMatch(System.String)">
            <summary>
            持久化文件头部识别失败
            </summary>
            <param name="fileName">持久化文件名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetServiceLoaderFileVersionNotSupported(System.String,System.Byte)">
            <summary>
            持久化文件头部版本号不被支持
            </summary>
            <param name="fileName">持久化文件名称</param>
            <param name="verison">内存数据库版本号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetNotFoundPersistenceFile(System.String)">
            <summary>
            持久化文件缺失
            </summary>
            <param name="fileName">持久化文件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetNotFoundExceptionPositionFile(System.String)">
            <summary>
            持久化回调异常位置文件缺失
            </summary>
            <param name="fileName">持久化回调异常位置文件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetClientNodeCreatorException(System.Type,System.Type)">
            <summary>
            内存数据库创建客户端节点异常信息
            </summary>
            <param name="clientType">客户端节点接口类型</param>
            <param name="serverType">服务端节点接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetClientNodeCreatorNotMatchType(System.Type)">
            <summary>
            客户端节点没有找到匹配的服务端节点接口类型
            </summary>
            <param name="type">客户端节点接口类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetClientNodeCreatorWarning(System.Type,System.String[])">
            <summary>
            节点客户端生成警告信息
            </summary>
            <param name="type">客户端节点接口类型</param>
            <param name="messages">节点构造提示信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetGuardProcessStartFailed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            守护的新进程启动失败
            </summary>
            <param name="process">退出的进程信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.GetCommandListenerStartFailed(AutoCSer.Net.CommandListener)">
            <summary>
            服务启动失败
            </summary>
            <param name="listener">命令服务端监听</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.Configuration.Default">
            <summary>
            默认扩展系统语言文化配置
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English">
            <summary>
            Extended English configuration
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServerNodeCreateFailed(System.Type)">
            <summary>
            Failed to create a server node
            </summary>
            <param name="type">Server node interface type</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServerSnapshotNodeNotImplemented(System.Type)">
            <summary>
            Server node type The snapshot interface is not implemented
            </summary>
            <param name="type">Server node type</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServiceLoaderFailed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.String,System.Int64,System.Int32)">
            <summary>
            Failed to load data during memory database initialization
            </summary>
            <param name="state">Error state</param>
            <param name="fileName">The name of the loaded persistent file</param>
            <param name="position">The location of the current data block in the persistent flow</param>
            <param name="bufferIndex">Index position in the current data block</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServiceLoaderFailed(System.String,System.Int64,System.Int32)">
            <summary>
            Failed to load data during memory database initialization
            </summary>
            <param name="fileName">The name of the loaded persistent file</param>
            <param name="position">The location of the current data block in the persistent flow</param>
            <param name="bufferIndex">Index position in the current data block</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServiceLoaderExceptionPositionFileSizeUnrecognized(System.String,System.Int64)">
            <summary>
            Persistent callback exception location File length unrecognized
            </summary>
            <param name="fileName">Persistent callback exception location File name</param>
            <param name="unreadSize">Number of unread data bytes</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServiceLoaderExceptionPositionRebuildPositionNotMatch(System.String,System.UInt64,System.UInt64)">
            <summary>
            Persistent callback exception location The file rebuild index location does not match the database file location
            </summary>
            <param name="fileName">Persistent callback exception location File name</param>
            <param name="rebuildPosition">The start location of the persistent stream rebuild</param>
            <param name="databaseRebuildPosition">The start location of the in-memory database persistent stream rebuild</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServiceLoaderExceptionPositionFileHeaderNotMatch(System.String)">
            <summary>
            Persistent callback Abnormal location File header identification failed
            </summary>
            <param name="fileName">Persistent callback exception location File name</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServiceLoaderExceptionPositionFileHeaderSizeNotMatch(System.String,System.Int32,System.Int32)">
            <summary>
            Persistent callback Abnormal location File header data is insufficient
            </summary>
            <param name="fileName">Persistent callback exception location File name</param>
            <param name="unreadSize">Number of unread bytes of the file</param>
            <param name="fileHeadSize">The required number of bytes in the file header</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServiceLoaderFileHeaderNotMatch(System.String)">
            <summary>
            Description Failed to identify the persistent file header
            </summary>
            <param name="fileName">Persistent file name</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetServiceLoaderFileVersionNotSupported(System.String,System.Byte)">
            <summary>
            Persistent file header version number is not supported
            </summary>
            <param name="fileName">Persistent file name</param>
            <param name="verison">Memory database version number</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetNotFoundPersistenceFile(System.String)">
            <summary>
            Persistent file is missing
            </summary>
            <param name="fileName">Persistent File name</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetNotFoundExceptionPositionFile(System.String)">
            <summary>
            Persistent callback exception location file is missing
            </summary>
            <param name="fileName">Persistent callback exception location File name</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetClientNodeCreatorException(System.Type,System.Type)">
            <summary>
            Memory database creation client node exception information
            </summary>
            <param name="clientType">Type of the client node interface</param>
            <param name="serverType">Server node interface type</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetClientNodeCreatorNotMatchType(System.Type)">
            <summary>
            The client node did not find a matching server node interface type
            </summary>
            <param name="type">Type of the client node interface</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetClientNodeCreatorWarning(System.Type,System.String[])">
            <summary>
            The node client generates a warning message
            </summary>
            <param name="type">Type of the client node interface</param>
            <param name="messages">Node construction prompts</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetGuardProcessStartFailed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            The new daemon process failed to start
            </summary>
            <param name="process">Information about the exiting process</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.GetCommandListenerStartFailed(AutoCSer.Net.CommandListener)">
            <summary>
            Service startup failed
            </summary>
            <param name="listener">Command server to listen</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Culture.English.Default">
            <summary>
            Default Extended English configuration
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Extensions.EnumerableExtension">
            <summary>
            集合相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Extensions.EnumerableExtension.Cast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            类型转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1">
            <summary>
            await ResponseValueResult{T}, which returns JSON serialized data
            await ResponseValueResult{T}，返回 JSON 序列化数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.command">
            <summary>
            The return value command
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.value">
            <summary>
            Return data
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.#ctor">
            <summary>
            Return the JSON serialized data
            返回 JSON 序列化数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Set the return parameters
            设置返回参数
            </summary>
            <param name="responseParameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.onCompleted">
            <summary>
            The asynchronous operation has been completed
            异步操作已完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.Wait">
            <summary>
            Wait for the command call to return the result
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.GetResult">
            <summary>
            Get the result of the command call
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.JsonResponseParameterAwaiter`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseDeserializeValue`1">
            <summary>
            反序列化对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseDeserializeValue`1.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseDeserializeValue`1.#ctor(`0)">
            <summary>
            反序列化对象
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseDeserializeValue`1.GetValue(System.Object)">
            <summary>
            获取反序列化对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter">
            <summary>
            The return parameters of the keep callback
            保持回调的返回参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.State">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.flag">
            <summary>
            Server-side node method flags
            服务端节点方法标记
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.Serializer">
            <summary>
            Return parameter serialization
            返回参数序列化
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.DeserializeValue">
            <summary>
            Deserialization operation object
            反序列化操作对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            The return parameters of the keep callback
            保持回调的返回参数
            </summary>
            <param name="state">Call status
            调用状态</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            The return parameters of the keep callback
            保持回调的返回参数
            </summary>
            <param name="serializer">Return parameter serialization
            返回参数序列化</param>
            <param name="flag">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#KeepCallbackResponseParameter}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#KeepCallbackResponseParameter}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.Create``1(``0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Create the return parameters
            创建返回参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.CreateValues``1(System.Collections.Generic.IEnumerable{``0},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Create the return parameters
            创建返回参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter.EmptyKeepCallback">
            <summary>
            Empty callback
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameterBinarySerializer`1">
            <summary>
            Keep callback return parameter binary deserialization
            保持回调返回参数二进制反序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameterBinarySerializer`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameterBinarySerializer`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
            <returns>Target object</returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameterBinarySerializer`1.Default">
            <summary>
            Default deserialization
            默认反序列化
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameterSimpleSerializer`1">
            <summary>
            Keep callback return parameters simply deserialized
            保持回调返回参数简单反序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameterSimpleSerializer`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameterSimpleSerializer`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
            <returns>Target object</returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameterSimpleSerializer`1.Default">
            <summary>
            Default deserialization
            默认反序列化
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.SnapshotCloneObjectGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.SnapshotCloneObjectGenericType.CreateSnapshotCloneNode(System.Object)">
            <summary>
            快照接口节点
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.SnapshotCloneObjectGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.SnapshotCloneObjectGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.SnapshotCloneObjectGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.SnapshotCloneObjectGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.SnapshotCloneObjectGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.SnapshotCloneObjectGenericType`1.CreateSnapshotCloneNode(System.Object)">
            <summary>
            快照接口节点
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2.CreateSearchTreeDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建二叉搜索树字典 ISearchTreeDictionaryNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2.CreateSortedDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a sorting dictionary node ISortedDictionaryNode{KT,T}
            创建排序字典节点 ISortedDictionaryNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2.CreateSortedListNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a sorting list node ISortedListNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2`2.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2`2.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2`2.CreateSearchTreeDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建二叉搜索树字典 ISearchTreeDictionaryNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2`2.CreateSortedDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a sorting dictionary node ISortedDictionaryNode{KT,T}
            创建排序字典节点 ISortedDictionaryNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType2`2.CreateSortedListNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a sorting list node ISortedListNode{KT,T}
            创建排序列表节点 ISortedListNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType.CreateSearchTreeSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a binary search tree collection node ISearchTreeSetNode{KT}
            创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType.CreateSortedSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create sorted collection node ISortedSetNode{KT}
            创建排序集合节点 ISortedSetNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType`1.CreateSearchTreeSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a binary search tree collection node ISearchTreeSetNode{KT}
            创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.ComparableGenericType`1.CreateSortedSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create sorted collection node ISortedSetNode{KT}
            创建排序集合节点 ISortedSetNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2.CreateFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a dictionary node IFragmentDictionaryNode{KT,T}
            创建字典节点 IFragmentDictionaryNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2.CreateDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IDictionaryNode{KT,T}
            创建字典节点 IDictionaryNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">The number of binary bits
            二进制位数量</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2.create``2">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2.Get(System.Type,System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2`2">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2`2.CurrentType1">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2`2.CurrentType2">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2`2.CreateFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a dictionary node IFragmentDictionaryNode{KT,T}
            创建字典节点 IFragmentDictionaryNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType2`2.CreateDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IDictionaryNode{KT,T}
            创建字典节点 IDictionaryNode{KT,T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType.CreateDistributedLockNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create distributed lock nodes IDistributedLockNode{KT}
            创建分布式锁节点 IDistributedLockNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType.CreateByteArrayFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a dictionary node IByteArrayFragmentDictionaryNode{KT}
            创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType.CreateByteArrayDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IByteArrayDictionaryNode{KT}
            创建字典节点 IByteArrayDictionaryNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType.CreateFragmentHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a 256 base fragment hash table node IFragmentHashSetNode{KT}
            创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType.CreateHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a hash table node IHashSetNode{KT}
            创建哈希表节点 IHashSetNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType`1.CreateDistributedLockNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create distributed lock nodes IDistributedLockNode{KT}
            创建分布式锁节点 IDistributedLockNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType`1.CreateByteArrayFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a dictionary node IByteArrayFragmentDictionaryNode{KT}
            创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType`1.CreateByteArrayDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IByteArrayDictionaryNode{KT}
            创建字典节点 IByteArrayDictionaryNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType`1.CreateFragmentHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a 256 base fragment hash table node IFragmentHashSetNode{KT}
            创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.EquatableGenericType`1.CreateHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a hash table node IHashSetNode{KT}
            创建哈希表节点 IHashSetNode{KT}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientCallInputDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientCallInputWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientCallInputCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientCallInputWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientCallInputOutputResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientCallInputOutputWriteResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientCallInputOutputCommandResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientCallInputOutputWriteCommandResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientInputKeepCallbackResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientInputKeepCallbackWriteResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientInputKeepCallbackCommandResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientInputKeepCallbackWriteCommandResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientSimpleSerializeCallInputDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientSimpleSerializeCallInputWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientSimpleSerializeCallInputCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientSimpleSerializeCallInputWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientSendOnlyDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientSendOnlyWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientSimpleSerializeSendOnlyDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.StreamPersistenceMemoryDatabaseClientSimpleSerializeSendOnlyWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.MethodParameterCreatorCreateCallInputMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.MethodParameterCreatorCreateCallInputOutputMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.MethodParameterCreatorCreateCallInputOutputCallbackMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.MethodParameterCreatorCreateSendOnlyMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.MethodParameterCreatorCreateInputKeepCallbackMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.LocalServiceCallInputNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.LocalServiceCallbackInputNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.LocalServiceSendOnlyNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientCallInputDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientCallInputWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientCallInputCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientCallInputWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientCallInputOutputResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientCallInputOutputWriteResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientCallInputOutputCommandResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientCallInputOutputWriteCommandResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientInputKeepCallbackResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientInputKeepCallbackWriteResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientInputKeepCallbackCommandResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientInputKeepCallbackWriteCommandResponseParameterDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientSimpleSerializeCallInputDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientSimpleSerializeCallInputWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientSimpleSerializeCallInputCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientSimpleSerializeCallInputWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientSendOnlyDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientSendOnlyWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientSimpleSerializeSendOnlyDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.StreamPersistenceMemoryDatabaseClientSimpleSerializeSendOnlyWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.MethodParameterCreatorCreateCallInputMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.MethodParameterCreatorCreateCallInputOutputMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.MethodParameterCreatorCreateCallInputOutputCallbackMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.MethodParameterCreatorCreateSendOnlyMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.MethodParameterCreatorCreateInputKeepCallbackMethodParameterDelegate">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.LocalServiceCallInputNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.LocalServiceCallbackInputNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.StructGenericType`1.LocalServiceSendOnlyNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType">
            <summary>
            泛型类型元数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientCallOutputDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientCallOutputWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientCallOutputCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientCallOutputWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientKeepCallbackDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientKeepCallbackWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientKeepCallbackCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientKeepCallbackWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientSimpleDeserializeCallOutputDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientSimpleDeserializeCallOutputWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientSimpleDeserializeCallOutputCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientSimpleDeserializeCallOutputWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientSimpleDeserializeKeepCallbackDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientSimpleDeserializeKeepCallbackWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientSimpleDeserializeKeepCallbackCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.StreamPersistenceMemoryDatabaseClientSimpleDeserializeKeepCallbackWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateMethodCallbackDelegate">
            <summary>
            创建回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateMethodParameterCallbackDelegate">
            <summary>
            创建回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateMethodKeepCallbackDelegate">
            <summary>
            创建回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateMethodParameterKeepCallbackDelegate">
            <summary>
            创建回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.MethodCallbackGetCallbackDelegate">
            <summary>
            获取服务接口回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.AppendRepairNodeMethodLoader">
            <summary>
            添加待加载修复方法节点
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.LocalServiceCallOutputNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.LocalServiceCallbackOutputNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.LocalServiceKeepCallbackEnumeratorNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.LocalServiceKeepCallbackNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a queue node IQueueNode{T} (First in, first Out)
            创建队列节点（先进先出） IQueueNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a stack node IStackNode{T} (Last in, first out)
            创建栈节点（后进先出） IStackNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateLeftArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a array node ILeftArrayNode{T}
            创建数组节点 ILeftArrayNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a array node IArrayNode{T}
            创建数组节点 IArrayNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="length">Array length</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateOnlyPersistenceNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create an archive node only IOnlyPersistenceNode{T}
            创建仅存档节点 IOnlyPersistenceNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateSnapshotNode(System.Object)">
            <summary>
            快照接口节点
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.CreateEnumerableSnapshotNode(System.Object)">
            <summary>
            快照接口节点
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.create``1">
            <summary>
            创建泛型类型元数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.lastGenericType">
            <summary>
            最后一次访问的泛型类型元数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType.Get(System.Type)">
            <summary>
            获取泛型类型元数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1">
            <summary>
            泛型代理
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CurrentType">
            <summary>
            获取当前泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientCallOutputDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientCallOutputWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientCallOutputCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientCallOutputWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientKeepCallbackDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientKeepCallbackWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientKeepCallbackCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientKeepCallbackWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientSimpleDeserializeCallOutputDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientSimpleDeserializeCallOutputWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientSimpleDeserializeCallOutputCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientSimpleDeserializeCallOutputWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientSimpleDeserializeKeepCallbackDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientSimpleDeserializeKeepCallbackWriteDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientSimpleDeserializeKeepCallbackCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.StreamPersistenceMemoryDatabaseClientSimpleDeserializeKeepCallbackWriteCommandDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateMethodCallbackDelegate">
            <summary>
            创建回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateMethodParameterCallbackDelegate">
            <summary>
            创建回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateMethodKeepCallbackDelegate">
            <summary>
            创建回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateMethodParameterKeepCallbackDelegate">
            <summary>
            创建回调对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.MethodCallbackGetCallbackDelegate">
            <summary>
            获取服务接口回调委托
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.AppendRepairNodeMethodLoader">
            <summary>
            添加待加载修复方法节点
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.LocalServiceCallOutputNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.LocalServiceCallbackOutputNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.LocalServiceKeepCallbackEnumeratorNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.LocalServiceKeepCallbackNodeCreateDelegate">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a queue node IQueueNode{T} (First in, first Out)
            创建队列节点（先进先出） IQueueNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a stack node IStackNode{T} (Last in, first out)
            创建栈节点（后进先出） IStackNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateLeftArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a array node ILeftArrayNode{T}
            创建数组节点 ILeftArrayNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a array node IArrayNode{T}
            创建数组节点 IArrayNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="length">Array length</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateOnlyPersistenceNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create an archive node only IOnlyPersistenceNode{T}
            创建仅存档节点 IOnlyPersistenceNode{T}
            </summary>
            <param name="node"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateSnapshotNode(System.Object)">
            <summary>
            快照接口节点
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Metadata.GenericType`1.CreateEnumerableSnapshotNode(System.Object)">
            <summary>
            快照接口节点
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum">
            <summary>
            Server-side node method flags
            服务端节点方法标记
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum.None">
            <summary>
            No flag
            无标记
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum.IsPersistence">
            <summary>
            Whether to persist (persistence is required if write operations are involved)
            是否持久化（涉及写入操作则需要持久化）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum.IsClientCall">
            <summary>
            Whether the client is allowed to call it or not, otherwise it is a server memory call method
            是否允许客户端调用，否则为服务端内存调用方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum.IsSimpleSerializeParamter">
            <summary>
            Whether to simply serialize the output data
            是否简单序列化输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum.IsSimpleDeserializeParamter">
            <summary>
            Whether to simply deserialize the input data
            是否简单反序列化输入数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum.IsIgnorePersistenceCallbackException">
            <summary>
            Whether to ignore the persistence callback exception, the node method must ensure that the memory data state is restored when an exception occurs. It must be concerned about the memory shortage exception generated by new, and all new operations should be completed before modifying the data
            是否忽略持久化回调异常，节点方法必须保证异常时还原恢复内存数据状态，必须关心 new 产生的内存不足异常，在修改数据以前应该将完成所有 new 操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum.IsWriteQueue">
            <summary>
            Whether the local call is added to the write operation queue
            本地调用是否添加到写操作队列
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallMethodParameter">
            <summary>
            持久化之前检查参数的调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallMethodParameter.customSessionObject">
            <summary>
            自定义状态对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallMethodParameter.SetBeforePersistenceCustomSessionObject(System.Object)">
            <summary>
            设置自定义状态对象
            </summary>
            <param name="sessionObject">自定义状态对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallMethodParameter.GetBeforePersistenceCustomSessionObject">
            <summary>
            获取自定义状态对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallOutputMethodParameter">
            <summary>
            持久化之前检查参数的调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallOutputMethodParameter.customSessionObject">
            <summary>
            自定义状态对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallOutputMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallOutputMethodParameter.SetBeforePersistenceCustomSessionObject(System.Object)">
            <summary>
            设置自定义状态对象
            </summary>
            <param name="sessionObject">自定义状态对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceCallOutputMethodParameter.GetBeforePersistenceCustomSessionObject">
            <summary>
            获取自定义状态对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceKeepCallbackMethodParameter">
            <summary>
            持久化之前检查参数的调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceKeepCallbackMethodParameter.customSessionObject">
            <summary>
            自定义状态对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceKeepCallbackMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethod,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceKeepCallbackMethodParameter.SetBeforePersistenceCustomSessionObject(System.Object)">
            <summary>
            设置自定义状态对象
            </summary>
            <param name="sessionObject">自定义状态对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceKeepCallbackMethodParameter.GetBeforePersistenceCustomSessionObject">
            <summary>
            获取自定义状态对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceMethodParameter`1">
            <summary>
            持久化之前检查参数的调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceMethodParameter`1.customSessionObject">
            <summary>
            自定义状态对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod,`0)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceMethodParameter`1.SetBeforePersistenceCustomSessionObject(System.Object)">
            <summary>
            设置自定义状态对象
            </summary>
            <param name="sessionObject">自定义状态对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BeforePersistenceMethodParameter`1.GetBeforePersistenceCustomSessionObject">
            <summary>
            获取自定义状态对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="callType">Method call type
            方法调用类型</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod.InputKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter)">
            <summary>
            调用方法
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod.LoadCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter)">
            <summary>
            初始化加载数据
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod`1">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <typeparam name="T">输入参数类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod`1.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod`1.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="callType">Method call type
            方法调用类型</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod`1.CreateInputParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.Method">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.callback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.InputKeepCallback(AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter}@)">
            <summary>
            调用方法
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.PersistenceCallback">
            <summary>
            持久化回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.CreateBeforePersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            创建持久化检查方法调用参数
            </summary>
            <param name="beforePersistenceMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.enumerableCallback``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            枚举回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.EnumerableCallback``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            枚举回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodParameter"></param>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter.CreateMethodKeepCallback``1">
            <summary>
            创建方法调用回调包装对象
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1">
            <summary>
            调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1.Parameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethod)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32,`0@)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1.Deserialize(AutoCSer.BinaryDeserializer,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            输入参数反序列化（初始化加载持久化数据）
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1.PersistenceSerialize(AutoCSer.BinarySerializer)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1.CreateBeforePersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            创建持久化检查方法调用参数
            </summary>
            <param name="beforePersistenceMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter`1.GetParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter{`0})">
            <summary>
            获取输入参数
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="callType">Method call type
            方法调用类型</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethod.KeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter}@)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethod.LoadCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            初始化加载数据
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethod.EnumerableCallback``1(System.Collections.Generic.IEnumerable{``0},AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter}@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            枚举回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="callback"></param>
            <param name="flag">服务端节点方法标记</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethodParameter.method">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethodParameter.callback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethod,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethodParameter.PersistenceCallback">
            <summary>
            持久化回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethodParameter.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackMethodParameter.PersistenceSerialize(AutoCSer.BinarySerializer)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterPersistenceCallback">
            <summary>
            非持久化回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterPersistenceCallback.methodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterPersistenceCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter)">
            <summary>
            非持久化回调
            </summary>
            <param name="methodParameter">调用方法与参数信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterPersistenceCallback.RunTask">
            <summary>
            非持久化回调
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod.SendOnly(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter)">
            <summary>
            调用方法
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod.LoadCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter)">
            <summary>
            初始化加载数据
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod`1">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <typeparam name="T">输入参数类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod`1.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod`1.CreateInputParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex.FreeIdentity">
            <summary>
            空闲节点标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex.Index">
            <summary>
            节点索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex.Identity">
            <summary>
            节点标识
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex.#ctor(System.Int32,System.UInt32)">
            <summary>
            Node index information
            节点索引信息
            </summary>
            <param name="index"></param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Error call state
            错误调用状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex.GetFree">
            <summary>
            获取节点空闲标记
            </summary>
            <returns>是否空闲节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex.GetState">
            <summary>
            获取调用状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex.Equals(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            判断是否一致
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo">
            <summary>
            Server-side node information
            服务端节点信息 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo.RemoteType">
            <summary>
            Server node interface type
            服务端节点接口类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo.#ctor(System.Type)">
            <summary>
            Server-side node information
            服务端节点信息
            </summary>
            <param name="type">Server node interface type
            服务端节点接口类型</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.MethodIndexEnumTypePath">
            <summary>
            生成方法序号映射枚举类型代码相对路径
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.CallType">
            <summary>
            Method call type
            方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.#ctor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.setCallType">
            <summary>
            设置方法调用类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.checkParameter">
            <summary>
            参数检查
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.SetError(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.String)">
            <summary>
            设置错误信息
            </summary>
            <param name="state"></param>
            <param name="error"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.Equals(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeMethod.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1">
            <summary>
            数组节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.array">
            <summary>
            数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.#ctor(System.Int32)">
            <summary>
            数组节点
            </summary>
            <param name="length">Array length</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.GetSnapshotResult(AutoCSer.KeyValue{System.Int32,`0}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.SetSnapshotResult(AutoCSer.LeftArray{AutoCSer.KeyValue{System.Int32,`0}}@,AutoCSer.LeftArray{AutoCSer.KeyValue{System.Int32,`0}}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.SnapshotSet(AutoCSer.KeyValue{System.Int32,`0})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.ClearArray">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.checkRange(System.Int32,System.Int32)">
            <summary>
            检查索引范围
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clear the data at the specified location
            清除指定位置数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Clear data quantity
            清除数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.GetLength">
            <summary>
            Get the array length
            获取数组长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.GetValue(System.Int32)">
            <summary>
            Get data based on index location
            根据索引位置获取数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <returns>If the return exceeds the index, there will be no return value
            超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.SetValue(System.Int32,`0)">
            <summary>
            Set the data according to the index position
            根据索引位置设置数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.GetValueSet(System.Int32,`0)">
            <summary>
            Set the data according to the index position and return the data before the setting
            根据索引位置设置数据并返回设置之前的数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <param name="value">data</param>
            <returns>Set the previous data. If it exceeds the index and returns, there will be no return value
            设置之前的数据，超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.FillArray(`0)">
            <summary>
            Fill the entire array with data
            用数据填充整个数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.Fill(`0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position
            用数据填充数组指定位置
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The number of filled data
            填充数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.IndexOfArray(`0)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Search for the number of matching data
            查找匹配数据数量</param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.LastIndexOfArray(`0)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">The last matching position (the starting position)
            最后一个匹配位置（起始位置）</param>
            <param name="count">Search for the number of matching data
            查找匹配数据数量</param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.ReverseArray">
            <summary>
            Reverse the entire array data
            反转整个数组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the array data at the specified position
            反转指定位置数组数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Reverse the amount of data
            反转数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.SortArray">
            <summary>
            Array sorting
            数组排序
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ArrayNode`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sort the array data at the specified position
            排序指定位置数组数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The quantity of data to be sorted
            排序数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode">
            <summary>
            位图节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.map">
            <summary>
            位图
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.capacity">
            <summary>
            二进制位数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.#ctor(System.UInt32)">
            <summary>
            位图节点
            </summary>
            <param name="capacity">The number of binary bits
            二进制位数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.GetSnapshotResult(System.Byte[][],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.SetSnapshotResult(AutoCSer.LeftArray{System.Byte[]}@,AutoCSer.LeftArray{System.Byte[]}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.SnapshotSet(System.Byte[])">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="map">位图</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.GetCapacity">
            <summary>
            Get the number of bitmap binary bits
            获取位图二进制位数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.ClearMap">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.GetBit(System.UInt32)">
            <summary>
            Read bit status
            读取位状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>A non-0 indicates that the binary bit is in the set state. If the index exceeds, there will be no return value
            非 0 表示二进制位为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.SetBit(System.UInt32)">
            <summary>
            Set bit status
            设置位状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Returning false indicates that the index is out of range
            返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.GetBitSetBit(System.UInt32)">
            <summary>
            Set the bit state and return the state before setting
            设置位状态并返回设置之前的状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>The state before setting: A non-0 indicates that the binary bit was in the set state before, and there is no return value if the index exceeds
            设置之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.ClearBit(System.UInt32)">
            <summary>
            Clear bit status
            清除位状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Returning false indicates that the index is out of range
            返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.GetBitClearBit(System.UInt32)">
            <summary>
            Clear the bit state and return to the state before setting
            清除位状态并返回设置之前的状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Clear the state before the operation. A non-0 state indicates that the binary bit was in the set state before. If the index exceeds, there will be no return value
            清除操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.InvertBit(System.UInt32)">
            <summary>
            Reverse the bit state
            位状态取反
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Returning false indicates that the index is out of range
            返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNode.GetBitInvertBit(System.UInt32)">
            <summary>
            Reverse the bit state and return the state before the operation
            状态取反并返回操作之前的状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Take the state before the reverse operation. If it is not 0, it indicates that the binary bit is in the set state before. If the index exceeds, there will be no return value
            取反操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter">
            <summary>
            位图客户端节点返回值类型转换 await ResponseResult{bool}
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.awaiter">
            <summary>
            返回参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{System.Int32}})">
            <summary>
            位图客户端节点返回值类型转换 await ResponseResult{bool}
            </summary>
            <param name="awaiter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.Wait">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.GetResult">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.GetAwaiter">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.onCompleted">
            <summary>
            设置错误结果并尝试回调操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{System.Int32}})~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BitmapNodeResponseAwaiter">
            <summary>
            隐式类型转换
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutMessageCallback`1">
            <summary>
            执行任务消息数据回调
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutMessageCallback`1.messageNode">
            <summary>
            超时任务消息节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutMessageCallback`1.message">
            <summary>
            执行任务消息数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutMessageCallback`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode{`0},`0)">
            <summary>
            执行任务消息数据回调
            </summary>
            <param name="messageNode"></param>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutMessageCallback`1.RunTask">
            <summary>
            回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.CheckTimer`1">
            <summary>
            超时检查定时
            </summary>
            <typeparam name="T">Task message data type
            任务消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.CheckTimer`1.messageNode">
            <summary>
            超时任务消息节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.CheckTimer`1.#ctor">
            <summary>
            超时检查定时
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.CheckTimer`1.OnTimer">
            <summary>
            定时器触发
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.CheckTimer`1.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode{`0})">
            <summary>
            设置超时任务消息节点
            </summary>
            <param name="messageNode"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.CheckTimer`1.Cancel">
            <summary>
            取消定时
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutCallback`1">
            <summary>
            超时检查队列回调
            </summary>
            <typeparam name="T">Task message data type
            任务消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutCallback`1.messageNode">
            <summary>
            超时任务消息节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutCallback`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode{`0})">
            <summary>
            超时检查队列回调
            </summary>
            <param name="messageNode"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage.TimeoutCallback`1.RunTask">
            <summary>
            回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageRunTaskTypeEnum">
            <summary>
            Run task type
            运行任务类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageRunTaskTypeEnum.ClientCall">
            <summary>
            The client initiates the task actively
            客户端主动启动任务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageRunTaskTypeEnum.Timeout">
            <summary>
            Start the task after timeout
            超时启动任务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageRunTaskTypeEnum.RetryFailed">
            <summary>
            Failed task retry
            失败任务重试
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageRunTaskTypeEnum.Loaded">
            <summary>
            The database restarts and retries the unfinished task
            数据库重启重试未完成任务
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1">
            <summary>
            Timeout task message node interface (for distributed transaction data consistency check)
            超时任务消息节点接口（用于分布式事务数据一致性检查）
            </summary>
            <typeparam name="T">Task message data type
            任务消息数据类型</typeparam>
            <summary>
            Timeout task message node interface (for distributed transaction data consistency check) 
                       超时任务消息节点接口（用于分布式事务数据一致性检查）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.SnapshotAdd(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData{`0})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.GetCount">
            <summary>
            Get the total number of tasks
            获取任务总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.GetFailedCount">
            <summary>
            Get the number of failed tasks executed
            获取执行失败任务数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.AppendBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add the task node (Check the input parameters before the persistence operation)
            添加任务节点（持久化操作之前检查输入参数）
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="task"></param>
            <returns>Task identifier. Return 0 upon failure
            任务标识，失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.AppendRunBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add immediate execution tasks (Check the input parameters before the persistence operation)
            添加立即执行任务（持久化操作之前检查输入参数）
            </summary>
            <param name="task"></param>
            <returns>Returning true indicates that a persistence operation is required
            返回 true 表示需要持久化操作</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.AppendRunLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add immediate execution tasks (Initialize and load the persistent data)
            添加立即执行任务（初始化加载持久化数据）
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.AppendRun(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add immediate execution tasks
            添加立即执行任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.RunTaskLoadPersistence(System.Int64)">
            <summary>
            Trigger task execution (Initialize and load the persistent data)
            触发任务执行（初始化加载持久化数据）
            </summary>
            <param name="identity">Task identity
            任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.RunTask(System.Int64)">
            <summary>
            Trigger task execution
            触发任务执行
            </summary>
            <param name="identity">Task identity
            任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.Completed(System.Int64,System.Boolean)">
            <summary>
            Complete the completed task
            完成已任务
            </summary>
            <param name="identity"></param>
            <param name="isSuccess"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.Cancel(System.Int64)">
            <summary>
            Cancel the task
            取消任务
            </summary>
            <param name="identity">Task identity
            任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.RetryFailed">
            <summary>
            Failed task retry
            失败任务重试
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNode`1.GetRunTask(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            Get the execution task message data
            获取执行任务消息数据
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1">
            <summary>
            超时任务消息
            </summary>
            <typeparam name="T">Task message data type
            任务消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1.Data">
            <summary>
            序列化数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1.TaskData">
            <summary>
            任务消息数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1.#ctor">
            <summary>
            超时任务消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData{`0}@)">
            <summary>
            超时任务消息
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1.#ctor(`0)">
            <summary>
            超时任务消息
            </summary>
            <param name="task">任务消息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1.op_Implicit(`0)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1.Timeout(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode{`0})">
            <summary>
            超时启动任务
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage`1.RunTask(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode{`0},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageRunTaskTypeEnum)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="node"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1">
            <summary>
            超时任务消息序列化数据
            </summary>
            <typeparam name="T">Task message data type
            任务消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.Identity">
            <summary>
            任务消息标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.Timeout">
            <summary>
            触发执行任务超时时间
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.Task">
            <summary>
            任务消息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.IsRunTask">
            <summary>
            是否已经启动任务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.IsFailed">
            <summary>
            任务是否执行失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.IsRemoved">
            <summary>
            是否已经删除
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.IsLinkSnapshot">
            <summary>
            是否快照任务链表节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.Set(System.Int64)">
            <summary>
            设置节点当前分配任务标识
            </summary>
            <param name="currentIdentity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.CheckTimeout">
            <summary>
            Timeout check
            超时检查
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.AppendRun(System.Int64)">
            <summary>
            Add immediate execution tasks
            添加立即执行任务
            </summary>
            <param name="currentIdentity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.CheckRunTask">
            <summary>
            判断是否需要启动任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.CheckLoadRunTask">
            <summary>
            判断初始化加载数据是否需要启动任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.CheckLinkSnapshot">
            <summary>
            判断是否快照任务链表节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.Failed">
            <summary>
            任务执行失败
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData`1.Cancel">
            <summary>
            Cancel the task
            取消任务
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1">
            <summary>
            超时任务消息节点（用于分布式事务数据一致性检查）
            </summary>
            <typeparam name="T">Task message data type
            任务消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.timeoutTicks">
            <summary>
            任务超时执行时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.tasks">
            <summary>
            任务集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.checkTimer">
            <summary>
            超时检查定时
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.taskHead">
            <summary>
            任务链表首节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.taskEnd">
            <summary>
            任务链表尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.currentIdentity">
            <summary>
            当前分配任务标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.isCheckTimeout">
            <summary>
            是否正在检查超时
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.failedCount">
            <summary>
            执行失败任务数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.callbacks">
            <summary>
            获取执行任务消息数据回调集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.#ctor(System.Int32)">
            <summary>
            超时任务消息节点（用于分布式事务数据一致性检查）
            </summary>
            <param name="timeoutSeconds">触发任务执行超时秒数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.StreamPersistenceMemoryDatabaseServiceNodeOnRemoved">
            <summary>
            Processing operations after node removal
            节点移除后的处理操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.StreamPersistenceMemoryDatabaseServiceDisposable">
            <summary>
            Database service shutdown operation
            数据库服务关闭操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.GetSnapshotResult(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData{`0}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.SnapshotAdd(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData{`0})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.appendLink(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            任务添加到队列
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.GetCount">
            <summary>
            Get the total number of tasks
            获取任务总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.GetFailedCount">
            <summary>
            Get the number of failed tasks executed
            获取执行失败任务数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.AppendBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add the task node (Check the input parameters before the persistence operation)
            添加任务节点（持久化操作之前检查输入参数）
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add the task node
            添加任务节点
            </summary>
            <param name="task"></param>
            <returns>Task identifier. Return 0 upon failure
            任务标识，失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.AppendRunBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add immediate execution tasks (Check the input parameters before the persistence operation)
            添加立即执行任务（持久化操作之前检查输入参数）
            </summary>
            <param name="task"></param>
            <returns>Returning true indicates that a persistence operation is required
            返回 true 表示需要持久化操作</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.AppendRunLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add immediate execution tasks (Initialize and load the persistent data)
            添加立即执行任务（初始化加载持久化数据）
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.AppendRun(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add immediate execution tasks
            添加立即执行任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.RunTaskLoadPersistence(System.Int64)">
            <summary>
            Trigger task execution (Initialize and load the persistent data)
            触发任务执行（初始化加载持久化数据）
            </summary>
            <param name="identity">Task identity
            任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.RunTask(System.Int64)">
            <summary>
            Trigger task execution
            触发任务执行
            </summary>
            <param name="identity">Task identity
            任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.RunTask(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageRunTaskTypeEnum)">
            <summary>
            Execute the task
            执行任务
            </summary>
            <param name="task"></param>
            <param name="type"></param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.OnTaskException(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0},System.Exception)">
            <summary>
            执行任务异常处理
            </summary>
            <param name="task"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.Completed(System.Int64,System.Boolean)">
            <summary>
            Complete the completed task
            完成任务
            </summary>
            <param name="identity"></param>
            <param name="isSuccess"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.Cancel(System.Int64)">
            <summary>
            Cancel the task
            取消任务
            </summary>
            <param name="identity">Task identity
            任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.RetryFailed">
            <summary>
            Failed task retry
            失败任务重试
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.GetRunTask(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            Get the execution task message data
            获取执行任务消息数据
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.callback(`0)">
            <summary>
            获取执行任务消息数据回调
            </summary>
            <param name="data">执行任务消息数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.Callback(`0)">
            <summary>
            获取执行任务消息数据回调
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.CheckTimeout">
            <summary>
            消息超时检查
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageNode`1.CheckTimeoutCallback">
            <summary>
            Timeout check
            超时检查
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1">
            <summary>
            Timeout task message node interface (for distributed transaction data consistency check) 
                       超时任务消息节点接口（用于分布式事务数据一致性检查） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add the task node 
                       添加任务节点
            </summary>
            <param name="task"></param>
            <returns>Task identifier. Return 0 upon failure 
                       任务标识，失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1.Cancel(System.Int64)">
            <summary>
            Cancel the task 
                       取消任务
            </summary>
            <param name="identity">Task identity 
                       任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1.GetCount">
            <summary>
            Get the total number of tasks 
                       获取任务总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1.GetFailedCount">
            <summary>
            Get the number of failed tasks executed 
                       获取执行失败任务数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1.RetryFailed">
            <summary>
            Failed task retry 
                       失败任务重试
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1.RunTask(System.Int64)">
            <summary>
            Trigger task execution 
                       触发任务执行
            </summary>
            <param name="identity">Task identity 
                       任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1.AppendRun(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add immediate execution tasks 
                       添加立即执行任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeClientNode`1.GetRunTask(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the execution task message data 
                       获取执行任务消息数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1">
            <summary>
            Timeout task message node interface (for distributed transaction data consistency check) 
                       超时任务消息节点接口（用于分布式事务数据一致性检查） local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add the task node 
                       添加任务节点
            </summary>
            <param name="task"></param>
            <returns>Task identifier. Return 0 upon failure 
                       任务标识，失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1.Cancel(System.Int64)">
            <summary>
            Cancel the task 
                       取消任务
            </summary>
            <param name="identity">Task identity 
                       任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1.GetCount">
            <summary>
            Get the total number of tasks 
                       获取任务总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1.GetFailedCount">
            <summary>
            Get the number of failed tasks executed 
                       获取执行失败任务数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1.RetryFailed">
            <summary>
            Failed task retry 
                       失败任务重试
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1.RunTask(System.Int64)">
            <summary>
            Trigger task execution 
                       触发任务执行
            </summary>
            <param name="identity">Task identity 
                       任务标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1.AppendRun(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{`0})">
            <summary>
            Add immediate execution tasks 
                       添加立即执行任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeLocalClientNode`1.GetRunTask(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}})">
            <summary>
            Get the execution task message data 
                       获取执行任务消息数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum">
            <summary>
            Timeout task message node interface (for distributed transaction data consistency check) 
                       超时任务消息节点接口（用于分布式事务数据一致性检查） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.Append">
            <summary>
            [0] Add the task node 
                       添加任务节点
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{T} task 
            返回值 long Task identifier. Return 0 upon failure 
                       任务标识，失败返回 0
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.AppendBeforePersistence">
            <summary>
            [1] Add the task node (Check the input parameters before the persistence operation) 
                       添加任务节点（持久化操作之前检查输入参数）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{T} task 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{long} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.Cancel">
            <summary>
            [2] Cancel the task 
                       取消任务
            long identity Task identity 
                       任务标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.Completed">
            <summary>
            [3] Complete the completed task 
                       完成已任务
            long identity 
            bool isSuccess 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.GetCount">
            <summary>
            [4] Get the total number of tasks 
                       获取任务总数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.GetFailedCount">
            <summary>
            [5] Get the number of failed tasks executed 
                       获取执行失败任务数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.RetryFailed">
            <summary>
            [6] Failed task retry 
                       失败任务重试
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.RunTask">
            <summary>
            [7] Trigger task execution 
                       触发任务执行
            long identity Task identity 
                       任务标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.RunTaskLoadPersistence">
            <summary>
            [8] Trigger task execution (Initialize and load the persistent data) 
                       触发任务执行（初始化加载持久化数据）
            long identity Task identity 
                       任务标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.SnapshotAdd">
            <summary>
            [9] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessageData{T} value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.AppendRun">
            <summary>
            [10] Add immediate execution tasks 
                       添加立即执行任务
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{T} task 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.AppendRunBeforePersistence">
            <summary>
            [11] Add immediate execution tasks (Check the input parameters before the persistence operation) 
                       添加立即执行任务（持久化操作之前检查输入参数）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{T} task 
            返回值 bool Returning true indicates that a persistence operation is required 
                       返回 true 表示需要持久化操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.AppendRunLoadPersistence">
            <summary>
            [12] Add immediate execution tasks (Initialize and load the persistent data) 
                       添加立即执行任务（初始化加载持久化数据）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.TimeoutMessage{T} task 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CustomNode.ITimeoutMessageNodeMethodEnum.GetRunTask">
            <summary>
            [13] Get the execution task message data 
                       获取执行任务消息数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNode">
            <summary>
            Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers)
            多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器）
            </summary>
            <summary>
            Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
                       多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNode.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="map">Multi-hash bitmap data
            多哈希位图数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNode.GetBit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{System.Int32})">
            <summary>
            Get the operation of setting a new bit
            获取设置新位操作
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNode.GetSize">
            <summary>
            Get the bitmap size (number of bits)
            获取位图大小（位数量）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNode.GetData">
            <summary>
            Get the current bitmap data
            获取当前位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNode.SetBitBeforePersistence(System.Int32)">
            <summary>
            Set bit (Check the input parameters before the persistence operation)
            设置位（持久化操作之前检查输入参数）
            </summary>
            <param name="bit">The set binary bit
            设置的二进制位</param>
            <returns>Returning true indicates that a persistence operation is required
            返回 true 表示需要持久化操作</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNode.SetBit(System.Int32)">
            <summary>
            Set bit
            设置位
            </summary>
            <param name="bit">The set binary bit
            设置的二进制位</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNode">
            <summary>
            Multi-hash bitmap filter node interface (similar to Bloom Filter)
            多哈希位图过滤节点接口（类似布隆过滤器）
            </summary>
            <summary>
            Multi-hash bitmap filter node interface (similar to Bloom Filter) 
                       多哈希位图过滤节点接口（类似布隆过滤器）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNode.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="map">Multi-hash bitmap data
            多哈希位图数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNode.GetSize">
            <summary>
            Get the bitmap size (number of bits)
            获取位图大小（位数量）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNode.SetBitsBeforePersistence(System.Int32,System.UInt32[])">
            <summary>
            Set bit (Check the input parameters before the persistence operation)
            设置位（持久化操作之前检查输入参数）
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="bits">Binary bit set
            位置集合</param>
            <returns>Returning false indicates that the bitmap size does not match
            返回 false 表示位图大小不匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNode.SetBits(System.Int32,System.UInt32[])">
            <summary>
            Set bit
            设置位
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="bits">Binary bit set
            位置集合</param>
            <returns>Returning false indicates that the bitmap size does not match
            返回 false 表示位图大小不匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNode.CheckBits(System.Int32,System.UInt32[])">
            <summary>
            Binary bit set matching
            位置集合匹配
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="bits">Binary bit set
            位置集合</param>
            <returns>Returning Null indicates that the bitmap does not match
            返回 Null 表示位图不匹配</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap">
            <summary>
            Multi-hash bitmap data
            多哈希位图数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.Map">
            <summary>
            Bitmap data
            位图数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.SizeDivision">
            <summary>
            The operation of rounding off the number of bits
            位数量取余操作
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.Size">
            <summary>
            Bitmap size (number of bits)
            位图大小（位数量）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.Set(System.Int32)">
            <summary>
            Set the bitmap size
            设置位图大小
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.GetBitValueBeforePersistence(System.Int32)">
            <summary>
            Get the bit data (Check input parameters before persistence operation)
            获取位数据（持久化操作之前检查输入参数）
            </summary>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.CheckSetBit(System.Int32)">
            <summary>
            Set bit
            设置位
            </summary>
            <param name="bit"></param>
            <returns>Whether to set the new bit
            是否设置新位</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.GetBitByHashCode(System.UInt32)">
            <summary>
            Get the position based on the hash value
            根据哈希值获取位置
            </summary>
            <param name="hashCode"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.GetBitValue(System.Int32)">
            <summary>
            Get bit data
            获取位数据
            </summary>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.GetBitValueByHashCode(System.UInt32)">
            <summary>
            Get bit data
            获取位数据
            </summary>
            <param name="hashCode"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.Merge(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap)">
            <summary>
            Merge bitmap data
            合并位图数据
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap.SetBit(System.Int32)">
            <summary>
            Set bit
            设置位
            </summary>
            <param name="bit"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.NodeCache">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.SizeDivision">
            <summary>
            The operation of rounding off the number of bits
            位数量取余操作
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.size">
            <summary>
            Bitmap size (number of bits)
            位图大小（位数量）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeClientNode},System.Int32)">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
            <param name="nodeCache"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.hashCodeToBits(System.UInt32[])">
            <summary>
            Hash value to bitmap index position
            哈希值转位图索引位置
            </summary>
            <param name="hashCodes">Hash value collection
            哈希值集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.HashCodeToBits(System.Int32,System.UInt32[])">
            <summary>
            Hash value to bitmap index position
            哈希值转位图索引位置
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="hashCodes">Hash value collection
            哈希值集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.GetHashCode2(System.String)">
            <summary>
            Gets two hash values of 32b
            获取 2 个 32b 的哈希值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.GetHashCode3(System.String)">
            <summary>
            Gets three hash values of 32b
            获取 3 个 32b 的哈希值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter.GetHashCode4(System.String)">
            <summary>
            Gets four hash values of 32b
            获取 4 个 32b 的哈希值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter`1">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter`1.getHashCodes">
            <summary>
            Hash calculation
            哈希计算
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeClientNode},System.Int32,System.Func{`0,System.UInt32[]})">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
            <param name="nodeCache"></param>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="getHashCodes">Hash calculation must adopt a stable hash algorithm to ensure that the calculation results of different machines or processes are consistent
            哈希计算委托集合，必须采用稳定哈希算法保证不同机器或者进程计算结果一致</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter`1.Set(`0)">
            <summary>
            Set the bitmap data
            设置位图数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilter`1.Check(`0)">
            <summary>
            Check the bitmap data
            检查位图数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the data does not exist
            返回 false 表示数据不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.NodeCache">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.map">
            <summary>
            Multi-hash bitmap data
            多哈希位图数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.mapLock">
            <summary>
            Multi-hash bitmap data access lock
            多哈希位图数据访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.keepCallback">
            <summary>
            Keep callback for get the operation of setting a new bit 
            获取设置新位操作保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.getBits">
            <summary>
            A collection of unprocessed new locations
            未处理新位置集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.isDispose">
            <summary>
            Whether to release resources
            是否释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode})">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
            <param name="nodeCache"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.getMap">
            <summary>
            Initialize to get the multi-Hash bitmap data
            初始化获取多哈希位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.getData(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode)">
            <summary>
            Initialize to get the multi-Hash bitmap data
            初始化获取多哈希位图数据
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap)">
            <summary>
            Set the multi-Hash bitmap data
            设置多哈希位图数据
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.getBit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{System.Int32},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Get the operation of setting a new bit
            获取设置新位操作
            </summary>
            <param name="result"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.GetHashCode2(System.String)">
            <summary>
            Gets two hash values of 32b
            获取 2 个 32b 的哈希值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.GetHashCode3(System.String)">
            <summary>
            Gets three hash values of 32b
            获取 3 个 32b 的哈希值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter.GetHashCode4(System.String)">
            <summary>
            Gets four hash values of 32b
            获取 4 个 32b 的哈希值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1.getHashCodes">
            <summary>
            Hash calculation
            哈希计算
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode},System.Func{`0,System.Collections.Generic.IEnumerable{System.UInt32}})">
            <summary>
            Multi-hash bitmap filtering node client
            多哈希位图过滤节点客户端
            </summary>
            <param name="nodeCache"></param>
            <param name="getHashCodes">Hash calculation must adopt a stable hash algorithm to ensure that the calculation results of different machines or processes are consistent
            哈希计算委托集合，必须采用稳定哈希算法保证不同机器或者进程计算结果一致</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1.Set(`0)">
            <summary>
            Set the bitmap data
            设置位图数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1.set(`0)">
            <summary>
            Set the bitmap data
            设置位图数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1.set(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode)">
            <summary>
            Set the bitmap data
            设置位图数据
            </summary>
            <param name="value"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1.setMap(`0)">
            <summary>
            Set the bitmap data
            设置位图数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1.Check(`0)">
            <summary>
            Check the bitmap data
            检查位图数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the data does not exist
            返回 false 表示数据不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilter`1.check(`0)">
            <summary>
            Check the bitmap data
            检查位图数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode">
            <summary>
            多哈希位图过滤节点（类似布隆过滤器）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode.map">
            <summary>
            Multi-hash bitmap data
            多哈希位图数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ManyHashBitMap}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode.#ctor(System.Int32)">
            <summary>
            多哈希位图过滤节点（类似布隆过滤器）
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="map">Multi-hash bitmap data
            多哈希位图数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode.GetSize">
            <summary>
            Get the bitmap size (number of bits)
            获取位图大小（位数量）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode.SetBitsBeforePersistence(System.Int32,System.UInt32[])">
            <summary>
            Set bit (Check the input parameters before the persistence operation)
            设置位（持久化操作之前检查输入参数）
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="bits">Binary bit set
            位置集合</param>
            <returns>Returning false indicates that the bitmap size does not match
            返回 false 表示位图大小不匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode.SetBits(System.Int32,System.UInt32[])">
            <summary>
            Set bit
            设置位
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="bits">Binary bit set
            位置集合</param>
            <returns>Returning false indicates that the bitmap size does not match
            返回 false 表示位图大小不匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapFilterNode.CheckBits(System.Int32,System.UInt32[])">
            <summary>
            Binary bit set matching
            位置集合匹配
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="bits">Binary bit set
            位置集合</param>
            <returns>Returning Null indicates that the bitmap does not match
            返回 Null 表示位图不匹配</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode">
            <summary>
            Multi-hash bitmap client synchronization filter node (similar to Bloom filter, suitable for small containers)
            多哈希位图客户端同步过滤节点（类似布隆过滤器，适合小容器）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.map">
            <summary>
            Multi-hash bitmap data
            多哈希位图数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ManyHashBitMap}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.callbacks">
            <summary>
            Set the collection of delegates for the new bit callback
            设置新位回调委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.#ctor(System.Int32)">
            <summary>
            Multi-hash bitmap client synchronization filter node (similar to Bloom filter, suitable for small containers)
            多哈希位图客户端同步过滤节点（类似布隆过滤器，适合小容器）
            </summary>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="map">Multi-hash bitmap data
            多哈希位图数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.GetBit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{System.Int32})">
            <summary>
            Get the operation of setting a new bit
            获取设置新位操作
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.GetSize">
            <summary>
            Get the bitmap size (number of bits)
            获取位图大小（位数量）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.GetData">
            <summary>
            Get the current bitmap data
            获取当前位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.SetBitBeforePersistence(System.Int32)">
            <summary>
            Set bit (Check the input parameters before the persistence operation)
            设置位（持久化操作之前检查输入参数）
            </summary>
            <param name="bit">The set binary bit
            设置的二进制位</param>
            <returns>Returning true indicates that a persistence operation is required
            返回 true 表示需要持久化操作</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMapClientFilterNode.SetBit(System.Int32)">
            <summary>
            Set bit
            设置位
            </summary>
            <param name="bit">The set binary bit
            设置的二进制位</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1">
            <summary>
            Dictionary node client interface
            字典节点客户端接口
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <summary>
            Dictionary node interface 
                       字典节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.GetRemoveResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large) 
                       清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Initialize the size of the new container 
                       新容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.Set(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.TryAdd(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Try to add data 
                       尝试添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.TryGetResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.TryGetValue(`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.GetValueArray(`0[])">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode`1.RemoveKeys(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords 
                       删除关键字数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1">
            <summary>
            256 base fragment dictionary node client interface 
            256 基分片字典节点 客户端接口
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <summary>
            256 base fragment dictionary node interface 
                       256 基分片字典 节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.Clear">
            <summary>
            Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.GetRemoveResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.Set(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.TryAdd(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.TryGetResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.TryGetValue(`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.GetValueArray(`0[])">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode`1.RemoveKeys(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords 
                       删除关键字数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeClientNode`1">
            <summary>
            Distributed lock node client interface
            分布式锁节点客户端接口
            </summary>
            <summary>
            Distributed lock node interface 
                       分布式锁节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeClientNode`1.Enter(`0,System.UInt16)">
            <summary>
            Apply for a lock 
                       申请锁
            </summary>
            <param name="key">Keyword of lock 
                       锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds 
                       超时秒数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeClientNode`1.Release(`0,System.Int64)">
            <summary>
            Release the lock 
                       释放锁
            </summary>
            <param name="key">Keyword of lock 
                       锁关键字</param>
            <param name="identity">Lock request identity 
                       锁请求标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeClientNode`1.TryEnter(`0,System.UInt16)">
            <summary>
            Try to apply for a lock 
                       尝试申请锁
            </summary>
            <param name="key">Keyword of lock 
                       锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds 
                       超时秒数</param>
            <returns>Lock request identity. Return 0 if failed 
                       锁请求标识，失败返回 0</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1">
            <summary>
            Message processing node client interface
            消息处理节点客户端接口
            </summary>
            <summary>
            Message processing node interface 
                       消息处理节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.AppendMessage(`0)">
            <summary>
            Producers add new message 
                       生产者添加新消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.Clear">
            <summary>
            Clear all messages 
                       清除所有消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.ClearFailed">
            <summary>
            Clear all failure messages (including handling timeout messages) 
                       清除所有失败消息（包括处理超时消息）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.Completed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            The message has been processed 
                       消息完成处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.Failed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            Message failed processing 
                       消息失败处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.GetCallbackCount">
            <summary>
            Get the number of consumer callbacks 
                       获取消费者回调数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.GetCount">
            <summary>
            Get the number of uncompleted messages (excluding failed messages) 
                       获取未完成消息数量（不包括失败消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.GetFailedCount">
            <summary>
            Get the number of failed messages (Including handling timeout messages) 
                       获取失败消息数量（包括处理超时消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.GetMessage(System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            The consumer client gets the message 
                       消费客户端获取消息
            </summary>
            <param name="maxCount">The current maximum number of concurrent messages on the client side 
                       当前客户端最大并发消息数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.GetTimeoutCount">
            <summary>
            Get the number of unfinished timeout messages 
                       获取未完成的超时消息数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode`1.GetTotalCount">
            <summary>
            Get the number of uncompleted messages (including failed messages) 
                       获取未完成消息数量（包括失败消息）
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1">
            <summary>
            Message processing node local client interface
            消息处理节点本地客户端接口
            </summary>
            <summary>
            Message processing node interface 
                       消息处理节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.AppendMessage(`0)">
            <summary>
            Producers add new message 
                       生产者添加新消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.Clear">
            <summary>
            Clear all messages 
                       清除所有消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.ClearFailed">
            <summary>
            Clear all failure messages (including handling timeout messages) 
                       清除所有失败消息（包括处理超时消息）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.Completed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            The message has been processed 
                       消息完成处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.Failed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            Message failed processing 
                       消息失败处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.GetCallbackCount">
            <summary>
            Get the number of consumer callbacks 
                       获取消费者回调数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.GetCount">
            <summary>
            Get the number of uncompleted messages (excluding failed messages) 
                       获取未完成消息数量（不包括失败消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.GetFailedCount">
            <summary>
            Get the number of failed messages (Including handling timeout messages) 
                       获取失败消息数量（包括处理超时消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.GetMessage(System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}})">
            <summary>
            The consumer client gets the message 
                       消费客户端获取消息
            </summary>
            <param name="maxCount">The current maximum number of concurrent messages on the client side 
                       当前客户端最大并发消息数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.GetTimeoutCount">
            <summary>
            Get the number of unfinished timeout messages 
                       获取未完成的超时消息数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode`1.GetTotalCount">
            <summary>
            Get the number of uncompleted messages (including failed messages) 
                       获取未完成消息数量（包括失败消息）
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeLocalClientNode`1">
            <summary>
            Distributed lock node local client interface
            分布式锁节点本地客户端接口
            </summary>
            <summary>
            Distributed lock node interface 
                       分布式锁节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeLocalClientNode`1.Enter(`0,System.UInt16)">
            <summary>
            Apply for a lock 
                       申请锁
            </summary>
            <param name="key">Keyword of lock 
                       锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds 
                       超时秒数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeLocalClientNode`1.Release(`0,System.Int64)">
            <summary>
            Release the lock 
                       释放锁
            </summary>
            <param name="key">Keyword of lock 
                       锁关键字</param>
            <param name="identity">Lock request identity 
                       锁请求标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeLocalClientNode`1.TryEnter(`0,System.UInt16)">
            <summary>
            Try to apply for a lock 
                       尝试申请锁
            </summary>
            <param name="key">Keyword of lock 
                       锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds 
                       超时秒数</param>
            <returns>Lock request identity. Return 0 if failed 
                       锁请求标识，失败返回 0</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2">
            <summary>
            Sorting list node local client interface
            排序列表节点 本地客户端接口
            </summary>
            <summary>
            Sort list node interface 
                       排序列表节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.ContainsValue(`1)">
            <summary>
            To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.GetCapacity">
            <summary>
            Get the container size 
                       获取容器大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.IndexOfKey(`0)">
            <summary>
            Get the ranking position of the key word 
                       获取关键字排序位置
            </summary>
            <param name="key"></param>
            <returns>A negative number indicates that the keyword was not found 
                       负数表示没有找到关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.IndexOfValue(`1)">
            <summary>
            Get the first matching data sort position (since cached data is a serialized copy of the object, the equality test is done by implementing IEquatable{VT}) 
                       获取第一个匹配数据排序位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>A negative number indicates that no matching data was found 
                       负数表示没有找到匹配数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.RemoveAt(System.Int32)">
            <summary>
            Delete the data at the specified sort index position 
                       删除指定排序索引位置数据
            </summary>
            <param name="index"></param>
            <returns>Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeLocalClientNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2">
            <summary>
            Sorting list node client interface
            排序列表节点 客户端接口
            </summary>
            <summary>
            Sort list node interface 
                       排序列表节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.ContainsValue(`1)">
            <summary>
            To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.GetCapacity">
            <summary>
            Get the container size 
                       获取容器大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.IndexOfKey(`0)">
            <summary>
            Get the ranking position of the key word 
                       获取关键字排序位置
            </summary>
            <param name="key"></param>
            <returns>A negative number indicates that the keyword was not found 
                       负数表示没有找到关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.IndexOfValue(`1)">
            <summary>
            Get the first matching data sort position (since cached data is a serialized copy of the object, the equality test is done by implementing IEquatable{VT}) 
                       获取第一个匹配数据排序位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>A negative number indicates that no matching data was found 
                       负数表示没有找到匹配数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.RemoveAt(System.Int32)">
            <summary>
            Delete the data at the specified sort index position 
                       删除指定排序索引位置数据
            </summary>
            <param name="index"></param>
            <returns>Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeClientNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1">
            <summary>
            Sort the collection node local client interface
            排序集合节点 本地客户端接口
            </summary>
            <summary>
            Sort collection node interface 
                       排序集合节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.GetMax">
            <summary>
            Get the maximum value 
                       获取最大值
            </summary>
            <returns>No return value is returned when there is no data 
                       没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.GetMin">
            <summary>
            Get the minimum value 
                       获取最小值
            </summary>
            <returns>No return value is returned when there is no data 
                       没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data 
                       添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeLocalClientNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data 
                       删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1">
            <summary>
            Sort the collection node client interface
            排序集合节点 客户端接口
            </summary>
            <summary>
            Sort collection node interface 
                       排序集合节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.GetMax">
            <summary>
            Get the maximum value 
                       获取最大值
            </summary>
            <returns>No return value is returned when there is no data 
                       没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.GetMin">
            <summary>
            Get the minimum value 
                       获取最小值
            </summary>
            <returns>No return value is returned when there is no data 
                       没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data 
                       添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeClientNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data 
                       删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1">
            <summary>
            Binary search tree collection node local client interface
            二叉搜索树集合节点 本地客户端接口
            </summary>
            <summary>
            Binary search tree collection node interface 
                       二叉搜索树集合节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">keyword</param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="value">keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.CountLess(`0)">
            <summary>
            Get the number of nodes smaller than the specified keyword 
                       获取比指定关键字小的节点数量
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null 
                       返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.CountThan(`0)">
            <summary>
            Get the number of nodes larger than the specified keyword 
                       获取比指定关键字大的节点数量
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null 
                       返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.GetByIndex(System.Int32)">
            <summary>
            Get data based on the node position 
                       根据节点位置获取数据
            </summary>
            <param name="index">Node position 
                       节点位置</param>
            <returns>data</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.GetFrist">
            <summary>
            Get the first data 
                       获取第一个数据
            </summary>
            <returns>No return value is returned when there is no data 
                       没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.GetLast">
            <summary>
            Get the last data 
                       获取最后一个数据
            </summary>
            <returns>No return value is returned when there is no data 
                       没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.IndexOf(`0)">
            <summary>
            Get the matching node location based on the keyword 
                       根据关键字获取匹配节点位置
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates a failed match 
                       返回 -1 表示失败匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="value">keyword</param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data 
                       添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeLocalClientNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data 
                       删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1">
            <summary>
            Binary search tree collection node client interface
            二叉搜索树集合节点 客户端接口
            </summary>
            <summary>
            Binary search tree collection node interface 
                       二叉搜索树集合节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">keyword</param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="value">keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.CountLess(`0)">
            <summary>
            Get the number of nodes smaller than the specified keyword 
                       获取比指定关键字小的节点数量
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null 
                       返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.CountThan(`0)">
            <summary>
            Get the number of nodes larger than the specified keyword 
                       获取比指定关键字大的节点数量
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null 
                       返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.GetByIndex(System.Int32)">
            <summary>
            Get data based on the node position 
                       根据节点位置获取数据
            </summary>
            <param name="index">Node position 
                       节点位置</param>
            <returns>data</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.GetFrist">
            <summary>
            Get the first data 
                       获取第一个数据
            </summary>
            <returns>No return value is returned when there is no data 
                       没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.GetLast">
            <summary>
            Get the last data 
                       获取最后一个数据
            </summary>
            <returns>No return value is returned when there is no data 
                       没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.IndexOf(`0)">
            <summary>
            Get the matching node location based on the keyword 
                       根据关键字获取匹配节点位置
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates a failed match 
                       返回 -1 表示失败匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="value">keyword</param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data 
                       添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeClientNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data 
                       删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1">
            <summary>
            Hash table node local client interface
            哈希表节点 本地客户端接口
            </summary>
            <summary>
            Hash table node interface 
                       哈希表节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large) 
                       清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data 
                       添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeLocalClientNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data 
                       删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1">
            <summary>
            Hash table node client interface
            哈希表节点 客户端接口
            </summary>
            <summary>
            Hash table node interface 
                       哈希表节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large) 
                       清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data 
                       添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeClientNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data 
                       删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1">
            <summary>
            256-base fragment hash table node local client interface
            256 基分片哈希表 节点 本地客户端接口
            </summary>
            <summary>
            256 base fragment hash table node interface 
                       256 基分片 哈希表 节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.Add(`0)">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.Clear">
            <summary>
            Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data 
                       添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data 
                       删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeLocalClientNode`1.ReusableClear">
            <summary>
            Reusable hash tables reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用哈希表重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1">
            <summary>
            256-base fragment hash table node client interface
            256 基分片哈希表 节点 客户端接口
            </summary>
            <summary>
            256 base fragment hash table node interface 
                       256 基分片 哈希表 节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.Add(`0)">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.Clear">
            <summary>
            Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data 
                       添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data 
                       删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeClientNode`1.ReusableClear">
            <summary>
            Reusable hash tables reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用哈希表重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2">
            <summary>
            Sort dictionary node local client interface
            排序字典节点 本地客户端接口
            </summary>
            <summary>
            Sort dictionary node interface 
                       排序字典节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.ContainsValue(`1)">
            <summary>
            To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.GetValueArray(`0[])">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeLocalClientNode`2.RemoveKeys(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords 
                       删除关键字数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2">
            <summary>
            Sort dictionary node client interface
            排序字典节点 客户端接口
            </summary>
            <summary>
            Sort dictionary node interface 
                       排序字典节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.ContainsValue(`1)">
            <summary>
            To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.GetValueArray(`0[])">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeClientNode`2.RemoveKeys(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords 
                       删除关键字数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2">
            <summary>
            Dictionary node local client interface
            字典节点本地客户端接口
            </summary>
            <summary>
            Dictionary node interface 
                       字典节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.ReusableClear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.GetRemove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.Renew(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.Set(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.TryAdd(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.TryGetValue(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.GetValueArray(`0[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeLocalClientNode`2.RemoveKeys(`0[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2">
            <summary>
            256-base fragment dictionary node local client interface
            256 基分片字典 节点 本地客户端接口
            </summary>
            <summary>
            256 base fragment dictionary node interface 
                       256 基分片字典 节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.Clear">
            <summary>
            Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.Set(`0,`1)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.TryAdd(`0,`1)">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.GetValueArray(`0[])">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.RemoveKeys(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords 
                       删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeLocalClientNode`2.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2">
            <summary>
            Binary search tree node local client interface
            二叉搜索树节点 本地客户端接口
            </summary>
            <summary>
            Binary search tree node interface 
                       二叉搜索树节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.CountLess(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.CountThan(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.GetHeight">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.GetRemove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.GetValues(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="skipCount"></param>
            <param name="getCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.Set(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryAdd(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetFirstKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetFirstKeyValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetFirstValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetKeyValueByIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetLastKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetLastKeyValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetLastValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetValue(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.TryGetValueByIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.GetValueArray(`0[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode`2.RemoveKeys(`0[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2">
            <summary>
            Binary search tree node client interface
            二叉搜索树节点 客户端接口
            </summary>
            <summary>
            Binary search tree node interface 
                       二叉搜索树节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.CountLess(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.CountThan(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.GetHeight">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.GetRemove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.GetValues(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="skipCount"></param>
            <param name="getCount"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.Set(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryAdd(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetFirstKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetFirstKeyValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetFirstValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetKeyValueByIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetLastKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetLastKeyValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetLastValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetValue(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.TryGetValueByIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.GetValueArray(`0[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode`2.RemoveKeys(`0[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2">
            <summary>
            Dictionary node client interface 
            字典节点客户端接口
            </summary>
            <summary>
            Dictionary node interface 
                       字典节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.ReusableClear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.GetRemove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.Renew(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.Set(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.TryAdd(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.TryGetValue(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.GetValueArray(`0[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeClientNode`2.RemoveKeys(`0[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2">
            <summary>
            256-base fragment dictionary node client interface
            256 基分片字典 节点 客户端接口
            </summary>
            <summary>
            256 base fragment dictionary node interface 
                       256 基分片字典 节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.Clear">
            <summary>
            Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.Remove(`0)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.Set(`0,`1)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.TryAdd(`0,`1)">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.GetValueArray(`0[])">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.RemoveKeys(`0[])">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords 
                       删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeClientNode`2.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1">
            <summary>
            字典节点
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#BinarySerializeKeyValue{KT,System#Byte[]}}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            字典节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.SnapshotAdd(AutoCSer.BinarySerializeKeyValue{`0,System.Byte[]})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large)
            清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Initialize the size of the new container
            新容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.TryAdd(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.Set(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.TryGetResponseParameter(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayDictionaryNode`1.GetRemoveResponseParameter(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode">
            <summary>
            字典节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#BinarySerializeKeyValue{System#Byte[],System#Byte[]}}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            字典节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.SnapshotAdd(AutoCSer.BinarySerializeKeyValue{System.Byte[],System.Byte[]})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large)
            清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Initialize the size of the new container
            新容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.TryAdd(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.TryGetValue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.TryGetResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.ContainsKey(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.GetRemove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesDictionaryNode.GetRemoveResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1">
            <summary>
            Distributed lock node
            分布式锁
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.Node">
            <summary>
            Distributed lock node
            分布式锁节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.Identity">
            <summary>
            分布式锁标识信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.callbackHead">
            <summary>
            锁等待队列头节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.callbackEnd">
            <summary>
            锁等待队列尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.LockTimeout">
            <summary>
            当前超时
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode{`0},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity{`0}@)">
            <summary>
            分布式锁
            </summary>
            <param name="node">分布式锁节点</param>
            <param name="identity">分布式锁标识信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode{`0},`0,System.UInt16)">
            <summary>
            分布式锁
            </summary>
            <param name="node">分布式锁节点</param>
            <param name="key">Keyword of lock
            锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds
            超时秒数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.Enter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{System.Int64})">
            <summary>
            Apply for a lock
            申请锁
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.checkTimeout">
            <summary>
            Timeout check
            超时检查
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.Release(System.Int64)">
            <summary>
            Release the lock
            释放锁
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.next">
            <summary>
            处理下一个等待节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock`1.Timeout(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeout{`0})">
            <summary>
            Timeout check
            超时检查
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity`1">
            <summary>
            分布式锁标识信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity`1.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity`1.Timeout">
            <summary>
            当前超时时间
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity`1.Identity">
            <summary>
            锁操作标识
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity`1.Set(System.Int64)">
            <summary>
            设置锁操作标识
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity`1.Set(`0,System.DateTime,System.Int64)">
            <summary>
            设置锁信息
            </summary>
            <param name="key"></param>
            <param name="timeout"></param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity`1.Set(System.DateTime,System.Int64)">
            <summary>
            设置锁信息
            </summary>
            <param name="timeout"></param>
            <param name="identity"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1">
            <summary>
            Distributed lock node
            分布式锁节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.locks">
            <summary>
            锁信息集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#DistributedLockIdentity{T}}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.Identity">
            <summary>
            当前分配锁操作标识
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{System#Int64}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.#ctor">
            <summary>
            Distributed lock node
            分布式锁节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.getIdentity">
            <summary>
            获取当前分配锁操作标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity{`0})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.SnapshotSetIdentity(System.Int64)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.Remove(`0)">
            <summary>
            移除锁信息
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock{`0})">
            <summary>
            移除锁信息
            </summary>
            <param name="distributedLock"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.Enter(`0,System.UInt16,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{System.Int64})">
            <summary>
            Apply for a lock
            申请锁
            </summary>
            <param name="key">Keyword of lock
            锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds
            超时秒数</param>
            <param name="callback">Lock request identity. Return 0 if failed
            锁请求标识，失败返回 0</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.TryEnter(`0,System.UInt16)">
            <summary>
            Try to apply for a lock
            尝试申请锁
            </summary>
            <param name="key">Keyword of lock
            锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds
            超时秒数</param>
            <returns>Lock request identity. Return 0 if failed
            锁请求标识，失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockNode`1.Release(`0,System.Int64)">
            <summary>
            Release the lock
            释放锁
            </summary>
            <param name="key">Keyword of lock
            锁关键字</param>
            <param name="identity">Lock request identity
            锁请求标识</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeout`1">
            <summary>
            分布式锁超时
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeout`1.DistributedLock">
            <summary>
            分布式锁
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeout`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLock{`0},System.Int64)">
            <summary>
            分布式锁超时
            </summary>
            <param name="distributedLock">分布式锁</param>
            <param name="timeoutSeconds">超时时间</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeout`1.OnTimer">
            <summary>
            Trigger the timed operation
            触发定时操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeoutNode`1">
            <summary>
            分布式锁超时检查队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeoutNode`1.timeout">
            <summary>
            分布式锁超时
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeoutNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeout{`0})">
            <summary>
            分布式锁超时检查队列节点
            </summary>
            <param name="timeout">分布式锁超时</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockTimeoutNode`1.RunTask">
            <summary>
            Timeout check
            超时检查
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNode`1">
            <summary>
            Distributed lock node interface
            分布式锁节点接口
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Distributed lock node interface 
                       分布式锁节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNode`1.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity{`0})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNode`1.SnapshotSetIdentity(System.Int64)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNode`1.Enter(`0,System.UInt16,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{System.Int64})">
            <summary>
            Apply for a lock
            申请锁
            </summary>
            <param name="key">Keyword of lock
            锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds
            超时秒数</param>
            <param name="callback">Lock request identity. Return 0 if failed
            锁请求标识，失败返回 0</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNode`1.TryEnter(`0,System.UInt16)">
            <summary>
            Try to apply for a lock
            尝试申请锁
            </summary>
            <param name="key">Keyword of lock
            锁关键字</param>
            <param name="timeoutSeconds">Timeout seconds
            超时秒数</param>
            <returns>Lock request identity. Return 0 if failed
            锁请求标识，失败返回 0</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNode`1.Release(`0,System.Int64)">
            <summary>
            Release the lock
            释放锁
            </summary>
            <param name="key">Keyword of lock
            锁关键字</param>
            <param name="identity">Lock request identity
            锁请求标识</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptyNodeMethodEnum">
            <summary>
            空节点接口方法映射枚举（用于节点初始化绑定 MethodIndexEnumType ）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1">
            <summary>
            256 基分片哈希表节点
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.hashSet">
            <summary>
            256 基分片 哈希表
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{T}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.ReusableClear">
            <summary>
            Reusable hash tables reset data locations (The presence of reference type data can cause memory leaks)
            可重用哈希表重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.Add(`0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data
            添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentHashSetNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data
            删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2">
            <summary>
            256 基分片字典节点
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.dictionary">
            <summary>
            256 基分片字典
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#KeyValue{KT,VT}}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.SnapshotAdd(AutoCSer.KeyValue{`0,`1})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks)
            可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.TryAdd(`0,`1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.Set(`0,`1)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentDictionaryNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1">
            <summary>
            256 基分片字典 节点
            </summary>
            <typeparam name="KT"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.dictionary">
            <summary>
            256 基分片字典
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#BinarySerializeKeyValue{KT,System#Byte[]}}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.SnapshotAdd(AutoCSer.BinarySerializeKeyValue{`0,System.Byte[]})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.TryGetResponseParameter(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.TryAdd(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.Set(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayFragmentDictionaryNode`1.GetRemoveResponseParameter(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1">
            <summary>
            哈希表节点
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.hashSet">
            <summary>
            哈希表
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{T}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            哈希表节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large)
            清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data
            添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks)
            可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashSetNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data
            删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode">
            <summary>
            256 基分片 HashBytes 字典 节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.dictionary">
            <summary>
            256 基分片 HashBytes 字典
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#BinarySerializeKeyValue{System#Byte[],System#Byte[]}}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.SnapshotAdd(AutoCSer.BinarySerializeKeyValue{System.Byte[],System.Byte[]})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.TryGetValue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.TryGetResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.TryAdd(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.ContainsKey(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.GetRemove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.HashBytesFragmentDictionaryNode.GetRemoveResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment">
            <summary>
            Auto-increment identity segments
            自增 ID 分段
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment.identity">
            <summary>
            Current allocation identity
            当前分配 ID
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment.Identity">
            <summary>
            Current allocation identity
            当前分配 ID
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment.count">
            <summary>
            The number of remaining identitys
            剩余 ID 数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment.Count">
            <summary>
            The number of remaining identitys
            剩余 ID 数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment.#ctor(System.Int64@,System.Int32)">
            <summary>
            Auto-increment identity segments
            自增 ID 分段
            </summary>
            <param name="identity"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment.Next(System.Int64@)">
            <summary>
            Get the next increment identity
            获取下一个自增ID
            </summary>
            <param name="identity">Assigned identity
            分配的 ID</param>
            <returns>Returning false indicates that there is no assignable identity
            返回 false 表示没有可分配 ID</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNode">
            <summary>
            64 位自增ID 节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNode.identity">
            <summary>
            Current allocation identity
            当前分配 ID
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{System#Int64}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNode.#ctor(System.Int64)">
            <summary>
            位图节点
            </summary>
            <param name="identity">当前分配 ID</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNode.getIdentity">
            <summary>
            获取当前分配锁操作标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNode.SnapshotSet(System.Int64)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNode.Next">
            <summary>
            Get the next increment identity
            获取下一个自增ID
            </summary>
            <returns>The next increment identity returns a negative number on failure
            下一个自增ID，失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityGeneratorNode.NextFragment(System.Int32)">
            <summary>
            Gets the auto-increment identity segment
            获取自增 ID 分段
            </summary>
            <param name="count">Get the quantity of data
            获取数据数量</param>
            <returns>Auto-increment identity segment
            自增 ID 分段</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1">
            <summary>
            256 base fragment dictionary node interface
            256 基分片字典 节点接口
            </summary>
            <typeparam name="KT"></typeparam>
            <summary>
            256 base fragment dictionary node interface 
                       256 基分片字典 节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.SnapshotAdd(AutoCSer.BinarySerializeKeyValue{`0,System.Byte[]})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.TryGetResponseParameter(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.TryAdd(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.Set(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNode`1.GetRemoveResponseParameter(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1">
            <summary>
            Dictionary node interface
            字典节点接口
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <summary>
            Dictionary node interface 
                       字典节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.SnapshotAdd(AutoCSer.BinarySerializeKeyValue{`0,System.Byte[]})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large)
            清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Initialize the size of the new container
            新容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.TryAdd(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Try to add data
            尝试添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.Set(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.TryGetResponseParameter(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNode`1.GetRemoveResponseParameter(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode">
            <summary>
            Dictionary node interface
            字典节点接口
            </summary>
            <summary>
            Dictionary node interface 
                       字典节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.SnapshotAdd(AutoCSer.BinarySerializeKeyValue{System.Byte[],System.Byte[]})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large)
            清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Initialize the size of the new container
            新容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.TryAdd(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Try to add data
            尝试添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.TryGetValue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.TryGetResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.ContainsKey(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.GetRemove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNode.GetRemoveResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode">
            <summary>
            256 base fragment hash byte array dictionary node interface
            256 基分片哈希字节数组字典 节点接口
            </summary>
            <summary>
            256 base fragment hash byte array dictionary node interface 
                       256 基分片哈希字节数组字典 节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.SnapshotAdd(AutoCSer.BinarySerializeKeyValue{System.Byte[],System.Byte[]})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.TryGetValue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.TryGetResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.TryAdd(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.ContainsKey(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.GetRemove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNode.GetRemoveResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode">
            <summary>
            Queue node Interface (First In, First Out)
            队列节点接口（先进先出）
            </summary>
            <summary>
            Queue node Interface (First In, First Out) 
                       队列节点接口（先进先出）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode.SnapshotAdd(System.Byte[])">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode.Count">
            <summary>
            Get the number of queue data
            获取队列数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode.Enqueue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Add the data to the queue
            将数据添加到队列
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode.TryDequeue">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode.TryDequeueResponseParameter">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode.TryPeek">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNode.TryPeekResponseParameter">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode">
            <summary>
            Stack node interface (Last in, first out)
            栈节点接口（后进先出）
            </summary>
            <summary>
            Stack node interface (Last in, first out) 
                       栈节点接口（后进先出）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode.SnapshotAdd(System.Byte[])">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode.Push(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Add the data to the stack
            将数据添加到栈
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode.TryPop">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode.TryPopResponseParameter">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode.TryPeek">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNode.TryPeekResponseParameter">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage`1">
            <summary>
            Binary serialized message
            二进制序列化消息
            </summary>
            <typeparam name="T">Message data object type
            消息数据对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage`1.message">
            <summary>
            Binary serialized message data
            二进制序列化消息数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage`1.#ctor(`0)">
            <summary>
            Binary serialized message
            二进制序列化消息
            </summary>
            <param name="message">Binary serialized message data
            二进制序列化消息数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage`1.op_Implicit(`0)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage`1.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage{`0})~`0">
            <summary>
            Implicit conversion
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage`1.Get">
            <summary>
            Get the message data
            获取消息数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNode">
            <summary>
            64-bit auto-increment identity node interface
            64 位自增ID 节点接口
            </summary>
            <summary>
            64-bit auto-increment identity node interface 
                       64 位自增ID 节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNode.SnapshotSet(System.Int64)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNode.Next">
            <summary>
            Get the next increment identity
            获取下一个自增ID
            </summary>
            <returns>The next increment identity returns a negative number on failure
            下一个自增ID，失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNode.NextFragment(System.Int32)">
            <summary>
            Gets the auto-increment identity segment
            获取自增 ID 分段
            </summary>
            <param name="count">Get the quantity of data
            获取数据数量</param>
            <returns>Auto-increment identity segment
            自增 ID 分段</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceOnBinaryMessageConsumer`1">
            <summary>
            Binary serialized message consumer
            二进制序列化消息消费者
            </summary>
            <typeparam name="T">Message data object type
            消息数据对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceOnBinaryMessageConsumer`1.getMessageTask">
            <summary>
            Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceOnBinaryMessageConsumer`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage{`0}},System.Func{`0,System.Threading.Tasks.Task{System.Boolean}},System.Int32)">
            <summary>
            Binary serialized message consumer
            二进制序列化消息消费者
            </summary>
            <param name="client">Log stream persistence in-memory database local service client
            日志流持久化内存数据库本地服务客户端</param>
            <param name="node">Binary serialized message client node
            二进制序列化消息消息客户端节点</param>
            <param name="onMessage">Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceOnBinaryMessageConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnBinaryMessageConsumer`1">
            <summary>
            Binary serialized message consumer
            二进制序列化消息消费者
            </summary>
            <typeparam name="T">Message data object type
            消息数据对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnBinaryMessageConsumer`1.getMessageTask">
            <summary>
            Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnBinaryMessageConsumer`1.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage{`0}},System.Func{`0,System.Threading.Tasks.Task{System.Boolean}},System.Int32)">
            <summary>
            Binary serialized message consumer
            二进制序列化消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Binary serialized message client node
            二进制序列化消息消息客户端节点</param>
            <param name="onMessage">Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnBinaryMessageConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1">
            <summary>
            Message processing node interface
            消息处理节点接口
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Message processing node interface 
                       消息处理节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.SnapshotAdd(`0)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.GetTotalCount">
            <summary>
            Get the number of uncompleted messages (including failed messages)
            获取未完成消息数量（包括失败消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.GetCount">
            <summary>
            Get the number of uncompleted messages (excluding failed messages)
            获取未完成消息数量（不包括失败消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.GetFailedCount">
            <summary>
            Get the number of failed messages (Including handling timeout messages)
            获取失败消息数量（包括处理超时消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.GetCallbackCount">
            <summary>
            Get the number of consumer callbacks
            获取消费者回调数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.GetTimeoutCount">
            <summary>
            Get the number of unfinished timeout messages
            获取未完成的超时消息数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.ClearLoadPersistence">
            <summary>
            Clear all messages (Initialize and load the persistent data)
            清除所有消息（初始化加载持久化数据）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.Clear">
            <summary>
            Clear all messages
            清除所有消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.ClearFailedLoadPersistence">
            <summary>
            Clear all failure messages (including handling timeout messages) (Initialize and load the persistent data)
            清除所有失败消息（包括处理超时消息）（初始化加载持久化数据）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.ClearFailed">
            <summary>
            Clear all failure messages (including handling timeout messages)
            清除所有失败消息（包括处理超时消息）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.GetMessage(System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            The consumer client gets the message
            消费客户端获取消息
            </summary>
            <param name="maxCount">The current maximum number of concurrent messages on the client side
            当前客户端最大并发消息数量</param>
            <param name="callback">Returning null indicates the heart rate test data. The client should ignore the null message
            返回 null 表示心跳测试数据，客户端应该忽略 null 消息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.AppendMessageLoadPersistence(`0)">
            <summary>
            Producers add new message (Initialize and load the persistent data)
            生产者添加新消息（初始化加载持久化数据）
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.AppendMessage(`0)">
            <summary>
            Producers add new message
            生产者添加新消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.CompletedLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            The message has been processed (Initialize and load the persistent data)
            消息完成处理（初始化加载持久化数据）
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.Completed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            The message has been processed
            消息完成处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.FailedLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            Message failed processing (Initialize and load the persistent data)
            消息失败处理（初始化加载持久化数据）
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNode`1.Failed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            Message failed processing
            消息失败处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1">
            <summary>
            Array node interface
            数组节点接口
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Array node interface 
                       数组节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.SnapshotSet(AutoCSer.KeyValue{System.Int32,`0})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.ClearArray">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clear the data at the specified location
            清除指定位置数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Clear data quantity
            清除数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.GetLength">
            <summary>
            Get the array length
            获取数组长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.GetValue(System.Int32)">
            <summary>
            Get data based on index location
            根据索引位置获取数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <returns>If the return exceeds the index, there will be no return value
            超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.SetValue(System.Int32,`0)">
            <summary>
            Set the data according to the index position
            根据索引位置设置数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.GetValueSet(System.Int32,`0)">
            <summary>
            Set the data according to the index position and return the data before the setting
            根据索引位置设置数据并返回设置之前的数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <param name="value">data</param>
            <returns>Set the previous data. If it exceeds the index and returns, there will be no return value
            设置之前的数据，超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.FillArray(`0)">
            <summary>
            Fill the entire array with data
            用数据填充整个数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.Fill(`0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position
            用数据填充数组指定位置
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The number of filled data
            填充数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.IndexOfArray(`0)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Search for the number of matching data
            查找匹配数据数量</param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.LastIndexOfArray(`0)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">The last matching position (the starting position)
            最后一个匹配位置（起始位置）</param>
            <param name="count">Search for the number of matching data
            查找匹配数据数量</param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.ReverseArray">
            <summary>
            Reverse the entire array data
            反转整个数组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the array data at the specified position
            反转指定位置数组数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Reverse the amount of data
            反转数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.SortArray">
            <summary>
            Array sorting
            数组排序
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNode`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sort the array data at the specified position
            排序指定位置数组数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The quantity of data to be sorted
            排序数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode">
            <summary>
            Bitmap node interface
            位图节点接口
            </summary>
            <summary>
            Bitmap node interface 
                       位图节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.SnapshotSet(System.Byte[])">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.GetCapacity">
            <summary>
            Get the number of bitmap binary bits
            获取位图二进制位数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.ClearMap">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.GetBit(System.UInt32)">
            <summary>
            Read bit status
            读取位状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>A non-0 indicates that the binary bit is in the set state. If the index exceeds, there will be no return value
            非 0 表示二进制位为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.SetBit(System.UInt32)">
            <summary>
            Set bit status
            设置位状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Returning false indicates that the index is out of range
            返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.GetBitSetBit(System.UInt32)">
            <summary>
            Set the bit state and return the state before setting
            设置位状态并返回设置之前的状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>The state before setting: A non-0 indicates that the binary bit was in the set state before, and there is no return value if the index exceeds
            设置之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.ClearBit(System.UInt32)">
            <summary>
            Clear bit status
            清除位状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Returning false indicates that the index is out of range
            返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.GetBitClearBit(System.UInt32)">
            <summary>
            Clear the bit state and return to the state before setting
            清除位状态并返回设置之前的状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Clear the state before the operation. A non-0 state indicates that the binary bit was in the set state before. If the index exceeds, there will be no return value
            清除操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.InvertBit(System.UInt32)">
            <summary>
            Reverse the bit state
            位状态取反
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Returning false indicates that the index is out of range
            返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNode.GetBitInvertBit(System.UInt32)">
            <summary>
            Reverse the bit state and return the state before the operation
            位状态取反并返回操作之前的状态
            </summary>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>Take the state before the reverse operation. If it is not 0, it indicates that the binary bit is in the set state before. If the index exceeds, there will be no return value
            取反操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1">
            <summary>
            256 base fragment hash table node interface
            256 基分片 哈希表 节点接口
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
            <summary>
            256 base fragment hash table node interface 
                       256 基分片 哈希表 节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.ReusableClear">
            <summary>
            Reusable hash tables reset data locations (The presence of reference type data can cause memory leaks)
            可重用哈希表重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.Add(`0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data
            添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data
            删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2">
            <summary>
            256 base fragment dictionary node interface
            256 基分片字典 节点接口
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <summary>
            256 base fragment dictionary node interface 
                       256 基分片字典 节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.SnapshotAdd(AutoCSer.KeyValue{`0,`1})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks)
            可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.TryAdd(`0,`1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.Set(`0,`1)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1">
            <summary>
            Hash table node interface
            哈希表节点接口
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
            <summary>
            Hash table node interface 
                       哈希表节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large)
            清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data
            添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks)
            可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data
            删除数据数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1">
            <summary>
            Array node interface
            数组节点接口
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Array node interface 
                       数组节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.GetLength">
            <summary>
            Get the valid length of the array
            获取数组有效长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.GetCapacity">
            <summary>
            Get the size of the array container
            获取数组容器大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.GetFreeCount">
            <summary>
            Get the number of containers free
            获取容器空闲数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.SetEmpty">
            <summary>
            Empty and release the array
            置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.ClearLength">
            <summary>
            Clear all the data and set the valid length of the data to 0
            清除所有数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clear the data at the specified location
            清除指定位置数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Clear data quantity
            清除数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.TryAdd(`0)">
            <summary>
            Add data when there is a free place
            当有空闲位置时添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the array is full and the addition failed
            返回 false 表示数组已满，添加失败</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.SetValue(System.Int32,`0)">
            <summary>
            Set the data according to the index position
            根据索引位置设置数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.Insert(System.Int32,`0)">
            <summary>
            Insert data
            插入数据
            </summary>
            <param name="index">Insert position
            插入位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.GetValue(System.Int32)">
            <summary>
            Get data based on index location
            根据索引位置获取数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <returns>If the return exceeds the index, there will be no return value
            超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.GetValueSet(System.Int32,`0)">
            <summary>
            Set the data according to the index position and return the data before the setting
            根据索引位置设置数据并返回设置之前的数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <param name="value">data</param>
            <returns>Set the previous data. If it exceeds the index and returns, there will be no return value
            设置之前的数据，超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.FillArray(`0)">
            <summary>
            Fill the entire array with data
            用数据填充整个数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.Fill(`0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position
            用数据填充数组指定位置
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The number of filled data
            填充数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.IndexOfArray(`0)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Search for the number of matching data
            查找匹配数据数量</param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.LastIndexOfArray(`0)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">The last matching position (the starting position)
            最后一个匹配位置（起始位置）</param>
            <param name="count">Search for the number of matching data
            查找匹配数据数量</param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.ReverseArray">
            <summary>
            Reverse the entire array data
            反转整个数组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the array data at the specified position
            反转指定位置数组数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Reverse the amount of data
            反转数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.SortArray">
            <summary>
            Array sorting
            数组排序
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sort the array data at the specified position
            排序指定位置数组数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The quantity of data to be sorted
            排序数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.Remove(`0)">
            <summary>
            Remove the first matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            移除第一个匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">data</param>
            <returns>Returning false indicates that there is no data match
            返回 false 表示不存在数据匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.RemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified index position
            移除指定索引位置数据
            </summary>
            <param name="index">Data location
            数据位置</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.GetValueRemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified index position and return the removed data
            移除指定索引位置数据并返回被移除的数据
            </summary>
            <param name="index">Data location
            数据位置</param>
            <returns>No data will be returned if the index range is exceeded
            超出索引范围则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.RemoveToEnd(System.Int32)">
            <summary>
            Remove the data at the specified index position and move the last data to that specified position
            移除指定索引位置数据并将最后一个数据移动到该指定位置
            </summary>
            <param name="index"></param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.GetValueRemoveToEnd(System.Int32)">
            <summary>
            Remove the data at the specified index position, move the last data to the specified position, and return the removed data
            移除指定索引位置数据，将最后一个数据移动到该指定位置，并返回被移除的数据
            </summary>
            <param name="index"></param>
            <returns>No data will be returned if the index range is exceeded
            超出索引范围则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.GetTryPopValue">
            <summary>
            Remove the last data and return it
            移除最后一个数据并返回该数据
            </summary>
            <returns>No data will be returned if there is no removable data
            没有可移除数据则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNode`1.TryPop">
            <summary>
            Try to remove the last data
            尝试移除最后一个数据
            </summary>
            <returns>Is there any removable data
            是否存在可移除数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNode`1">
            <summary>
            Queue node interface (First In, First Out)
            队列节点接口（先进先出）
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Queue node interface (First In, First Out) 
                       队列节点接口（先进先出）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNode`1.Count">
            <summary>
            Get the number of queue data
            获取队列数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNode`1.Contains(`0)">
            <summary>
            Determine whether there is matching data in the queue (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            判断队列中是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNode`1.Enqueue(`0)">
            <summary>
            Add the data to the queue
            将数据添加到队列
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNode`1.TryDequeue">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNode`1.TryPeek">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3">
            <summary>
            Binary search tree node interface
            二叉搜索树节点接口
            </summary>
            <typeparam name="KT">Sort keyword type
            排序关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <typeparam name="ST">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.SnapshotAdd(`2)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.Count">
            <summary>
            Get the number of node data
            获取节点数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.GetHeight">
            <summary>
            Get the tree height has a time complexity of O(n)
            获取树高度，时间复杂度 O(n)
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.Clear">
            <summary>
            Clear the data
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.Set(`0,`1)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key">keyword</param>
            <param name="value">data</param>
            <returns>Have new keywords been added
            是否添加了新关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key">keyword</param>
            <param name="value">data</param>
            <returns>Whether new data has been added
            是否添加了新数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.Remove(`0)">
            <summary>
            Delete node based on keyword
            根据关键字删除节点
            </summary>
            <param name="key">keyword</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.GetRemove(`0)">
            <summary>
            Delete node based on keyword
            根据关键字删除节点
            </summary>
            <param name="key">keyword</param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.ContainsKey(`0)">
            <summary>
            Determines if the keyword exists
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <returns>Whether the keyword exists
            是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key">keyword</param>
            <returns>Target data
            目标数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.IndexOf(`0)">
            <summary>
            Get the matching node location based on the keyword
            根据关键字获取匹配节点位置
            </summary>
            <param name="key">keyword</param>
            <returns>Returning -1 indicates a failed match
            返回 -1 表示失败匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.CountLess(`0)">
            <summary>
            Get the number of nodes smaller than the specified keyword
            获取比指定关键字小的节点数量
            </summary>
            <param name="key">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null
            返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.CountThan(`0)">
            <summary>
            Get the number of nodes larger than the specified keyword
            获取比指定关键字大的节点数量
            </summary>
            <param name="key">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null
            返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetKeyValueByIndex(System.Int32)">
            <summary>
            Get data based on the node position
            根据节点位置获取数据
            </summary>
            <param name="index">Node position
            节点位置</param>
            <returns>data</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetValueByIndex(System.Int32)">
            <summary>
            Get data based on the node position
            根据节点位置获取数据
            </summary>
            <param name="index">Node position
            节点位置</param>
            <returns>data</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetFirstKeyValue">
            <summary>
            Get the first pair of data
            获取第一对数据
            </summary>
            <returns>The first pair of data
            第一对数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetLastKeyValue">
            <summary>
            Get the last pair of data
            获取最后一对数据
            </summary>
            <returns>The last pair of data
            最后一对数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetFirstKey">
            <summary>
            Get the first keyword
            获取第一个关键字
            </summary>
            <returns>The first keyword
            第一个关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetLastKey">
            <summary>
            Get the last keyword
            获取最后一个关键字
            </summary>
            <returns>The last keyword
            最后一个关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetFirstValue">
            <summary>
            Get the first data
            获取第一个数据
            </summary>
            <returns>The first data
            第一个数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.TryGetLastValue">
            <summary>
            Get the last data
            获取最后一个数据
            </summary>
            <returns>The last data
            最后一个数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`3.GetValues(System.Int32,System.Byte)">
            <summary>
            Get a collection of data based on the range
            根据范围获取数据集合
            </summary>
            <param name="skipCount">The number of skipped records
            跳过记录数</param>
            <param name="getCount">The number of records to be obtained
            获取记录数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNode`2">
            <summary>
            Binary search tree node interface
            二叉搜索树节点接口
            </summary>
            <typeparam name="KT">Sort keyword type
            排序关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <summary>
            Binary search tree node interface 
                       二叉搜索树节点接口
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1">
            <summary>
            Binary search tree collection node interface
            二叉搜索树集合节点接口
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
            <summary>
            Binary search tree collection node interface 
                       二叉搜索树集合节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">keyword</param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data
            添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="value">keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="value">keyword</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data
            删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.GetFrist">
            <summary>
            Get the first data
            获取第一个数据
            </summary>
            <returns>No return value is returned when there is no data
            没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.GetLast">
            <summary>
            Get the last data
            获取最后一个数据
            </summary>
            <returns>No return value is returned when there is no data
            没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.IndexOf(`0)">
            <summary>
            Get the matching node location based on the keyword
            根据关键字获取匹配节点位置
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates a failed match
            返回 -1 表示失败匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.CountLess(`0)">
            <summary>
            Get the number of nodes smaller than the specified keyword
            获取比指定关键字小的节点数量
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null
            返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.CountThan(`0)">
            <summary>
            Get the number of nodes larger than the specified keyword
            获取比指定关键字大的节点数量
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null
            返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNode`1.GetByIndex(System.Int32)">
            <summary>
            Get data based on the node position
            根据节点位置获取数据
            </summary>
            <param name="index">Node position
            节点位置</param>
            <returns>data</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2">
            <summary>
            Sort dictionary node interface
            排序字典节点接口
            </summary>
            <typeparam name="KT">Sort keyword type
            排序关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <summary>
            Sort dictionary node interface 
                       排序字典节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.SnapshotAdd(AutoCSer.KeyValue{`0,`1})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.ContainsValue(`1)">
            <summary>
            To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNode`2.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2">
            <summary>
            Sort list node interface
            排序列表节点接口
            </summary>
            <typeparam name="KT">Sort keyword type
            排序关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <summary>
            Sort list node interface 
                       排序列表节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.SnapshotAdd(AutoCSer.KeyValue{`0,`1})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.GetCapacity">
            <summary>
            Get the container size
            获取容器大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.ContainsValue(`1)">
            <summary>
            To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.IndexOfKey(`0)">
            <summary>
            Get the ranking position of the key word
            获取关键字排序位置
            </summary>
            <param name="key"></param>
            <returns>A negative number indicates that the keyword was not found
            负数表示没有找到关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.IndexOfValue(`1)">
            <summary>
            Get the first matching data sort position (since cached data is a serialized copy of the object, the equality test is done by implementing IEquatable{VT})
            获取第一个匹配数据排序位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>A negative number indicates that no matching data was found
            负数表示没有找到匹配数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNode`2.RemoveAt(System.Int32)">
            <summary>
            Delete the data at the specified sort index position
            删除指定排序索引位置数据
            </summary>
            <param name="index"></param>
            <returns>Returning false indicates that the index is out of range
            返回 false 表示索引超出范围</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1">
            <summary>
            Sort collection node interface
            排序集合节点接口
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
            <summary>
            Sort collection node interface 
                       排序集合节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data
            添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data
            删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.GetMin">
            <summary>
            Get the minimum value
            获取最小值
            </summary>
            <returns>No return value is returned when there is no data
            没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNode`1.GetMax">
            <summary>
            Get the maximum value
            获取最大值
            </summary>
            <returns>No return value is returned when there is no data
            没有数据时返回无返回值</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNode`1">
            <summary>
            Stack node interface (Last in, first out)
            栈节点接口（后进先出）
            </summary>
            <typeparam name="T"></typeparam>
            <summary>
            Stack node interface (Last in, first out) 
                       栈节点接口（后进先出）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNode`1.Contains(`0)">
            <summary>
            Determine whether there is matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            判断是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNode`1.Push(`0)">
            <summary>
            Add the data to the stack
            将数据添加到栈
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNode`1.TryPop">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNode`1.TryPeek">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1">
            <summary>
            数组节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.array">
            <summary>
            数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.#ctor(System.Int32)">
            <summary>
            数组节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetSnapshotResult(`0[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.SetSnapshotResult(AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{`0}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetLength">
            <summary>
            Get the valid length of the array
            获取数组有效长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetCapacity">
            <summary>
            Get the size of the array container
            获取数组容器大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetFreeCount">
            <summary>
            Get the number of containers free
            获取容器空闲数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.SetEmpty">
            <summary>
            Empty and release the array
            置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.ClearLength">
            <summary>
            Clear all the data and set the valid length of the data to 0
            清除所有数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.checkRange(System.Int32,System.Int32)">
            <summary>
            检查索引范围
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clear the data at the specified location
            清除指定位置数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Clear data quantity
            清除数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.TryAdd(`0)">
            <summary>
            Add data when there is a free place
            当有空闲位置时添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the array is full and the addition failed
            返回 false 表示数组已满，添加失败</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.SetValue(System.Int32,`0)">
            <summary>
            Set the data according to the index position
            根据索引位置设置数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.Insert(System.Int32,`0)">
            <summary>
            Insert data
            插入数据
            </summary>
            <param name="index">Insert position
            插入位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetValue(System.Int32)">
            <summary>
            Get data based on index location
            根据索引位置获取数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <returns>If the return exceeds the index, there will be no return value
            超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetValueSet(System.Int32,`0)">
            <summary>
            Set the data according to the index position and return the data before the setting
            根据索引位置设置数据并返回设置之前的数据
            </summary>
            <param name="index">Index position
            索引位置</param>
            <param name="value">data</param>
            <returns>Set the previous data. If it exceeds the index and returns, there will be no return value
            设置之前的数据，超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.FillArray(`0)">
            <summary>
            Fill the entire array with data
            用数据填充整个数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.Fill(`0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position
            用数据填充数组指定位置
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The number of filled data
            填充数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.IndexOfArray(`0)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Search for the number of matching data
            查找匹配数据数量</param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.LastIndexOfArray(`0)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">The last matching position (the starting position)
            最后一个匹配位置（起始位置）</param>
            <param name="count">Search for the number of matching data
            查找匹配数据数量</param>
            <returns>Failure returns a negative number
            失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.ReverseArray">
            <summary>
            Reverse the entire array data
            反转整个数组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the array data at the specified position
            反转指定位置数组数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">Reverse the amount of data
            反转数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.SortArray">
            <summary>
            Array sorting
            数组排序
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sort the array data at the specified position
            排序指定位置数组数据
            </summary>
            <param name="startIndex">Starting position
            起始位置</param>
            <param name="count">The quantity of data to be sorted
            排序数据数量</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.Remove(`0)">
            <summary>
            Remove the first matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            移除第一个匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">data</param>
            <returns>Returning false indicates that there is no data match
            返回 false 表示不存在数据匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.RemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified index position
            移除指定索引位置数据
            </summary>
            <param name="index">Data location
            数据位置</param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetValueRemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified index position and return the removed data
            移除指定索引位置数据并返回被移除的数据
            </summary>
            <param name="index">Data location
            数据位置</param>
            <returns>No data will be returned if the index range is exceeded
            超出索引范围则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.RemoveToEnd(System.Int32)">
            <summary>
            Remove the data at the specified index position and move the last data to that specified position
            移除指定索引位置数据并将最后一个数据移动到该指定位置
            </summary>
            <param name="index"></param>
            <returns>Return false if it exceeds the index range
            超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetValueRemoveToEnd(System.Int32)">
            <summary>
            Remove the data at the specified index position, move the last data to the specified position, and return the removed data
            移除指定索引位置数据，将最后一个数据移动到该指定位置，并返回被移除的数据
            </summary>
            <param name="index"></param>
            <returns>No data will be returned if the index range is exceeded
            超出索引范围则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.GetTryPopValue">
            <summary>
            Remove the last data and return it
            移除最后一个数据并返回该数据
            </summary>
            <returns>No data will be returned if there is no removable data
            没有可移除数据则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LeftArrayNode`1.TryPop">
            <summary>
            Try to remove the last data
            尝试移除最后一个数据
            </summary>
            <returns>Is there any removable data
            是否存在可移除数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceBinaryMessageConsumer`1">
            <summary>
            Binary serialized message consumer
            二进制序列化消息消费者
            </summary>
            <typeparam name="T">Message data object type
            消息数据对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceBinaryMessageConsumer`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage{`0}},System.Int32)">
            <summary>
            Binary serialized message consumer
            二进制序列化消息消费者
            </summary>
            <param name="client">Log stream persistence in-memory database local service client
            日志流持久化内存数据库本地服务客户端</param>
            <param name="node">Binary serialized message client node
            二进制序列化消息消息客户端节点</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceBinaryMessageConsumer`1.onMessage(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage{`0})">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceBinaryMessageConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer">
            <summary>
            Local service message node consumer
            本地服务消息节点消费者
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer.service">
            <summary>
            Log stream persistence memory database local service
            日志流持久化内存数据库本地服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer.delayMilliseconds">
            <summary>
            Retry interval in milliseconds
            重试间隔毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer.isDisposed">
            <summary>
            Whether resources have been released
            是否已释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient,System.Int32)">
            <summary>
            Local service message node consumer
            本地服务消息节点消费者
            </summary>
            <param name="client">Log stream persistence in-memory database local service client
            日志流持久化内存数据库本地服务客户端</param>
            <param name="delayMilliseconds">Retry interval in milliseconds
            重试间隔毫秒数</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1">
            <summary>
            Local service message node consumer
            本地服务消息节点消费者
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.node">
            <summary>
            Message client node
            消息客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.maxMessageCount">
            <summary>
            The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.lastError">
            <summary>
            Receive the last error status information of the message
            接收消息的最后一次错误信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.keepCallback">
            <summary>
            Keep callback object of the command
            命令保持回调对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeLocalClientNode{`0},System.Int32,System.Int32)">
            <summary>
            Local service message node consumer
            本地服务消息节点消费者
            </summary>
            <param name="client">Log stream persistence in-memory database local service client
            日志流持久化内存数据库本地服务客户端</param>
            <param name="node">Message client node
            消息客户端节点</param>
            <param name="maxMessageCount">The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.start">
            <summary>
            Start receiving and processing messages
            开始接收并处理消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.onMessage(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0})">
            <summary>
            Message processing
            消息处理
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.onError(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0})">
            <summary>
            Error handling of received messages
            接收消息错误处理
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.checkOnMessage(`0)">
            <summary>
            Message processing
            消息处理
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceMessageConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Message`1">
            <summary>
            Message data
            消息数据
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Message`1.MessageIdeneity">
            <summary>
            Message unique number (Unique number within the node)
            消息唯一编号（节点内唯一编号）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer">
            <summary>
            Message node consumer
            消息节点消费者
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer.DefaultDelayMilliseconds">
            <summary>
            The default retry interval is in milliseconds
            默认重试间隔毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer.commandClient">
            <summary>
            Command client
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer.delayMilliseconds">
            <summary>
            Retry interval in milliseconds
            重试间隔毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer.isDisposed">
            <summary>
            Whether resources have been released
            是否已释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer.#ctor(AutoCSer.Net.ICommandClient,System.Int32)">
            <summary>
            Message node consumer
            消息节点消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="delayMilliseconds">Retry interval in milliseconds
            重试间隔毫秒数</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1">
            <summary>
            Message node consumer
            消息节点消费者
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.node">
            <summary>
            Message client node
            消息客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.onMessageHandle">
            <summary>
            Message processing delegate
            消息处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.maxMessageCount">
            <summary>
            The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.lastError">
            <summary>
            Receive the last error status information of the message
            接收消息的最后一次错误状态信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.keepCallback">
            <summary>
            Keep callback object of the command
            命令保持回调对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{`0},System.Int32,System.Int32)">
            <summary>
            Message node consumer
            消息节点消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Message client node
            消息客户端节点</param>
            <param name="maxMessageCount">The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量</param>
            <param name="delayMilliseconds">Retry interval in milliseconds
            重试间隔毫秒数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.start">
            <summary>
            Start receiving and processing messages
            开始接收并处理消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.onMessage(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Message processing
            消息处理
            </summary>
            <param name="message"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.onError(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Handle error messages
            处理错误消息
            </summary>
            <param name="message"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.onError(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0})">
            <summary>
            Error handling of received messages
            接收消息错误处理
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.checkOnMessage(`0)">
            <summary>
            Message processing
            消息处理
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity">
            <summary>
            The identifier of the message being processed
            正在处理的消息标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity.Identity">
            <summary>
            Message unique number (Unique number within the node)
            消息唯一编号（节点内唯一编号）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity.ArrayIndex">
            <summary>
            The index position of the message array
            消息数组索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity.Flags">
            <summary>
            Message flags
            消息标记
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity.SetNew(System.Int64)">
            <summary>
            Set the unique number of the new message
            设置新消息唯一编号
            </summary>
            <param name="currentIdentity"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1">
            <summary>
            The message information being processed
            正在处理的消息信息
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.Message">
            <summary>
            The message being processed
            正在处理的消息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.callback">
            <summary>
            Message callback
            消息回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.NextIndex">
            <summary>
            The next free location or the location of the previous message node being processed
            下一个空闲位置 或者 上一个正在处理的消息节点位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.timeoutTimestamp">
            <summary>
            Message timeout timestamp
            消息超时时间戳
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.Set(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0},System.Int64)">
            <summary>
            Set the message data
            设置消息数据
            </summary>
            <param name="message"></param>
            <param name="callback"></param>
            <param name="timeoutTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.GetMessage(System.Int32@)">
            <summary>
            Get the message data
            获取消息数据
            </summary>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.Free(System.Int32)">
            <summary>
            Release the message processing status (message completed or failed)
            释放消息处理状态（消息完成或者失败）
            </summary>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.Clear(System.Int32)">
            <summary>
            Clear the message data
            清除消息数据
            </summary>
            <param name="nextIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageArrayItem`1.CheckTimeout(System.Int32@)">
            <summary>
            Timeout check
            超时检查
            </summary>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageFlagsEnum">
            <summary>
            Message flags
            消息标记
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageFlagsEnum.None">
            <summary>
            No flag
            无标记
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageFlagsEnum.Completed">
            <summary>
            Completed
            已完成
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageFlagsEnum.Failed">
            <summary>
            Processing failed
            处理失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageFlagsEnum.Timeout">
            <summary>
            Timeout
            超时
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageFlagsEnum.FailedOrTimeout">
            <summary>
            Processing failure (including timeout)
            处理失败（包括超时）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageFlagsEnum.SnapshotEnd">
            <summary>
            The snapshot ends
            快照结束
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1">
            <summary>
            消息处理节点
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.timeoutTimestamp">
            <summary>
            消息超时时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.checkTimer">
            <summary>
            超时检查定时
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.MessageArray">
            <summary>
            正在处理的消息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.loader">
            <summary>
            初始化加载节点
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.isNullLoader">
            <summary>
            是否默认空初始化加载节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.callbacks">
            <summary>
            消息处理客户端回调集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.currentCallback">
            <summary>
            当前预备处理客户端回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.timeoutMessages">
            <summary>
            超时消息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.linkHead">
            <summary>
            等待处理的消息头节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.linkEnd">
            <summary>
            等待处理的消息尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.failedHead">
            <summary>
            失败消息头节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.failedEnd">
            <summary>
            失败消息尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.nextFailed">
            <summary>
            LinkNext 为下一个待重试处理失败消息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.arrayHead">
            <summary>
            正在处理的消息头节点，NextIndex 表示上一个节点位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.CurrentIdentity">
            <summary>
            当前消息分配唯一编号（节点内唯一编号）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.count">
            <summary>
            未处理完成消息数量（不包括失败消息）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.failedCount">
            <summary>
            失败消息数量（包括处理超时消息）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.arrayMessageCount">
            <summary>
            正在处理中的消息数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.messageArrayFreeIndex">
            <summary>
            空闲的消息位置，NextIndex 表示下一个空闲位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.sendFailedIndex">
            <summary>
            正在重试失败消息的数组位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.fullCallbackIndex">
            <summary>
            满负载消费者回调起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.isCheckTimeout">
            <summary>
            是否正在检查超时
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            消息处理节点
            </summary>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.StreamPersistenceMemoryDatabaseServiceNodeOnRemoved">
            <summary>
            Processing operations after node removal
            节点移除后的处理操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.StreamPersistenceMemoryDatabaseServiceDisposable">
            <summary>
            Database service shutdown operation
            数据库服务关闭操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.GetSnapshotResult(`0[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.SnapshotAdd(`0)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.getLoader">
            <summary>
            获取初始化加载节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.tryGetLoader">
            <summary>
            获取初始化加载节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.AppendLinkCount(`0)">
            <summary>
            添加等待处理消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.AppendFailedCount(`0)">
            <summary>
            添加失败消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.appendFailed(`0)">
            <summary>
            添加失败消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.GetTotalCount">
            <summary>
            Get the number of uncompleted messages (including failed messages)
            获取未完成消息数量（包括失败消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.GetCount">
            <summary>
            Get the number of uncompleted messages (excluding failed messages)
            获取未完成消息数量（不包括失败消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.GetCallbackCount">
            <summary>
            Get the number of consumer callbacks
            获取消费者回调数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.GetTimeoutCount">
            <summary>
            Get the number of unfinished timeout messages
            获取未完成处理超时消息数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.ClearLoadPersistence">
            <summary>
            Clear all messages (Initialize and load the persistent data)
            清除所有消息（初始化加载持久化数据）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.Clear">
            <summary>
            Clear all messages
            清除所有消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.GetFailedCount">
            <summary>
            Get the number of failed messages (Including handling timeout messages)
            获取失败消息数量（包括处理超时消息）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.clearFailed">
            <summary>
            清除所有失败消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.ClearFailedLoadPersistence">
            <summary>
            Clear all failure messages (including handling timeout messages)  (Initialize and load the persistent data)
            清除所有失败消息（包括处理超时消息）（初始化加载持久化数据）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.ClearFailed">
            <summary>
            Clear all failure messages (including handling timeout messages)
            清除所有失败消息（包括处理超时消息）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.removeCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            移除无效客户端回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.GetMessage(System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            The consumer client gets the message
            消费客户端获取消息
            </summary>
            <param name="maxCount">The current maximum number of concurrent messages on the client side
            当前客户端最大并发消息数量</param>
            <param name="callback">Returning null indicates the heart rate test data. The client should ignore the null message
            返回 null 表示心跳测试数据，客户端应该忽略 null 消息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.sendMessage">
            <summary>
            发送一条消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.sendMessageLink">
            <summary>
            发送多条新消息（currentCallback 不允许为 null）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.sendFailedMessage">
            <summary>
            发送一条失败消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.appendArrayMessage(`0)">
            <summary>
            消息添加到处理中数组
            </summary>
            <param name="message"></param>
            <returns>message.LinkNext</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.AppendMessageLoadPersistence(`0)">
            <summary>
            Producers add new message (Initialize and load the persistent data)
            生产者添加新消息（初始化加载持久化数据）
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.AppendMessage(`0)">
            <summary>
            Producers add new message
            生产者添加新消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.sendNewMessage">
            <summary>
            发送新消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.CompletedLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            The message has been processed (Initialize and load the persistent data)
            消息完成处理（初始化加载持久化数据）
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.Completed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            The message has been processed
            消息完成处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.freeArrayIndex(`0,System.Int32)">
            <summary>
            释放消息处理状态
            </summary>
            <param name="message"></param>
            <param name="nextIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.FailedLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            Message failed processing (Initialize and load the persistent data)
            消息失败处理（初始化加载持久化数据）
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.Failed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            Message failed processing
            消息失败处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.failed(`0,System.Int32)">
            <summary>
            Message failed processing
            消息失败处理
            </summary>
            <param name="message"></param>
            <param name="nextIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.CheckTimeout">
            <summary>
            消息超时检查
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode`1.CheckTimeoutCallback">
            <summary>
            消息超时检查
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1">
            <summary>
            消费者回调信息
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.Callback">
            <summary>
            消费者回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.MaxCount">
            <summary>
            最大并发数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.Count">
            <summary>
            正在处理的回调计数
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.FreeCount">
            <summary>
            空闲并发数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0},System.Int32)">
            <summary>
            设置消费者回调
            </summary>
            <param name="callback"></param>
            <param name="maxCount"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.SetRemove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount{`0}@)">
            <summary>
            设置消费者回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.remove(System.Int32)">
            <summary>
            移除并复制消费者回调信息
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.IncrementCount">
            <summary>
            添加正在处理的回调计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCallbackCount`1.DecrementCount">
            <summary>
            释放正在处理的回调计数
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimeoutCallback`1">
            <summary>
            超时检查队列回调
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimeoutCallback`1.messageNode">
            <summary>
            消息处理节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimeoutCallback`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode{`0})">
            <summary>
            超时检查队列回调
            </summary>
            <param name="messageNode"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimeoutCallback`1.RunTask">
            <summary>
            回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimer`1">
            <summary>
            超时检查定时
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimer`1.messageNode">
            <summary>
            消息处理节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimer`1.#ctor(System.Int32)">
            <summary>
            超时检查定时
            </summary>
            <param name="checkTimeoutSeconds">消息超时检查间隔秒数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimer`1.OnTimer">
            <summary>
            定时器触发
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimer`1.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode{`0})">
            <summary>
            设置消息处理节点
            </summary>
            <param name="messageNode"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCheckTimer`1.Cancel">
            <summary>
            取消定时
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator">
            <summary>
            Create a message processing node
            创建消息处理节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.node">
            <summary>
            Service basic operation node
            服务基础操作节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.index">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.key">
            <summary>
            节点全局关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.nodeInfo">
            <summary>
            节点信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.arraySize">
            <summary>
            正在处理消息数组大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.timeoutSeconds">
            <summary>
            消息处理超时秒数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.checkTimeoutSeconds">
            <summary>
            消息超时检查间隔秒数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node
            创建消息处理节点
            </summary>
            <param name="node"></param>
            <param name="index"></param>
            <param name="key"></param>
            <param name="nodeInfo"></param>
            <param name="arraySize"></param>
            <param name="timeoutSeconds"></param>
            <param name="checkTimeoutSeconds"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.Create(System.Type)">
            <summary>
            Create a message processing node MessageNode{T}
            创建消息处理节点 MessageNode{T}
            </summary>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.create``1">
            <summary>
            Create a message processing node MessageNode{T}
            创建消息处理节点 MessageNode{T}
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeCreator.createMethodInfo">
            <summary>
            创建消息处理节点方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1">
            <summary>
            消息处理节点初始化加载节点
            </summary>
            <typeparam name="T">Message data type
            消息数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.Messages">
            <summary>
            Message collection not completed
            未完成消息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.FailedMessages">
            <summary>
            处理失败消息集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.#ctor">
            <summary>
            消息处理节点初始化加载节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNode{`0})">
            <summary>
            消息处理节点初始化加载节点
            </summary>
            <param name="messageNode">消息处理节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.SnapshotAdd(`0)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value"></param>
            <returns>是否快照结束数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.Clear">
            <summary>
            Clear all messages
            清除所有消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.ClearFailed">
            <summary>
            清除所有失败消息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.AppendMessage(`0)">
            <summary>
            Producers add new message
            生产者添加新消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.Completed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            The message has been processed
            消息完成处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.Failed(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity)">
            <summary>
            Message failed processing
            消息失败处理
            </summary>
            <param name="identity"></param>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageNodeLoader`1.Null">
            <summary>
            消息处理节点初始化加载节点
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageConsumer">
            <summary>
            Server-side byte array message consumer
            服务端字节数组消息消费者
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageConsumer.getMessageTask">
            <summary>
            Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageConsumer.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage},System.Func{System.Byte[],System.Threading.Tasks.Task{System.Boolean}},System.Int32)">
            <summary>
            Server-side byte array message consumer
            服务端字节数组消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Server-side byte array messages client nodes
            服务端字节数组消息客户端节点</param>
            <param name="onMessage">Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageConsumer.onMessage(System.Byte[])">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageConsumer`1">
            <summary>
            The binary serialized message consumer of the server-side byte array message
            服务端字节数组消息 二进制序列化消息消费者
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageConsumer`1.getMessageTask">
            <summary>
            Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageConsumer`1.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage},System.Func{`0,System.Threading.Tasks.Task{System.Boolean}},System.Int32)">
            <summary>
            The binary serialized message consumer of the server-side byte array message
            服务端字节数组消息 二进制序列化消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Server-side byte array messages client nodes
            服务端字节数组消息客户端节点</param>
            <param name="onMessage">Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageJsonConsumer`1">
            <summary>
            The JSON mixed binary serialization message consumer of the server-side byte array message
            服务端字节数组消息 JSON 混杂二进制序列化消息消费者
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageJsonConsumer`1.getMessageTask">
            <summary>
            Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageJsonConsumer`1.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage},System.Func{`0,System.Threading.Tasks.Task{System.Boolean}},System.Int32)">
            <summary>
            The JSON mixed binary serialization message consumer of the server-side byte array message
            服务端字节数组消息 JSON 混杂二进制序列化消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Server-side byte array messages client nodes
            服务端字节数组消息客户端节点</param>
            <param name="onMessage">Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageJsonConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageStringConsumer">
            <summary>
            The string message consumer of the server-side byte array message
            服务端字节数组消息 字符串消息消费者
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageStringConsumer.getMessageTask">
            <summary>
            Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageStringConsumer.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage},System.Func{System.String,System.Threading.Tasks.Task{System.Boolean}},System.Int32)">
            <summary>
            The string message consumer of the server-side byte array message
            服务端字节数组消息 字符串消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Server-side byte array messages client nodes
            服务端字节数组消息客户端节点</param>
            <param name="onMessage">Message processing: An exception or a return of false indicates that the message execution has failed
            消息处理，异常或者返回 false 则表示消息执行失败</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.OnServerByteArrayMessageStringConsumer.onMessage(System.String)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage">
            <summary>
            Server-side byte array message
            服务端字节数组消息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.message">
            <summary>
            Server-side byte array message data
            服务端字节数组 消息数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Server-side byte array message
            服务端字节数组消息
            </summary>
            <param name="message">Server-side byte array message data
            服务端字节数组 消息数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage">
            <summary>
            Server-side implicit conversion
            服务端隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.op_Implicit(System.Byte[])~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage">
            <summary>
            Client-side implicit conversion
            客户端隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.op_Implicit(System.String)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage">
            <summary>
            Client-side implicit conversion
            客户端隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.BinarySerialize``1(``0)">
            <summary>
            Get a binary serialization object
            获取二进制序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.JsonSerialize``1(``0)">
            <summary>
            Get the JSON serialization object
            获取 JSON 序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage)~System.Byte[]">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.GetString(System.String@)">
            <summary>
            Get string data
            获取字符串数据
            </summary>
            <param name="value"></param>
            <returns>Whether the string parsing was successful
            字符串解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.JsonDeserialize``1(``0@)">
            <summary>
            Get the JSON deserialized object
            获取 JSON 反序列化对象
            </summary>
            <param name="value"></param>
            <returns>Whether deserialization was successful
            反序列化是否成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage.BinaryDeserialize``1(``0@)">
            <summary>
            Get the binary deserialized object
            获取二进制反序列化对象
            </summary>
            <param name="value"></param>
            <returns>Whether deserialization was successful
            反序列化是否成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageConsumer">
            <summary>
            Server-side byte array message consumer
            服务端字节数组消息消费者
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageConsumer.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage},System.Int32,System.Int32)">
            <summary>
            Server-side byte array message consumer
            服务端字节数组消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Server-side byte array messages client nodes
            服务端字节数组消息客户端节点</param>
            <param name="maxMessageCount">The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageConsumer.onMessage(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageConsumer.onMessage(System.Byte[])">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageConsumer`1">
            <summary>
            The binary serialized message consumer of the server-side byte array message
            服务端字节数组消息 二进制序列化消息消费者
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageConsumer`1.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage},System.Int32,System.Int32)">
            <summary>
            The binary serialized message consumer of the server-side byte array message
            服务端字节数组消息 二进制序列化消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Server-side byte array messages client nodes
            服务端字节数组消息客户端节点</param>
            <param name="maxMessageCount">The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageConsumer`1.onMessage(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessageConsumer`1">
            <summary>
            Binary serialized message consumer
            二进制序列化消息消费者
            </summary>
            <typeparam name="T">Message data object type
            消息数据对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessageConsumer`1.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage{`0}},System.Int32,System.Int32)">
            <summary>
            Binary serialized message consumer
            二进制序列化消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Binary serialized message client node
            二进制序列化消息消息客户端节点</param>
            <param name="maxMessageCount">The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessageConsumer`1.onMessage(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessage{`0})">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.BinaryMessageConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode">
            <summary>
            队列节点（先进先出）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.queue">
            <summary>
            队列
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.#ctor(System.Int32)">
            <summary>
            队列节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.GetSnapshotResult(System.Byte[][],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.SetSnapshotResult(AutoCSer.LeftArray{System.Byte[]}@,AutoCSer.LeftArray{System.Byte[]}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.SnapshotAdd(System.Byte[])">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.Count">
            <summary>
            Get the number of queue data
            获取队列数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.Enqueue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Add the data to the queue
            将数据添加到队列
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.TryDequeue">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.TryDequeueResponseParameter">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.TryPeek">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayQueueNode.TryPeekResponseParameter">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageJsonConsumer`1">
            <summary>
            The JSON mixed binary serialization message consumer of the server-side byte array message
            服务端字节数组消息 JSON 混杂二进制序列化消息消费者
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageJsonConsumer`1.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage},System.Int32,System.Int32)">
            <summary>
            The JSON mixed binary serialization message consumer of the server-side byte array message
            服务端字节数组消息 JSON 混杂二进制序列化消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Server-side byte array messages client nodes
            服务端字节数组消息客户端节点</param>
            <param name="maxMessageCount">The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageJsonConsumer`1.onMessage(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageJsonConsumer`1.onMessage(`0)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageStringConsumer">
            <summary>
            The string message consumer of the server-side byte array message
            服务端字节数组消息 字符串消息消费者
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageStringConsumer.#ctor(AutoCSer.Net.ICommandClient,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeClientNode{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage},System.Int32,System.Int32)">
            <summary>
            The string message consumer of the server-side byte array message
            服务端字节数组消息 字符串消息消费者
            </summary>
            <param name="commandClient">Command client</param>
            <param name="node">Server-side byte array messages client nodes
            服务端字节数组消息客户端节点</param>
            <param name="maxMessageCount">The maximum number of single callback messages on the server side
            服务端单次最大回调消息数量</param>
            <param name="delayMilliseconds">The retry interval is in milliseconds, with a default of 1000 and a minimum value of 1
            重试间隔毫秒数，默认为 1000，最小值为 1</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageStringConsumer.onMessage(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessage)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArrayMessageStringConsumer.onMessage(System.String)">
            <summary>
            Message processing. An exception also indicates that the message execution failed
            消息处理，异常也表示消息执行失败
            </summary>
            <param name="message"></param>
            <returns>Whether the message was executed successfully
            消息是否执行成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardCommandClientSocketEvent">
            <summary>
            进程守护节点命令客户端套接字事件
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardCommandClientSocketEvent.StreamPersistenceMemoryDatabaseClient">
            <summary>
            Log stream persistence in-memory database client interface
            日志流持久化内存数据库客户端接口
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardCommandClientSocketEvent.ControllerCreatorParameters">
            <summary>
            The set of parameters for creating the client controller is used to create the client controller object during the initialization of the client socket, and also to automatically bind the controller properties based on the interface type of the client controller after the client socket passes the service authentication API
            客户端控制器创建参数集合，用于命令客户端套接字初始化是创建客户端控制器对象，同时也用于命令客户端套接字事件在通过认证 API 之后根据客户端控制器接口类型自动绑定控制器属性
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardCommandClientSocketEvent.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
            <param name="client">Command client</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess">
            <summary>
            被守护进程信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.node">
            <summary>
            进程守护节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.ProcessInfo">
            <summary>
            被守护进程信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.process">
            <summary>
            被守护进程
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.guardHandle">
            <summary>
            进程退出事件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.NewProcess">
            <summary>
            新进程
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.isReStart">
            <summary>
            是否重新启动进程
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.IsRemove">
            <summary>
            是否已经被移除
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.IsLoad">
            <summary>
            是否初始化加载数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo,System.Diagnostics.Process)">
            <summary>
            被守护进程信息
            </summary>
            <param name="node"></param>
            <param name="processInfo"></param>
            <param name="process"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            被守护进程信息
            </summary>
            <param name="node"></param>
            <param name="processInfo"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.Loaded">
            <summary>
            数据库冷启动初始化启动被守护进程
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.setExited">
            <summary>
            设置进程退出事件
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.guard(System.Object,System.EventArgs)">
            <summary>
            进程退出事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.RunTask">
            <summary>
            重新启动进程以后通知管理器
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.Remove">
            <summary>
            移除被守护进程
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess.close">
            <summary>
            释放进程
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNode">
            <summary>
            Process daemon node interface (The server needs to run as an administrator; otherwise, an exception may occur)
            进程守护节点接口（服务端需要以管理员身份运行，否则可能异常）
            </summary>
            <summary>
            Process daemon node interface (The server needs to run as an administrator; otherwise, an exception may occur) 
                       进程守护节点接口（服务端需要以管理员身份运行，否则可能异常）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNode.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNode.GuardLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            Initialize and add the daemon process to be added (Initialize and load the persistent data)
            初始化添加待守护进程（初始化加载持久化数据）
            </summary>
            <param name="processInfo">Process information
            进程信息</param>
            <returns>Add failed and return false
            添加失败返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNode.Guard(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            Add the process to be daemon
            添加待守护进程
            </summary>
            <param name="processInfo">Process information
            进程信息</param>
            <returns>Add failed and return false
            添加失败返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNode.Remove(System.Int32,System.DateTime,System.String)">
            <summary>
            Delete the daemon process
            删除被守护进程
            </summary>
            <param name="processId">Process identity
            进程标识</param>
            <param name="startTime">Process startup time
            进程启动时间</param>
            <param name="processName">Process name
            进程名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNode.Switch(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{System.Boolean})">
            <summary>
            Switch processes
            切换进程
            </summary>
            <param name="key">The key words of the switched process
            切换进程关键字</param>
            <param name="callback">Switch process callback
            切换进程回调</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo">
            <summary>
            被守护进程信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.ProcessID">
            <summary>
            进程标识ID
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.PriorityClass">
            <summary>
            优先级
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.StartTime">
            <summary>
            进程启动时间
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.ProcessName">
            <summary>
            进程名称
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.#ctor">
            <summary>
            被守护进程信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess)">
            <summary>
            被守护进程信息
            </summary>
            <param name="guardProcess"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.#ctor(System.Diagnostics.Process,System.String[])">
            <summary>
            被守护进程信息
            </summary>
            <param name="process"></param>
            <param name="arguments">Main 传参数组</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.#ctor(System.Diagnostics.Process)">
            <summary>
            当前进程 dotnet 被守护进程信息
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.IsMatch(System.Diagnostics.Process)">
            <summary>
            判断进程信息是否匹配
            </summary>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo.GetCurrent(System.String[])">
            <summary>
            获取当前进程被守护进程信息
            </summary>
            <param name="arguments">Main 函数传参</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode">
            <summary>
            进程守护节点（服务端需要以管理员身份运行，否则可能异常）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.guards">
            <summary>
            被守护进程集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ProcessGuardInfo}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.switchCallbacks">
            <summary>
            切换进程回调委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.#ctor">
            <summary>
            进程守护节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.StreamPersistenceMemoryDatabaseServiceNodeOnRemoved">
            <summary>
            Processing operations after node removal
            节点移除后的处理操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.StreamPersistenceMemoryDatabaseServiceDisposable">
            <summary>
            Database service shutdown operation
            数据库服务关闭操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.GetProcessById(System.Int32)">
            <summary>
            根据进程ID获取进程信息
            </summary>
            <param name="processID"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.GuardLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            Initialize and add the daemon process to be added (Initialize and load the persistent data)
            初始化添加待守护进程（初始化加载持久化数据）
            </summary>
            <param name="processInfo">Process information
            进程信息</param>
            <returns>Add failed and return false
            添加失败返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.Guard(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            Add the process to be daemon
            添加待守护进程
            </summary>
            <param name="processInfo">Process information
            进程信息</param>
            <returns>Add failed and return false
            添加失败返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.Output(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            输出进程信息
            </summary>
            <param name="type"></param>
            <param name="processInfo"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.Remove(System.Int32,System.DateTime,System.String)">
            <summary>
            Delete the daemon process
            删除被守护进程
            </summary>
            <param name="processId">Process identity
            进程标识</param>
            <param name="startTime">Process startup time
            进程启动时间</param>
            <param name="processName">Process name
            进程名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.OnExited(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.GuardProcess)">
            <summary>
            被守护进程重启以后替换被守护进程信息
            </summary>
            <param name="guardProcess"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardNode.Switch(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{System.Boolean})">
            <summary>
            Switch processes
            切换进程
            </summary>
            <param name="key">The key words of the switched process
            切换进程关键字</param>
            <param name="callback">Switch process callback
            切换进程回调</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess">
            <summary>
            Switch processes
            切换进程
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.DefaultSwitchDirectorySuffixName">
            <summary>
            默认切换服务目录后缀名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.arguments">
            <summary>
            Main 函数传参
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.switchProcessKey">
            <summary>
            切换进程关键字，默认为当前进程名称
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.processFileName">
            <summary>
            执行进程文件名称，默认为当前执行文件
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.isGuard">
            <summary>
            默认为 true 表示添加守护
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.isStart">
            <summary>
            是否已经开始运行或者启动切换进程
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.isExit">
            <summary>
            是否准备退出操作
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.getProcessGuardClient">
            <summary>
            获取进程守护节点客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.#ctor(System.String[])">
            <summary>
            Switch processes
            切换进程
            </summary>
            <param name="arguments">Main 函数参数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.getSwitchProcessFile">
            <summary>
            获取切换执行进程文件信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.getSwitchProcessFile(System.String)">
            <summary>
            获取切换执行进程文件信息
            </summary>
            <param name="directoryName">匹配目录名称</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.switchProcess">
            <summary>
            切换进程检查
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.start">
            <summary>
            开始运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.onError(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeClientNode})">
            <summary>
            错误信息处理
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.onException(System.Exception)">
            <summary>
            异常信息处理
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.trySwitch">
            <summary>
            尝试重试等待切换线程
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.initialize">
            <summary>
            初始化操作，让进程服务处于准备服务状态，完成该操作以后会通知旧服务进程下线
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.guard">
            <summary>
            添加守护
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.onStart">
            <summary>
            开始运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.onExit">
            <summary>
            退出运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.exit">
            <summary>
            正常退出操作（尝试移除进程守护）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.getSwitchProcessFile(System.IO.DirectoryInfo,System.IO.FileInfo)">
            <summary>
            获取切换执行进程文件信息
            </summary>
            <param name="switchDirectory"></param>
            <param name="processFile"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardSwitchProcess.getSwitchProcessFile(System.IO.DirectoryInfo,AutoCSer.LeftArray{System.String},System.IO.FileInfo)">
            <summary>
            获取切换执行进程文件信息
            </summary>
            <param name="switchDirectory"></param>
            <param name="directoryNames"></param>
            <param name="processFile"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1">
            <summary>
            队列节点（先进先出）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.queue">
            <summary>
            队列
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.#ctor(System.Int32)">
            <summary>
            队列节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.GetSnapshotResult(`0[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.SetSnapshotResult(AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{`0}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.Count">
            <summary>
            Get the number of queue data
            获取队列数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.Contains(`0)">
            <summary>
            Determine whether there is matching data in the queue (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            判断队列中是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.Enqueue(`0)">
            <summary>
            Add the data to the queue
            将数据添加到队列
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.TryDequeue">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.QueueNode`1.TryPeek">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar.log">
            <summary>
            Current main log
            当前主日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar.endPoint">
            <summary>
            The current listening IP address
            当前监听 IP 地址
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar.isGetServerEndPoint">
            <summary>
            Has the server listening address been obtained
            是否已经获取服务监听地址
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar.logChanged">
            <summary>
            The server listens for address update notifications
            服务监听地址更新通知
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar`1">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar`1.socket">
            <summary>
            Client socket event
            客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar`1.logClient">
            <summary>
            The client of the registration server
            注册服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar`1.#ctor(AutoCSer.Net.ICommandClient,`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode})">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
            <param name="client"></param>
            <param name="socket"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar`1.GetServerEndPoint">
            <summary>
            Get the server listening address
            获取服务端监听地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar`1.ConnectFail(System.Net.IPEndPoint)">
            <summary>
            Server connection failed
            服务连接失败
            </summary>
            <param name="endPoint"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient">
            <summary>
            The client of the registration server
            注册服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.registrar">
            <summary>
            The server registration client listener component
            服务注册客户端监听组件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.callback">
            <summary>
            The client callback for the registration server log
            注册服务日志客户端回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrar,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode},System.String)">
            <summary>
            The client of the registration server
            注册服务客户端
            </summary>
            <param name="registrar">The server registration client listener component
            服务注册客户端监听组件</param>
            <param name="node">The client node for server registration
            服务注册客户端节点</param>
            <param name="serverName">Server name
            服务名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.Cancel">
            <summary>
            Cancel the keep callback
            取消保持回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.LogCallback">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.logCallback(System.Threading.Tasks.Task{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode}})">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.logCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode})">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.logCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback)">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <param name="log"></param>
            <param name="callback"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback">
            <summary>
            The client callback for the registration server log
            注册服务日志客户端回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.client">
            <summary>
            The client of the registration server
            注册服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.keepCallback">
            <summary>
            Keep callback of get service logs
            服务日志保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.mainLog">
            <summary>
            Current main log
            当前主日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.logs">
            <summary>
            Additional log collection
            附加日志集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.isLoaded">
            <summary>
            Has the initial data been loaded completely
            是否已经加载完初始数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClient)">
            <summary>
            The client callback for the registration server log
            注册服务日志客户端回调
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.Cancel">
            <summary>
            Cancel the keep callback
            取消保持回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.LogCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode)">
            <summary>
            Gets the server registration log
            获取服务注册日志
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandClientServiceRegistrarLogClientCallback.logCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <param name="result"></param>
            <param name="command"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient">
            <summary>
            Cluster client node
            集群客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.Log">
            <summary>
            Server Registration Log
            服务注册日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.ClientIndex">
            <summary>
            Index position of the client array
            客户端数组索引位置
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.IsClosed">
            <summary>
            Has the client been closed
            客户端是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.isCheck">
            <summary>
            Is the client connection being checked
            是否正在检查客户端连接
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.isCheckLog">
            <summary>
            Is the server registration log being checked
            是否正在检查服务注册日志
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Cluster client node
            集群客户端节点
            </summary>
            <param name="log">Server Registration Log
            服务注册日志</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.getSocket">
            <summary>
            Get the client connection
            获取客户端连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.Close">
            <summary>
            Close the client
            关闭客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient.close">
            <summary>
            Close the client
            关闭客户端
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient`1">
            <summary>
            Cluster client node
            集群客户端节点
            </summary>
            <typeparam name="T">Cluster client node type
            集群客户端节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient`1.serverRegistryClusterClient">
            <summary>
            Cluster client scheduling
            集群客户端调度
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient{`0},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Cluster client node
            集群客户端节点
            </summary>
            <param name="clusterClient">Cluster client scheduling
            集群客户端调度</param>
            <param name="log">Server Registration Log
            服务注册日志</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient`1.check">
            <summary>
            Check the client connection
            检查客户端连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient`1.CheckLog">
            <summary>
            Get the server registration logs that need to be inspected
            获取需要检查的服务注册日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.ClusterClient`1.checkLog">
            <summary>
            Check the online status of the server
            检查服务在线状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar">
            <summary>
            Server registration component
            服务注册组件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.nodeCache">
            <summary>
            Server registration node
            服务注册节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.keepCallback">
            <summary>
            The keep callback for server registration
            服务注册保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.endPoint">
            <summary>
            Server host and port information
            服务端主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.serverRegistryLog">
            <summary>
            Server Registration Log
            服务注册日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.sessionID">
            <summary>
            Server session Identifier
            服务会话标识ID
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.serverRegistryType">
            <summary>
            Server registration log operation type
            服务注册日志操作类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.version">
            <summary>
            Callback version
            回调版本
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.isAppendRegistrar">
            <summary>
            Has the server registration component been added
            是否已经添加服务端注册组件
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.IsAppendRegistrar">
            <summary>
            Can the server registration component be added
            是否可以添加服务端注册组件
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.#ctor(AutoCSer.Net.CommandListenerBase,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum)">
            <summary>
            Server registration component
            服务注册组件
            </summary>
            <param name="server">The server is listening for the command to be registered
            待注册命令服务端监听</param>
            <param name="node">Server registration node cache
            服务注册节点缓存</param>
            <param name="serverRegistryType">Register node type
            注册节点类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.DisposeAsync">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.ServerCallback">
            <summary>
            Server registration callback
            服务注册回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.serviceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Server registration callback
            服务注册回调
            </summary>
            <param name="operationType"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar.getServerRegistryLog(AutoCSer.Net.HostEndPoint)">
            <summary>
            Gets the server registration log
            获取服务注册日志
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar`1">
            <summary>
            Server registration component
            服务注册组件
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar`1.client">
            <summary>
            Command client socket event caching
            命令客户端套接字事件缓存
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar`1.DisposeAsync">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar`1.#ctor(AutoCSer.Net.CommandListenerBase,AutoCSer.Net.CommandClientSocketEventCache{`0},AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum)">
            <summary>
            Server registration component
            服务注册组件
            </summary>
            <param name="server">The server is listening for the command to be registered
            待注册命令服务端监听</param>
            <param name="client">Command client socket event caching
            命令客户端套接字事件缓存</param>
            <param name="node">Server registration node cache
            服务注册节点缓存</param>
            <param name="serverRegistryType">Register node type
            注册节点类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar`1.OnListened(AutoCSer.Net.HostEndPoint)">
            <summary>
            The server listener was successful
            服务监听成功
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1">
            <summary>
            Cluster client scheduling
            集群客户端调度
            </summary>
            <typeparam name="T">Cluster client node type
            集群客户端节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.clientArray">
            <summary>
            Client array
            客户端数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.clients">
            <summary>
            Client collection
            客户端集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.clientLock">
            <summary>
            Client access lock
            客户端访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode},System.String)">
            <summary>
            Cluster client scheduling
            集群客户端调度
            </summary>
            <param name="node">The client node for server registration
            服务注册客户端节点</param>
            <param name="serverName">Server name
            服务名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.LogCallback">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.remove(System.Int64)">
            <summary>
            Remove the client
            移除客户端
            </summary>
            <param name="sessionID">Server session identity
            服务会话标识</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.onRemoved(`0)">
            <summary>
            Remove the client
            移除客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryClusterClient`1.Append(`0)">
            <summary>
            Add the client
            添加客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryCommandClientSocketEvent`1">
            <summary>
            Server registration command client socket event
            服务注册命令客户端套接字事件
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryCommandClientSocketEvent`1.registrars">
            <summary>
            The service registers the collection of components
            服务注册组件集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryCommandClientSocketEvent`1.registrarLock">
            <summary>
            The access lock of the service registers components
            服务注册组件访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryCommandClientSocketEvent`1.isServerCallback">
            <summary>
            Does adding the server registration component require the registration of callback delegates
            添加服务端注册组件是否需要注册回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryCommandClientSocketEvent`1.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            Server registration command client socket event
            服务注册命令客户端套接字事件
            </summary>
            <param name="client">Command client</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryCommandClientSocketEvent`1.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar)">
            <summary>
            Add the server-side registration component
            添加服务端注册组件
            </summary>
            <param name="registrar"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryCommandClientSocketEvent`1.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistry.CommandServiceRegistrar)">
            <summary>
            Remove the server-side registration component
            移除服务端注册组件
            </summary>
            <param name="registrar"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryCommandClientSocketEvent`1.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            Command Client socket custom client initialization operations after the authentication API is passed and the client controller is automatically bound, used to manually bind the client controller Settings and connection initialization operations, such as the initial keep callback. This call is located in the client lock operation, should not complete the initialization operation as soon as possible, do not call the internal nested lock operation to avoid deadlock
            命令客户端套接字通过认证 API 并自动绑定客户端控制器以后的客户端自定义初始化操作，用于手动绑定设置客户端控制器与连接初始化操作，比如初始化保持回调。此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogCommandClientSocketEvent`1">
            <summary>
            The client socket event of the registration server
            注册服务客户端套接字事件
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogCommandClientSocketEvent`1.clients">
            <summary>
            A collection of clients for registration servers
            注册服务客户端集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogCommandClientSocketEvent`1.clientLock">
            <summary>
            Access lock for the registration server client
            注册服务客户端访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogCommandClientSocketEvent`1.isLogCallback">
            <summary>
            Does adding a registration server client require the registration of callback delegates
            添加注册服务客户端是否需要注册回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogCommandClientSocketEvent`1.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            The client socket event of the registration server
            注册服务客户端套接字事件
            </summary>
            <param name="client">Command client</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogCommandClientSocketEvent`1.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient)">
            <summary>
            Add the registration server client
            添加注册服务客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogCommandClientSocketEvent`1.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient)">
            <summary>
            Remove the registration server client
            移除注册服务客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogCommandClientSocketEvent`1.OnMethodVerified(AutoCSer.Net.CommandClientSocket)">
            <summary>
            Command Client socket custom client initialization operations after the authentication API is passed and the client controller is automatically bound, used to manually bind the client controller Settings and connection initialization operations, such as the initial keep callback. This call is located in the client lock operation, should not complete the initialization operation as soon as possible, do not call the internal nested lock operation to avoid deadlock
            命令客户端套接字通过认证 API 并自动绑定客户端控制器以后的客户端自定义初始化操作，用于手动绑定设置客户端控制器与连接初始化操作，比如初始化保持回调。此调用位于客户端锁操作中，应尽快未完成初始化操作，禁止调用内部嵌套锁操作避免死锁
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode">
            <summary>
            Server registration node interface
            服务注册节点接口
            </summary>
            <summary>
            Server registration node interface 
                       服务注册节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode.GetSessionID">
            <summary>
            Get the server session identity
            获取服务会话标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode.ServerCallback(System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum})">
            <summary>
            The server registration callback delegate is mainly used to register components to check the online state of the server
            服务注册回调委托，主要用于注册组件检查服务的在线状态
            </summary>
            <param name="sessionID">Server session identity
            服务会话标识</param>
            <param name="callback">Server registration log operation type
            服务注册日志操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Add the server registration log
            添加服务注册日志
            </summary>
            <param name="log"></param>
            <returns>Server registration status
            服务注册状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode.LogCallback(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog})">
            <summary>
            Gets the server registration log
            获取服务注册日志
            </summary>
            <param name="serverName">Monitor the server name. An empty string represents all servers
            监视服务名称，空字符串表示所有服务</param>
            <param name="callback">The server registration log returns null to indicate an online check
            服务注册日志，返回 null 表示在线检查</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode.GetLog(System.String)">
            <summary>
            Get the main log of the server
            获取服务主日志
            </summary>
            <param name="serverName">Server name
            服务名称</param>
            <returns>Returning null indicates that the server main log was not found
            返回 null 表示没有找到服务主日志</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode.Check(System.Int64,System.String)">
            <summary>
            Check the online status of the server
            检查服务在线状态
            </summary>
            <param name="sessionID">Server session identity
            服务会话标识</param>
            <param name="serverName">Server name
            服务名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNode.LostContact(System.Int64,System.String)">
            <summary>
            Persistent operations for server disconnection
            服务失联的持久化操作
            </summary>
            <param name="sessionID">Server session identity
            服务会话标识</param>
            <param name="serverName">Server name
            服务名称</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient">
            <summary>
            The client scheduling of the registration server
            注册服务客户端调度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient.NodeCache">
            <summary>
            Server registration node
            服务注册节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient.ServerName">
            <summary>
            Server name
            服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient.keepCallback">
            <summary>
            Keep callback of get service logs
            服务日志保持回调
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient.IsAppendClient">
            <summary>
            Has the client for the registration server been added
            是否已经添加注册服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient.LogCallback">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode},System.String)">
            <summary>
            The client scheduling of the registration server
            注册服务客户端调度
            </summary>
            <param name="node">The client node for server registration
            服务注册客户端节点</param>
            <param name="serverName">Server name
            服务名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient.logCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <param name="result"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogClient.logCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Server registration log callback
            服务注册日志回调
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog">
            <summary>
            Server Registration Log
            服务注册日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.SessionID">
            <summary>
            Server session Identifier
            服务会话标识ID
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.ServerName">
            <summary>
            Server name
            服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.Host">
            <summary>
            Host name or IP address
            主机名称或者 IP 地址
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.NodeIndex">
            <summary>
            Cluster node number
            集群节点编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.Version">
            <summary>
            Service version number: When a higher version is launched, all lower version nodes will be kicked out
            服务版本号，高版本上线将踢掉所有低版本节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.Port">
            <summary>
            Port number
            端口号
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.HostEndPoint">
            <summary>
            Server host and port information
            服务主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.OperationType">
            <summary>
            Server registration log operation type
            服务注册日志操作类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.TimeoutSeconds">
            <summary>
            The number of seconds for a singleton service to be forced to go online
            单例服务强制上线等待秒数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.#ctor">
            <summary>
            Server Registration Log
            服务注册日志
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.#ctor(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum)">
            <summary>
            Server Registration Log
            服务注册日志
            </summary>
            <param name="serverName"></param>
            <param name="operationType"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.#ctor(System.Int64,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum)">
            <summary>
            Server Registration Log
            服务注册日志
            </summary>
            <param name="sessionID"></param>
            <param name="serverName"></param>
            <param name="operationType"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.#ctor(System.Int64,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum,AutoCSer.Net.HostEndPoint,System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Server Registration Log
            服务注册日志
            </summary>
            <param name="sessionID"></param>
            <param name="serverName"></param>
            <param name="operationType"></param>
            <param name="endPoint"></param>
            <param name="nodeIndex"></param>
            <param name="version"></param>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.IsNewEquals(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Determine whether it is the server restart log
            判断是否服务重启日志
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.CreateLostContact">
            <summary>
            Create a server disconnection log
            创建服务失联日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog.CreateLogout">
            <summary>
            Create the log of the logout server
            创建注销服务日志
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler">
            <summary>
            服务注册日志组装
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.Node">
            <summary>
            Server registration node
            服务注册节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.loadedLog">
            <summary>
            初始化日志回调完成
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.logs">
            <summary>
            Additional log collection
            附加日志集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.MainLog">
            <summary>
            主日志
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.SnapshotLogCount">
            <summary>
            获取快照日志数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.SnapshotLogs">
            <summary>
            获取快照日志集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.callbacks">
            <summary>
            服务注册日志回调委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.maxVersion">
            <summary>
            注册服务最大版本号
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode,System.String)">
            <summary>
            服务注册日志组装
            </summary>
            <param name="node"></param>
            <param name="serverName"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.Load(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            冷启动初始化加载数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.Loaded">
            <summary>
            冷启动初始化完毕
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.getLogIndex(System.Int64)">
            <summary>
            获取日志索引位置
            </summary>
            <param name="sessionID"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.getLogIndex(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            获取日志索引位置
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Add the server registration log
            添加服务注册日志
            </summary>
            <param name="session"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.isNewEquals(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Determine whether it is the server restart log
            判断是否服务重启日志
            </summary>
            <param name="session"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.SingletonTimeout(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog)">
            <summary>
            单例服务超时强制下线
            </summary>
            <param name="mainLog"></param>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog})">
            <summary>
            添加服务注册日志回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog})">
            <summary>
            初始化服务注册日志回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.checkSession">
            <summary>
            服务会话在线检查
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.Logout(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            注销服务
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.OnRemoved">
            <summary>
            数据库节点移除处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler.Check(System.Int64,System.Boolean)">
            <summary>
            服务会话在线检查
            </summary>
            <param name="sessionID"></param>
            <param name="isPersistenceLostContact"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum">
            <summary>
            Server registration log operation type
            服务注册日志操作类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.ClusterMain">
            <summary>
            Register the master node of the cluster service
            注册集群服务主节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.ClusterNode">
            <summary>
            Register the ordinary node of the cluster service
            注册集群服务普通节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.Singleton">
            <summary>
            Register the singleton service and notify the current service to go offline to avoid concurrent write conflicts among multi-queue type services
            注册单例服务并通知当前服务下线，用于避免多队列类型服务并发写冲突的问题
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.Logout">
            <summary>
            Log out of service
            注销服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.CheckOnline">
            <summary>
            Online server inspection
            服务端在线检查
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.Offline">
            <summary>
            Notify the singleton server to go offline
            通知单例服务端下线
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.LostContact">
            <summary>
            Missing contact service
            失联服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.CallbackLoaded">
            <summary>
            The initialization log callback is completed
            初始化日志回调完成
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum.LoadCurrentSessionID">
            <summary>
            Initialize to load the currently assigned service session identity
            初始化加载当前已分配服务会话标识
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession">
            <summary>
            服务会话信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession.callback">
            <summary>
            Server registration callback
            服务注册回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession.isOnline">
            <summary>
            服务是否在线
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession.IsCallback">
            <summary>
            服务注册回调委托是否有效
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum})">
            <summary>
            服务会话信息
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum})">
            <summary>
            设置服务注册回调委托
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession.Check(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode)">
            <summary>
            检查服务是否在线
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession.Offline">
            <summary>
            Notify the singleton server to go offline
            通知单例服务端下线
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession.OnRemoved">
            <summary>
            数据库节点移除处理
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog">
            <summary>
            服务注册会话与日志信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog.Log">
            <summary>
            Server Registration Log
            服务注册日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog.Session">
            <summary>
            服务会话信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySession,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            服务注册会话与日志信息
            </summary>
            <param name="session"></param>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog.IsNewEquals(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Determine whether it is the server restart log
            判断是否服务重启日志
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum">
            <summary>
            Server registration status
            服务注册状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.Unknown">
            <summary>
            Unknown error
            未知错误
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.Success">
            <summary>
            The operation was successful
            操作成功
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.UnsupportedServerName">
            <summary>
            Unsupported service name
            不支持的服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.UnrecognizableOperationType">
            <summary>
            The operation type of the server registration log cannot be identified
            不可识别服务注册日志操作类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.NotFoundServerSessionID">
            <summary>
            The service session identity was not found
            没有找到服务会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.NotFoundServerSessionCallback">
            <summary>
            No valid service session callback delegate was found
            没有找到有效的服务会话回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.NotFoundServerName">
            <summary>
            The service name was not found
            没有找到服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.VersionTooLow">
            <summary>
            The registration service version is too low
            注册服务版本过低
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum.OperationTypeConflict">
            <summary>
            Server registration log operation type conflict
            服务注册日志操作类型冲突
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode">
            <summary>
            Server registration node
            服务注册节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.DefaultLoadTimeoutSeconds">
            <summary>
            默认冷启动会话 35 秒数超时，因为客户端连接超时可能是 30 秒
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.logAssemblers">
            <summary>
            服务名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.sessions">
            <summary>
            服务会话信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.logCallbacks">
            <summary>
            服务注册日志回调委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.loadedLog">
            <summary>
            初始化日志回调完成
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.currentSessionID">
            <summary>
            当前已分配服务会话标识ID
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.LoadTimeoutTimestamp">
            <summary>
            冷启动会话超时时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.loadTimeoutSeconds">
            <summary>
            冷启动会话超时秒数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.#ctor(System.Int32)">
            <summary>
            Server registration node
            服务注册节点
            </summary>
            <param name="loadTimeoutSeconds">Cold start session timeout seconds
            冷启动会话超时秒数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.StreamPersistenceMemoryDatabaseServiceNodeOnRemoved">
            <summary>
            Processing operations after node removal
            节点移除后的处理操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.GetSnapshotResult(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.SnapshotSet(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.GetSessionID">
            <summary>
            Get the server session identity
            获取服务会话标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.ServerCallback(System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum})">
            <summary>
            The server registration callback delegate is mainly used to register components to check the online state of the server
            服务注册回调委托，主要用于注册组件检查服务的在线状态
            </summary>
            <param name="sessionID">Server session identity
            服务会话标识</param>
            <param name="callback">Server registration log operation type
            服务注册日志操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Add the server registration log
            添加服务注册日志
            </summary>
            <param name="log"></param>
            <returns>Server registration status
            服务注册状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.LogCallback(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog})">
            <summary>
            Gets the server registration log
            获取服务注册日志
            </summary>
            <param name="serverName">Monitor the server name. An empty string represents all servers
            监视服务名称，空字符串表示所有服务</param>
            <param name="callback">The server registration log returns null to indicate an online check
            服务注册日志，返回 null 表示在线检查</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.Callback(AutoCSer.LeftArray{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog}}@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog,System.Boolean)">
            <summary>
            服务注册日志回调
            </summary>
            <param name="callbacks"></param>
            <param name="log"></param>
            <param name="isPersistenceLostContact"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.GetLog(System.String)">
            <summary>
            Get the main log of the server
            获取服务主日志
            </summary>
            <param name="serverName">Server name
            服务名称</param>
            <returns>Returning null indicates that the server main log was not found
            返回 null 表示没有找到服务主日志</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.check(System.Int64,System.String,System.Boolean)">
            <summary>
            Check the online status of the server
            检查服务在线状态
            </summary>
            <param name="sessionID">Server session identity
            服务会话标识</param>
            <param name="serverName">Server name
            服务名称</param>
            <param name="isPersistenceLostContact"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.Check(System.Int64,System.String)">
            <summary>
            Check the online status of the server
            检查服务在线状态
            </summary>
            <param name="sessionID">Server session identity
            服务会话标识</param>
            <param name="serverName">Server name
            服务名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryNode.LostContact(System.Int64,System.String)">
            <summary>
            Persistent operations for server disconnection
            服务失联的持久化操作
            </summary>
            <param name="sessionID">Server session identity
            服务会话标识</param>
            <param name="serverName">Server name
            服务名称</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryWaitOfflineQueueNode">
            <summary>
            单例服务超时强制下线任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryWaitOfflineQueueNode.logAssembler">
            <summary>
            服务注册日志组装
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryWaitOfflineQueueNode.mainLog">
            <summary>
            需要下线的主服务日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryWaitOfflineQueueNode.log">
            <summary>
            等待上线的服务日志
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryWaitOfflineQueueNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLogAssembler,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistrySessionLog)">
            <summary>
            单例服务器超时强制下线任务节点
            </summary>
            <param name="logAssembler"></param>
            <param name="mainLog"></param>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryWaitOfflineQueueNode.AppendQueueNode">
            <summary>
            添加超时检查队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryWaitOfflineQueueNode.RunTask">
            <summary>
            检查主服务日志
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1">
            <summary>
            分页数组
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.array">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.parameter">
            <summary>
            分页查询参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.skipCount">
            <summary>
            跳过记录数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.index">
            <summary>
            当前数组写入索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.count">
            <summary>
            数据总数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter)">
            <summary>
            分页数组
            </summary>
            <param name="parameter">分页查询参数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.Add">
            <summary>
            新增数据
            </summary>
            <returns>是否需要将数据写入数组</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.Add(`0)">
            <summary>
            将数据写入数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageArray`1.GetPageResult">
            <summary>
            Get page data
            获取分页数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter">
            <summary>
            分页查询参数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetPageArray``1">
            <summary>
            获取分页数组
            </summary>
            <typeparam name="T">Data type</typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetPageResult``1">
            <summary>
            获取空数据
            </summary>
            <typeparam name="T">Data type</typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetPageResult``2(AutoCSer.LeftArray{``0},System.Func{``0,``0,System.Int32},System.Func{``0,``1})">
            <summary>
            Get page data
            获取分页数据
            </summary>
            <typeparam name="T">Data type</typeparam>
            <typeparam name="KT">分页数据关键字类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="comparer">排序比较器</param>
            <param name="getKey">获取分页数据关键字委托</param>
            <returns>已排序关键字数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetPageResult(AutoCSer.LeftArray{System.Int32})">
            <summary>
            Get page data
            获取分页数据
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetDescPageResult(AutoCSer.LeftArray{System.Int32})">
            <summary>
            Get the reverse page data
            获取逆序分页数据
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetPageResult``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32})">
            <summary>
            Get page data
            获取分页数据
            </summary>
            <typeparam name="T">排序关键字类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取分页数据关键字委托</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetDescPageResult``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32})">
            <summary>
            Get the reverse page data
            获取逆序分页数据
            </summary>
            <typeparam name="T">排序关键字类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取分页数据关键字委托</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetPageResult``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64})">
            <summary>
            Get page data
            获取分页数据
            </summary>
            <typeparam name="T">排序关键字类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取分页数据关键字委托</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetDescPageResult``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64})">
            <summary>
            Get the reverse page data
            获取逆序分页数据
            </summary>
            <typeparam name="T">排序关键字类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取分页数据关键字委托</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetKeyPageResult``2(AutoCSer.SearchTree.Dictionary{``0,``1})">
            <summary>
            获取关键字分页数据
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <param name="dictionary">二叉搜索树字典</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetDescKeyPageResult``2(AutoCSer.SearchTree.Dictionary{``0,``1})">
            <summary>
            获取关键字逆序分页数据
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <param name="dictionary">二叉搜索树字典</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetPageResult``1(AutoCSer.SearchTree.Set{``0})">
            <summary>
            获取关键字分页数据
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
            <param name="tree">二叉搜索树集合</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetPageResult``2(AutoCSer.SearchTree.Set{``0},System.Func{``0,``1})">
            <summary>
            获取关键字分页数据
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">返回值数据类型</typeparam>
            <param name="tree">二叉搜索树集合</param>
            <param name="getValue">Delegate for data transformation
            数据转换委托</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetDescPageResult``1(AutoCSer.SearchTree.Set{``0})">
            <summary>
            获取关键字逆序分页数据
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
            <param name="tree">二叉搜索树集合</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetDescPageResult``2(AutoCSer.SearchTree.Set{``0},System.Func{``0,``1})">
            <summary>
            获取关键字逆序分页数据
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">返回值数据类型</typeparam>
            <param name="tree">二叉搜索树集合</param>
            <param name="getValue">Delegate for data transformation
            数据转换委托</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetKeyPageResult``2(AutoCSer.SearchTree.NodeDictionary{``0,``1})">
            <summary>
            获取关键字分页数据
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <param name="dictionary">二叉搜索树字典</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter.GetDescKeyPageResult``2(AutoCSer.SearchTree.NodeDictionary{``0,``1})">
            <summary>
            获取关键字逆序分页数据
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <param name="dictionary">二叉搜索树字典</param>
            <returns>排序关键字集合</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1">
            <summary>
            分页数据
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.Values">
            <summary>
            当前分页数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.TotalCount">
            <summary>
            查询记录总数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.PageIndex">
            <summary>
            当前分页编号（从 0 开始）
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.PageIndex1">
            <summary>
            当前分页编号（从 1 开始）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.PageSize">
            <summary>
            查询分页记录数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.PageCount">
            <summary>
            分页总数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.ReturnType">
            <summary>
            The return value type of the network client
            网络客户端返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.#ctor(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            分页数据
            </summary>
            <param name="values">当前分页数据</param>
            <param name="totalCount">查询记录总数</param>
            <param name="pageIndex">当前分页编号（从 0 开始）</param>
            <param name="pageSize">查询分页记录数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            错误分页数据
            </summary>
            <param name="returnType"></param>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum)">
            <summary>
            错误分页数据
            </summary>
            <param name="returnType"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.Cast``1(``0[])">
            <summary>
            转换分页数据类型
            </summary>
            <typeparam name="VT">Data type</typeparam>
            <param name="values">当前分页数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult`1.Cast``1">
            <summary>
            错误数据转换
            </summary>
            <typeparam name="VT"></typeparam>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult">
            <summary>
            重建持久化文件调用结果
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult.CallState">
            <summary>
            调用返回状态，Success 表示提交成功正在处理中
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult.LoadExceptionNodeState">
            <summary>
            初始化加载执行异常节点状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult.LoadExceptionNodeKey">
            <summary>
            初始化加载执行异常节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult.LoadExceptionNodeType">
            <summary>
            初始化加载执行异常节点接口类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            重建持久化文件调用结果
            </summary>
            <param name="callState"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            重建持久化文件调用结果
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3">
            <summary>
            Binary search tree dictionary node
            二叉搜索树字典节点
            </summary>
            <typeparam name="KT">Sort keyword type
            排序关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <typeparam name="ST">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.dictionary">
            <summary>
            Binary search tree dictionary
            二叉搜索树字典
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.#ctor">
            <summary>
            Binary search tree dictionary node
            二叉搜索树字典节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.SetSnapshotResult(AutoCSer.LeftArray{`2}@,AutoCSer.LeftArray{`2}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.Count">
            <summary>
            Get the number of node data
            获取节点数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.GetHeight">
            <summary>
            Get the tree height has a time complexity of O(n)
            获取树高度，时间复杂度 O(n)
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.Clear">
            <summary>
            Clear the data
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.Set(`0,`1)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key">keyword</param>
            <param name="value">data</param>
            <returns>Have new keywords been added
            是否添加了新关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key">keyword</param>
            <param name="value">data</param>
            <returns>Whether new data has been added
            是否添加了新数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.Remove(`0)">
            <summary>
            Delete node based on keyword
            根据关键字删除节点
            </summary>
            <param name="key">keyword</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.GetRemove(`0)">
            <summary>
            Delete node based on keyword
            根据关键字删除节点
            </summary>
            <param name="key">keyword</param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.ContainsKey(`0)">
            <summary>
            Determines if the keyword exists
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <returns>Whether the keyword exists
            是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key">keyword</param>
            <returns>Target data
            目标数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.IndexOf(`0)">
            <summary>
            Get the matching node location based on the keyword
            根据关键字获取匹配节点位置
            </summary>
            <param name="key">keyword</param>
            <returns>Returning -1 indicates a failed match
            返回 -1 表示失败匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.CountLess(`0)">
            <summary>
            Get the number of nodes smaller than the specified keyword
            获取比指定关键字小的节点数量
            </summary>
            <param name="key">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null
            返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.CountThan(`0)">
            <summary>
            Get the number of nodes larger than the specified keyword
            获取比指定关键字大的节点数量
            </summary>
            <param name="key">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null
            返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.TryGetValueByIndex(System.Int32)">
            <summary>
            Get data based on the node position
            根据节点位置获取数据
            </summary>
            <param name="index">Node position
            节点位置</param>
            <returns>data</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.TryGetFirstKey">
            <summary>
            Get the first keyword
            获取第一个关键字
            </summary>
            <returns>The first keyword
            第一个关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.TryGetLastKey">
            <summary>
            Get the last keyword
            获取最后一个关键字
            </summary>
            <returns>The last keyword
            最后一个关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.TryGetFirstValue">
            <summary>
            Get the first data
            获取第一个数据
            </summary>
            <returns>The first data
            第一个数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.TryGetLastValue">
            <summary>
            Get the last data
            获取最后一个数据
            </summary>
            <returns>The last data
            最后一个数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`3.GetValues(System.Int32,System.Byte)">
            <summary>
            Get a collection of data based on the range
            根据范围获取数据集合
            </summary>
            <param name="skipCount">The number of skipped records
            跳过记录数</param>
            <param name="getCount">The number of records to be obtained
            获取记录数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`2">
            <summary>
            Binary search tree dictionary node
            二叉搜索树字典节点
            </summary>
            <typeparam name="KT">Sort keyword type
            排序关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`2.GetSnapshotResult(AutoCSer.KeyValue{`0,`1}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`2.SnapshotAdd(AutoCSer.KeyValue{`0,`1})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`2.TryGetKeyValueByIndex(System.Int32)">
            <summary>
            Get data based on the node position
            根据节点位置获取数据
            </summary>
            <param name="index">Node position
            节点位置</param>
            <returns>data</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`2.TryGetFirstKeyValue">
            <summary>
            Get the first pair of data
            获取第一对数据
            </summary>
            <returns>The first pair of data
            第一对数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeDictionaryNode`2.TryGetLastKeyValue">
            <summary>
            Get the last pair of data
            获取最后一对数据
            </summary>
            <returns>The last pair of data
            最后一对数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1">
            <summary>
            Binary search tree set node
            二叉搜索树集合节点
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.searchTreeSet">
            <summary>
            Binary search tree set
            二叉搜索树集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.#ctor">
            <summary>
            Binary search tree set node
            二叉搜索树集合节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.GetSnapshotResult(`0[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.SetSnapshotResult(AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{`0}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">keyword</param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data
            添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="value">keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="value">keyword</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data
            删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.GetFrist">
            <summary>
            Get the first data
            获取第一个数据
            </summary>
            <returns>No return value is returned when there is no data
            没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.GetLast">
            <summary>
            Get the last data
            获取最后一个数据
            </summary>
            <returns>No return value is returned when there is no data
            没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.IndexOf(`0)">
            <summary>
            Get the matching node location based on the keyword
            根据关键字获取匹配节点位置
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates a failed match
            返回 -1 表示失败匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.CountLess(`0)">
            <summary>
            Get the number of nodes smaller than the specified keyword
            获取比指定关键字小的节点数量
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null
            返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.CountThan(`0)">
            <summary>
            Get the number of nodes larger than the specified keyword
            获取比指定关键字大的节点数量
            </summary>
            <param name="value">keyword</param>
            <returns>Returning -1 indicates that the data to be matched is null
            返回 -1 表示待匹配数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SearchTreeSetNode`1.GetByIndex(System.Int32)">
            <summary>
            Get data based on the node position
            根据节点位置获取数据
            </summary>
            <param name="index">Node position
            节点位置</param>
            <returns>data</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2">
            <summary>
            排序字典节点
            </summary>
            <typeparam name="KT">Sort keyword type
            排序关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.dictionary">
            <summary>
            排序字典
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.#ctor">
            <summary>
            排序字典节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.GetSnapshotResult(AutoCSer.KeyValue{`0,`1}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.SetSnapshotResult(AutoCSer.LeftArray{AutoCSer.KeyValue{`0,`1}}@,AutoCSer.LeftArray{AutoCSer.KeyValue{`0,`1}}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.SnapshotAdd(AutoCSer.KeyValue{`0,`1})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.ContainsValue(`1)">
            <summary>
            To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedDictionaryNode`2.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2">
            <summary>
            排序列表节点
            </summary>
            <typeparam name="KT">Sort keyword type
            排序关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.list">
            <summary>
            排序列表
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.#ctor(System.Int32)">
            <summary>
            排序列表
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.GetSnapshotResult(AutoCSer.KeyValue{`0,`1}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.SetSnapshotResult(AutoCSer.LeftArray{AutoCSer.KeyValue{`0,`1}}@,AutoCSer.LeftArray{AutoCSer.KeyValue{`0,`1}}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.SnapshotAdd(AutoCSer.KeyValue{`0,`1})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.GetCapacity">
            <summary>
            Get the container size
            获取容器大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.ContainsValue(`1)">
            <summary>
            To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.IndexOfKey(`0)">
            <summary>
            Get the ranking position of the key word
            获取关键字排序位置
            </summary>
            <param name="key"></param>
            <returns>A negative number indicates that the keyword was not found
            负数表示没有找到关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.IndexOfValue(`1)">
            <summary>
            Get the first matching data sort position (since cached data is a serialized copy of the object, the equality test is done by implementing IEquatable{VT})
            获取第一个匹配数据排序位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>A negative number indicates that no matching data was found
            负数表示没有找到匹配数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedListNode`2.RemoveAt(System.Int32)">
            <summary>
            Delete the data at the specified sort index position
            删除指定排序索引位置数据
            </summary>
            <param name="index"></param>
            <returns>Returning false indicates that the index is out of range
            返回 false 表示索引超出范围</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1">
            <summary>
            排序集合节点
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.sortedSet">
            <summary>
            排序集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.#ctor">
            <summary>
            排序集合节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.GetSnapshotResult(`0[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.SetSnapshotResult(AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{`0}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.AddValues(`0[])">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="values"></param>
            <returns>The quantity of the added data
            添加数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.Contains(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.RemoveValues(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="values"></param>
            <returns>The quantity of deleted data
            删除数据数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.GetMin">
            <summary>
            Get the minimum value
            获取最小值
            </summary>
            <returns>No return value is returned when there is no data
            没有数据时返回无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SortedSetNode`1.GetMax">
            <summary>
            Get the maximum value
            获取最大值
            </summary>
            <returns>No return value is returned when there is no data
            没有数据时返回无返回值</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode">
            <summary>
            Stack node interface (Last in, first out)
            栈节点接口（后进先出）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.stack">
            <summary>
            栈
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.#ctor(System.Int32)">
            <summary>
            栈节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.GetSnapshotResult(System.Byte[][],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.SetSnapshotResult(AutoCSer.LeftArray{System.Byte[]}@,AutoCSer.LeftArray{System.Byte[]}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.SnapshotAdd(System.Byte[])">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.Push(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Add the data to the stack
            将数据添加到栈
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.TryPop">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.TryPopResponseParameter">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.TryPeek">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ByteArrayStackNode.TryPeekResponseParameter">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1">
            <summary>
            Stack node interface (Last in, first out)
            栈节点接口（后进先出）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.stack">
            <summary>
            栈
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.#ctor(System.Int32)">
            <summary>
            栈节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.GetSnapshotResult(`0[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.SetSnapshotResult(AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{`0}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.Contains(`0)">
            <summary>
            Determine whether there is matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT})
            判断是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">Data to be matched
            待匹配数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.Push(`0)">
            <summary>
            Add the data to the stack
            将数据添加到栈
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.TryPop">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StackNode`1.TryPeek">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NullResponseParameterSerializer">
            <summary>
            The default empty return parameter serialization
            默认空返回参数序列化
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NullResponseParameterSerializer.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NullResponseParameterSerializer.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
            <returns>Target object</returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NullResponseParameterSerializer.Null">
            <summary>
            The default empty return parameter serialization
            默认空返回参数序列化
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer">
            <summary>
            持久化文件缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.SerializeWaitLock">
            <summary>
            序列化结束等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.Buffer">
            <summary>
            读取数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.position">
            <summary>
            The written location of the persistent stream
            持久化流已写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.isPersistenceCallbackExceptionPosition">
            <summary>
            是否持久化回调异常位置文件，false 表示为持久化文件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.#ctor(AutoCSer.Memory.ByteArrayBuffer@,System.Boolean)">
            <summary>
            持久化文件缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="isPersistenceCallbackExceptionPosition"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.Boolean)">
            <summary>
            持久化文件缓冲区
            </summary>
            <param name="callState"></param>
            <param name="isPersistenceCallbackExceptionPosition"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.SetBuffer(System.Int32,System.Int64)">
            <summary>
            设置缓冲区字节数
            </summary>
            <param name="bufferSize"></param>
            <param name="position"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.SetSerializeWaitLock">
            <summary>
            释放序列化结束等待锁
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#PersistenceFileBuffer}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#PersistenceFileBuffer}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod">
            <summary>
            修复节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.RemoteType">
            <summary>
            服务端节点接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.TypeDirectoryName">
            <summary>
            修复节点方法类型保存目录名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.MethodDirectoryName">
            <summary>
            修复节点方法保存目录名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.RawAssembly">
            <summary>
            程序集文件数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.MethodName">
            <summary>
            修复方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.RepairNodeMethodDirectory">
            <summary>
            修复方法目录信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.RepairNodeMethodFile">
            <summary>
            修复方法文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.#ctor">
            <summary>
            修复节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            修复节点方法信息
            </summary>
            <param name="callState">调用状态</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.#ctor(System.Type,System.String,System.String,System.Byte[],System.Reflection.MethodInfo,System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            修复节点方法信息
            </summary>
            <param name="type">节点类型</param>
            <param name="typeDirectoryName">修复节点方法类型保存目录名称</param>
            <param name="methodDirectoryName">修复节点方法保存目录名称</param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="method">修复方法信息</param>
            <param name="assemblyFile">程序集文件信息</param>
            <param name="methodNameFile">修复方法名称文件信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod.Deserialize(AutoCSer.BinaryDeserializer,System.Int32)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory">
            <summary>
            修复方法目录信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.NodeTypeHashCode">
            <summary>
            节点类型哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.Position">
            <summary>
            修复方法生效的持久化重建绝对位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.RepairTime">
            <summary>
            修复方法目录创建时间
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.MethodIndex">
            <summary>
            方法编号
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.#ctor(System.String)">
            <summary>
            修复方法目录信息
            </summary>
            <param name="nodeTypeFullName">节点类型名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.#ctor(System.String,System.Int32)">
            <summary>
            修复方法目录信息
            </summary>
            <param name="nodeTypeFullName">节点类型名称</param>
            <param name="methodIndex">方法编号</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.Equals(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory)">
            <summary>
            判断是否一致
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.Equals(System.Object)">
            <summary>
            判断是否一致
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory.GetHashCode">
            <summary>
            哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile">
            <summary>
            修复方法文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile.AssemblyFileLength">
            <summary>
            程序集文件长度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile.MethodNameFileLength">
            <summary>
            方法名称信息 JSON 文件长度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile.LastWriteTime">
            <summary>
            文件最后修改时间
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile.#ctor(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            修复方法文件信息
            </summary>
            <param name="assemblyFile">程序集文件</param>
            <param name="methodNameFile">方法名称信息 JSON 文件</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile.Set(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            设置程序集文件信息
            </summary>
            <param name="assemblyFile">程序集文件</param>
            <param name="methodNameFile">方法名称信息 JSON 文件</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile.Equals(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile)">
            <summary>
            判断是否一致
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName">
            <summary>
            修复节点方法名称信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName.DeclaringTypeFullName">
            <summary>
            静态方法定义类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName.Name">
            <summary>
            修复静态方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName.NodeTypeFullName">
            <summary>
            节点类型名称
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            修复节点方法名称信息
            </summary>
            <param name="method">静态方法信息</param>
            <param name="nodeType">节点类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName.Set(System.String,System.String)">
            <summary>
            设置修复节点方法名称信息
            </summary>
            <param name="declaringTypeFullName"></param>
            <param name="name"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition">
            <summary>
            修复节点方法信息 与 文件流持久化位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition.Position">
            <summary>
            文件流持久化位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition.RepairNodeMethod">
            <summary>
            修复节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition.#ctor(System.Int64)">
            <summary>
            文件流持久化位置
            </summary>
            <param name="position">文件流持久化位置</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod)">
            <summary>
            修复节点方法信息
            </summary>
            <param name="repairNodeMethod"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#RepairNodeMethodPosition}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#RepairNodeMethodPosition}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter.Index">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter.methodIndex">
            <summary>
            调用方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter.serializer">
            <summary>
            序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter.MethodParameter">
            <summary>
            调用方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterSerializer)">
            <summary>
            请求参数序列化
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="serializer">序列化委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#RequestParameter}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#RequestParameter}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterBinarySerializer`1">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterBinarySerializer`1.value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterBinarySerializer`1.#ctor(`0)">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterBinarySerializer`1.#ctor(`0@)">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterBinarySerializer`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterJsonSerializer`1">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterJsonSerializer`1.value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterJsonSerializer`1.#ctor(`0)">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterJsonSerializer`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterSerializer">
            <summary>
            请求参数序列化
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterSerializer.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterSimpleSerializer`1">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterSimpleSerializer`1.value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterSimpleSerializer`1.#ctor(`0@)">
            <summary>
            内部成员对象序列化为一个可独立反序列化的数据
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterSimpleSerializer`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter">
            <summary>
            Return parameter
            返回参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.State">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.#ctor">
            <summary>
            Return parameter
            返回参数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Return parameter
            返回参数
            </summary>
            <param name="state">Call status
            调用状态</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ResponseParameter}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ResponseParameter}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.CreateKeepCallback">
            <summary>
            Create a keep callback return parameter
            创建保持回调返回参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.Create``1(``0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Create the return parameters
            创建返回参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter.CallStates">
            <summary>
            A collection of call state return parameter
            调用状态返回参数集合
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter`1">
            <summary>
            Return parameter
            返回参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter`1.Value">
            <summary>
            Return data
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter`1.#ctor">
            <summary>
            Return parameter
            返回参数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter`1.#ctor(`0)">
            <summary>
            Return parameter
            返回参数
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod.CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter)">
            <summary>
            调用方法
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod.LoadCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter)">
            <summary>
            初始化加载数据
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod`1">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <typeparam name="T">输入参数类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod`1.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod`1.CreateInputParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter.Method">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter.SendOnly">
            <summary>
            调用方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter.PersistenceCallback">
            <summary>
            持久化回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter.CreateBeforePersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            创建持久化检查方法调用参数
            </summary>
            <param name="beforePersistenceMethod"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1">
            <summary>
            调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1.Parameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethod)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32,`0@)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1.Deserialize(AutoCSer.BinaryDeserializer,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            输入参数反序列化（初始化加载持久化数据）
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1.PersistenceSerialize(AutoCSer.BinarySerializer)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1.CreateBeforePersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            创建持久化检查方法调用参数
            </summary>
            <param name="beforePersistenceMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter`1.GetParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter{`0})">
            <summary>
            获取输入参数
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Method">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.callback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.CallInput(AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}@)">
            <summary>
            调用方法
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.PersistenceCallback">
            <summary>
            持久化回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.SuccessCallback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter)">
            <summary>
            调用回调
            </summary>
            <param name="methodParameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter.CreateBeforePersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            创建持久化检查方法调用参数
            </summary>
            <param name="beforePersistenceMethod"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1">
            <summary>
            调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1.Parameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethod)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32,`0@)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1.Deserialize(AutoCSer.BinaryDeserializer,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            输入参数反序列化（初始化加载持久化数据）
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1.PersistenceSerialize(AutoCSer.BinarySerializer)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1.CreateBeforePersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            创建持久化检查方法调用参数
            </summary>
            <param name="beforePersistenceMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter`1.GetParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter{`0})">
            <summary>
            获取输入参数
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="callType">Method call type
            方法调用类型</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod.CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter)">
            <summary>
            调用方法
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod.CallOutputBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter)">
            <summary>
            持久化操作之前检查输入参数
            </summary>
            <param name="parameter"></param>
            <returns>无返回值表示需要继续调用持久化方法</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod.CallBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter)">
            <summary>
            持久化操作之前检查输入参数
            </summary>
            <param name="parameter"></param>
            <returns>返回 true 表示需要继续调用持久化方法</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod.LoadCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter)">
            <summary>
            初始化加载数据
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod`1">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <typeparam name="T">输入参数类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod`1.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod`1.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="callType">Method call type
            方法调用类型</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod`1.CreateInputParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Method">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.callback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.CallInputOutput(AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}@)">
            <summary>
            调用方法
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.PersistenceCallback">
            <summary>
            持久化回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.SuccessCallback``1(``0)">
            <summary>
            调用回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.Callback``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter,``0)">
            <summary>
            调用回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodParameter"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.SuccessCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            调用回调
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.CallbackResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            调用回调
            </summary>
            <param name="methodParameter"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.CreateBeforePersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            创建持久化检查方法调用参数
            </summary>
            <param name="beforePersistenceMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.GetBeforePersistenceResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{``0})">
            <summary>
            获取持久化检查方法返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodParameter"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter.CreateMethodCallback``1">
            <summary>
            创建方法调用回调包装对象
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1">
            <summary>
            调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.Parameter">
            <summary>
            Input parameters
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32,`0@)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32,`0@,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod,`0)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.Deserialize(AutoCSer.BinaryDeserializer,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            输入参数反序列化（初始化加载持久化数据）
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.PersistenceSerialize(AutoCSer.BinarySerializer)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.CreateBeforePersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethod)">
            <summary>
            创建持久化检查方法调用参数
            </summary>
            <param name="beforePersistenceMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter`1.GetParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter{`0})">
            <summary>
            获取输入参数
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod.Call(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}@)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod.LoadCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            初始化加载数据
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod.Callback(AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}@)">
            <summary>
            调用回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod.CallbackDelegate">
            <summary>
            调用回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethodParameter.method">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethodParameter.callback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethod,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethodParameter.PersistenceCallback">
            <summary>
            持久化回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethodParameter.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallMethodParameter.PersistenceSerialize(AutoCSer.BinarySerializer)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="callType">Method call type
            方法调用类型</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}@)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.CallOutputBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            持久化操作之前检查输入参数
            </summary>
            <param name="node"></param>
            <returns>无返回值表示需要继续调用持久化方法</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.CallBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            持久化操作之前检查输入参数
            </summary>
            <param name="node"></param>
            <returns>返回 true 表示需要继续调用持久化方法</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.LoadCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            初始化加载数据
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.Callback``1(``0,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            调用回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="callback"></param>
            <param name="flag">服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.CallbackResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}@)">
            <summary>
            调用回调
            </summary>
            <param name="value"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod.GetBeforePersistenceResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{``0},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            获取持久化检查方法返回值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="flag">服务端节点方法标记</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter.method">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter.callback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethod,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="method"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.Int32)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter.PersistenceCallback">
            <summary>
            持久化回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallOutputMethodParameter.PersistenceSerialize(AutoCSer.BinarySerializer)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum">
            <summary>
            Method call type
            方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.Call">
            <summary>
            No input parameters, no return values
            无输入参数，无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.CallInput">
            <summary>
            There are input parameters but no return values
            有输入参数，无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.CallOutput">
            <summary>
            There are no input parameters, but there is a return value
            无输入参数，有返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.CallInputOutput">
            <summary>
            There are input parameters and return values
            有输入参数，有返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.SendOnly">
            <summary>
            There are input parameters but no return values
            有输入参数，无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.KeepCallback">
            <summary>
            There are no input parameters, but there is a return value (keep callback)
            无输入参数，有返回值（持续回调）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.InputKeepCallback">
            <summary>
            There are input parameters and return values (keep callback)
            有输入参数，有返回值（持续回调）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.Callback">
            <summary>
            There are no input parameters, but there is a return value (The server-side call type corresponds to the CallOutput on the client side)
            无输入参数，有返回值（服务端调用类型，客户端对应 CallOutput）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.InputCallback">
            <summary>
            There are input parameters and return values (The server-side call type corresponds to CallInputOutput on the client side)
            有输入参数，有返回值（服务端调用类型，客户端对应 CallInputOutput） 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.Enumerable">
            <summary>
            There are no input parameters, but there is a return value (keep callback) (The server-side call type corresponds to KeepCallback on the client side)
            无输入参数，有返回值（持续回调）（服务端调用类型，客户端对应 KeepCallback）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.InputEnumerable">
            <summary>
            There are input parameters and return values (keep callback) (The server-side call type corresponds to InputKeepCallback on the client side)
            有输入参数，有返回值（持续回调）（服务端调用类型，客户端对应 InputKeepCallback）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum.Unknown">
            <summary>
            Unknown call type, and the definition is illegal
            未知调用类型，定义不合法
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3">
            <summary>
            字典节点
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <typeparam name="ST">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            字典节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large)
            清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Initialize the size of the new container
            新容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.TryAdd(`0,`1)">
            <summary>
            Add data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.Set(`0,`1)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks)
            可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`3.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`2">
            <summary>
            字典节点
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#KeyValue{KT,VT}}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`2.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            字典节点
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DictionaryNode`2.SnapshotAdd(AutoCSer.KeyValue{`0,`1})">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3">
            <summary>
            Dictionary node interface
            字典节点接口
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <typeparam name="ST">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.SnapshotAdd(`2)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large)
            清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Initialize the size of the new container
            新容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.Count">
            <summary>
            Get the quantity of data
            获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.TryAdd(`0,`1)">
            <summary>
            Try to add data
            尝试添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.Set(`0,`1)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists
            强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.TryGetValue(`0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.GetValueArray(`0[])">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.Clear">
            <summary>
            Clear all data
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.ReusableClear">
            <summary>
            Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks)
            可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.RemoveKeys(`0[])">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`3.GetRemove(`0)">
            <summary>
            Delete the keywords and return the deleted data
            删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist
            被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNode`2">
            <summary>
            Dictionary node interface
            字典节点接口
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <summary>
            Dictionary node interface 
                       字典节点接口
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter">
            <summary>
            Return parameters that support await
            支持 await 的返回参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter.node">
            <summary>
            Client node
            客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter.nodeIndex">
            <summary>
            Request the index information of the node for passing parameters
            请求传参的节点索引信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode)">
            <summary>
            Return parameters that support await
            支持 await 的返回参数
            </summary>
            <param name="node">Client node
            客户端节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter.OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter.onCompleted">
            <summary>
            The asynchronous operation has been completed
            异步操作已完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter.renew">
            <summary>
            Trigger node reconstruction
            触发节点重建
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter.reindex">
            <summary>
            The index is invalid. Get the index again
            索引已失效，重新获取获取索引
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1">
            <summary>
            await ResponseResult{T}, and return the parameter
            await ResponseResult{T}，返回参数
            </summary>
            <typeparam name="T">Return value type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.Command">
            <summary>
            The return value command
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.Value">
            <summary>
            Return value
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode)">
            <summary>
            Return parameters that support await
            支持 await 的返回参数
            </summary>
            <param name="node">Client node
            客户端节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,`0)">
            <summary>
            Return parameters that support await
            支持 await 的返回参数
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="value">Return value</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.Wait">
            <summary>
            Wait for the command call to return the result
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.GetResult">
            <summary>
            Get the result of the command call
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.Set(AutoCSer.Net.ReturnCommand{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Set the return value command
            设置返回值命令
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter`1.onCommandCompleted">
            <summary>
            The return value command completes the callback
            返回值命令完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterBinarySerializer`1">
            <summary>
            Return parameter binary serialization
            返回参数二进制序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterBinarySerializer`1.Value">
            <summary>
            Return data
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterBinarySerializer`1.#ctor">
            <summary>
            Return parameter binary serialization
            返回参数二进制序列化
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterBinarySerializer`1.#ctor(`0)">
            <summary>
            Return parameter binary serialization
            返回参数二进制序列化
            </summary>
            <param name="value">Return data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterBinarySerializer`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterBinarySerializer`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
            <returns>Target object</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer">
            <summary>
            Return parameter serialization
            返回参数序列化
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
            <returns>Target object</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSimpleSerializer`1">
            <summary>
            Return parameter simple serialization
            返回参数简单序列化
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSimpleSerializer`1.Value">
            <summary>
            Return data
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSimpleSerializer`1.#ctor">
            <summary>
            Return parameter simple serialization
            返回参数简单序列化
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSimpleSerializer`1.#ctor(`0)">
            <summary>
            Return parameter simple serialization
            返回参数简单序列化
            </summary>
            <param name="value">Return data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSimpleSerializer`1.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSimpleSerializer`1.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
            <returns>Target object</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter">
            <summary>
            await ResponseResult, which returns the result of the call status
            await ResponseResult，返回调用状态结果
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter.command">
            <summary>
            The return value command
            返回值命令
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,AutoCSer.Net.ReturnCommand{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Return the result of the call status
            返回调用状态结果
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="command">The return value command
            返回值命令</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter.Wait">
            <summary>
            Wait for the command call to return the result
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter.GetResult">
            <summary>
            Get the result of the command call
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter.onCommandCompleted">
            <summary>
            The return value command completes the callback
            返回值命令完成回调
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray">
            <summary>
            Return the server-side byte array
            返回服务端字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.buffer">
            <summary>
            Server-side byte array
            服务端字节数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.#ctor(System.Byte[])">
            <summary>
            Return the server-side byte array
            返回服务端字节数组
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Return the server-side byte array
            返回服务端字节数组
            </summary>
            <param name="state">Error call status
            错误调用状态</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.op_Implicit(System.Byte[])~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">Server-side byte array
            服务端字节数组</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray">
            <summary>
            Implicit conversion
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.Null">
            <summary>
            A null byte array
            null 的字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.EmptyArray">
            <summary>
            The byte array of the 0-length array
            0 长度数组的字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArray.stateArray">
            <summary>
            The array of called states
            调用状态数组
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer">
            <summary>
            Server-side byte array serialization
            服务端字节数组序列化
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer.buffer">
            <summary>
            Server-side byte array
            服务端字节数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer.#ctor(System.Byte[])">
            <summary>
            Server-side byte array serialization
            服务端字节数组序列化
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer.op_Implicit(System.Byte[])~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">Server-side byte array
            服务端字节数组</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
            <returns>Target object</returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer.Null">
            <summary>
            A null byte array
            null 的字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseServerByteArraySerializer.EmptyArray">
            <summary>
            The byte array of the 0-length array
            0 长度数组的字节数组
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1">
            <summary>
            返回结果，用于替代 ResponseResult{ValueResult{T}}，IsValue 表示是否存在返回值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.Value">
            <summary>
            Return value
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.ReturnType">
            <summary>
            The return value type of the network client
            网络客户端返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.CallState">
            <summary>
            Call status
            调用状态
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.IsSuccess">
            <summary>
            Is the call successful
            是否调用成功
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.IsValue">
            <summary>
            是否存在返回数据，false 表示输入参数非法或者无返回值
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.#ctor(AutoCSer.Net.CommandClientReturnTypeEnum,System.String)">
            <summary>
            Return result
            返回结果
            </summary>
            <param name="returnType"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Return result
            返回结果
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.#ctor(`0)">
            <summary>
            Return result
            返回结果
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseValueResult`1.#ctor(System.Boolean)">
            <summary>
            Return result
            返回结果
            </summary>
            <param name="isValue"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray">
            <summary>
            Server-side byte array/client-side serialized object (Client-side string/byte[] parameters can be implicitly converted, and serialization can call the static method BinarySerialize/JsonSerialize)
            服务端字节数组 / 客户端序列化对象（客户端 string / byte[] 传参可隐式转换，序列化可调用静态方法 BinarySerialize / JsonSerialize）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.Buffer">
            <summary>
            Server-side byte array
            服务端字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.serializer">
            <summary>
            Client object serialization
            客户端对象序列化
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.#ctor(System.Byte[])">
            <summary>
            Server-side byte array
            服务端字节数组
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameterSerializer)">
            <summary>
            Client-side serialized object
            客户端序列化对象
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)~System.Byte[]">
            <summary>
            Server-side implicit conversion
            服务端隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.op_Implicit(System.Byte[])~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray">
            <summary>
            Client-side implicit conversion
            客户端隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.op_Implicit(System.String)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray">
            <summary>
            Client-side implicit conversion
            客户端隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.GetString(System.String@)">
            <summary>
            Get string data
            获取字符串数据
            </summary>
            <param name="value"></param>
            <returns>Whether the string parsing was successful
            字符串解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ServerByteArray}#Serialize(AutoCSer.BinarySerializer)">
            <summary>
            Serialization
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.AutoCSer#BinarySerialize#ICustomSerialize{AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ServerByteArray}#Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.BinarySerialize``1(``0)">
            <summary>
            Get a binary serialization object
            获取二进制序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.BinaryDeserialize``1(``0@)">
            <summary>
            Get the binary deserialized object
            获取二进制反序列化对象
            </summary>
            <param name="value"></param>
            <returns>Whether deserialization was successful
            反序列化是否成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.JsonSerialize``1(``0)">
            <summary>
            Get the JSON mixed binary serialization object
            获取 JSON 混杂二进制序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray.JsonDeserialize``1(``0@)">
            <summary>
            Get the JSON mixed binary deserialized object
            获取 JSON 混杂二进制反序列化对象
            </summary>
            <param name="value"></param>
            <returns>Whether deserialization was successful
            反序列化是否成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper">
            <summary>
            日志流持久化内存数据库备份
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.masterClient">
            <summary>
            主节点客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.delayTimeSpan">
            <summary>
            同步失败重试间隔
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.loader">
            <summary>
            日志流持久化内存数据库从节点服务数据加载
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.isLoad">
            <summary>
            是否已经启动数据加载
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.IsBackup">
            <summary>
            是否备份客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceConfig,AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent)">
            <summary>
            日志流持久化内存数据库备份
            </summary>
            <param name="config">Configuration of in-memory database service for log stream persistence
            日志流持久化内存数据库服务配置</param>
            <param name="masterClient">主节点客户端</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.Load">
            <summary>
            开始加载数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.CloseLoader(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader,System.Boolean)">
            <summary>
            关闭数据加载
            </summary>
            <param name="loader"></param>
            <param name="isRetry"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.delayLoad">
            <summary>
            重试加载数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISlaveLoader#GetPersistenceCallbackExceptionPositionFile(System.Int64,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="position"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Backuper.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISlaveLoader#GetPersistenceFile(System.Int64,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="position"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputMethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputMethodParameter.BeforePersistenceMethodParameter">
            <summary>
            持久化之前检查参数的调用方法与参数信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputMethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputMethodParameter.Deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            输入参数反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputMethodParameter.Deserialize(AutoCSer.BinaryDeserializer,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            输入参数反序列化（初始化加载持久化数据）
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputMethodParameter.PersistenceSerialize``1(AutoCSer.BinarySerializer,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method,``0@)">
            <summary>
            持久化序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputMethodParameter.Deserialize``1(AutoCSer.BinaryDeserializer,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method,``0@)">
            <summary>
            输入参数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputMethodParameter.Deserialize``1(AutoCSer.BinaryDeserializer,AutoCSer.SubArray{System.Byte}@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method,``0@)">
            <summary>
            输入参数反序列化
            </summary>
            <param name="deserializer"></param>
            <param name="buffer"></param>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode">
            <summary>
            Service basic operation interface
            服务基础操作接口
            </summary>
            <summary>
            Service basic operation interface 
                       服务基础操作接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.RemoveNodeByKey(System.String)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateServerRegistryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a server registration node IServerRegistryNode
            创建服务注册节点 IServerRegistryNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="loadTimeoutSeconds">Cold start session timeout seconds
            冷启动会话超时秒数</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateProcessGuardNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a service process daemon node IProcessGuardNode
            创建服务进程守护节点 IProcessGuardNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateServerByteArrayMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node IMessageNode{ServerByteArrayMessage}
            创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node IMessageNode{T}
            创建消息处理节点 IMessageNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="messageType">Message data type
            消息数据类型</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateDistributedLockNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create distributed lock nodes IDistributedLockNode{KT}
            创建分布式锁节点 IDistributedLockNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateByteArrayFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a dictionary node IByteArrayFragmentDictionaryNode{KT}
            创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a dictionary node IFragmentDictionaryNode{KT,VT}
            创建字典节点 IFragmentDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateByteArrayDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IByteArrayDictionaryNode{KT}
            创建字典节点 IByteArrayDictionaryNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IDictionaryNode{KT,VT}
            创建字典节点 IDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateSearchTreeDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a binary search tree node ISearchTreeDictionaryNode{KT,VT}
            创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateSortedDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a sorting dictionary node ISortedDictionaryNode{KT,VT}
            创建排序字典节点 ISortedDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateSortedListNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a sorting list node ISortedListNode{KT,VT}
            创建排序列表节点 ISortedListNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateFragmentHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a 256 base fragment hash table node IFragmentHashSetNode{KT}
            创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a hash table node IHashSetNode{KT}
            创建哈希表节点 IHashSetNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateSearchTreeSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a binary search tree collection node ISearchTreeSetNode{KT}
            创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateSortedSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create sorted collection node ISortedSetNode{KT}
            创建排序集合节点 ISortedSetNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a queue node IQueueNode{T} (First in, first Out)
            创建队列节点（先进先出） IQueueNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a stack node IStackNode{T} (Last in, first out)
            创建栈节点（后进先出） IStackNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateLeftArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a array node ILeftArrayNode{T}
            创建数组节点 ILeftArrayNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a array node IArrayNode{T}
            创建数组节点 IArrayNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="length">Array length</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateHashBytesFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a dictionary node IHashBytesFragmentDictionaryNode
            创建字典节点 IHashBytesFragmentDictionaryNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateHashBytesDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IHashBytesDictionaryNode
            创建字典节点 IHashBytesDictionaryNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateByteArrayQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a queue node IByteArrayQueueNode (First in, first Out)
            创建队列节点（先进先出） IByteArrayQueueNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateByteArrayStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a stack node IByteArrayStackNode (Last in, first out)
            创建栈节点（后进先出） IByteArrayStackNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateOnlyPersistenceNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create an archive node only IOnlyPersistenceNode{T}
            创建仅存档节点 IOnlyPersistenceNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="valueType">Archive data type
            存档数据类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateManyHashBitMapClientFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode
            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateManyHashBitMapFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode
            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateIdentityGeneratorNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int64)">
            <summary>
            Create a 64-bit auto-increment identity node IIdentityGeneratorNode
            创建 64 位自增ID 节点 IIdentityGeneratorNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="identity">Initial Allocation identity
            起始分配 ID</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNode.CreateBitmapNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.UInt32)">
            <summary>
            Create a bitmap node IBitmapNode
            创建位图节点 IBitmapNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">The number of binary bits
            二进制位数量</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService">
            <summary>
            Log stream persistence In-memory database service interface (supporting concurrent read operations)
            日志流持久化内存数据库服务接口（支持并发读取操作）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.GetNodeIndex(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity
            获取节点标识
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.Call(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.CallOutput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.CallInput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.CallInputOutput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.SendOnly(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.KeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.InputKeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.CallWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.CallOutputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.CallInputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.CallInputOutputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.SendOnlyWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.KeepCallbackWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.InputKeepCallbackWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.Rebuild(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue)">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.CreateSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Boolean)">
            <summary>
            Create a slave node
            创建从节点
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
            <returns>Verify the timestamp from the node, and a negative number represents the CallStateEnum error status
            从节点验证时间戳，负数表示 CallStateEnum 错误状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.RemoveSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64)">
            <summary>
            Remove the information from the node client
            移除从节点客户端信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp from create the slave node client
            创建从节点客户端时间戳</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.AppendRepairNodeMethodDirectoryFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile)">
            <summary>
            Add the directory and file information of the repair method from the slave node
            从节点添加修复方法目录与文件信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="directory">Directory information of the repair method
            修复方法目录信息</param>
            <param name="file">File information of the repair method
            修复方法文件信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.GetRepairNodeMethodPosition(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition})">
            <summary>
            Get the repair node method information from slave node
            从节点获取修复节点方法信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback">The callback delegate for get the method information of the repair node
            获取修复节点方法信息回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.GetPersistenceFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.GetPersistenceCallbackExceptionPosition(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,AutoCSer.Net.CommandServerKeepCallback{System.Int64})">
            <summary>
            Get the location data of the persistent callback exception
            获取持久化回调异常位置数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IReadWriteQueueService.GetPersistenceCallbackExceptionPositionFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase">
            <summary>
            Log stream persistence in-memory database service interface
            日志流持久化内存数据库服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.GetUtcNow">
            <summary>
            Get the server UTC time
            获取服务端 UTC 时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.GetPersistencePosition">
            <summary>
            Get the current write location of the persistent stream
            获取持久化流已当前写入位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.GetRebuildSnapshotPosition">
            <summary>
            Get the end position of the rebuild snapshot
            获取重建快照结束位置
            </summary>
            <returns>The end position of the rebuild snapshot
            重建快照结束位置</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.GetNodeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Net.CommandServerKeepCallbackCount{System.String})">
            <summary>
            Gets the global keyword for all matching nodes
            获取所有匹配节点的全局关键字
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.GetNodeIndexs(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex})">
            <summary>
            Gets the node index information for all matching nodes
            获取所有匹配节点的节点索引信息
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.GetNodeKeyIndexs(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}})">
            <summary>
            Gets the global keyword and node index information of all matching nodes
            获取所有匹配节点的全局关键字与节点索引信息
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.RepairNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <param name="index"></param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="methodName">The name of the repair method must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.BindNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <param name="index"></param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="methodName">The name of the repair method must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.CheckPersistenceFileHead(System.UInt32,System.UInt64)">
            <summary>
            Check whether the header of the persistent file matches
            检查持久化文件头部是否匹配
            </summary>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <returns>The persistent stream has been written to the location and returns -1 in case of failure
            持久化流已写入位置，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStreamPersistenceMemoryDatabaseServiceBase.CheckPersistenceCallbackExceptionPositionFileHead(System.UInt32,System.UInt64)">
            <summary>
            Check whether the header of the persistent callback exception location file matches
            检查持久化回调异常位置文件头部是否匹配
            </summary>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <returns>The written location of the persistent callback exception location file. Return -1 in case of failure
            持久化回调异常位置文件已写入位置，失败返回 -1</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1.nodeIndex">
            <summary>
            请求节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1.parameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1.serverCallback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}})">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="parameter">调用方法与参数信息</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            队列节点回调设置结果
            </summary>
            <param name="responseParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode.Create``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,``1,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{``0}})">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="PT"></typeparam>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call parameters
            调用参数</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNodeCallback`1">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNodeCallback`1.node">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNodeCallback`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNode{`0})">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="node">本地服务调用节点方法队列节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNodeCallback`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputOutputNodeCallback`1.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            同步回调
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.nodeIndex">
            <summary>
            请求节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.parameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.serverCallback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult})">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="parameter">调用方法与参数信息</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            队列节点回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode.Create``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult})">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call parameters
            调用参数</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNodeCallback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNodeCallback.node">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNodeCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNode)">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="node">本地服务调用节点方法队列节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNodeCallback.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackInputNodeCallback.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            同步回调
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.methodIndex">
            <summary>
            调用方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.nodeIndex">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.serverCallback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}})">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            队列节点回调设置结果
            </summary>
            <param name="responseParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode`1.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}},System.Boolean)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
            <param name="isWriteQueue"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNodeCallback`1">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNodeCallback`1.node">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNodeCallback`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNode{`0})">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="node">本地服务调用节点方法队列节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNodeCallback`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackOutputNodeCallback`1.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            同步回调
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.methodIndex">
            <summary>
            调用方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.nodeIndex">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.serverCallback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.callback">
            <summary>
            The client callback delegate
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult})">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            队列节点回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult},System.Boolean)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
            <param name="isWriteQueue"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNodeCallback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNodeCallback.node">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNodeCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNode)">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="node">本地服务调用节点方法队列节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNodeCallback.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallbackNodeCallback.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            同步回调
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode`1">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode`1.parameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode`1.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode`1.callback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}})">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="parameter">调用方法与参数信息</param>
            <param name="callback">回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}})">
            <summary>
            调用状态错误
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="result"></param>
            <param name="callback">回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode`1.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackNode.Create``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,``1,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{``0}})">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="PT"></typeparam>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call parameters
            调用参数</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNode`1">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNode`1.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNode`1.callback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNode`1.methodIndex">
            <summary>
            调用方法编号
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}},System.Boolean)">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
            <param name="isWriteQueue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNode`1.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNode`1.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}},System.Boolean)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The client callback delegate
            客户端回调委托</param>
            <param name="isWriteQueue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.isSynchronousCallback">
            <summary>
            Whether to synchronize the callback of the IO thread
            是否 IO 线程同步回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.#ctor(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}},System.Boolean)">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="callback">回调委托</param>
            <param name="isSynchronousCallback">Whether to synchronize the callback of the IO thread
            是否 IO 线程同步回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.CancelKeep(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消保持回调命令
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.callbackResult(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0})">
            <summary>
            回调操作
            </summary>
            <param name="reuslt"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.callbackTask(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0})">
            <summary>
            回调任务操作
            </summary>
            <param name="reuslt"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.callbackResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter@)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.VirtualCallbackCancelKeep(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter)">
            <summary>
            返回值回调并结束回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.VirtualCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.Callback(System.Collections.Generic.IEnumerable{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},System.Boolean)">
            <summary>
            Return a collection of data
            返回数据集合
            </summary>
            <param name="values"></param>
            <param name="isCancel">Whether to close the callback after the callback is completed
            回调完成之后是否关闭回调</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackNodeCallback`1.callbackTask(System.Collections.Generic.IEnumerable{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            回调任务操作
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile">
            <summary>
            Persistent file information
            持久化文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile.RebuildPosition">
            <summary>
            The starting position of persistent flow rebuild
            持久化流重建起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile.FileInfo">
            <summary>
            Persistent file information
            持久化文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile.CallbackExceptionPositionFileInfo">
            <summary>
            Persistent callback exception location file information
            持久化回调异常位置文件信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile.comparer(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile)">
            <summary>
            File sorting
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile.Comparer">
            <summary>
            File sorting
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceTypeEnum">
            <summary>
            Persistent type
            持久化类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceTypeEnum.MemoryDatabase">
            <summary>
            In the regular mode, historical data is loaded during the cold start of the database to restore the state of the in-memory data
            常规模式，数据库冷启动时加载历史数据恢复内存数据状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceTypeEnum.OnlyPersistence">
            <summary>
            Archive-only mode (Although the persistence API can achieve the archive-only effect without operating on memory data in the regular mode, some operations need to be triggered manually)
            仅存档模式（虽然常规模式下持久化 API 不操作内存数据也可以达到仅存档效果，但是某些操作需要手动触发）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceTypeEnum.ScanPersistence">
            <summary>
            The scanning archive mode loads all historical data in chronological order, which is used for operations such as the migration of offline data in the rapid archive mode (scenarios where the main data is not set for snapshot persistence)
            扫描存档模式，按照时间顺序加载所有历史数据，用于快速存档模式（主体数据不设置快照持久化的场景）的离线数据的迁移等操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ScanPersistenceServiceLoader">
            <summary>
            Data loading in scan archive mode
            扫描存档模式数据加载
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ScanPersistenceServiceLoader.persistenceFileInfo">
            <summary>
            Persistent file information
            持久化文件信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ScanPersistenceServiceLoader.persistenceFileName">
            <summary>
            The file name for log stream persistence
            日志流持久化文件名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ScanPersistenceServiceLoader.persistenceCallbackExceptionPositionFileInfo">
            <summary>
            Persistent callback exception location file information
            持久化回调异常位置文件信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ScanPersistenceServiceLoader.persistenceCallbackExceptionPositionFileName">
            <summary>
            The persistent callback exception location file name
            持久化回调异常位置文件名称
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ScanPersistenceServiceLoader.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService)">
            <summary>
            Log stream persistence for in-memory database service data loading
            日志流持久化内存数据库服务数据加载
            </summary>
            <param name="service">Log stream persistence memory database service
            日志流持久化内存数据库服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ScanPersistenceServiceLoader.Load(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Load data
            </summary>
            <param name="persistenceFileInfo"></param>
            <param name="persistenceCallbackExceptionPositionFileInfo"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeTypeAttribute">
            <summary>
            Server node type configuration
            服务端节点类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeTypeAttribute.MethodParameterCreatorMethodName">
            <summary>
            Method information to create the calling method
            创建调用方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeTypeAttribute.GetServerNodeCreatorMethodName">
            <summary>
            The method name for get the generation server node method information
            获取生成服务端节点方法信息方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeTypeAttribute.MethodIndexEnumType">
            <summary>
            Method sequence number maps enumeration type
            方法序号映射枚举类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeTypeAttribute.#ctor(System.Type)">
            <summary>
            Server node type configuration
            服务端节点类型配置
            </summary>
            <param name="methodIndexEnumType">Method sequence number maps enumeration type
            方法序号映射枚举类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeTypeAttribute.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            AOT code generation template
            AOT 代码生成模板
            </summary>
            <param name="methodIndexEnumType"></param>
            <param name="methodParameterCreatorType"></param>
            <param name="isMethodParameterCreator"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1">
            <summary>
            支持快照接口的服务端节点
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1.snapshots">
            <summary>
            快照接口集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,`0,System.Boolean)">
            <summary>
            支持快照接口的服务端节点
            </summary>
            <param name="service"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="target"></param>
            <param name="isPersistence">默认为 true 表示持久化为数据库，设置为 false 为纯内存模式在重启服务时数据将丢失</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1.getSnapshots(`0)">
            <summary>
            获取快照接口集合
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1.checkNewTarget(`0)">
            <summary>
            检查操作节点对象是否实现快照接口
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1.CloseRebuild">
            <summary>
            关闭重建
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1.GetSnapshotArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerSnapshotNode`1.Rebuild(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder)">
            <summary>
            持久化重建
            </summary>
            <param name="rebuilder"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallbackTypeEnum">
            <summary>
            内存数据库回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallbackTypeEnum.Load">
            <summary>
            初始化加载数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallbackTypeEnum.NodeDispose">
            <summary>
            释放节点资源
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1">
            <summary>
            Check the snapshot object before getting it
            获取快照对象之前检查快照对象
            </summary>
            <typeparam name="T">Snapshot object type
            快照对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1.value">
            <summary>
            Snapshot data object
            快照数据对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1.#ctor(`0)">
            <summary>
            Check the snapshot object before getting it
            获取快照对象之前检查快照对象
            </summary>
            <param name="value">Snapshot data object
            快照数据对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1.Get">
            <summary>
            Check the snapshot object before getting it
            获取快照对象之前检查快照对象
            </summary>
            <returns>Snapshot data object
            快照数据对象</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1.GetNotNull">
            <summary>
            Check the snapshot object before getting it
            获取快照对象之前检查快照对象
            </summary>
            <returns>Snapshot data object
            快照数据对象</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1.NoCheck">
            <summary>
            Get the snapshot object without checking the status of the snapshot object, force to get the data object, only used to create the snapshot object collection and non-persistent API logic, the persistent API logic should use the Get method)
            获取快照对象不检查快照对象状态，强制获取数据对象，仅用于创建快照对象集合与非持久化 API 逻辑，持久化 API 逻辑中应该使用 Get 方法）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1.NoCheckNotNull">
            <summary>
            Get the snapshot object without checking the status of the snapshot object, force to get the data object, only used to create the snapshot object collection and non-persistent API logic, the persistent API logic should use the Get method)
            获取快照对象不检查快照对象状态，强制获取数据对象，仅用于创建快照对象集合与非持久化 API 逻辑，持久化 API 逻辑中应该使用 Get 方法）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1.op_Implicit(`0)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject`1.op_Implicit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject{`0})~`0">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptySnapshot`1">
            <summary>
            Empty snapshot
            空快照
            </summary>
            <typeparam name="T">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptySnapshot`1.#ctor">
            <summary>
            Empty snapshot
            空快照
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptySnapshot`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptySnapshot`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptySnapshot`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptySnapshot`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptySnapshot`1.Empty">
            <summary>
            Empty snapshot
            空快照
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSetEnumerable256`1">
            <summary>
            256 基分片 快照哈希表快照集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSetEnumerable256`1.hashSet">
            <summary>
            256 基分片 快照哈希表
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSetEnumerable256`1.snapshotArray">
            <summary>
            快照哈希表节点数组集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSetEnumerable256`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256{`0})">
            <summary>
            256 基分片 快照哈希表快照集合
            </summary>
            <param name="hashSet">256 基分片 快照哈希表</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSetEnumerable256`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSetEnumerable256`1.GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSetEnumerable256`1.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSetEnumerable256`1.CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1">
            <summary>
            256 基分片 快照哈希表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.HashSets">
            <summary>
            哈希表
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.Values">
            <summary>
            The data collection
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.GetSnapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.Clear">
            <summary>
            Clear the data
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.ClearCount">
            <summary>
            清除计数位置信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.Contains(`0)">
            <summary>
            判断数据是否存在
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotHashSet256`1.Remove(`0)">
            <summary>
            Delete data
            删除数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that there is no matching data
            返回 false 表示不存在匹配数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2">
            <summary>
            256 基分片 快照字典
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Dictionarys">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Item(`0)">
            <summary>
            获取或者设置数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.KeyValues">
            <summary>
            键值对集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Keys">
            <summary>
            关键字集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Values">
            <summary>
            The data collection
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.GetKeyValueSnapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.GetBinarySerializeKeyValueSnapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.GetValueSnapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Clear">
            <summary>
            Clear the data (retain the fragmented array)
            清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.ClearCount">
            <summary>
            清除计数位置信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large)
            清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.TryAdd(`0,`1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否添加数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Set(`0,`1,`1@)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="removeValue">被删除数据</param>
            <returns>是否存在替换的被删除数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.ContainsKey(`0)">
            <summary>
            Determine whether the keyword exists
            判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.Remove(`0,`1@)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.RemoveKeys(`0[])">
            <summary>
            根据关键字集合删除匹配数据
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.TryGetValue(`0,`1@)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.TryGetValue(`0,`1@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary{`0,`1}@)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256`2.GetValueArray(`0[])">
            <summary>
            Get the matching data array based on the keyword collection
            根据关键字集合获取匹配数据数组
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2">
            <summary>
            256 基分片 快照字典快照集合
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.dictionary">
            <summary>
            256 基分片 快照字典
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.snapshotArray">
            <summary>
            快照字典节点数组集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256{`0,`1})">
            <summary>
            256 基分片 快照字典快照集合
            </summary>
            <param name="dictionary">256 基分片 快照字典</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{AutoCSer#BinarySerializeKeyValue{KT,VT}}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{AutoCSer#KeyValue{KT,VT}}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{VT}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`2.CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`1">
            <summary>
            256 基分片 快照字典快照集合
            </summary>
            <typeparam name="VT"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`1.dictionary">
            <summary>
            256 基分片 快照字典
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`1.snapshotArray">
            <summary>
            快照字典节点数组集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionary256{AutoCSer.Memory.HashBytes,`0})">
            <summary>
            256 基分片 快照字典快照集合
            </summary>
            <param name="dictionary">256 基分片 快照字典</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{AutoCSer#BinarySerializeKeyValue{System#Byte[],VT}}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`1.GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`1.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.FragmentSnapshotDictionaryEnumerable256`1.CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IEnumerableSnapshot`1">
            <summary>
            Node collection enumeration snapshot function interface
            节点集合枚举快照功能接口
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IEnumerableSnapshot`1.SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable`1">
            <summary>
            Snapshot collection
            快照集合
            </summary>
            <typeparam name="T">Snapshot object type
            快照对象类型</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable`1.SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable`1.GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable`1.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable`1.CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneNode`1">
            <summary>
            快照克隆接口节点
            </summary>
            <typeparam name="T">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshot{`0})">
            <summary>
            快照克隆接口节点
            </summary>
            <param name="target">操作节点对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneNode`1.GetResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneNode`1.Rebuild(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder,System.Boolean)">
            <summary>
            持久化重建
            </summary>
            <param name="rebuilder"></param>
            <param name="isCreateNode"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneObject`1">
            <summary>
            Snapshot data that supports manual triggering of clone operations for snapshot data objects in the persistence API
            支持快照数据对象在持久化 API 中手动触发克隆操作的快照数据
            </summary>
            <typeparam name="T">Snapshot object type
            快照对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneObject`1.SnapshotValue">
            <summary>
            Snapshot object
            快照对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneObject`1.SnapshotClone">
            <summary>
            Create a snapshot object. By default, it is a MemberwiseClone shallow clone. For complex objects, you need to define the clone behavior by yourself
            创建快照对象，默认为 MemberwiseClone 浅克隆，复杂对象需自行定义克隆行为
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneObject`1.CheckSnapshotValue">
            <summary>
            Check the snapshot object before reading object member data or modifying object member data
            读取对象成员数据或者修改对象成员数据之前检查快照对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneObject`1.checkSnapshotValue">
            <summary>
            Check the snapshot object before reading object member data or modifying object member data
            读取对象成员数据或者修改对象成员数据之前检查快照对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneObject`1.CancelSnapshotValue">
            <summary>
            Cancel the snapshot operation
            取消快照操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneObject`1.GetSnapshotResult(`0[],System.Collections.Generic.ICollection{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject{`0}})">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请快照数据容器</param>
            <param name="values">Snapshot data collection
            快照数据集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotCloneObject`1.GetSnapshotResult(`0[],System.Collections.Generic.IEnumerable{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject{`0}},System.Int32)">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请快照数据容器</param>
            <param name="values">Snapshot data collection
            快照数据集合</param>
            <param name="count">Total snapshot data
            快照数据总数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2">
            <summary>
            快照数据类型转换
            </summary>
            <typeparam name="ST">数据类型</typeparam>
            <typeparam name="T">持久化类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.snapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.getValue">
            <summary>
            数据类型转换委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.getIsSnapshot">
            <summary>
            判断快照是否有效
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.isSnapshot">
            <summary>
            快照是否有效
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable{`0},System.Func{`0,`1},System.Func{System.Boolean})">
            <summary>
            快照数据类型转换
            </summary>
            <param name="snapshot">快照集合</param>
            <param name="getValue">持久化类型</param>
            <param name="getIsSnapshot">持久化类型</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.getSnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCastEmpty`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetEnumerable`1">
            <summary>
            获取快照集合
            </summary>
            <typeparam name="T">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetEnumerable`1.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Single-valued snapshot
            单值快照
            </summary>
            <param name="getValue">快照数据</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetEnumerable`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValue`1">
            <summary>
            Single-valued snapshot
            单值快照
            </summary>
            <typeparam name="T">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValue`1.getValue">
            <summary>
            Get snapshot data
            获取快照数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValue`1.value">
            <summary>
            Snapshot data
            快照数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValue`1.#ctor(System.Func{`0})">
            <summary>
            Single-valued snapshot
            单值快照
            </summary>
            <param name="getValue">快照数据</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValue`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValue`1.GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValue`1.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValue`1.CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValueEmpty`1">
            <summary>
            Single-valued snapshot
            单值快照
            </summary>
            <typeparam name="T">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValueEmpty`1.#ctor(System.Func{AutoCSer.KeyValue{System.Boolean,`0}})">
            <summary>
            Single-valued snapshot
            单值快照
            </summary>
            <param name="getValue">快照数据</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotGetValueEmpty`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotValue`1">
            <summary>
            固定值快照
            </summary>
            <typeparam name="T">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotValue`1.value">
            <summary>
            Snapshot data
            快照数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotValue`1.#ctor(`0)">
            <summary>
            固定值快照
            </summary>
            <param name="value">Snapshot data
            快照数据</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotValue`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotValue`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotValue`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotValue`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCast`2">
            <summary>
            快照数据类型转换
            </summary>
            <typeparam name="ST">数据类型</typeparam>
            <typeparam name="T">持久化类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCast`2.snapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCast`2.getValue">
            <summary>
            数据类型转换委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCast`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable{`0},System.Func{`0,`1})">
            <summary>
            快照数据类型转换
            </summary>
            <param name="snapshot">快照集合</param>
            <param name="getValue">持久化类型</param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCast`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCast`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCast`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotEnumerableCast`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{T}#CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1">
            <summary>
            快照哈希表
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Nodes">
            <summary>
            快照哈希表节点数组
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.ValueSnapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Values">
            <summary>
            The data collection
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            快照哈希表
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Renew(System.Int32)">
            <summary>
            清除所有数据并重建容器
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.ClearArray">
            <summary>
            清理数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.changeIndex(System.Int32)">
            <summary>
            尝试修改访问节点索引位置
            </summary>
            <param name="nodeIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Contains(`0,System.Boolean)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Contains(`0,System.UInt32,System.Boolean)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <param name="hashCode"></param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Add(`0,System.Boolean)">
            <summary>
            Add data
            </summary>
            <param name="key">keyword</param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否添加数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Add(`0,System.UInt32,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key">keyword</param>
            <param name="hashCode"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.resize">
            <summary>
            重组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.Remove(`0,System.UInt32)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="hashCode"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.remove(System.Int32,System.Int32)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="nodeIndex"></param>
            <param name="hashIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.RemoveRoll">
            <summary>
            删除滚动索引位置数据
            </summary>
            <returns>是否存在数据，非 Roll 类型也返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet`1.RemoveKeys(`0[])">
            <summary>
            根据关键字集合删除匹配数据
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`1">
            <summary>
            快照字典
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`1.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            快照字典
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`1.change(System.Int32,System.Int32,AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            交换节点位置
            </summary>
            <param name="nodeIndex"></param>
            <param name="changeIndex"></param>
            <param name="nodeArray"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`1.resizeHashIndex(AutoCSer.ReusableHashNode{`0}[],AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            重组数据
            </summary>
            <param name="nodes"></param>
            <param name="nodeArray"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`1.resizeHashIndexSort(AutoCSer.ReusableHashNode{`0}[],AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            重组数据
            </summary>
            <param name="nodes"></param>
            <param name="nodeArray"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`1.resizeRoll(AutoCSer.ReusableHashNode{`0}[],System.Int32,AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            重组数据
            </summary>
            <param name="nodes"></param>
            <param name="rollIndex"></param>
            <param name="nodeArray"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`1.add(System.UInt32,`0,AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            新增数据
            </summary>
            <param name="hashCode"></param>
            <param name="value"></param>
            <param name="nodeArray"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2">
            <summary>
            快照字典
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">数据类型，必须是只读类型（不允许存在成员变更操作）</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Nodes">
            <summary>
            快照字典节点数组
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.KeyValueSnapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.BinarySerializeKeyValueSnapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.ValueSnapshot">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.KeyValues">
            <summary>
            键值对集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Keys">
            <summary>
            关键字集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Values">
            <summary>
            The data collection
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Item(`0)">
            <summary>
            获取或者设置数据
            </summary>
            <param name="key">keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.#ctor(System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            快照字典
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Renew(System.Int32)">
            <summary>
            清除所有数据并重建容器
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.ClearArray">
            <summary>
            清理数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.changeIndex(System.Int32)">
            <summary>
            尝试修改访问节点索引位置
            </summary>
            <param name="nodeIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.TryGetValue(`0,`1@,System.Boolean)">
            <summary>
            尝试获取数据
            </summary>
            <param name="key">keyword</param>
            <param name="value">Target data</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.TryGetValue(`0,System.UInt32,`1@,System.Boolean)">
            <summary>
            尝试获取数据
            </summary>
            <param name="key">keyword</param>
            <param name="hashCode">哈希值</param>
            <param name="value">Target data</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Add(System.UInt32,AutoCSer.BinarySerializeKeyValue{`0,`1})">
            <summary>
            Add data
            </summary>
            <param name="hashCode">哈希值</param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Set(`0,`1,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key">keyword</param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Set(`0,System.UInt32,`1,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key">keyword</param>
            <param name="hashCode">哈希值</param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Set(AutoCSer.BinarySerializeKeyValue{`0,`1}@,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="keyValue"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Set(AutoCSer.KeyValue{`0,`1}@,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="keyValue"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.TryAdd(`0,`1,System.Boolean)">
            <summary>
            Add data
            </summary>
            <param name="key">keyword</param>
            <param name="value"></param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否添加数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.TryAdd(`0,System.UInt32,`1,System.Boolean)">
            <summary>
            Add data
            </summary>
            <param name="key">keyword</param>
            <param name="value"></param>
            <param name="hashCode">哈希值</param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>是否添加数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.set(`0,System.UInt32,`1,System.Boolean,System.Boolean)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key">keyword</param>
            <param name="value"></param>
            <param name="hashCode">哈希值</param>
            <param name="isRoll">更新时是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <param name="isAdd"></param>
            <returns>是否新增数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.resize">
            <summary>
            重组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.ContainsKey(`0,System.Boolean)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.ContainsKey(`0,System.UInt32,System.Boolean)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key">keyword</param>
            <param name="hashCode">哈希值</param>
            <param name="isRoll">是否尝试修改索引位置（用于优先级淘汰策略）</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Remove(`0)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Remove(`0,System.UInt32)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="hashCode">哈希值</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Remove(`0,`1@)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.Remove(`0,System.UInt32,`1@)">
            <summary>
            Remove keyword
            删除关键字
            </summary>
            <param name="key"></param>
            <param name="hashCode">哈希值</param>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.remove(System.Int32,System.Int32)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="nodeIndex"></param>
            <param name="hashIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.RemoveRoll">
            <summary>
            删除滚动索引位置数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.RemoveRoll(AutoCSer.BinarySerializeKeyValue{`0,`1}@)">
            <summary>
            删除滚动索引位置数据
            </summary>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>是否存在数据，非 Roll 类型也返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.RemoveRoll(`1@)">
            <summary>
            删除滚动索引位置数据
            </summary>
            <param name="value">Deleted data
            被删除数据</param>
            <returns>是否存在数据，非 Roll 类型也返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.GetValueArray(`0[])">
            <summary>
            Get the matching data array based on the keyword collection
            根据关键字集合获取匹配数据数组
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary`2.RemoveKeys(`0[])">
            <summary>
            根据关键字集合删除匹配数据
            </summary>
            <param name="keys"></param>
            <returns>The number of deleted keywords
            删除关键字数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1">
            <summary>
            快照哈希表节点数组
            </summary>
            <typeparam name="T">Keyword type
            关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.hashSet">
            <summary>
            快照哈希表
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.Nodes">
            <summary>
            快照哈希表节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.snapshotNodes">
            <summary>
            快照数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.newSnapshotNodes">
            <summary>
            超预申请快照数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.snapshotCount">
            <summary>
            快照数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSet{`0},System.Int32)">
            <summary>
            快照哈希表节点数组
            </summary>
            <param name="dictionary"></param>
            <param name="capacity"></param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.TrySetSnapshotValue(System.Int32)">
            <summary>
            设置快照数据
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotHashSetNodeArray`1.ClearArray">
            <summary>
            清理数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2">
            <summary>
            快照字典节点数组
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.dictionary">
            <summary>
            快照字典
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.Nodes">
            <summary>
            快照字典节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.snapshotNodes">
            <summary>
            快照数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.newSnapshotNodes">
            <summary>
            超预申请快照数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.snapshotCount">
            <summary>
            快照数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionary{`0,`1},System.Int32)">
            <summary>
            快照字典节点数组
            </summary>
            <param name="dictionary"></param>
            <param name="capacity"></param>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{AutoCSer#KeyValue{KT,VT}}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{AutoCSer#BinarySerializeKeyValue{KT,VT}}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshotEnumerable{VT}#SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.SetValue(System.Int32,`1)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.TrySetSnapshotKeyValue(System.Int32)">
            <summary>
            设置快照数据
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`2.ClearArray">
            <summary>
            清理数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`1">
            <summary>
            快照字典节点数组
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`1.array">
            <summary>
            快照字典节点数组
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`1.SnapshotValues">
            <summary>
            Get the collection of snapshot objects
            获取快照对象集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable{AutoCSer.BinarySerializeKeyValue{AutoCSer.Memory.HashBytes,`0}})">
            <summary>
            快照字典节点数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`1.GetSnapshotValueArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`1.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionaryNodeArray`1.CloseSnapshot">
            <summary>
            Close the snapshot operation
            关闭快照操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode`1">
            <summary>
            快照接口节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode`1.target">
            <summary>
            操作节点对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode`1.values">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IEnumerableSnapshot{`0})">
            <summary>
            快照接口节点
            </summary>
            <param name="target">操作节点对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode`1.Close">
            <summary>
            关闭重建
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode`1.GetArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode`1.GetResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EnumerableSnapshotNode`1.Rebuild(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder,System.Boolean)">
            <summary>
            持久化重建
            </summary>
            <param name="rebuilder"></param>
            <param name="isCreateNode"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotArrayNode`1">
            <summary>
            快照节点
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotArrayNode`1.Value">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotArrayNode`1.IsSnapshot">
            <summary>
            是否存在快照数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotArrayNode`1.TrySet(`0)">
            <summary>
            设置快照数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionarySnapshotNode`2">
            <summary>
            快照字典节点
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionarySnapshotNode`2.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionarySnapshotNode`2.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionarySnapshotNode`2.BinarySerializeKeyValue">
            <summary>
            Key-value pairs
            键值对
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionarySnapshotNode`2.KeyValue">
            <summary>
            Key-value pairs
            键值对
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionarySnapshotNode`2.IsSnapshot">
            <summary>
            是否存在快照数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionarySnapshotNode`2.TrySet(`0,`1)">
            <summary>
            设置快照数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotDictionarySnapshotNode`2.TrySet(AutoCSer.BinarySerializeKeyValue{`0,`1}@)">
            <summary>
            设置快照数据
            </summary>
            <param name="keyValue"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethod">
            <summary>
            Snapshot method information
            快照方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethod.Type">
            <summary>
            Snapshot data type
            快照数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethod.Method">
            <summary>
            Server node method
            服务端节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethod.NodeMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethod.#ctor(System.Type,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod)">
            <summary>
            Snapshot method information
            快照方法信息
            </summary>
            <param name="type">Snapshot data type
            快照数据类型</param>
            <param name="method">Server node method
            服务端节点方法</param>
            <param name="nodeMethod">Server node method information
            服务端节点方法信息</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode">
            <summary>
            快照接口节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.customObject">
            <summary>
            自定义对象，用于预生成辅助数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.#ctor">
            <summary>
            快照接口节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.Close">
            <summary>
            关闭重建
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.GetArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.GetResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.Rebuild(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder,System.Boolean)">
            <summary>
            持久化重建
            </summary>
            <param name="rebuilder"></param>
            <param name="isCreateNode"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.Check(System.Type)">
            <summary>
            检查类型是否存在快照功能接口
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.Create``1(System.Object)">
            <summary>
            快照接口节点
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode.CreateMethod">
            <summary>
            创建快照接口节点方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1">
            <summary>
            快照接口节点
            </summary>
            <typeparam name="T">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.target">
            <summary>
            操作节点对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.array">
            <summary>
            预申请快照容器数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.result">
            <summary>
            Snapshot data
            快照数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshot{`0})">
            <summary>
            快照接口节点
            </summary>
            <param name="target">操作节点对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.Close">
            <summary>
            关闭重建
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.GetArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.GetResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.rebuild(AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{`0}@)">
            <summary>
            获取持久化重建数据
            </summary>
            <param name="array"></param>
            <param name="newArray"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotNode`1.Rebuild(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder,System.Boolean)">
            <summary>
            持久化重建
            </summary>
            <param name="rebuilder"></param>
            <param name="isCreateNode"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1">
            <summary>
            Snapshot data
            快照数据
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.Count">
            <summary>
            The actual amount of data in the pre-apply snapshot data container
            预申请快照数据容器真实数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.Array">
            <summary>
            Snapshot data beyond the pre-application scope
            超出预申请范围的快照数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.#ctor(System.Int32)">
            <summary>
            Snapshot data
            快照数据
            </summary>
            <param name="count">The actual amount of data in the pre-apply snapshot data container
            预申请快照数据容器真实数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.#ctor(`0[],`0)">
            <summary>
            Snapshot data (1 data element)
            快照数据（1 个数据元素）
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请快照数据容器</param>
            <param name="value">Snapshot data
            快照数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Snapshot data
            快照数据
            </summary>
            <param name="valueCount">The quantity of snapshot data
            快照数据数量</param>
            <param name="snapshotArrayLength">The size of the pre-applied snapshot data container
            预申请快照数据容器大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.#ctor(System.Int32,`0[])">
            <summary>
            Snapshot data
            快照数据
            </summary>
            <param name="count">The actual amount of data in the pre-apply snapshot data container
            预申请快照数据容器真实数据数量</param>
            <param name="array">Snapshot data beyond the pre-application scope
            超出预申请范围的快照数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.#ctor(`0[],System.Collections.Generic.ICollection{`0})">
            <summary>
            Snapshot data
            快照数据
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请快照数据容器</param>
            <param name="values">Snapshot data collection
            快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.#ctor(`0[],System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Snapshot data
            快照数据
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请快照数据容器</param>
            <param name="values">Snapshot data collection
            快照数据集合</param>
            <param name="count">Total snapshot data
            快照数据总数</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.Add(`0[],System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add the snapshot data collection
            添加快照数据集合
            </summary>
            <param name="snapshotArray"></param>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotResult`1.Add(`0[],`0)">
            <summary>
            Add snapshot data
            添加快照数据
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请快照数据容器</param>
            <param name="value">Snapshot data
            快照数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1">
            <summary>
            Server-side node context
            服务端节点上下文
            </summary>
            <typeparam name="T">Service node type
            服务节点类型</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.StreamPersistenceMemoryDatabaseService">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.StreamPersistenceMemoryDatabaseNode">
            <summary>
            Server node
            服务端节点
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.StreamPersistenceMemoryDatabaseCallQueue">
            <summary>
            The server synchronizes the read and write queues
            服务端同步读写队列
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.StreamPersistenceMemoryDatabaseNodeIsRemoved">
            <summary>
            Determine whether the node has been removed or whether the database service has released resources
            判断节点是否已经被移除或者数据库服务是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.SetContext(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode{`0})">
            <summary>
            Server-side node context
            服务端节点上下文
            </summary>
            <param name="node">Server node
            服务端节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.StreamPersistenceMemoryDatabaseServiceNodeOnRemoved">
            <summary>
            Processing operations after node removal
            节点移除后的处理操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.StreamPersistenceMemoryDatabaseServiceDisposable">
            <summary>
            Database service shutdown operation
            数据库服务关闭操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`1.getServerNode(System.String,System.Boolean)">
            <summary>
            Get server node based on node global keywords
            根据节点全局关键字获取服务端节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isSnapshotTransaction">The default value of true indicates that a snapshot transaction relationship needs to be established, such as synchronously updating the states of other nodes in the persistence API
            默认为 true 表示需要建立快照事务关系，比如在持久化 API 中同步更新其它节点状态</param>
            <returns>Server node, null is returned upon failure
            服务端节点，失败返回 null</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`2">
            <summary>
            Server-side node context
            服务端节点上下文
            </summary>
            <typeparam name="T">Service node type
            服务节点类型</typeparam>
            <typeparam name="ST">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ContextNode`2.SetSnapshotResult(AutoCSer.LeftArray{`1}@,AutoCSer.LeftArray{`1}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptyCommandServerCallback`1">
            <summary>
            Empty callback
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptyCommandServerCallback`1.Callback(`0)">
            <summary>
            Empty callback
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptyCommandServerCallback`1.SynchronousCallback(`0)">
            <summary>
            同步回调
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.EmptyCommandServerCallback`1.Default">
            <summary>
            Empty callback
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.INode">
            <summary>
            Server node interface
            服务端节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.INode.StreamPersistenceMemoryDatabaseServiceNodeOnRemoved">
            <summary>
            Processing operations after node removal
            节点移除后的处理操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.INode.StreamPersistenceMemoryDatabaseServiceDisposable">
            <summary>
            Database service shutdown operation
            数据库服务关闭操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.INode`1">
            <summary>
            Server node interface
            服务端节点接口
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.INode`1.SetContext(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode{`0})">
            <summary>
            Set the node context
            设置节点上下文
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.INode`1.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISlaveLoader">
            <summary>
            Load the data interface from the slave node
            从服务节点加载数据接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISlaveLoader.GetPersistenceFile(System.Int64,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="position"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISlaveLoader.GetPersistenceCallbackExceptionPositionFile(System.Int64,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="position"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshot`1">
            <summary>
            Node snapshot function interface
            节点快照功能接口
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshot`1.GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshot`1.GetSnapshotResult(`0[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshot`1.SetSnapshotResult(AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{`0}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.Index">
            <summary>
            Method Number
            方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.BeforePersistenceMethodIndex">
            <summary>
            The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.CallType">
            <summary>
            Method call type
            方法调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.Flags">
            <summary>
            Server-side node method flags
            服务端节点方法标记
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.IsPersistence">
            <summary>
            Whether to persist (persistence is required if write operations are involved)
            是否持久化（涉及写入操作则需要持久化）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.IsClientCall">
            <summary>
            Whether the client is allowed to call it or not, otherwise it is a server memory call method
            是否允许客户端调用，否则为服务端内存调用方法
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.IsSimpleDeserializeParamter">
            <summary>
            Whether to simply deserialize the input data
            是否简单反序列化输入数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.IsIgnorePersistenceCallbackException">
            <summary>
            Whether to ignore the persistence callback exception, the node method must ensure that the memory data state is restored when an exception occurs. It must be concerned about the memory shortage exception generated by new, and all new operations should be completed before modifying the data
            是否忽略持久化回调异常，节点方法必须保证异常时还原恢复内存数据状态，必须关心 new 产生的内存不足异常，在修改数据以前应该将完成所有 new 操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.#ctor(System.Int32,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallTypeEnum,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="index">Method Number
            方法编号</param>
            <param name="beforePersistenceMethodIndex">The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号</param>
            <param name="callType">Method call type
            方法调用类型</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method.CreateInputParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService">
            <summary>
            Log stream persistence memory database local service
            日志流持久化内存数据库本地服务
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode})">
            <summary>
            Log stream persistence memory database local service
            日志流持久化内存数据库本地服务
            </summary>
            <param name="config">Configuration of in-memory database service for log stream persistence
            日志流持久化内存数据库服务配置</param>
            <param name="createServiceNode">The delegate that creates the underlying operation node for the service
            创建服务基础操作节点委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode},System.Int32)">
            <summary>
            Log stream persistence memory database local service (supporting concurrent read operations)
            日志流持久化内存数据库本地服务（支持并发读取操作）
            </summary>
            <param name="config">Configuration of in-memory database service for log stream persistence
            日志流持久化内存数据库服务配置</param>
            <param name="createServiceNode">The delegate that creates the underlying operation node for the service
            创建服务基础操作节点委托</param>
            <param name="maxConcurrency">The maximum concurrent number of read operations, if less than or equal to 0, indicates the number of processors minus the set value (for example, if the number of processors is 4 and the concurrent number is set to -1, then the concurrent number of reads is 4 -1 = 3)
            最大读取操作并发数量，小于等于 0 表示处理器数量减去设置值（比如处理器数量为 4，并发数量设置为 -1，则读取并发数量为 4 - 1 = 3）</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.CreateClient">
            <summary>
            Create a default log stream persistence in-memory database local service client
            创建默认日志流持久化内存数据库本地服务客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.CreateClient``1">
            <summary>
            Create a log stream persistence in-memory database local service client
            创建日志流持久化内存数据库本地服务客户端
            </summary>
            <typeparam name="T">Basic service operation client interface type
            服务基础操作客户端接口类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.InputKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService.AppendQueueNode``1(System.Func{``0})">
            <summary>
            Add non-persistent queue tasks (without modifying the status of in-memory data)
            添加非持久化队列任务（不修改内存数据状态）
            </summary>
            <typeparam name="T">Return the data type of the result
            返回结果数据类型</typeparam>
            <param name="getResult">The delegate to get the result
            获取结果数据委托</param>
            <returns>Queue node
            队列节点</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCustomQueueNode`1">
            <summary>
            日志流持久化内存数据库本地服务队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCustomQueueNode`1.getResult">
            <summary>
            获取结果数据委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCustomQueueNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService,System.Func{`0},AutoCSer.Net.CommandServer.ReadWriteNodeTypeEnum)">
            <summary>
            日志流持久化内存数据库本地服务队列节点
            </summary>
            <param name="service"></param>
            <param name="getResult">获取结果数据委托</param>
            <param name="queueNodeType"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCustomQueueNode`1.RunTask">
            <summary>
            获取结果数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceRebuild">
            <summary>
            本地服务重建持久化文件
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceRebuild.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService)">
            <summary>
            本地服务重建持久化文件
            </summary>
            <param name="service">Log stream persistence memory database local service
            日志流持久化内存数据库本地服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceRebuild.RunTask">
            <summary>
            重建持久化文件
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode`1">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode`1.parameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode`1.callback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode`1.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter)">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="parameter">调用方法与参数信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            调用状态错误
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode`1.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceInputKeepCallbackEnumeratorNode.Create``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,``1)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="PT"></typeparam>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call parameters
            调用参数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNode`1">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNode`1.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNode`1.methodIndex">
            <summary>
            调用方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNode`1.callback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Boolean)">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="isWriteQueue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNode`1.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNode`1.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Boolean)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="isWriteQueue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback`1">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback`1.Response">
            <summary>
            The local service invocation keep callback output
            本地服务调用保持回调输出
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback`1.#ctor(System.Boolean)">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="isSynchronousCallback">Whether to synchronize the callback of the IO thread
            是否 IO 线程同步回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback`1.CancelKeep(AutoCSer.Net.CommandClientReturnTypeEnum,System.Exception)">
            <summary>
            取消保持回调命令
            </summary>
            <param name="returnType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback`1.callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter@)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback`1.VirtualCallbackCancelKeep(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter)">
            <summary>
            返回值回调并结束回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback`1.VirtualCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter)">
            <summary>
            Return value callback
            返回值回调
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceKeepCallbackEnumeratorNodeCallback`1.Callback(System.Collections.Generic.IEnumerable{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},System.Boolean)">
            <summary>
            Return a collection of data
            返回数据集合
            </summary>
            <param name="values"></param>
            <param name="isCancel">Whether to close the callback after the callback is completed
            回调完成之后是否关闭回调</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceSendOnlyNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceSendOnlyNode.parameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceSendOnlyNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SendOnlyMethodParameter)">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="parameter">调用方法与参数信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceSendOnlyNode.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceSendOnlyNode.Create``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,``0)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call parameters
            调用参数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.nodeIndex">
            <summary>
            请求节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.parameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.callback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputMethodParameter)">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="parameter">调用方法与参数信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            调用状态错误
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            队列节点回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode.Create``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,``0)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call parameters
            调用参数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNodeCallback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNodeCallback.node">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNodeCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNode)">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="node">本地服务调用节点方法队列节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNodeCallback.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputNodeCallback.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            同步回调
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1.nodeIndex">
            <summary>
            请求节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1.parameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1.callback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter)">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="parameter">调用方法与参数信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            调用状态错误
            </summary>
            <param name="clientNode">本地服务客户端节点</param>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            队列节点回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode.Create``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,``1)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="PT"></typeparam>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call parameters
            调用参数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1.methodIndex">
            <summary>
            调用方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1.nodeIndex">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1.callback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Boolean)">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="isWriteQueue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            队列节点回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode`1.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Boolean)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="isWriteQueue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode.clientNode">
            <summary>
            Local service client node
            本地服务客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode.methodIndex">
            <summary>
            调用方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode.nodeIndex">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode.callback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Boolean)">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="isWriteQueue"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode.RunTask">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            队列节点回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClientNode,System.Int32,System.Boolean)">
            <summary>
            创建本地服务调用节点方法队列节点
            </summary>
            <param name="clientNode">Local service client node
            本地服务客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="isWriteQueue"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNodeCallback`1">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNodeCallback`1.node">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNodeCallback`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNode{`0})">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="node">本地服务调用节点方法队列节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNodeCallback`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallInputOutputNodeCallback`1.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            同步回调
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNodeCallback`1">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNodeCallback`1.node">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNodeCallback`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNode{`0})">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="node">本地服务调用节点方法队列节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNodeCallback`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallOutputNodeCallback`1.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            同步回调
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNodeCallback">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNodeCallback.node">
            <summary>
            本地服务调用节点方法队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNodeCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNode)">
            <summary>
            本地服务调用节点方法队列节点回调对象
            </summary>
            <param name="node">本地服务调用节点方法队列节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNodeCallback.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            回调设置结果
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceCallNodeCallback.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            同步回调
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig">
            <summary>
            Log stream persistence memory database local service configuration
            日志流持久化内存数据库本地服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig.OnlyLocalService">
            <summary>
            The default is true, indicating that only local services are supported; otherwise, it is in a mixed service mode
            默认为 true 表示仅支持本地服务，否则为混合服务模式
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig.QueueTimeoutSeconds">
            <summary>
            The synchronization queue task execution timeout checks the number of seconds. By default, 0 indicates no check, which is used to check whether the queue task has been blocked for a long time or has deadlock issues
            同步队列任务执行超时检查秒数，默认为 0 表示不检查，用于检查队列任务是否存在长时间阻塞或者死锁问题
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig.Create">
            <summary>
            Create a default log stream persistence in-memory database local service (Master service node)
            创建默认日志流持久化内存数据库本地服务（主服务节点）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig.Create``1(System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService,``0})">
            <summary>
            Create a log stream persistence in-memory database local service (Master service node)
            创建日志流持久化内存数据库本地服务（主服务节点）
            </summary>
            <typeparam name="T">Node service interface type
            节点服务接口类型</typeparam>
            <param name="createServiceNode"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig.Create(System.Int32)">
            <summary>
            Create a default log stream persistence in-memory database local service (supporting concurrent read operations)
            创建默认日志流持久化内存数据库本地服务（支持并发读取操作）
            </summary>
            <param name="maxConcurrency">The maximum concurrent number of read operations, if less than or equal to 0, indicates the number of processors minus the set value (for example, if the number of processors is 4 and the concurrent number is set to -1, then the concurrent number of reads is 4 -1 = 3)
            最大读取操作并发数量，小于等于 0 表示处理器数量减去设置值（比如处理器数量为 4，并发数量设置为 -1，则读取并发数量为 4 - 1 = 3）</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceConfig.Create``1(System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService,``0},System.Int32)">
            <summary>
            Create a log stream persistence in-memory database service (supporting concurrent read operations)
            创建日志流持久化内存数据库服务（支持并发读取操作）
            </summary>
            <typeparam name="T">Node service interface type
            节点服务接口类型</typeparam>
            <param name="createServiceNode"></param>
            <param name="maxConcurrency">The maximum concurrent number of read operations, if less than or equal to 0, indicates the number of processors minus the set value (for example, if the number of processors is 4 and the concurrent number is set to -1, then the concurrent number of reads is 4 -1 = 3)
            最大读取操作并发数量，小于等于 0 表示处理器数量减去设置值（比如处理器数量为 4，并发数量设置为 -1，则读取并发数量为 4 - 1 = 3）</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceGetNodeIndex">
            <summary>
            The local service get the node identity
            本地服务获取节点标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceGetNodeIndex.key">
            <summary>
            Node global keyword
            节点全局关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceGetNodeIndex.nodeInfo">
            <summary>
            节点信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceGetNodeIndex.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            The local service get the node identity
            本地服务获取节点标识
            </summary>
            <param name="service">Log stream persistence memory database local service
            日志流持久化内存数据库本地服务</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceGetNodeIndex.RunTask">
            <summary>
            Get node identity
            获取节点标识
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1">
            <summary>
            The log stream persists the in-memory database local service queue node, and await T returns the call result
            日志流持久化内存数据库本地服务队列节点，await T 返回调用结果
            </summary>
            <typeparam name="T">Return the data type of the result
            返回结果数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.service">
            <summary>
            Log stream persistence memory database local service
            日志流持久化内存数据库本地服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.result">
            <summary>
            Return result
            返回结果
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.IsCompleted">
            <summary>
            Completed status
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalService)">
            <summary>
            The log stream persists the in-memory database local service queue node
            日志流持久化内存数据库本地服务队列节点
            </summary>
            <param name="service">Log stream persistence memory database local service
            日志流持久化内存数据库本地服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.completed(System.Boolean)">
            <summary>
            Task call completion processing
            任务调用完成处理
            </summary>
            <param name="isSynchronousCallback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.completed">
            <summary>
            Task call completion processing
            任务调用完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.GetAwaiter">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.AppendWrite">
            <summary>
            Add to the queue
            添加到队列
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.GetResult">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode`1.Wait">
            <summary>
            await support
            await 支持
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile">
            <summary>
            Delete the historical persistence file
            删除历史持久化文件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.persistenceFileName">
            <summary>
            The name of the persistent file
            持久化文件名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.directory">
            <summary>
            The directory of the persistent file
            持久化文件目录
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.switchDirectory">
            <summary>
            Switch the directory of the files that have been persistently rebuild
            持久化重建文件切换目录
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase)">
            <summary>
            Delete the historical persistence file
            删除历史持久化文件
            </summary>
            <param name="service">Log stream persistence memory database service
            日志流持久化内存数据库服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase)">
            <summary>
            Delete the file
            删除文件
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.remove(System.IO.DirectoryInfo,System.DateTime)">
            <summary>
            Delete the file
            删除文件
            </summary>
            <param name="directory"></param>
            <param name="removeTime"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.Remove(AutoCSer.Threading.TaskRunTimer)">
            <summary>
            Delete files regularly
            定时删除文件
            </summary>
            <param name="runTimer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile.Cancel">
            <summary>
            Cancel the task
            取消任务
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader">
            <summary>
            加载修复节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader.nodeCreator">
            <summary>
            生成服务端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader.methodDirectory">
            <summary>
            节点方法目录
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader.repairNodeMethodDirectory">
            <summary>
            修复方法目录信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator,System.IO.DirectoryInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory@)">
            <summary>
            加载修复节点方法
            </summary>
            <param name="nodeCreator">Generate server-side node
            生成服务端节点</param>
            <param name="methodDirectory">节点方法目录</param>
            <param name="repairNodeMethodDirectory">修复方法目录信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader.LoadRepair">
            <summary>
            初始化节点加载修复方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader`1">
            <summary>
            加载修复节点方法
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator,System.IO.DirectoryInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory@)">
            <summary>
            加载修复节点方法
            </summary>
            <param name="nodeCreator">Generate server-side node
            生成服务端节点</param>
            <param name="methodDirectory">节点方法目录</param>
            <param name="repairNodeMethodDirectory">修复方法目录信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader`1.LoadRepair">
            <summary>
            初始化节点加载修复方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback">
            <summary>
            修复节点方法队列回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.nodeCreator">
            <summary>
            生成服务端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.repairNodeMethod">
            <summary>
            修复节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.nodeMethod">
            <summary>
            修复节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.method">
            <summary>
            修复节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.methodInfo">
            <summary>
            修复节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.methodAttribute">
            <summary>
            Custom attributes of server-side node methods
            服务端节点方法自定义属性
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.methodDirectory">
            <summary>
            修复节点方法目录
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.callback">
            <summary>
            修复节点方法回调返回状态
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method,System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            修复节点方法队列回调
            </summary>
            <param name="nodeCreator">Generate server-side node
            生成服务端节点</param>
            <param name="repairNodeMethod">修复节点方法信息</param>
            <param name="nodeMethod">修复节点方法信息</param>
            <param name="method">修复节点方法</param>
            <param name="methodInfo">修复节点方法信息</param>
            <param name="methodAttribute">服务端节点方法自定义属性</param>
            <param name="callback">修复节点方法回调返回状态</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodCallback.RunTask">
            <summary>
            回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute">
            <summary>
            Custom attributes of server-side node methods
            服务端节点方法自定义属性
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex">
            <summary>
            Custom method sequence numbers are used for the client to identify the routes of the server API. Repetition is not allowed in the same node interface. By default, a sequence number less than 0 indicates the use of the automatic matching mode. The automatic matching mode cannot guarantee that the old client call routes will match the new server routes after the server modifies and upgrades. When there are custom requirements, do not use huge data. It is recommended to start from 0 because it will be the size of a certain array.
            自定义方法序号，用于客户端识别服务端 API 的路由，同一个节点接口中不允许重复，默认小于 0 表示采用自动匹配模式，自动匹配模式不能保证服务端修改升级以后旧的客户端调用路由能与新的服务端路由匹配。存在自定义需求时不要使用巨大的数据，建议从 0 开始，因为它会是某个数组的大小。
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.SnapshotMethodSort">
            <summary>
            The execution order of snapshot data recovery methods. By default, 0 indicates non-snapshot data recovery methods. Each snapshot interface type is only allowed to define one API method whose SnapshotMethodSort is not 0 as the API method for snapshot data recovery
            快照数据恢复方法执行顺序，默认为 0 表示非快照数据恢复方法，每一个快照接口类型仅允许定义一个 SnapshotMethodSort 不为 0 的 API 方法作为快照数据恢复的 API 方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.IsWriteQueue">
            <summary>
            By default, false indicates a non-persistent API call read operation queue; If set to true, it will force the call of the write operation queue (such as setting callbacks and other scenarios that only modify non-persistent memory data)
            默认为 false 表示非持久化 API 调用读操作队列；设置为 true 则强制调用写操作队列（比如设置回调等仅修改非持久化内存数据的场景）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.IsPersistence">
            <summary>
            By default, true indicates that the call needs to be persisted. If the call does not involve data change operations, it should be manually set to false to prevent junk data from being persisted (this is only effective in scenarios where nodes support snapshots; nodes that do not support snapshots do not support persistence, and even if set to true, it is invalid)
            默认为 true 表示调用需要持久化，如果调用不涉及数据变更操作则应该手动设置为 false 避免垃圾数据被持久化（只有在节点支持快照的场景下才有效，不支持快照的节点不支持持久化，即使设置为 true 也无效）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.IsClientCall">
            <summary>
            By default, true indicates that the method is allowed to be called by the client; otherwise, it is called internally by the server
            默认为 true 表示允许客户端调用，否则为服务端内部调用方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.IsSendOnly">
            <summary>
            By default, false indicates that the server responds to the client's request. Setting it to true means that the server only receives the request and does not perform a response operation
            默认为 false 表示服务端应答客户端请求，设置为 true 表示服务端仅接收请求不做应答操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.IsCallbackClient">
            <summary>
            By default, false indicates the generation of the await client API, and setting it to true generates the delegate callback client API
            默认为 false 表示生成 await 客户端 API，设置为 true 则生成委托回调客户端 API
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.IsIgnorePersistenceCallbackException">
            <summary>
            Default to false said persistent callback sets the Node to unavailable when abnormal condition, is set to true, the Node. The IsPersistenceCallbackChanged to false when to avoid the problem, but the Node method must ensure that the abnormal data reduction to restore memory state, It is necessary to pay attention to the memory shortage exception caused by new. All new operations should be completed before modifying the data
            默认为 false 表示持久化回调异常时将节点设置为不可用状态，设置为 true 则在 Node.IsPersistenceCallbackChanged 为 false 时避免该问题，但是节点方法必须保证异常时还原恢复内存数据状态，必须关心 new 产生的内存不足异常，在修改数据以前应该将完成所有 new 操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.Default">
            <summary>
            Default node method custom attribute
            默认节点方法自定义属性
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1">
            <summary>
            方法调用回调包装
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.callback">
            <summary>
            服务接口回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.Reserve">
            <summary>
            保留
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.flag">
            <summary>
            Server-side node method flags
            服务端节点方法标记
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.isResponseParameter">
            <summary>
            返回值类型是否 ResponseParameter
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.isCallback">
            <summary>
            是否已经回调操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.#ctor">
            <summary>
            无回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.#ctor(AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            方法调用回调包装
            </summary>
            <param name="callback">服务接口回调委托</param>
            <param name="flag">服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            成功回调
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.Callback(`0)">
            <summary>
            成功回调
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.SynchronousCallback(`0)">
            <summary>
            成功回调
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Failure callback
            失败回调
            </summary>
            <param name="state">失败状态</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.SynchronousCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Failure callback
            失败回调
            </summary>
            <param name="state">失败状态</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.GetCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{`0})">
            <summary>
            获取服务接口回调委托
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.CreateDelegate">
            <summary>
            创建方法调用回调包装对象委托类型
            </summary>
            <param name="callback"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.Create(AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            创建方法调用回调包装对象
            </summary>
            <param name="callback"></param>
            <param name="flag">服务端节点方法标记</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallInputOutputMethodParameter)">
            <summary>
            创建方法调用回调包装对象
            </summary>
            <param name="methodParameter"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback`1.NullCallback">
            <summary>
            无回调
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter">
            <summary>
            调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.PersistenceStartIndex">
            <summary>
            持久化输出流起始位置，用于记录当前输出数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.EncodePersistenceStartIndex">
            <summary>
            编码持久化输出流起始位置，用于记录编码后的数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.Node">
            <summary>
            服务端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.persistenceCallbackExceptionPosition">
            <summary>
            持久化异常位置信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.IsPersistenceCallback">
            <summary>
            持久化回调是否成功
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            调用方法与参数信息
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.Clone">
            <summary>
            复制调用方法与参数信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.PersistenceCallback">
            <summary>
            持久化回调
            </summary>
            <returns>下一个参数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.PersistenceCallbackIgnoreException(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            持久化异常回调
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.PersistenceSerialize(AutoCSer.BinarySerializer,System.Int64)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <param name="persistenceCallbackExceptionPosition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.PersistenceSerialize(AutoCSer.BinarySerializer)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer">序列化</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.persistenceSerialize(AutoCSer.BinarySerializer,System.Int64)">
            <summary>
            持久化序列化
            </summary>
            <param name="serializer"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.SetBeforePersistenceCustomSessionObject(System.Object)">
            <summary>
            设置自定义状态对象
            </summary>
            <param name="sessionObject">自定义状态对象</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetBeforePersistenceCustomSessionObject">
            <summary>
            获取自定义状态对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter.GetNodeTarget``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter)">
            <summary>
            获取服务端节点
            </summary>
            <param name="methodParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1">
            <summary>
            方法调用回调包装
            </summary>
            <typeparam name="T">返回数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.callback">
            <summary>
            服务接口回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.flag">
            <summary>
            Server-side node method flags
            服务端节点方法标记
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.isResponseParameter">
            <summary>
            返回值类型是否 ResponseParameterSerializer
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.Reserve">
            <summary>
            保留
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.IsCancelKeepCallback">
            <summary>
            Has the keep callback been cancelled
            是否已经取消保持回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.#ctor">
            <summary>
            无回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.#ctor(AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            方法调用回调包装
            </summary>
            <param name="callback">服务接口回调委托</param>
            <param name="flag">服务端节点方法标记</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.Callback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer)">
            <summary>
            成功回调
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.Callback(`0)">
            <summary>
            成功回调
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.CallbackCancelKeep(`0)">
            <summary>
            成功回调并取消保持回调命令
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.Callback(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            成功回调
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.CallbackCancelKeep(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Failure callback
            失败回调
            </summary>
            <param name="state">失败状态</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.CancelKeep">
            <summary>
            取消保持回调命令
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.CreateDelegate">
            <summary>
            创建方法调用回调包装对象委托类型
            </summary>
            <param name="callback"></param>
            <param name="flag">服务端节点方法标记</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.Create(AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter}@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum)">
            <summary>
            创建方法调用回调包装对象
            </summary>
            <param name="callback"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.InputKeepCallbackMethodParameter)">
            <summary>
            创建方法调用回调包装对象
            </summary>
            <param name="methodParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.Callback(AutoCSer.LeftArray{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0}}@,`0)">
            <summary>
            回调并移除失败回调对象
            </summary>
            <param name="callbacks"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback`1.NullCallback">
            <summary>
            无回调
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.node">
            <summary>
            Server node
            服务端节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.pushPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter)">
            <summary>
            Add to the persistence queue (The persistence API persists the request data first and then executes the request to ensure the reliability of persistence and avoid the situation where persistence fails and data is lost after the client is successfully fed back)
            添加到持久化队列（持久化 API 先持久化请求数据再执行请求保证持久化的可靠性，避免出现反馈客户端成功以后出现持久化失败丢失数据的情况）
            </summary>
            <param name="methodParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createCallMethodParameter(System.Int32)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateCallMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="creator"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createCallOutputMethodParameter(System.Int32)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateCallOutputMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="creator"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createCallOutputMethodParameter(System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateCallOutputCallbackMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="creator"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createCallInputMethodParameter``1(System.Int32,``0@)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateCallInputMethodParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32,``0)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createCallInputOutputMethodParameter``1(System.Int32,``0@)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateCallInputOutputMethodParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32,``0)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createCallInputOutputMethodParameter``1(System.Int32,``0@,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateCallInputOutputCallbackMethodParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32,``0,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createSendOnlyMethodParameter``1(System.Int32,``0@)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateSendOnlyMethodParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32,``0)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createKeepCallbackMethodParameter(System.Int32)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateKeepCallbackMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="creator"></param>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.createInputKeepCallbackMethodParameter``1(System.Int32,``0@)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.CreateInputKeepCallbackMethodParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator,System.Int32,``0)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <param name="methodIndex"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator.MethodParameterCreatorCallMethodName(System.Object[])">
            <summary>
            AOT code generation template
            AOT 代码生成模板
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator`1">
            <summary>
            Create the calling method and parameter information for custom persistent calls on the server side. The calling interface method will be added to the persistence queue
            创建调用方法与参数信息，用于服务端自定义持久化调用，调用接口方法会添加到持久化队列
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator`1.Creator">
            <summary>
            Create the calling method and parameter information for custom persistent calls on the server side. The calling interface method will be added to the persistence queue
            创建调用方法与参数信息，用于服务端自定义持久化调用，调用接口方法会添加到持久化队列
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode{`0})">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreatorNode`1">
            <summary>
            Create the node of the calling method and parameter information
            创建调用方法与参数信息节点
            </summary>
            <typeparam name="T">Service node type
            服务节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreatorNode`1.methodParameterCreator">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreatorNode`1.StreamPersistenceMemoryDatabaseMethodParameterCreator">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreatorNode`1.SetContext(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode{`0})">
            <summary>
            Server-side node context
            服务端节点上下文
            </summary>
            <param name="node">Server node
            服务端节点</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreatorNode`2">
            <summary>
            Create the node of the calling method and parameter information
            创建调用方法与参数信息节点
            </summary>
            <typeparam name="T">Service node type
            服务节点类型</typeparam>
            <typeparam name="ST">Snapshot data type
            快照数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreatorNode`2.methodParameterCreator">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreatorNode`2.StreamPersistenceMemoryDatabaseMethodParameterCreator">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreatorNode`2.SetContext(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode{`0})">
            <summary>
            Server-side node context
            服务端节点上下文
            </summary>
            <param name="node">Server node
            服务端节点</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode">
            <summary>
            Server node
            服务端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Index">
            <summary>
            Node index information
            节点索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.NodeCreator">
            <summary>
            生成服务端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Key">
            <summary>
            Node global keyword
            节点全局关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.CreateNodeMethodParameter">
            <summary>
            创建节点参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.SnapshotTransactionNodes">
            <summary>
            快照事务关系节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.SnapshotTransactionNodeCount">
            <summary>
            快照事务关系节点数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.IsPersistence">
            <summary>
            是否持久化，设置为 false 为纯内存模式在重启服务时数据将丢失
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.callState">
            <summary>
            节点调用状态
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.CallState">
            <summary>
            节点调用状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Rebuilding">
            <summary>
            是否重建中，设置为 true 表示忽略持久化回调参数，设置为 false 则需要将回调参数复制添加到待持久化队列中
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.IsLoadException">
            <summary>
            是否初始化加载执行异常节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.IsPersistenceCallbackChanged">
            <summary>
            持久化回调是否存在数据更新，节点数据更新以后应该将该状态修改为 true
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.IsRemoved">
            <summary>
            当前节点是否已被移除
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,System.Boolean)">
            <summary>
            Server node
            服务端节点
            </summary>
            <param name="nodeCreator"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistence">是否持久化，设置为 false 为纯内存模式在重启服务时数据将丢失</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Check(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            检查节点索引信息是否匹配
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Loaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.NodeDispose">
            <summary>
            释放节点资源
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.OnRemoved">
            <summary>
            服务端节点移除后处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.GetSnapshotTransactionNode(System.String)">
            <summary>
            Get server node based on node global keywords
            根据节点全局关键字获取服务端节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.AppendSnapshotTransaction(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            添加快照事务关系节点
            </summary>
            <param name="key"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.appendSnapshotTransaction(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            添加快照事务关系节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.SetPersistenceCallbackException">
            <summary>
            设置持久化回调错误
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.SetLoadException">
            <summary>
            设置初始化加载持久化数据执行异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.CreateInputMethodParameter(System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum@)">
            <summary>
            创建方法调用参数信息
            </summary>
            <param name="methodIndex"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Call(System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}@)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.CallOutput(System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}@)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.KeepCallback(System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter}@)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.CloseRebuild">
            <summary>
            关闭重建
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.CheckSnapshot">
            <summary>
            检查快照重建状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.GetSnapshotArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.GetSnapshotResult">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Rebuild(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder)">
            <summary>
            持久化重建
            </summary>
            <param name="rebuilder"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Repair(System.Byte[],System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <param name="rawAssembly"></param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <param name="methodAttribute"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.Bind(System.Byte[],System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <param name="rawAssembly"></param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <param name="methodAttribute"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.GetSnapshotResult``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},AutoCSer.KeyValue{``0,``1}[])">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
            <param name="values"></param>
            <param name="snapshotArray">预申请的快照数据容器</param>
            <returns>快照数据信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.GetSnapshotResult``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,``1}},AutoCSer.BinarySerializeKeyValue{``0,``1}[])">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
            <param name="values"></param>
            <param name="snapshotArray">预申请的快照数据容器</param>
            <returns>快照数据信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.GetSnapshotResult``2(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{``0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject{``1}}},AutoCSer.KeyValue{``0,``1}[])">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
            <param name="values"></param>
            <param name="snapshotArray">预申请的快照数据容器</param>
            <returns>快照数据信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.GetSnapshotResult``1(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{AutoCSer.Memory.HashBytes,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CheckSnapshotCloneObject{``0}}},AutoCSer.KeyValue{System.Byte[],``0}[])">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
            <param name="values"></param>
            <param name="snapshotArray">预申请的快照数据容器</param>
            <returns>快照数据信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.SetSearchTreeSnapshotResult``1(AutoCSer.LeftArray{``0}@,AutoCSer.LeftArray{``0}@)">
            <summary>
            获取二叉搜索树快照数据集合
            </summary>
            <param name="array">预申请快照容器数组</param>
            <param name="newArray">超预申请快照数据</param>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.DefaultAttribute">
            <summary>
            默认节点接口配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode.DefaultNodeTypeAttribute">
            <summary>
            默认节点接口配置
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1">
            <summary>
            Server node
            服务端节点
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.target">
            <summary>
            操作节点对象
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.Target">
            <summary>
            操作节点对象
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,`0,System.Boolean)">
            <summary>
            Server node
            服务端节点
            </summary>
            <param name="service"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="target"></param>
            <param name="isPersistence">是否持久化，设置为 false 为纯内存模式在重启服务时数据将丢失</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,`0)">
            <summary>
            服务端节点（除了 服务基础操作节点 以外，该调用不支持节点持久化，只有支持快照的节点才支持持久化）
            </summary>
            <param name="service"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="target"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.Loaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.loaded(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.INode{`0})">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.checkNewTarget(`0)">
            <summary>
            检查操作节点对象是否合法
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.NodeDispose">
            <summary>
            释放节点资源
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.OnRemoved">
            <summary>
            服务端节点移除后处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.CreateMethodParameterCreator">
            <summary>
            创建调用方法与参数信息，派生自类型 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameterCreator
            </summary>
            <returns>创建调用方法与参数信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.Repair(System.Byte[],System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <param name="rawAssembly"></param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <param name="methodAttribute"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.Bind(System.Byte[],System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <param name="rawAssembly"></param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <param name="methodAttribute"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode`1.GetTarget(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode{`0})">
            <summary>
            获取操作节点对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator">
            <summary>
            生成服务端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.Service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.Type">
            <summary>
            节点接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.methodLock">
            <summary>
            节点方法集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.Methods">
            <summary>
            Node method collection
            节点方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.NodeMethods">
            <summary>
            Node method information collection
            节点方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.SnapshotMethods">
            <summary>
            Snapshot method collection
            快照方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.State">
            <summary>
            节点状态
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase,System.Type,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethod[])">
            <summary>
            生成服务端节点
            </summary>
            <param name="service"></param>
            <param name="type">节点接口类型</param>
            <param name="methods">Node method collection
            节点方法集合</param>
            <param name="nodeMethods">Node method information collection
            节点方法信息集合</param>
            <param name="snapshotMethods">快照方法集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.GetSnapshotMethod(System.Type)">
            <summary>
            获取快照方法索引
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CheckSnapshotNode(System.Type)">
            <summary>
            快照节点检查
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.getSnapshotMethodIndex(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method)">
            <summary>
            获取快照方法索引位置
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.LoadRepairNodeMethod``1">
            <summary>
            初始化节点加载修复方法
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.loadRepairNodeMethod``1(System.IO.DirectoryInfo,System.String,System.Collections.Generic.HashSet{System.Int32},System.Boolean)">
            <summary>
            初始化节点加载修复方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodDirectory"></param>
            <param name="nodeTypeFullName"></param>
            <param name="methodIndexs"></param>
            <param name="isMoveHistory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.Repair``1(System.Byte[],System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rawAssembly"></param>
            <param name="methodInfo">必须是静态方法，第一个参数必须是操作节点接口类型</param>
            <param name="methodAttribute"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.writeRepairNodeMethodFile(System.Byte[],System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute)">
            <summary>
            写入修复节点方法问价
            </summary>
            <param name="rawAssembly"></param>
            <param name="methodInfo"></param>
            <param name="methodAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.Bind``1(System.Byte[],System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rawAssembly"></param>
            <param name="methodInfo">必须是静态方法，第一个参数必须是操作节点接口类型</param>
            <param name="methodAttribute"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.Repair(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.Method,System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute,System.IO.DirectoryInfo,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            修复接口方法错误
            </summary>
            <param name="repairNodeMethod"></param>
            <param name="nodeMethod"></param>
            <param name="method"></param>
            <param name="methodInfo"></param>
            <param name="methodAttribute"></param>
            <param name="methodDirectory"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.GetNodeTypeHashCode(System.IO.DirectoryInfo,System.UInt64@)">
            <summary>
            根据修复方法节点类型目录获取对应节点类型哈希值
            </summary>
            <param name="typeDirectory"></param>
            <param name="nodeTypeHashCode"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.GetMethodDirectoryPosition(System.IO.DirectoryInfo)">
            <summary>
            根据修复方法目录获取对应持久化位置
            </summary>
            <param name="methodDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.GetMethodDirectory(System.IO.DirectoryInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory@)">
            <summary>
            根据修复方法目录获取相关对应信息
            </summary>
            <param name="methodDirectory"></param>
            <param name="repairNodeMethodDirectoryKey"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.GetRepairMethod(System.Byte[]@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName@,System.Reflection.MethodInfo@)">
            <summary>
            获取修复方法信息
            </summary>
            <param name="rawAssembly"></param>
            <param name="methodName"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.GetRepairMethod(System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName@,System.Reflection.MethodInfo@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute@)">
            <summary>
            获取修复方法信息
            </summary>
            <param name="rawAssembly"></param>
            <param name="methodName"></param>
            <param name="method"></param>
            <param name="methodAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.snapshotMethodSort(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethod,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethod)">
            <summary>
            快照方法排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.SnapshotMethodSort">
            <summary>
            快照方法排序
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.MethodConstructorParameterTypes">
            <summary>
            服务端节点方法构造函数参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallTypeMethodConstructorParameterTypes">
            <summary>
            服务端节点方法构造函数参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallMethodParameterTypes">
            <summary>
            调用节点方法参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputMethodParameterTypes">
            <summary>
            调用节点方法参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputCallBeforePersistenceMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputCallOutputBeforePersistenceMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputBeforePersistenceMethodParameterTypes">
            <summary>
            调用节点方法参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputMethodParameterTypes">
            <summary>
            调用节点方法参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputOutputMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputOutputMethodParameterTypes">
            <summary>
            调用节点方法参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputOutputCallOutputBeforePersistenceMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputOutputCallBeforePersistenceMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.SendOnlyMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.SendOnlyMethodParameterTypes">
            <summary>
            调用节点方法参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.KeepCallbackMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.KeepCallbackMethodParameterTypes">
            <summary>
            调用节点方法参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.InputKeepCallbackMethod">
            <summary>
            Call the node method
            调用节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.InputKeepCallbackMethodParameterTypes">
            <summary>
            调用节点方法参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallMethodCallback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputMethodCallbackMethod">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputMethodCallbackResponseParameterDelegate">
            <summary>
            调用回调
            </summary>
            <param name="value"></param>
            <param name="callback"></param>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputMethodCallbackResponseParameter">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallOutputMethodGetBeforePersistenceResponseParameterMethod">
            <summary>
            获取持久化检查方法返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputMethodParameterCallback">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputOutputMethodParameterCallbackMethod">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputOutputMethodParameterCallbackResponseParameter">
            <summary>
            调用回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.CallInputOutputMethodParameterGetBeforePersistenceResponseParameterMethod">
            <summary>
            获取持久化检查方法返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.KeepCallbackMethodEnumerableCallbackMethod">
            <summary>
            枚举回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.InputKeepCallbackMethodParameterEnumerableCallbackMethod">
            <summary>
            枚举回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.MethodParameterCreatorCreateCallMethodParameter">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.MethodParameterCreatorCreateCallOutputMethodParameter">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.MethodParameterCreatorCreateCallOutputCallbackMethodParameter">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator.MethodParameterCreatorCreateKeepCallbackMethodParameter">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator`1">
            <summary>
            生成服务端节点
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator`1.creatorException">
            <summary>
            节点生成错误
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator`1.creatorMessages">
            <summary>
            节点生成提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator`1.methods">
            <summary>
            Node method collection
            节点方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator`1.nodeMethods">
            <summary>
            Node method information collection
            节点方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator`1.snapshotMethods">
            <summary>
            Snapshot method collection
            快照方法集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator`1.Create(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase)">
            <summary>
            生成服务端节点
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator`1.MethodParameterCreator">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity">
            <summary>
            节点信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.Node">
            <summary>
            服务端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.Identity">
            <summary>
            节点标识
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.Get(System.UInt32)">
            <summary>
            获取服务端节点
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.UInt32)">
            <summary>
            设置节点
            </summary>
            <param name="node"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.GetRemove(System.UInt32)">
            <summary>
            移除节点
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.GetFreeIdentity">
            <summary>
            设置空闲节点标识，用于创建节点预申请
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.GetCreateIdentity">
            <summary>
            设置空闲节点标识，用于创建节点预申请
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.CheckFreeIdentity(System.UInt32@)">
            <summary>
            判断空闲节点标识是否匹配
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.FreeIdentity(System.UInt32)">
            <summary>
            Release free node
            释放空闲节点
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIdentity.SetFreeIdentity(System.UInt32)">
            <summary>
            初始化创建节点设置节点标识
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeAttribute">
            <summary>
            Server node interface configuration
            服务端节点接口配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeAttribute.IsClient">
            <summary>
            The default is true, indicating the generation of remote client interface code
            默认为 true 表示生成远程客户端接口代码
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeAttribute.IsLocalClient">
            <summary>
            The default is false, indicating that no local client interface code is generated
            默认为 false 表示不生成本地客户端接口代码
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.MinCustomServiceNodeMethodIndex">
            <summary>
            自定义基础服务节点方法最小方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.LoadPersistenceMethodNameSuffix">
            <summary>
            数据库冷启动加载历史持久化请求方法的名称后缀
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.BeforePersistenceMethodNameSuffix">
            <summary>
            持久化之前检查参数方法的名称后缀
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.createMethodIndex">
            <summary>
            创建节点方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.MethodAttribute">
            <summary>
            节点方法自定义属性
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.repairMethods">
            <summary>
            修复方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.RepairNodeMethod">
            <summary>
            修复节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.PersistenceMethodName">
            <summary>
            持久化方法名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.PersistenceMethodReturnType">
            <summary>
            持久化方法返回数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.BeforePersistenceMethodIndex">
            <summary>
            The method number that checks the input parameter before the persistence operation
            持久化操作之前检查输入参数的方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.LoadPersistenceMethodIndex">
            <summary>
            The method number for initialize and load the persistent data
            初始化加载持久化数据的方法编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.QueueNodeType">
            <summary>
            队列节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.IsPersistence">
            <summary>
            默认为 true 表示调用需要持久化，如果调用不涉及数据变更操作则应该手动设置为 false 避免垃圾数据被持久化
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.IsClientCall">
            <summary>
            默认为 true 表示允许客户端调用，否则为服务端内存调用方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.IsLoadPersistenceMethod">
            <summary>
            是否冷启动加载持久化方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.IsBeforePersistenceMethod">
            <summary>
            是否持久化之前检查参数方法
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.#ctor(System.Type,System.Reflection.MethodInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute)">
            <summary>
            Server node method information
            服务端节点方法信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="methodAttribute"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.CheckLoadPersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod,System.String@)">
            <summary>
            冷启动持久化方法匹配（初始化加载持久化数据）
            </summary>
            <param name="loadPersistenceMethod"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.CheckBeforePersistence(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod,System.String@)">
            <summary>
            持久化检查方法匹配
            </summary>
            <param name="beforePersistenceMethod"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.setIsPersistenceMethod">
            <summary>
            设置持久化检查方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.CallMethodParameter(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            方法调用传参
            </summary>
            <param name="doCommandGenerator"></param>
            <param name="inputParameterLocalBuilder"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.CheckRepair(System.Type,System.Reflection.MethodInfo)">
            <summary>
            检查修复方法定义是否一致
            </summary>
            <param name="type"></param>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.CreateMethod``1(System.Reflection.MethodInfo)">
            <summary>
            创建服务端节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repairMethod">修复方法信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.createMethod``1(System.Reflection.MethodInfo)">
            <summary>
            创建服务端节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repairMethod">修复方法信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.GetMethodFlags">
            <summary>
            获取服务端节点方法标记
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.CheckCustomServiceNode">
            <summary>
            自定义基础服务节点方法检查
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.GetMethod(System.Type,AutoCSer.LeftArray{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod}@)">
            <summary>
            获取服务端接口方法集合
            </summary>
            <param name="type"></param>
            <param name="methods"></param>
            <returns>错误信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod.Compare(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeMethod)">
            <summary>
            服务端接口方法排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType">
            <summary>
            服务端节点类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.NodeAttribute">
            <summary>
            Server node interface configuration
            服务端节点接口配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.ServerNodeTypeAttribute">
            <summary>
            节点方法序号映射枚举类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.Methods">
            <summary>
            服务端接口方法信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.Messages">
            <summary>
            提示信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.#ctor(System.Type)">
            <summary>
            服务端节点类型信息
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.GetClientMethods(System.Type,System.Exception@,System.String[]@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNodeMethod[]@,System.Boolean)">
            <summary>
            获取客户端方法集合
            </summary>
            <param name="type"></param>
            <param name="creatorException"></param>
            <param name="creatorMessages"></param>
            <param name="methods"></param>
            <param name="isLocalClient"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.GetMethodGroup">
            <summary>
            获取方法分组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.CheckType(System.Type)">
            <summary>
            接口类型检查
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeType.CheckType(System.Type,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeAttribute@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeTypeAttribute@)">
            <summary>
            检查节点接口类型
            </summary>
            <param name="type"></param>
            <param name="nodeAttribute"></param>
            <param name="serverNodeTypeAttribute"></param>
            <returns>错误信息</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer">
            <summary>
            日志流持久化缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.OutputBuffer">
            <summary>
            输出数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.outputCopyBuffer">
            <summary>
            临时复制数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.outputEncodeBuffer">
            <summary>
            编码数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.SendBufferMaxSize">
            <summary>
            数据缓冲区最大字节数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.OutputStream">
            <summary>
            输出数据流
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.start">
            <summary>
            输出数据缓冲区起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.bufferLength">
            <summary>
            输出数据缓冲区大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.Count">
            <summary>
            当前已经创建输出数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.currentIndex">
            <summary>
            当前缓冲区已确认输出位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.isNewBuffer">
            <summary>
            是否创建了新的缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService)">
            <summary>
            日志流持久化缓冲区
            </summary>
            <param name="service">Log stream persistence memory database service
            日志流持久化内存数据库服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.GetBufferLength">
            <summary>
            获取输出数据缓冲区大小
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.Free">
            <summary>
            释放缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.SetStart(System.Byte*)">
            <summary>
            设置输出数据缓冲区起始位置
            </summary>
            <param name="dataFixed"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.Reset">
            <summary>
            重置状态数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.RestoreCurrentIndex">
            <summary>
            还原当前缓冲区已确认输出位置
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.TrySetCurrentIndex">
            <summary>
            输出数量不为 0 时设置当前缓冲区已确认输出位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.CheckResizeError">
            <summary>
            检查输出流是否已经超限
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.CheckDataStart">
            <summary>
            输出数据缓冲区未更新时设置输出计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.CheckNewBuffer">
            <summary>
            检查数据缓冲区是否被新建
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.GetData">
            <summary>
            获取输出数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceBuffer.encode(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            数据编码
            </summary>
            <param name="outputData"></param>
            <returns>数据是否编码</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder">
            <summary>
            Rebuild the log stream persistence file
            重建日志流持久化文件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.Service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.persistenceFileInfo">
            <summary>
            Persistent file information
            持久化文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.persistenceCallbackExceptionPositionFileInfo">
            <summary>
            Persistent callback exception location file information
            持久化回调异常位置文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.persistenceDataPositionBuffer">
            <summary>
            持久化回调异常位置输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.nodes">
            <summary>
            服务端节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.snapshotTransactionNodes">
            <summary>
            快照事务关系节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.LoadExceptionNode">
            <summary>
            初始化加载执行异常节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.node">
            <summary>
            当前持久化节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.persistenceQueue">
            <summary>
            调用持久化链表
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.rebuildPosition">
            <summary>
            持久化流重建起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.persistencePosition">
            <summary>
            The written location of the persistent stream
            持久化流已写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.persistenceCallbackExceptionFilePosition">
            <summary>
            持久化回调异常位置文件已写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.rebuildSnapshotPosition">
            <summary>
            Rebuild the end position of the snapshot
            重建快照结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.snapshotTransactionNodeVersion">
            <summary>
            快照事务关系节点版本
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.isSnapshotTransactionNodeVersionRebuild">
            <summary>
            快照事务关系节点版本重建
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.nodeCount">
            <summary>
            服务端节点数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.isClosed">
            <summary>
            是否已关闭
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.isClosedOrServiceDisposed">
            <summary>
            是否已关闭
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService)">
            <summary>
            Rebuild the log stream persistence file
            重建日志流持久化文件
            </summary>
            <param name="service">Log stream persistence memory database service
            日志流持久化内存数据库服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.appendSnapshotTransactionNode(System.Collections.Generic.KeyValuePair{System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode})">
            <summary>
            添加快照事务关系节点
            </summary>
            <param name="serverNode"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.Close(System.Boolean)">
            <summary>
            关闭重建操作
            </summary>
            <param name="isNodeLog"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.CloseLog">
            <summary>
            关闭重建操作（输出失败日志）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.createFile">
            <summary>
            创建重建文件
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.checkSnapshotTransactionNodeVersion">
            <summary>
            检查快照事务关系节点版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.CloseVersion">
            <summary>
            关闭版本重建
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.NextNode">
            <summary>
            持久化下一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.getSnapshotArray">
            <summary>
            Get the array of pre-applied snapshot containers
            获取预申请快照容器数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.GetSnapshotResult">
            <summary>
            获取节点快照数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.nodePersistence">
            <summary>
            当前节点持久化操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.checkPersistencePosition(System.IO.FileStream)">
            <summary>
            检查持久化流已写入位置是否匹配
            </summary>
            <param name="persistenceStream"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.Rebuild">
            <summary>
            当前节点持久化操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.Rebuild``1(System.Boolean,AutoCSer.LeftArray{``0}@,AutoCSer.LeftArray{``0}@)">
            <summary>
            当前节点持久化操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isCreateNode"></param>
            <param name="array"></param>
            <param name="newArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.RebuildSnapshotClone``1(System.Boolean,AutoCSer.LeftArray{``0}@,AutoCSer.LeftArray{``0}@)">
            <summary>
            当前节点持久化操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isCreateNode"></param>
            <param name="array"></param>
            <param name="newArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.Rebuild``1(System.Boolean,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable{``0})">
            <summary>
            当前节点持久化操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="isCreateNode"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.PushQueue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter)">
            <summary>
            添加调用队列
            </summary>
            <param name="methodParameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.CheckQueue">
            <summary>
            检查调用队列
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.queuePersistence">
            <summary>
            调用队列持久化
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.persistence">
            <summary>
            调用队列持久化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder.QueuePersistence">
            <summary>
            未完成调用队列持久化
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallback">
            <summary>
            日志流持久化文件重建队列回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallback.rebuilder">
            <summary>
            Rebuild the log stream persistence file
            重建日志流持久化文件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallback.type">
            <summary>
            日志流持久化文件重建队列回调任务类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilder,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum)">
            <summary>
            日志流持久化文件重建队列回调
            </summary>
            <param name="rebuilder">日志流持久化文件重建</param>
            <param name="type">日志流持久化文件重建队列回调任务类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallback.RunTask">
            <summary>
            回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum">
            <summary>
            日志流持久化文件重建队列回调任务类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum.NextNode">
            <summary>
            持久化下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum.GetSnapshotResult">
            <summary>
            获取节点快照数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum.CheckQueue">
            <summary>
            检查调用队列
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum.Close">
            <summary>
            关闭重建操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum.CloseLog">
            <summary>
            关闭重建操作（输出失败日志）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum.CloseVersion">
            <summary>
            关闭版本重建
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceRebuilderCallbackTypeEnum.Completed">
            <summary>
            重建完成
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallback">
            <summary>
            内存数据库回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallback.service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallback.type">
            <summary>
            内存数据库回调类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallbackTypeEnum)">
            <summary>
            Load data
            </summary>
            <param name="service">Log stream persistence memory database service
            日志流持久化内存数据库服务</param>
            <param name="type">内存数据库回调类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceCallback.RunTask">
            <summary>
            回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave">
            <summary>
            从节点客户端信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.repairNodeMethodDirectoryFiles">
            <summary>
            修复方法目录与文件信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.removeCallback">
            <summary>
            异常移除客户端回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.repairNodeMethodPositionCallback">
            <summary>
            获取修复节点方法信息委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.persistenceFileCallback">
            <summary>
            获取持久化文件数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.persistenceCallbackExceptionPositionFileCallback">
            <summary>
            获取持久化回调异常位置文件数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.PersistenceCallbackExceptionPositionCallback">
            <summary>
            获取持久化回调异常位置信息委托
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.readPersistenceWaitLock">
            <summary>
            持久化文件读取操作等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.persistenceFileStream">
            <summary>
            持久化文件流
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.persistenceCallbackExceptionPositionFileStream">
            <summary>
            持久化异常位置文件流
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.Timestamp">
            <summary>
            创建从节点客户端信息时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.bufferSize">
            <summary>
            读取文件缓冲区大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.isPersistenceCallbackExceptionPosition">
            <summary>
            是否直接获取持久化回调异常位置信息，否则正在读取文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.isClosed">
            <summary>
            Whether resources have been released
            是否已释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.isBackup">
            <summary>
            是否备份客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.persistencePosition">
            <summary>
            读取文件位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.persistenceCallbackExceptionFilePosition">
            <summary>
            读取持久化回调异常位置文件位置
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,AutoCSer.Net.CommandServerSocket,System.Boolean)">
            <summary>
            从节点客户端信息
            </summary>
            <param name="service"></param>
            <param name="socket"></param>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.Close">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.RemoveCallback">
            <summary>
            移除从节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.remove">
            <summary>
            移除从节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.AppendRepairNodeMethodDirectoryFile(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile)">
            <summary>
            添加修复方法目录与文件信息
            </summary>
            <param name="directory"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.GetRepairNodeMethodPosition(AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition}@)">
            <summary>
            获取修复节点方法信息
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.AppendRepairNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod)">
            <summary>
            修复节点方法信息回调
            </summary>
            <param name="repairNodeMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.SetPersistencePosition(System.Int64)">
            <summary>
            持久化流已写入位置回调
            </summary>
            <param name="persistencePosition">持久化流已写入位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.GetPersistenceFile(System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer}@)">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="position"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.getPersistenceFile">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.GetPersistenceCallbackExceptionPositionFile(System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer}@)">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="position"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.getPersistenceCallbackExceptionPositionFile">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.CheckPersistenceCallbackExceptionPositionCallback">
            <summary>
            检查持久化回调异常位置文件已写入位置
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave.AppendPersistenceCallbackExceptionPosition(System.Int64)">
            <summary>
            持久化回调异常位置信息回调
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceCallback">
            <summary>
            日志流持久化内存数据库回调操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceCallback.PersistencePosition">
            <summary>
            The written location of the persistent stream
            持久化流已写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceCallback.head">
            <summary>
            持久化回调头节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceCallback.end">
            <summary>
            持久化回调尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceCallback.CheckRebuild">
            <summary>
            持久化文件是否需要重建
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter)">
            <summary>
            日志流持久化内存数据库回调操作
            </summary>
            <param name="head">持久化回调头节点</param>
            <param name="end">持久化回调尾节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceCallback.RunTask">
            <summary>
            回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader">
            <summary>
            日志流持久化内存数据库服务数据加载
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.FileVersion">
            <summary>
            文件版本号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.FieHead">
            <summary>
            文件头部前 4 个字节，头部版本号为 1
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.FileHeadSize">
            <summary>
            文件头部字节大小 [版本号]+[持久化流重建起始位置]+[快照结束位置]
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.ExceptionPositionFileVersion">
            <summary>
            持久化回调异常位置文件版本号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.PersistenceCallbackExceptionPositionFileHead">
            <summary>
            持久化回调异常位置文件头部前 4 个字节，头部版本号为 0
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.ExceptionPositionFileHeadSize">
            <summary>
            持久化回调异常位置文件头部字节大小 [版本号]+[持久化流重建起始位置]
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.persistenceCallbackExceptionFilePosition">
            <summary>
            持久化异常位置文件读取位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.deserializer">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.persistenceCallbackExceptionPositions">
            <summary>
            持久化回调异常位置集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.persistenceFileName">
            <summary>
            The file name for log stream persistence
            日志流持久化文件名称
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.readBufferSize">
            <summary>
            读取文件缓冲区大小，最小为 4KB
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.persistenceCallbackExceptionPositionFileName">
            <summary>
            The persistent callback exception location file name
            持久化回调异常位置文件名称
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService)">
            <summary>
            日志流持久化内存数据库服务数据加载
            </summary>
            <param name="service">Log stream persistence memory database service
            日志流持久化内存数据库服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.Load">
            <summary>
            开始加载数据
            </summary>
            <returns>加载请求数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.Decode(AutoCSer.SubArray{System.Byte}@,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            数据解码
            </summary>
            <param name="transferData">编码后的数据</param>
            <param name="outputData">等待写入的原始数据缓冲区</param>
            <returns>是否解码成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.loadHead(AutoCSer.SubArray{System.Byte})">
            <summary>
            加载文件头部数据
            </summary>
            <param name="data">读取文件数据</param>
            <returns>文件头部大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.loadPersistenceCallbackExceptionPositionVersion0">
            <summary>
            加载持久化回调异常位置集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.loadBuffer">
            <summary>
            初始化加载数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.load(AutoCSer.SubArray{System.Byte},System.Int64)">
            <summary>
            Load data
            </summary>
            <param name="data">当前加载数据缓冲区</param>
            <param name="position">当前数据所在持久化流中的位置</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceLoader.GetPersistenceFileHeadVersion(System.Byte[],System.UInt64@)">
            <summary>
            获取持久化文件头部版本信息
            </summary>
            <param name="buffer"></param>
            <param name="rebuildPosition"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode">
            <summary>
            Service basic operation node
            服务基础操作节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.ServiceNodeIndex">
            <summary>
            Identification of basic service nodes
            基础服务节点标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.Service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.isCheckRemoveType">
            <summary>
            Whether it is necessary to call AutoCSer.Common.Config.CheckRemoteType to check the validity of the remote type
            是否需要调用 AutoCSer.Common.Config.CheckRemoteType 检查远程类型的合法性
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService)">
            <summary>
            Service basic operation node
            服务基础操作节点
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.RemoveNodeByKey(System.String)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateNode``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Func{``0},System.Boolean)">
            <summary>
            Create server-side nodes (persistence is not supported; only nodes that support snapshots support persistence)
            创建服务端节点（不支持持久化，只有支持快照的节点才支持持久化）
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="getNode">Get the node operation object
            获取节点操作对象</param>
            <param name="isPersistence">By default, false indicates pure memory mode, and data will be lost when the service is restarted
            默认为 false 表示纯内存模式，在重启服务时数据将丢失</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateNodeBeforePersistence``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create server-side nodes (persistence is not supported; only nodes that support snapshots support persistence)
            创建服务端节点（不支持持久化，只有支持快照的节点才支持持久化）
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateNode``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Func{``0})">
            <summary>
            Create server-side nodes (persistence is not supported; only nodes that support snapshots support persistence)
            创建服务端节点（不支持持久化，只有支持快照的节点才支持持久化）
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
            <param name="createNodeIndex">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="getNode">Get the node operation object
            获取节点操作对象</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateSnapshotNode``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Func{``0})">
            <summary>
            Create server-side nodes that support the snapshot interface (it is necessary to ensure that the operation node object implements the snapshot interface)
            创建支持快照接口的服务端节点（必须保证操作节点对象实现快照接口）
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="getNode">Get the node operation object (must ensure that the operation node object implements the snapshot interface)
            获取节点操作对象（必须保证操作节点对象实现快照接口）</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateSnapshotNodeBeforePersistence``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator@)">
            <summary>
            Create server-side nodes that support the snapshot interface (it is necessary to ensure that the operation node object implements the snapshot interface)
            创建支持快照接口的服务端节点（必须保证操作节点对象实现快照接口）
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="nodeCreator">Generate server-side node
            生成服务端节点</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateSnapshotNode``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CreateNodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeCreator,System.Func{``0})">
            <summary>
            Create server-side nodes that support the snapshot interface (it is necessary to ensure that the operation node object implements the snapshot interface)
            创建支持快照接口的服务端节点（必须保证操作节点对象实现快照接口）
            </summary>
            <typeparam name="T">Node interface type
            节点接口类型</typeparam>
            <param name="createNodeIndex">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="nodeCreator">Generate server-side node
            生成服务端节点</param>
            <param name="getNode">Get the node operation object (must ensure that the operation node object implements the snapshot interface)
            获取节点操作对象（必须保证操作节点对象实现快照接口）</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateServerRegistryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a server registration node IServerRegistryNode
            创建服务注册节点 IServerRegistryNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="loadTimeoutSeconds">Cold start session timeout seconds
            冷启动会话超时秒数</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateProcessGuardNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a service process daemon node IProcessGuardNode
            创建服务进程守护节点 IProcessGuardNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateServerByteArrayMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node IMessageNode{ServerByteArrayMessage}
            创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node IMessageNode{T}
            创建消息处理节点 IMessageNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="messageType">Message data type
            消息数据类型</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateDistributedLockNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create distributed lock nodes IDistributedLockNode{KT}
            创建分布式锁节点 IDistributedLockNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateByteArrayFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a dictionary node IByteArrayFragmentDictionaryNode{KT}
            创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.getEquatableType(AutoCSer.Reflection.RemoteType@,System.Type@)">
            <summary>
            Get the type IEquatable{T}
            获取 IEquatable{T} 类型
            </summary>
            <param name="remoteType"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.getEquatableType(AutoCSer.Reflection.RemoteType@,System.Type@,AutoCSer.Reflection.RemoteType@,System.Type@)">
            <summary>
            Get the type IEquatable{T}
            获取 IEquatable{T} 类型
            </summary>
            <param name="remoteType"></param>
            <param name="type"></param>
            <param name="remoteType2"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.getEquatableType2(AutoCSer.Reflection.RemoteType@,System.Type@,AutoCSer.Reflection.RemoteType@,System.Type@)">
            <summary>
            Get the type IEquatable{T}
            获取 IEquatable{T} 类型
            </summary>
            <param name="remoteType"></param>
            <param name="type"></param>
            <param name="remoteType2"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a dictionary node IFragmentDictionaryNode{KT,VT}
            创建字典节点 IFragmentDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateByteArrayDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IByteArrayDictionaryNode{KT}
            创建字典节点 IByteArrayDictionaryNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IDictionaryNode{KT,VT}
            创建字典节点 IDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.getComparableType(AutoCSer.Reflection.RemoteType@,System.Type@)">
            <summary>
            Get the type IComparable{T}
            获取 IComparable{T} 类型
            </summary>
            <param name="remoteType"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.getComparableType(AutoCSer.Reflection.RemoteType@,System.Type@,AutoCSer.Reflection.RemoteType@,System.Type@)">
            <summary>
            Get the type IComparable{T}
            获取 IComparable{T} 类型
            </summary>
            <param name="remoteType"></param>
            <param name="type"></param>
            <param name="remoteType2"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateSearchTreeDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a binary search tree node ISearchTreeDictionaryNode{KT,VT}
            创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateSortedDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a sorting dictionary node ISortedDictionaryNode{KT,VT}
            创建排序字典节点 ISortedDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateSortedListNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a sorting list node ISortedListNode{KT,VT}
            创建排序列表节点 ISortedListNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="valueType">Data type</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateFragmentHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a 256 base fragment hash table node IFragmentHashSetNode{KT}
            创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a hash table node IHashSetNode{KT}
            创建哈希表节点 IHashSetNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateSearchTreeSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a binary search tree collection node ISearchTreeSetNode{KT}
            创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateSortedSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create sorted collection node ISortedSetNode{KT}
            创建排序集合节点 ISortedSetNode{KT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a queue node IQueueNode{T} (First in, first Out)
            创建队列节点（先进先出） IQueueNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Container initialization size
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a stack node IStackNode{T} (Last in, first out)
            创建栈节点（后进先出） IStackNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Container initialization size
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateLeftArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a array node ILeftArrayNode{T}
            创建数组节点 ILeftArrayNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Container initialization size
            关键字类型</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a array node IArrayNode{T}
            创建数组节点 IArrayNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">Keyword type
            关键字类型</param>
            <param name="length">Array length</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateHashBytesFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a dictionary node IHashBytesFragmentDictionaryNode
            创建字典节点 IHashBytesFragmentDictionaryNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateHashBytesDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IHashBytesDictionaryNode
            创建字典节点 IHashBytesDictionaryNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateByteArrayQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a queue node IByteArrayQueueNode (First in, first Out)
            创建队列节点（先进先出） IByteArrayQueueNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateByteArrayStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a stack node IByteArrayStackNode (Last in, first out)
            创建栈节点（后进先出） IByteArrayStackNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateOnlyPersistenceNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create an archive node only IOnlyPersistenceNode{T}
            创建仅存档节点 IOnlyPersistenceNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="valueType">Archive data type
            存档数据类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateManyHashBitMapClientFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode
            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateManyHashBitMapFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode
            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateIdentityGeneratorNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int64)">
            <summary>
            Create a 64-bit auto-increment identity node IIdentityGeneratorNode
            创建 64 位自增ID 节点 IIdentityGeneratorNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="identity">Initial Allocation identity
            起始分配 ID</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateBitmapNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.UInt32)">
            <summary>
            Create a bitmap node IBitmapNode
            创建位图节点 IBitmapNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="capacity">The number of binary bits
            二进制位数量</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceNode.CreateServiceNode``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,``0)">
            <summary>
            Create the basic operation nodes of the service
            创建服务基础操作节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallback">
            <summary>
            从节点客户端信息回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallback.slave">
            <summary>
            从节点客户端信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallback.callbackType">
            <summary>
            从节点客户端信息回调类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallback.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallbackTypeEnum)">
            <summary>
            从节点客户端信息回调
            </summary>
            <param name="slave">从节点客户端信息</param>
            <param name="callbackType">从节点客户端信息回调类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallback.RunTask">
            <summary>
            回调操作
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallbackTypeEnum">
            <summary>
            从节点客户端信息回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallbackTypeEnum.Remove">
            <summary>
            异常移除节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlaveCallbackTypeEnum.CheckPersistenceCallbackExceptionPosition">
            <summary>
            检查持久化回调异常位置文件已写入位置
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader">
            <summary>
            从服务节点加载数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.isDeserializeLog">
            <summary>
            是否输出反序列化错误日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.service">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.masterClient">
            <summary>
            主节点客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.timestamp">
            <summary>
            从服务验证时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.persistencePosition">
            <summary>
            服务端持久化流已写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getRepairNodeMethodPositionCommandKeepCallback">
            <summary>
            从节点获取修复节点方法信息命令
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.persistenceCallbackExceptionPositionStream">
            <summary>
            持久化回调异常位置文件流
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceCallbackExceptionPositionFileCommandKeepCallback">
            <summary>
            获取持久化回调异常位置文件数据命令
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceCallbackExceptionPositionCommandKeepCallback">
            <summary>
            获取持久化回调异常位置数据命令
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.persistenceStream">
            <summary>
            持久化文件流
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceFileCommandKeepCallback">
            <summary>
            获取持久化文件数据命令
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceCallbackExceptionPositionFileCompleted">
            <summary>
            获取持久化回调异常位置文件数据是否已完成
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.callState">
            <summary>
            调用错误状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.returnType">
            <summary>
            服务错误返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.isBackup">
            <summary>
            是否备份客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase,AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent)">
            <summary>
            从服务节点加载数据
            </summary>
            <param name="service"></param>
            <param name="masterClient"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.Close">
            <summary>
            关闭数据加载
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.Load">
            <summary>
            开始加载数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceCallbackExceptionPositionFile">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceCallbackExceptionPosition(AutoCSer.Net.CommandClientReturnValue{System.Int64},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Get the location data of the persistent callback exception
            获取持久化回调异常位置数据
            </summary>
            <param name="returnValue"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceCallbackExceptionPositionFile(AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="returnValue"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.GetPersistenceCallbackExceptionPositionFile(System.Int64,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="position"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.tryGetPersistenceFile">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceFile">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getPersistenceFile(AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="returnValue"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.GetPersistenceFile(System.Int64,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="position"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getRepairNodeMethodPosition">
            <summary>
            Get the repair node method information from slave node
            从节点获取修复节点方法信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.getRepairNodeMethodPosition(AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Get the repair node method information from slave node
            从节点获取修复节点方法信息
            </summary>
            <param name="returnValue"></param>
            <param name="keepCallbackCommand"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.check``1(AutoCSer.Net.CommandClientReturnValue{``0}@)">
            <summary>
            检查服务返回值状态
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader.GetSessionObject(AutoCSer.BinaryDeserializer)">
            <summary>
            获取从服务节点加载数据接口实例
            </summary>
            <param name="deserializer"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceConfig">
            <summary>
            日志流持久化内存数据库服务从节点配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceConfig.DelayMilliseconds">
            <summary>
            同步失败重试间隔毫秒数，默认为 100，最小值为 1
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceConfig.DelayTimeSpan">
            <summary>
            同步失败重试间隔
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceConfig.Create(AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent,AutoCSer.Net.CommandClientSocket)">
            <summary>
            日志流持久化内存数据库备份
            </summary>
            <param name="masterClient"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceConfig.Create``1(System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,``0},AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent)">
            <summary>
            日志流持久化内存数据库服务（从服务节点）
            </summary>
            <typeparam name="T">Node service interface type
            节点服务接口类型</typeparam>
            <param name="createServiceNode"></param>
            <param name="masterClient"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceLoadTypeEnum">
            <summary>
            日志流持久化内存数据库从节点服务端加载数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceLoadTypeEnum.RepairNodeMethod">
            <summary>
            修复节点方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceLoadTypeEnum.PersistenceFile">
            <summary>
            持久化文件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceLoadTypeEnum.PersistenceCallbackExceptionPositionFile">
            <summary>
            持久化回调异常位置文件
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodSerializer`1">
            <summary>
            快照方法序列化调用
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodSerializer`1.serializer">
            <summary>
            二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodSerializer`1.nodeIndex">
            <summary>
            节点标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodSerializer`1.isSimpleSerializeParamter">
            <summary>
            是否简单序列化输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodSerializer`1.methodIndex">
            <summary>
            Method Number
            方法编号
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodSerializer`1.#ctor(AutoCSer.BinarySerializer,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode)">
            <summary>
            快照方法序列化调用
            </summary>
            <param name="serializer">二进制序列化</param>
            <param name="node">节点信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SnapshotMethodSerializer`1.Serialize(`0)">
            <summary>
            参数序列化
            </summary>
            <param name="parameter"></param>
            <returns>是否序列化成功</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService">
            <summary>
            日志流持久化内存数据库从节点服务端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.masterClient">
            <summary>
            主节点客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.delayTimeSpan">
            <summary>
            同步失败重试间隔
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.loader">
            <summary>
            日志流持久化内存数据库从节点服务数据加载
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.isLoad">
            <summary>
            是否已经启动数据加载
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveServiceConfig,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode},AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent)">
            <summary>
            日志流持久化内存数据库从节点服务端
            </summary>
            <param name="config">Configuration of in-memory database service for log stream persistence
            日志流持久化内存数据库服务配置</param>
            <param name="createServiceNode">The delegate that creates the underlying operation node for the service
            创建服务基础操作节点委托</param>
            <param name="masterClient">主节点客户端</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.GetNodeIndex(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity
            获取节点标识
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.GetNodeIndex(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity
            获取节点标识
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.Rebuild(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue)">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.Rebuild(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue)">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.RepairNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <param name="index"></param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="methodName">The name of the repair method must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.BindNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <param name="index"></param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="methodName">The name of the repair method must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.CreateSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Boolean)">
            <summary>
            Create a slave node
            创建从节点
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
            <returns>Verify the timestamp from the node, and a negative number represents the CallStateEnum error status
            从节点验证时间戳，负数表示 CallStateEnum 错误状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.CreateSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Boolean)">
            <summary>
            Create a slave node
            创建从节点
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
            <returns>Verify the timestamp from the node, and a negative number represents the CallStateEnum error status
            从节点验证时间戳，负数表示 CallStateEnum 错误状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.Load">
            <summary>
            开始加载数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.CloseLoader(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader,System.Boolean)">
            <summary>
            关闭数据加载
            </summary>
            <param name="loader"></param>
            <param name="isRetry"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.delayLoad">
            <summary>
            重试加载数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISlaveLoader#GetPersistenceCallbackExceptionPositionFile(System.Int64,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="position"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveService.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISlaveLoader#GetPersistenceFile(System.Int64,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="position"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameter`1">
            <summary>
            返回参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameter`1.#ctor">
            <summary>
            返回参数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameter`1.#ctor(`0)">
            <summary>
            返回参数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameter`1.serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameter`1.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameter`1.CreateKeepCallback">
            <summary>
            创建持续回调返回参数
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameterAwaiter`1">
            <summary>
            返回参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameterAwaiter`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode)">
            <summary>
            返回参数
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SimpleSerializeResponseParameterAwaiter`1.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringRequestParameterSerializer">
            <summary>
            字符串请求参数序列化
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringRequestParameterSerializer.value">
            <summary>
            字符串
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringRequestParameterSerializer.#ctor(System.String)">
            <summary>
            字符串请求参数序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringRequestParameterSerializer.op_Implicit(System.String)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringRequestParameterSerializer">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringRequestParameterSerializer.Serialize(AutoCSer.BinarySerializer)">
            <summary>
            序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringRequestParameterSerializer.nullString">
            <summary>
            null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringRequestParameterSerializer.empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter">
            <summary>
            await ResponseValueResult{string}, which returns string data
            await ResponseValueResult{string}，返回字符串数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.continuation">
            <summary>
            Asynchronous callback
            异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.command">
            <summary>
            The return value command
            返回值命令
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.value">
            <summary>
            Return string
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.#ctor">
            <summary>
            Return string data
            返回字符串数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.deserialize(AutoCSer.BinaryDeserializer)">
            <summary>
            Deserialization
            反序列化
            </summary>
            <param name="deserializer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Set asynchronous callback
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Set the return parameters
            设置返回参数
            </summary>
            <param name="responseParameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.onCompleted">
            <summary>
            The asynchronous operation has been completed
            异步操作已完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.Wait">
            <summary>
            Wait for the command call to return the result
            等待命令调用返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.GetResult">
            <summary>
            Get the result of the command call
            获取命令调用结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.StringResponseParameterAwaiter.GetAwaiter">
            <summary>
            Get the awaiter object
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult`1">
            <summary>
            Return data
            返回数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult`1.Value">
            <summary>
            Return data
            返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult`1.IsValue">
            <summary>
            Returning false indicates that the input parameter is illegal or has no return value
            返回 false 表示输入参数非法或者无返回值
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult`1.#ctor(`0)">
            <summary>
            Return data
            返回数据
            </summary>
            <param name="value">Return data
            返回数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult`1.op_Implicit(`0)~AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{`0}">
            <summary>
            Implicit conversion
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult`1.NullEnumerable">
            <summary>
            Empty collection
            空集合
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1">
            <summary>
            Array node interface 
                       数组节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clear the data at the specified location 
                       清除指定位置数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Clear data quantity 
                       清除数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.ClearArray">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.Fill(`0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position 
                       用数据填充数组指定位置
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">The number of filled data 
                       填充数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.FillArray(`0)">
            <summary>
            Fill the entire array with data 
                       用数据填充整个数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.GetLength">
            <summary>
            Get the array length 
                       获取数组长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.GetValue(System.Int32)">
            <summary>
            Get data based on index location 
                       根据索引位置获取数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <returns>If the return exceeds the index, there will be no return value 
                       超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.GetValueSet(System.Int32,`0)">
            <summary>
            Set the data according to the index position and return the data before the setting 
                       根据索引位置设置数据并返回设置之前的数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <param name="value">data</param>
            <returns>Set the previous data. If it exceeds the index and returns, there will be no return value 
                       设置之前的数据，超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Search for the number of matching data 
                       查找匹配数据数量</param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.IndexOfArray(`0)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">The last matching position (the starting position) 
                       最后一个匹配位置（起始位置）</param>
            <param name="count">Search for the number of matching data 
                       查找匹配数据数量</param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.LastIndexOfArray(`0)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the array data at the specified position 
                       反转指定位置数组数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Reverse the amount of data 
                       反转数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.ReverseArray">
            <summary>
            Reverse the entire array data 
                       反转整个数组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.SetValue(System.Int32,`0)">
            <summary>
            Set the data according to the index position 
                       根据索引位置设置数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sort the array data at the specified position 
                       排序指定位置数组数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">The quantity of data to be sorted 
                       排序数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeClientNode`1.SortArray">
            <summary>
            Array sorting 
                       数组排序
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode">
            <summary>
            Bitmap node interface 
                       位图节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.ClearBit(System.UInt32)">
            <summary>
            Clear bit status 
                       清除位状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.ClearMap">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.GetBit(System.UInt32)">
            <summary>
            Read bit status 
                       读取位状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>A non-0 indicates that the binary bit is in the set state. If the index exceeds, there will be no return value 
                       非 0 表示二进制位为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.GetBitClearBit(System.UInt32)">
            <summary>
            Clear the bit state and return to the state before setting 
                       清除位状态并返回设置之前的状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Clear the state before the operation. A non-0 state indicates that the binary bit was in the set state before. If the index exceeds, there will be no return value 
                       清除操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.GetBitInvertBit(System.UInt32)">
            <summary>
            Reverse the bit state and return the state before the operation 
                       位状态取反并返回操作之前的状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Take the state before the reverse operation. If it is not 0, it indicates that the binary bit is in the set state before. If the index exceeds, there will be no return value 
                       取反操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.GetBitSetBit(System.UInt32)">
            <summary>
            Set the bit state and return the state before setting 
                       设置位状态并返回设置之前的状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>The state before setting: A non-0 indicates that the binary bit was in the set state before, and there is no return value if the index exceeds 
                       设置之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.GetCapacity">
            <summary>
            Get the number of bitmap binary bits 
                       获取位图二进制位数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.InvertBit(System.UInt32)">
            <summary>
            Reverse the bit state 
                       位状态取反
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode.SetBit(System.UInt32)">
            <summary>
            Set bit status 
                       设置位状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode">
            <summary>
            Queue node Interface (First In, First Out) 
                       队列节点接口（先进先出） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode.Count">
            <summary>
            Get the number of queue data 
                       获取队列数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode.Enqueue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Add the data to the queue 
                       将数据添加到队列
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode.TryDequeue">
            <summary>
            Pop a piece of data from the queue 
                       从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode.TryDequeueResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            Pop a piece of data from the queue 
                       从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode.TryPeek">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view) 
                       获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode.TryPeekResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view) 
                       获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode">
            <summary>
            Stack node interface (Last in, first out) 
                       栈节点接口（后进先出） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode.Push(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Add the data to the stack 
                       将数据添加到栈
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode.TryPeek">
            <summary>
            Get the next popped data in the stack (no popped data, only view) 
                       获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode.TryPeekResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            Get the next popped data in the stack (no popped data, only view) 
                       获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode.TryPop">
            <summary>
            Pop a piece of data from the stack 
                       从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode.TryPopResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            Pop a piece of data from the stack 
                       从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode">
            <summary>
            Dictionary node interface 
                       字典节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.ContainsKey(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.GetRemove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.GetRemoveResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.Renew(System.Int32)">
            <summary>
            Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large) 
                       清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
            <param name="capacity">Initialize the size of the new container 
                       新容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.TryAdd(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Try to add data 
                       尝试添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.TryGetResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode.TryGetValue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode">
            <summary>
            256 base fragment hash byte array dictionary node interface 
                       256 基分片哈希字节数组字典 节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.Clear">
            <summary>
            Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.ClearArray">
            <summary>
            Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.ContainsKey(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Determine whether the keyword exists 
                       判断关键字是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.GetRemove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.GetRemoveResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            </summary>
            <param name="key"></param>
            <returns>Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.Remove(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Remove keyword 
                       删除关键字
            </summary>
            <param name="key"></param>
            <returns>Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.TryAdd(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.TryGetResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode.TryGetValue(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords 
                       根据关键字获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeClientNode">
            <summary>
            64-bit auto-increment identity node interface 
                       64 位自增ID 节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeClientNode.Next">
            <summary>
            Get the next increment identity 
                       获取下一个自增ID
            </summary>
            <returns>The next increment identity returns a negative number on failure 
                       下一个自增ID，失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeClientNode.NextFragment(System.Int32)">
            <summary>
            Gets the auto-increment identity segment 
                       获取自增 ID 分段
            </summary>
            <param name="count">Get the quantity of data 
                       获取数据数量</param>
            <returns>Auto-increment identity segment 
                       自增 ID 分段</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1">
            <summary>
            Array node interface 
                       数组节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clear the data at the specified location 
                       清除指定位置数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Clear data quantity 
                       清除数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.ClearLength">
            <summary>
            Clear all the data and set the valid length of the data to 0 
                       清除所有数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.Fill(`0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position 
                       用数据填充数组指定位置
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">The number of filled data 
                       填充数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.FillArray(`0)">
            <summary>
            Fill the entire array with data 
                       用数据填充整个数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.GetCapacity">
            <summary>
            Get the size of the array container 
                       获取数组容器大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.GetFreeCount">
            <summary>
            Get the number of containers free 
                       获取容器空闲数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.GetLength">
            <summary>
            Get the valid length of the array 
                       获取数组有效长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.GetTryPopValue">
            <summary>
            Remove the last data and return it 
                       移除最后一个数据并返回该数据
            </summary>
            <returns>No data will be returned if there is no removable data 
                       没有可移除数据则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.GetValue(System.Int32)">
            <summary>
            Get data based on index location 
                       根据索引位置获取数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <returns>If the return exceeds the index, there will be no return value 
                       超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.GetValueRemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified index position and return the removed data 
                       移除指定索引位置数据并返回被移除的数据
            </summary>
            <param name="index">Data location 
                       数据位置</param>
            <returns>No data will be returned if the index range is exceeded 
                       超出索引范围则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.GetValueRemoveToEnd(System.Int32)">
            <summary>
            Remove the data at the specified index position, move the last data to the specified position, and return the removed data 
                       移除指定索引位置数据，将最后一个数据移动到该指定位置，并返回被移除的数据
            </summary>
            <param name="index"></param>
            <returns>No data will be returned if the index range is exceeded 
                       超出索引范围则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.GetValueSet(System.Int32,`0)">
            <summary>
            Set the data according to the index position and return the data before the setting 
                       根据索引位置设置数据并返回设置之前的数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <param name="value">data</param>
            <returns>Set the previous data. If it exceeds the index and returns, there will be no return value 
                       设置之前的数据，超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Search for the number of matching data 
                       查找匹配数据数量</param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.IndexOfArray(`0)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.Insert(System.Int32,`0)">
            <summary>
            Insert data 
                       插入数据
            </summary>
            <param name="index">Insert position 
                       插入位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">The last matching position (the starting position) 
                       最后一个匹配位置（起始位置）</param>
            <param name="count">Search for the number of matching data 
                       查找匹配数据数量</param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.LastIndexOfArray(`0)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.Remove(`0)">
            <summary>
            Remove the first matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       移除第一个匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">data</param>
            <returns>Returning false indicates that there is no data match 
                       返回 false 表示不存在数据匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.RemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified index position 
                       移除指定索引位置数据
            </summary>
            <param name="index">Data location 
                       数据位置</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.RemoveToEnd(System.Int32)">
            <summary>
            Remove the data at the specified index position and move the last data to that specified position 
                       移除指定索引位置数据并将最后一个数据移动到该指定位置
            </summary>
            <param name="index"></param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the array data at the specified position 
                       反转指定位置数组数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Reverse the amount of data 
                       反转数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.ReverseArray">
            <summary>
            Reverse the entire array data 
                       反转整个数组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.SetEmpty">
            <summary>
            Empty and release the array 
                       置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.SetValue(System.Int32,`0)">
            <summary>
            Set the data according to the index position 
                       根据索引位置设置数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sort the array data at the specified position 
                       排序指定位置数组数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">The quantity of data to be sorted 
                       排序数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.SortArray">
            <summary>
            Array sorting 
                       数组排序
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.TryAdd(`0)">
            <summary>
            Add data when there is a free place 
                       当有空闲位置时添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the array is full and the addition failed 
                       返回 false 表示数组已满，添加失败</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeClientNode`1.TryPop">
            <summary>
            Try to remove the last data 
                       尝试移除最后一个数据
            </summary>
            <returns>Is there any removable data 
                       是否存在可移除数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode">
            <summary>
            Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
                       多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode.GetBit(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{System.Int32},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the operation of setting a new bit 
                       获取设置新位操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode.GetData">
            <summary>
            Get the current bitmap data 
                       获取当前位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode.SetBit(System.Int32)">
            <summary>
            Set bit 
                       设置位
            </summary>
            <param name="bit">The set binary bit 
                       设置的二进制位</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeClientNode.GetSize">
            <summary>
            Get the bitmap size (number of bits) 
                       获取位图大小（位数量）
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeClientNode">
            <summary>
            Multi-hash bitmap filter node interface (similar to Bloom Filter) 
                       多哈希位图过滤节点接口（类似布隆过滤器） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeClientNode.GetSize">
            <summary>
            Get the bitmap size (number of bits) 
                       获取位图大小（位数量）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeClientNode.SetBits(System.Int32,System.UInt32[])">
            <summary>
            Set bit 
                       设置位
            </summary>
            <param name="size">Bitmap size (number of bits) 
                       位图大小（位数量）</param>
            <param name="bits">Binary bit set 
                       位置集合</param>
            <returns>Returning false indicates that the bitmap size does not match 
                       返回 false 表示位图大小不匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeClientNode.CheckBits(System.Int32,System.UInt32[])">
            <summary>
            Binary bit set matching 
                       位置集合匹配
            </summary>
            <param name="size">Bitmap size (number of bits) 
                       位图大小（位数量）</param>
            <param name="bits">Binary bit set 
                       位置集合</param>
            <returns>Returning Null indicates that the bitmap does not match 
                       返回 Null 表示位图不匹配</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeClientNode`1">
            <summary>
            Archive-only data node interface (It is used for the rapid archiving of large amounts of concurrent data without modifying memory data or defining snapshot operations) 
                       仅存档数据节点接口（用于大量并发数据快速存档，不修改内存数据，也不定义快照操作） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeClientNode`1.Save(`0)">
            <summary>
            Data archiving 
                       数据存档
            </summary>
            <param name="value">Data to be archive 
                       待存档数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeClientNode`1.SaveSendOnly(`0)">
            <summary>
            Data archiving (The server does not respond) 
                       数据存档（服务端不响应）
            </summary>
            <param name="value">Data to be archive 
                       待存档数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeClientNode">
            <summary>
            Process daemon node interface (The server needs to run as an administrator; otherwise, an exception may occur) 
                       进程守护节点接口（服务端需要以管理员身份运行，否则可能异常） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeClientNode.Guard(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo)">
            <summary>
            Add the process to be daemon 
                       添加待守护进程
            </summary>
            <param name="processInfo">Process information 
                       进程信息</param>
            <returns>Add failed and return false 
                       添加失败返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeClientNode.Remove(System.Int32,System.DateTime,System.String)">
            <summary>
            Delete the daemon process 
                       删除被守护进程
            </summary>
            <param name="processId">Process identity 
                       进程标识</param>
            <param name="startTime">Process startup time 
                       进程启动时间</param>
            <param name="processName">Process name 
                       进程名称</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeClientNode.Switch(System.String)">
            <summary>
            Switch processes 
                       切换进程
            </summary>
            <param name="key">The key words of the switched process 
                       切换进程关键字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeClientNode`1">
            <summary>
            Queue node interface (First In, First Out) 
                       队列节点接口（先进先出） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeClientNode`1.Contains(`0)">
            <summary>
            Determine whether there is matching data in the queue (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断队列中是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">Data to be matched 
                       待匹配数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeClientNode`1.Count">
            <summary>
            Get the number of queue data 
                       获取队列数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeClientNode`1.Enqueue(`0)">
            <summary>
            Add the data to the queue 
                       将数据添加到队列
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeClientNode`1.TryDequeue">
            <summary>
            Pop a piece of data from the queue 
                       从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeClientNode`1.TryPeek">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view) 
                       获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode">
            <summary>
            Server registration node interface 
                       服务注册节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode.Append(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog)">
            <summary>
            Add the server registration log 
                       添加服务注册日志
            </summary>
            <param name="log"></param>
            <returns>Server registration status 
                       服务注册状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode.GetSessionID">
            <summary>
            Get the server session identity 
                       获取服务会话标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode.LogCallback(System.String,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Gets the server registration log 
                       获取服务注册日志
            </summary>
            <param name="serverName">Monitor the server name. An empty string represents all servers 
                       监视服务名称，空字符串表示所有服务</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode.ServerCallback(System.Int64,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryOperationTypeEnum},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            The server registration callback delegate is mainly used to register components to check the online state of the server 
                       服务注册回调委托，主要用于注册组件检查服务的在线状态
            </summary>
            <param name="sessionID">Server session identity 
                       服务会话标识</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode.GetLog(System.String)">
            <summary>
            Get the main log of the server 
                       获取服务主日志
            </summary>
            <param name="serverName">Server name 
                       服务名称</param>
            <returns>Returning null indicates that the server main log was not found 
                       返回 null 表示没有找到服务主日志</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeClientNode.Check(System.Int64,System.String)">
            <summary>
            Check the online status of the server 
                       检查服务在线状态
            </summary>
            <param name="sessionID">Server session identity 
                       服务会话标识</param>
            <param name="serverName">Server name 
                       服务名称</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode">
            <summary>
            Service basic operation interface 
                       服务基础操作接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a array node IArrayNode{T} 
                       创建数组节点 IArrayNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="length">Array length</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateBitmapNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.UInt32)">
            <summary>
            Create a bitmap node IBitmapNode 
                       创建位图节点 IBitmapNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="capacity">The number of binary bits 
                       二进制位数量</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateByteArrayDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IByteArrayDictionaryNode{KT} 
                       创建字典节点 IByteArrayDictionaryNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type 
                       可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateByteArrayFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
                       创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateByteArrayQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a queue node IByteArrayQueueNode (First in, first Out) 
                       创建队列节点（先进先出） IByteArrayQueueNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateByteArrayStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a stack node IByteArrayStackNode (Last in, first out) 
                       创建栈节点（后进先出） IByteArrayStackNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IDictionaryNode{KT,VT} 
                       创建字典节点 IDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type 
                       可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateDistributedLockNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create distributed lock nodes IDistributedLockNode{KT} 
                       创建分布式锁节点 IDistributedLockNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a dictionary node IFragmentDictionaryNode{KT,VT} 
                       创建字典节点 IFragmentDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateFragmentHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
                       创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateHashBytesDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IHashBytesDictionaryNode 
                       创建字典节点 IHashBytesDictionaryNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type 
                       可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateHashBytesFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a dictionary node IHashBytesFragmentDictionaryNode 
                       创建字典节点 IHashBytesFragmentDictionaryNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a hash table node IHashSetNode{KT} 
                       创建哈希表节点 IHashSetNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type 
                       可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateIdentityGeneratorNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int64)">
            <summary>
            Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
                       创建 64 位自增ID 节点 IIdentityGeneratorNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="identity">Initial Allocation identity 
                       起始分配 ID</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateLeftArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a array node ILeftArrayNode{T} 
                       创建数组节点 ILeftArrayNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node IMessageNode{T} 
                       创建消息处理节点 IMessageNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="messageType">Message data type 
                       消息数据类型</param>
            <param name="arraySize">The size of the message array being processed 
                       正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout 
                       消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a queue node IQueueNode{T} (First in, first Out) 
                       创建队列节点（先进先出） IQueueNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateSearchTreeDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
                       创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateSearchTreeSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a binary search tree collection node ISearchTreeSetNode{KT} 
                       创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateServerByteArrayMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node IMessageNode{ServerByteArrayMessage} 
                       创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="arraySize">The size of the message array being processed 
                       正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout 
                       消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateSortedDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
                       创建排序字典节点 ISortedDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateSortedListNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a sorting list node ISortedListNode{KT,VT} 
                       创建排序列表节点 ISortedListNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateSortedSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create sorted collection node ISortedSetNode{KT} 
                       创建排序集合节点 ISortedSetNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a stack node IStackNode{T} (Last in, first out) 
                       创建栈节点（后进先出） IStackNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Delete the node 
                       删除节点
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <returns>Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateServerRegistryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a server registration node IServerRegistryNode 
                       创建服务注册节点 IServerRegistryNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="loadTimeoutSeconds">Cold start session timeout seconds 
                       冷启动会话超时秒数</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateProcessGuardNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a service process daemon node IProcessGuardNode 
                       创建服务进程守护节点 IProcessGuardNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateManyHashBitMapClientFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
                       创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="size">Bitmap size (number of bits) 
                       位图大小（位数量）</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateManyHashBitMapFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
                       创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="size">Bitmap size (number of bits) 
                       位图大小（位数量）</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.RemoveNodeByKey(System.String)">
            <summary>
            Delete the node 
                       删除节点
            </summary>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <returns>Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode.CreateOnlyPersistenceNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create an archive node only IOnlyPersistenceNode{T} 
                       创建仅存档节点 IOnlyPersistenceNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="valueType">Archive data type 
                       存档数据类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeClientNode`1">
            <summary>
            Stack node interface (Last in, first out) 
                       栈节点接口（后进先出） client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeClientNode`1.Contains(`0)">
            <summary>
            Determine whether there is matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">Data to be matched 
                       待匹配数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeClientNode`1.Push(`0)">
            <summary>
            Add the data to the stack 
                       将数据添加到栈
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeClientNode`1.TryPeek">
            <summary>
            Get the next popped data in the stack (no popped data, only view) 
                       获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeClientNode`1.TryPop">
            <summary>
            Pop a piece of data from the stack 
                       从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1">
            <summary>
            Array node interface 
                       数组节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clear the data at the specified location 
                       清除指定位置数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Clear data quantity 
                       清除数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.ClearArray">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.Fill(`0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position 
                       用数据填充数组指定位置
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">The number of filled data 
                       填充数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.FillArray(`0)">
            <summary>
            Fill the entire array with data 
                       用数据填充整个数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.GetLength">
            <summary>
            Get the array length 
                       获取数组长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.GetValue(System.Int32)">
            <summary>
            Get data based on index location 
                       根据索引位置获取数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <returns>If the return exceeds the index, there will be no return value 
                       超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.GetValueSet(System.Int32,`0)">
            <summary>
            Set the data according to the index position and return the data before the setting 
                       根据索引位置设置数据并返回设置之前的数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <param name="value">data</param>
            <returns>Set the previous data. If it exceeds the index and returns, there will be no return value 
                       设置之前的数据，超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Search for the number of matching data 
                       查找匹配数据数量</param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.IndexOfArray(`0)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">The last matching position (the starting position) 
                       最后一个匹配位置（起始位置）</param>
            <param name="count">Search for the number of matching data 
                       查找匹配数据数量</param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.LastIndexOfArray(`0)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the array data at the specified position 
                       反转指定位置数组数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Reverse the amount of data 
                       反转数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.ReverseArray">
            <summary>
            Reverse the entire array data 
                       反转整个数组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.SetValue(System.Int32,`0)">
            <summary>
            Set the data according to the index position 
                       根据索引位置设置数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sort the array data at the specified position 
                       排序指定位置数组数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">The quantity of data to be sorted 
                       排序数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeLocalClientNode`1.SortArray">
            <summary>
            Array sorting 
                       数组排序
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode">
            <summary>
            Bitmap node interface 
                       位图节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.ClearBit(System.UInt32)">
            <summary>
            Clear bit status 
                       清除位状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.ClearMap">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.GetBit(System.UInt32)">
            <summary>
            Read bit status 
                       读取位状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>A non-0 indicates that the binary bit is in the set state. If the index exceeds, there will be no return value 
                       非 0 表示二进制位为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.GetBitClearBit(System.UInt32)">
            <summary>
            Clear the bit state and return to the state before setting 
                       清除位状态并返回设置之前的状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Clear the state before the operation. A non-0 state indicates that the binary bit was in the set state before. If the index exceeds, there will be no return value 
                       清除操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.GetBitInvertBit(System.UInt32)">
            <summary>
            Reverse the bit state and return the state before the operation 
                       位状态取反并返回操作之前的状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Take the state before the reverse operation. If it is not 0, it indicates that the binary bit is in the set state before. If the index exceeds, there will be no return value 
                       取反操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.GetBitSetBit(System.UInt32)">
            <summary>
            Set the bit state and return the state before setting 
                       设置位状态并返回设置之前的状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>The state before setting: A non-0 indicates that the binary bit was in the set state before, and there is no return value if the index exceeds 
                       设置之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.GetCapacity">
            <summary>
            Get the number of bitmap binary bits 
                       获取位图二进制位数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.InvertBit(System.UInt32)">
            <summary>
            Reverse the bit state 
                       位状态取反
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeLocalClientNode.SetBit(System.UInt32)">
            <summary>
            Set bit status 
                       设置位状态
            </summary>
            <param name="index">Bit index position 
                       位索引位置</param>
            <returns>Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeLocalClientNode">
            <summary>
            64-bit auto-increment identity node interface 
                       64 位自增ID 节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeLocalClientNode.Next">
            <summary>
            Get the next increment identity 
                       获取下一个自增ID
            </summary>
            <returns>The next increment identity returns a negative number on failure 
                       下一个自增ID，失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeLocalClientNode.NextFragment(System.Int32)">
            <summary>
            Gets the auto-increment identity segment 
                       获取自增 ID 分段
            </summary>
            <param name="count">Get the quantity of data 
                       获取数据数量</param>
            <returns>Auto-increment identity segment 
                       自增 ID 分段</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1">
            <summary>
            Array node interface 
                       数组节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.Clear(System.Int32,System.Int32)">
            <summary>
            Clear the data at the specified location 
                       清除指定位置数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Clear data quantity 
                       清除数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.ClearLength">
            <summary>
            Clear all the data and set the valid length of the data to 0 
                       清除所有数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.Fill(`0,System.Int32,System.Int32)">
            <summary>
            Fill the array with data to specify the position 
                       用数据填充数组指定位置
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">The number of filled data 
                       填充数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.FillArray(`0)">
            <summary>
            Fill the entire array with data 
                       用数据填充整个数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.GetCapacity">
            <summary>
            Get the size of the array container 
                       获取数组容器大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.GetFreeCount">
            <summary>
            Get the number of containers free 
                       获取容器空闲数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.GetLength">
            <summary>
            Get the valid length of the array 
                       获取数组有效长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.GetTryPopValue">
            <summary>
            Remove the last data and return it 
                       移除最后一个数据并返回该数据
            </summary>
            <returns>No data will be returned if there is no removable data 
                       没有可移除数据则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.GetValue(System.Int32)">
            <summary>
            Get data based on index location 
                       根据索引位置获取数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <returns>If the return exceeds the index, there will be no return value 
                       超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.GetValueRemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified index position and return the removed data 
                       移除指定索引位置数据并返回被移除的数据
            </summary>
            <param name="index">Data location 
                       数据位置</param>
            <returns>No data will be returned if the index range is exceeded 
                       超出索引范围则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.GetValueRemoveToEnd(System.Int32)">
            <summary>
            Remove the data at the specified index position, move the last data to the specified position, and return the removed data 
                       移除指定索引位置数据，将最后一个数据移动到该指定位置，并返回被移除的数据
            </summary>
            <param name="index"></param>
            <returns>No data will be returned if the index range is exceeded 
                       超出索引范围则无数据返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.GetValueSet(System.Int32,`0)">
            <summary>
            Set the data according to the index position and return the data before the setting 
                       根据索引位置设置数据并返回设置之前的数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <param name="value">data</param>
            <returns>Set the previous data. If it exceeds the index and returns, there will be no return value 
                       设置之前的数据，超出索引返回则无返回值</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Search for the number of matching data 
                       查找匹配数据数量</param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.IndexOfArray(`0)">
            <summary>
            Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.Insert(System.Int32,`0)">
            <summary>
            Insert data 
                       插入数据
            </summary>
            <param name="index">Insert position 
                       插入位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <param name="startIndex">The last matching position (the starting position) 
                       最后一个匹配位置（起始位置）</param>
            <param name="count">Search for the number of matching data 
                       查找匹配数据数量</param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.LastIndexOfArray(`0)">
            <summary>
            Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value"></param>
            <returns>Failure returns a negative number 
                       失败返回负数</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.Remove(`0)">
            <summary>
            Remove the first matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       移除第一个匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">data</param>
            <returns>Returning false indicates that there is no data match 
                       返回 false 表示不存在数据匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.RemoveAt(System.Int32)">
            <summary>
            Remove the data at the specified index position 
                       移除指定索引位置数据
            </summary>
            <param name="index">Data location 
                       数据位置</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.RemoveToEnd(System.Int32)">
            <summary>
            Remove the data at the specified index position and move the last data to that specified position 
                       移除指定索引位置数据并将最后一个数据移动到该指定位置
            </summary>
            <param name="index"></param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the array data at the specified position 
                       反转指定位置数组数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">Reverse the amount of data 
                       反转数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.ReverseArray">
            <summary>
            Reverse the entire array data 
                       反转整个数组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.SetEmpty">
            <summary>
            Empty and release the array 
                       置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.SetValue(System.Int32,`0)">
            <summary>
            Set the data according to the index position 
                       根据索引位置设置数据
            </summary>
            <param name="index">Index position 
                       索引位置</param>
            <param name="value">data</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sort the array data at the specified position 
                       排序指定位置数组数据
            </summary>
            <param name="startIndex">Starting position 
                       起始位置</param>
            <param name="count">The quantity of data to be sorted 
                       排序数据数量</param>
            <returns>Return false if it exceeds the index range 
                       超出索引范围则返回 false</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.SortArray">
            <summary>
            Array sorting 
                       数组排序
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.TryAdd(`0)">
            <summary>
            Add data when there is a free place 
                       当有空闲位置时添加数据
            </summary>
            <param name="value"></param>
            <returns>Returning false indicates that the array is full and the addition failed 
                       返回 false 表示数组已满，添加失败</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeLocalClientNode`1.TryPop">
            <summary>
            Try to remove the last data 
                       尝试移除最后一个数据
            </summary>
            <returns>Is there any removable data 
                       是否存在可移除数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeLocalClientNode">
            <summary>
            Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
                       多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器） local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeLocalClientNode.GetBit(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{System.Int32}})">
            <summary>
            Get the operation of setting a new bit 
                       获取设置新位操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeLocalClientNode.GetData">
            <summary>
            Get the current bitmap data 
                       获取当前位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeLocalClientNode.SetBit(System.Int32)">
            <summary>
            Set bit 
                       设置位
            </summary>
            <param name="bit">The set binary bit 
                       设置的二进制位</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeLocalClientNode.GetSize">
            <summary>
            Get the bitmap size (number of bits) 
                       获取位图大小（位数量）
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeLocalClientNode">
            <summary>
            Multi-hash bitmap filter node interface (similar to Bloom Filter) 
                       多哈希位图过滤节点接口（类似布隆过滤器） local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeLocalClientNode.GetSize">
            <summary>
            Get the bitmap size (number of bits) 
                       获取位图大小（位数量）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeLocalClientNode.SetBits(System.Int32,System.UInt32[])">
            <summary>
            Set bit 
                       设置位
            </summary>
            <param name="size">Bitmap size (number of bits) 
                       位图大小（位数量）</param>
            <param name="bits">Binary bit set 
                       位置集合</param>
            <returns>Returning false indicates that the bitmap size does not match 
                       返回 false 表示位图大小不匹配</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeLocalClientNode.CheckBits(System.Int32,System.UInt32[])">
            <summary>
            Binary bit set matching 
                       位置集合匹配
            </summary>
            <param name="size">Bitmap size (number of bits) 
                       位图大小（位数量）</param>
            <param name="bits">Binary bit set 
                       位置集合</param>
            <returns>Returning Null indicates that the bitmap does not match 
                       返回 Null 表示位图不匹配</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeLocalClientNode`1">
            <summary>
            Archive-only data node interface (It is used for the rapid archiving of large amounts of concurrent data without modifying memory data or defining snapshot operations) 
                       仅存档数据节点接口（用于大量并发数据快速存档，不修改内存数据，也不定义快照操作） local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeLocalClientNode`1.Save(`0)">
            <summary>
            Data archiving 
                       数据存档
            </summary>
            <param name="value">Data to be archive 
                       待存档数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeLocalClientNode`1.SaveSendOnly(`0)">
            <summary>
            Data archiving (The server does not respond) 
                       数据存档（服务端不响应）
            </summary>
            <param name="value">Data to be archive 
                       待存档数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeLocalClientNode`1">
            <summary>
            Queue node interface (First In, First Out) 
                       队列节点接口（先进先出） local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeLocalClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeLocalClientNode`1.Contains(`0)">
            <summary>
            Determine whether there is matching data in the queue (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断队列中是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">Data to be matched 
                       待匹配数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeLocalClientNode`1.Count">
            <summary>
            Get the number of queue data 
                       获取队列数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeLocalClientNode`1.Enqueue(`0)">
            <summary>
            Add the data to the queue 
                       将数据添加到队列
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeLocalClientNode`1.TryDequeue">
            <summary>
            Pop a piece of data from the queue 
                       从队列中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeLocalClientNode`1.TryPeek">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view) 
                       获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode">
            <summary>
            Service basic operation interface 
                       服务基础操作接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a array node IArrayNode{T} 
                       创建数组节点 IArrayNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="length">Array length</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateBitmapNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.UInt32)">
            <summary>
            Create a bitmap node IBitmapNode 
                       创建位图节点 IBitmapNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="capacity">The number of binary bits 
                       二进制位数量</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateByteArrayDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IByteArrayDictionaryNode{KT} 
                       创建字典节点 IByteArrayDictionaryNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type 
                       可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateByteArrayFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
                       创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateByteArrayQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a queue node IByteArrayQueueNode (First in, first Out) 
                       创建队列节点（先进先出） IByteArrayQueueNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateByteArrayStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a stack node IByteArrayStackNode (Last in, first out) 
                       创建栈节点（后进先出） IByteArrayStackNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IDictionaryNode{KT,VT} 
                       创建字典节点 IDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type 
                       可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateDistributedLockNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create distributed lock nodes IDistributedLockNode{KT} 
                       创建分布式锁节点 IDistributedLockNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a dictionary node IFragmentDictionaryNode{KT,VT} 
                       创建字典节点 IFragmentDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateFragmentHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
                       创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateHashBytesDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a dictionary node IHashBytesDictionaryNode 
                       创建字典节点 IHashBytesDictionaryNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type 
                       可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateHashBytesFragmentDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a dictionary node IHashBytesFragmentDictionaryNode 
                       创建字典节点 IHashBytesFragmentDictionaryNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateHashSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum)">
            <summary>
            Create a hash table node IHashSetNode{KT} 
                       创建哈希表节点 IHashSetNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type 
                       可重用字典重组操作类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateIdentityGeneratorNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int64)">
            <summary>
            Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
                       创建 64 位自增ID 节点 IIdentityGeneratorNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="identity">Initial Allocation identity 
                       起始分配 ID</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateLeftArrayNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a array node ILeftArrayNode{T} 
                       创建数组节点 ILeftArrayNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node IMessageNode{T} 
                       创建消息处理节点 IMessageNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="messageType">Message data type 
                       消息数据类型</param>
            <param name="arraySize">The size of the message array being processed 
                       正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout 
                       消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateQueueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a queue node IQueueNode{T} (First in, first Out) 
                       创建队列节点（先进先出） IQueueNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateSearchTreeDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
                       创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateSearchTreeSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a binary search tree collection node ISearchTreeSetNode{KT} 
                       创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateServerByteArrayMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a message processing node IMessageNode{ServerByteArrayMessage} 
                       创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="arraySize">The size of the message array being processed 
                       正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout 
                       消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateSortedDictionaryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
                       创建排序字典节点 ISortedDictionaryNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateSortedListNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a sorting list node ISortedListNode{KT,VT} 
                       创建排序列表节点 ISortedListNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="valueType">Data type</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateSortedSetNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create sorted collection node ISortedSetNode{KT} 
                       创建排序集合节点 ISortedSetNode{KT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateStackNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,System.Int32)">
            <summary>
            Create a stack node IStackNode{T} (Last in, first out) 
                       创建栈节点（后进先出） IStackNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">Keyword type 
                       关键字类型</param>
            <param name="capacity">Container initialization size 
                       容器初始化大小</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Delete the node 
                       删除节点
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <returns>Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateServerRegistryNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Create a server registration node IServerRegistryNode 
                       创建服务注册节点 IServerRegistryNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="loadTimeoutSeconds">Cold start session timeout seconds 
                       冷启动会话超时秒数</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateProcessGuardNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Create a service process daemon node IProcessGuardNode 
                       创建服务进程守护节点 IProcessGuardNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateManyHashBitMapClientFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
                       创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="size">Bitmap size (number of bits) 
                       位图大小（位数量）</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateManyHashBitMapFilterNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
                       创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="size">Bitmap size (number of bits) 
                       位图大小（位数量）</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.RemoveNodeByKey(System.String)">
            <summary>
            Delete the node 
                       删除节点
            </summary>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <returns>Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeLocalClientNode.CreateOnlyPersistenceNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            Create an archive node only IOnlyPersistenceNode{T} 
                       创建仅存档节点 IOnlyPersistenceNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="valueType">Archive data type 
                       存档数据类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeLocalClientNode`1">
            <summary>
            Stack node interface (Last in, first out) 
                       栈节点接口（后进先出） local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeLocalClientNode`1.Clear">
            <summary>
            Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeLocalClientNode`1.Contains(`0)">
            <summary>
            Determine whether there is matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            </summary>
            <param name="value">Data to be matched 
                       待匹配数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeLocalClientNode`1.Count">
            <summary>
            Get the quantity of data 
                       获取数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeLocalClientNode`1.Push(`0)">
            <summary>
            Add the data to the stack 
                       将数据添加到栈
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeLocalClientNode`1.TryPeek">
            <summary>
            Get the next popped data in the stack (no popped data, only view) 
                       获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeLocalClientNode`1.TryPop">
            <summary>
            Pop a piece of data from the stack 
                       从栈中弹出一个数据
            </summary>
            <returns>If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum">
            <summary>
            Array node interface 
                       数组节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.Clear">
            <summary>
            [0] Clear the data at the specified location 
                       清除指定位置数据
            int startIndex Starting position 
                       起始位置
            int count Clear data quantity 
                       清除数据数量
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.ClearArray">
            <summary>
            [1] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.Fill">
            <summary>
            [2] Fill the array with data to specify the position 
                       用数据填充数组指定位置
            T value 
            int startIndex Starting position 
                       起始位置
            int count The number of filled data 
                       填充数据数量
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.FillArray">
            <summary>
            [3] Fill the entire array with data 
                       用数据填充整个数组
            T value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.GetLength">
            <summary>
            [4] Get the array length 
                       获取数组长度
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.GetValue">
            <summary>
            [5] Get data based on index location 
                       根据索引位置获取数据
            int index Index position 
                       索引位置
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} If the return exceeds the index, there will be no return value 
                       超出索引返回则无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.GetValueSet">
            <summary>
            [6] Set the data according to the index position and return the data before the setting 
                       根据索引位置设置数据并返回设置之前的数据
            int index Index position 
                       索引位置
            T value data
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} Set the previous data. If it exceeds the index and returns, there will be no return value 
                       设置之前的数据，超出索引返回则无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.IndexOf">
            <summary>
            [7] Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value 
            int startIndex Starting position 
                       起始位置
            int count Search for the number of matching data 
                       查找匹配数据数量
            返回值 int Failure returns a negative number 
                       失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.IndexOfArray">
            <summary>
            [8] Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value 
            返回值 int Failure returns a negative number 
                       失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.LastIndexOf">
            <summary>
            [9] Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value 
            int startIndex The last matching position (the starting position) 
                       最后一个匹配位置（起始位置）
            int count Search for the number of matching data 
                       查找匹配数据数量
            返回值 int Failure returns a negative number 
                       失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.LastIndexOfArray">
            <summary>
            [10] Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value 
            返回值 int Failure returns a negative number 
                       失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.Reverse">
            <summary>
            [11] Reverse the array data at the specified position 
                       反转指定位置数组数据
            int startIndex Starting position 
                       起始位置
            int count Reverse the amount of data 
                       反转数据数量
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.ReverseArray">
            <summary>
            [12] Reverse the entire array data 
                       反转整个数组数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.SetValue">
            <summary>
            [13] Set the data according to the index position 
                       根据索引位置设置数据
            int index Index position 
                       索引位置
            T value data
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.SnapshotSet">
            <summary>
            [14] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.KeyValue{int,T} value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.Sort">
            <summary>
            [15] Sort the array data at the specified position 
                       排序指定位置数组数据
            int startIndex Starting position 
                       起始位置
            int count The quantity of data to be sorted 
                       排序数据数量
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IArrayNodeMethodEnum.SortArray">
            <summary>
            [16] Array sorting 
                       数组排序
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum">
            <summary>
            Bitmap node interface 
                       位图节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.ClearBit">
            <summary>
            [0] Clear bit status 
                       清除位状态
            uint index Bit index position 
                       位索引位置
            返回值 bool Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.ClearMap">
            <summary>
            [1] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.GetBit">
            <summary>
            [2] Read bit status 
                       读取位状态
            uint index Bit index position 
                       位索引位置
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int} A non-0 indicates that the binary bit is in the set state. If the index exceeds, there will be no return value 
                       非 0 表示二进制位为已设置状态，索引超出则无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.GetBitClearBit">
            <summary>
            [3] Clear the bit state and return to the state before setting 
                       清除位状态并返回设置之前的状态
            uint index Bit index position 
                       位索引位置
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int} Clear the state before the operation. A non-0 state indicates that the binary bit was in the set state before. If the index exceeds, there will be no return value 
                       清除操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.GetBitInvertBit">
            <summary>
            [4] Reverse the bit state and return the state before the operation 
                       位状态取反并返回操作之前的状态
            uint index Bit index position 
                       位索引位置
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int} Take the state before the reverse operation. If it is not 0, it indicates that the binary bit is in the set state before. If the index exceeds, there will be no return value 
                       取反操作之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.GetBitSetBit">
            <summary>
            [5] Set the bit state and return the state before setting 
                       设置位状态并返回设置之前的状态
            uint index Bit index position 
                       位索引位置
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int} The state before setting: A non-0 indicates that the binary bit was in the set state before, and there is no return value if the index exceeds 
                       设置之前的状态，非 0 表示二进制位之前为已设置状态，索引超出则无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.GetCapacity">
            <summary>
            [6] Get the number of bitmap binary bits 
                       获取位图二进制位数量
            返回值 uint 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.InvertBit">
            <summary>
            [7] Reverse the bit state 
                       位状态取反
            uint index Bit index position 
                       位索引位置
            返回值 bool Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.SetBit">
            <summary>
            [8] Set bit status 
                       设置位状态
            uint index Bit index position 
                       位索引位置
            返回值 bool Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeMethodEnum.SnapshotSet">
            <summary>
            [9] Add snapshot data 
                       添加快照数据
            byte[] map 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum">
            <summary>
            Dictionary node interface 
                       字典节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.Clear">
            <summary>
            [0] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.ContainsKey">
            <summary>
            [1] Determine whether the keyword exists 
                       判断关键字是否存在
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.Count">
            <summary>
            [2] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.GetRemove">
            <summary>
            [3] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.GetRemoveResponseParameter">
            <summary>
            [4] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.Remove">
            <summary>
            [5] Remove keyword 
                       删除关键字
            KT key 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.Renew">
            <summary>
            [6] Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large) 
                       清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            int capacity Initialize the size of the new container 
                       新容器初始化大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.Set">
            <summary>
            [7] Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            KT key 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            返回值 bool Return false on failure
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.SnapshotAdd">
            <summary>
            [8] Add snapshot data 
                       添加快照数据
            AutoCSer.BinarySerializeKeyValue{KT,byte[]} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.TryAdd">
            <summary>
            [9] Try to add data 
                       尝试添加数据
            KT key 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.TryGetResponseParameter">
            <summary>
            [10] Get data based on keywords 
                       根据关键字获取数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.TryGetValue">
            <summary>
            [11] Get data based on keywords 
                       根据关键字获取数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.GetValueArray">
            <summary>
            [12] Get data based on keywords 
                       根据关键字获取数据
            KT[] keys 
            返回值 byte[][] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeMethodEnum.RemoveKeys">
            <summary>
            [13] Remove keyword 
                       删除关键字
            KT[] keys 
            返回值 int The number of deleted keywords 
                       删除关键字数量
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum">
            <summary>
            256 base fragment dictionary node interface 
                       256 基分片字典 节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.Clear">
            <summary>
            [0] Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.ClearArray">
            <summary>
            [1] Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.ContainsKey">
            <summary>
            [2] Determine whether the keyword exists 
                       判断关键字是否存在
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.Count">
            <summary>
            [3] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.GetRemove">
            <summary>
            [4] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.GetRemoveResponseParameter">
            <summary>
            [5] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.Remove">
            <summary>
            [6] Remove keyword 
                       删除关键字
            KT key 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.Set">
            <summary>
            [7] Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            KT key 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            返回值 bool Return false on failure
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.SnapshotAdd">
            <summary>
            [8] Add snapshot data 
                       添加快照数据
            AutoCSer.BinarySerializeKeyValue{KT,byte[]} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.TryAdd">
            <summary>
            [9] If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            KT key 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.TryGetResponseParameter">
            <summary>
            [10] Get data based on keywords 
                       根据关键字获取数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.TryGetValue">
            <summary>
            [11] Get data based on keywords 
                       根据关键字获取数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.GetValueArray">
            <summary>
            [12] Get data based on keywords 
                       根据关键字获取数据
            KT[] keys 
            返回值 byte[][] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeMethodEnum.RemoveKeys">
            <summary>
            [13] Remove keyword 
                       删除关键字
            KT[] keys 
            返回值 int The number of deleted keywords 
                       删除关键字数量
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum">
            <summary>
            Queue node Interface (First In, First Out) 
                       队列节点接口（先进先出） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum.Clear">
            <summary>
            [0] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum.Count">
            <summary>
            [1] Get the number of queue data 
                       获取队列数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum.Enqueue">
            <summary>
            [2] Add the data to the queue 
                       将数据添加到队列
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum.SnapshotAdd">
            <summary>
            [3] Add snapshot data 
                       添加快照数据
            byte[] value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum.TryDequeue">
            <summary>
            [4] Pop a piece of data from the queue 
                       从队列中弹出一个数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum.TryDequeueResponseParameter">
            <summary>
            [5] Pop a piece of data from the queue 
                       从队列中弹出一个数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum.TryPeek">
            <summary>
            [6] Get the next pop-up data in the queue (no pop-up data, only view) 
                       获取队列中下一个弹出数据（不弹出数据仅查看）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeMethodEnum.TryPeekResponseParameter">
            <summary>
            [7] Get the next pop-up data in the queue (no pop-up data, only view) 
                       获取队列中下一个弹出数据（不弹出数据仅查看）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum">
            <summary>
            Stack node interface (Last in, first out) 
                       栈节点接口（后进先出） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum.Clear">
            <summary>
            [0] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum.Count">
            <summary>
            [1] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum.Push">
            <summary>
            [2] Add the data to the stack 
                       将数据添加到栈
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum.SnapshotAdd">
            <summary>
            [3] Add snapshot data 
                       添加快照数据
            byte[] value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum.TryPeek">
            <summary>
            [4] Get the next popped data in the stack (no popped data, only view) 
                       获取栈中下一个弹出数据（不弹出数据仅查看）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum.TryPeekResponseParameter">
            <summary>
            [5] Get the next popped data in the stack (no popped data, only view) 
                       获取栈中下一个弹出数据（不弹出数据仅查看）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum.TryPop">
            <summary>
            [6] Pop a piece of data from the stack 
                       从栈中弹出一个数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeMethodEnum.TryPopResponseParameter">
            <summary>
            [7] Pop a piece of data from the stack 
                       从栈中弹出一个数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum">
            <summary>
            Dictionary node interface 
                       字典节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.Clear">
            <summary>
            [0] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.ContainsKey">
            <summary>
            [1] 
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.ReusableClear">
            <summary>
            [2] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.Count">
            <summary>
            [3] 
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.GetRemove">
            <summary>
            [4] 
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.Remove">
            <summary>
            [5] 
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.Renew">
            <summary>
            [6] 
            int capacity 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.Set">
            <summary>
            [7] 
            KT key 
            VT value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.SnapshotAdd">
            <summary>
            [8] 
            AutoCSer.KeyValue{KT,VT} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.TryAdd">
            <summary>
            [9] 
            KT key 
            VT value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.TryGetValue">
            <summary>
            [10] 
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.GetValueArray">
            <summary>
            [11] 
            KT[] keys 
            返回值 VT[] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDictionaryNodeMethodEnum.RemoveKeys">
            <summary>
            [12] 
            KT[] keys 
            返回值 int 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeMethodEnum">
            <summary>
            Distributed lock node interface 
                       分布式锁节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeMethodEnum.Enter">
            <summary>
            [0] Apply for a lock 
                       申请锁
            T key Keyword of lock 
                       锁关键字
            ushort timeoutSeconds Timeout seconds 
                       超时秒数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeMethodEnum.Release">
            <summary>
            [1] Release the lock 
                       释放锁
            T key Keyword of lock 
                       锁关键字
            long identity Lock request identity 
                       锁请求标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeMethodEnum.SnapshotSet">
            <summary>
            [2] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.DistributedLockIdentity{T} value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeMethodEnum.TryEnter">
            <summary>
            [3] Try to apply for a lock 
                       尝试申请锁
            T key Keyword of lock 
                       锁关键字
            ushort timeoutSeconds Timeout seconds 
                       超时秒数
            返回值 long Lock request identity. Return 0 if failed 
                       锁请求标识，失败返回 0
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IDistributedLockNodeMethodEnum.SnapshotSetIdentity">
            <summary>
            [4] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            long value data
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum">
            <summary>
            256 base fragment dictionary node interface 
                       256 基分片字典 节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.Clear">
            <summary>
            [0] Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.ClearArray">
            <summary>
            [1] Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.ContainsKey">
            <summary>
            [2] Determine whether the keyword exists 
                       判断关键字是否存在
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.Count">
            <summary>
            [3] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.GetRemove">
            <summary>
            [4] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.Remove">
            <summary>
            [5] Remove keyword 
                       删除关键字
            KT key 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.Set">
            <summary>
            [6] Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            KT key 
            VT value 
            返回值 bool Return false on failure
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.SnapshotAdd">
            <summary>
            [7] Add snapshot data 
                       添加快照数据
            AutoCSer.KeyValue{KT,VT} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.TryAdd">
            <summary>
            [8] If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            KT key 
            VT value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.TryGetValue">
            <summary>
            [9] Get data based on keywords 
                       根据关键字获取数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.GetValueArray">
            <summary>
            [10] Get data based on keywords 
                       根据关键字获取数据
            KT[] keys 
            返回值 VT[] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.RemoveKeys">
            <summary>
            [11] Remove keyword 
                       删除关键字
            KT[] keys 
            返回值 int The number of deleted keywords 
                       删除关键字数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentDictionaryNodeMethodEnum.ReusableClear">
            <summary>
            [12] Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum">
            <summary>
            256 base fragment hash table node interface 
                       256 基分片 哈希表 节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.Add">
            <summary>
            [0] If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            T value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.Clear">
            <summary>
            [1] Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.ClearArray">
            <summary>
            [2] Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.Contains">
            <summary>
            [3] Determine whether the keyword exists 
                       判断关键字是否存在
            T value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.Count">
            <summary>
            [4] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.Remove">
            <summary>
            [5] Remove keyword 
                       删除关键字
            T value 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.AddValues">
            <summary>
            [6] If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            T[] values 
            返回值 int The quantity of the added data 
                       添加数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.RemoveValues">
            <summary>
            [7] Remove keyword 
                       删除关键字
            T[] values 
            返回值 int The quantity of deleted data 
                       删除数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IFragmentHashSetNodeMethodEnum.ReusableClear">
            <summary>
            [8] Reusable hash tables reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用哈希表重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum">
            <summary>
            Dictionary node interface 
                       字典节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.Clear">
            <summary>
            [0] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.ContainsKey">
            <summary>
            [1] Determine whether the keyword exists 
                       判断关键字是否存在
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.Count">
            <summary>
            [2] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.GetRemove">
            <summary>
            [3] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.GetRemoveResponseParameter">
            <summary>
            [4] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.Remove">
            <summary>
            [5] Remove keyword 
                       删除关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.Renew">
            <summary>
            [6] Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large) 
                       清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            int capacity Initialize the size of the new container 
                       新容器初始化大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.Set">
            <summary>
            [7] Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            返回值 bool Return false on failure
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.SnapshotAdd">
            <summary>
            [8] Add snapshot data 
                       添加快照数据
            AutoCSer.BinarySerializeKeyValue{byte[],byte[]} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.TryAdd">
            <summary>
            [9] Try to add data 
                       尝试添加数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.TryGetResponseParameter">
            <summary>
            [10] Get data based on keywords 
                       根据关键字获取数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeMethodEnum.TryGetValue">
            <summary>
            [11] Get data based on keywords 
                       根据关键字获取数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum">
            <summary>
            256 base fragment hash byte array dictionary node interface 
                       256 基分片哈希字节数组字典 节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.Clear">
            <summary>
            [0] Clear the data (retain the fragmented array) 
                       清除数据（保留分片数组）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.ClearArray">
            <summary>
            [1] Clear fragmented array (used to solve the problem of low performance of clear call when the amount of data is large) 
                       清除分片数组（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.ContainsKey">
            <summary>
            [2] Determine whether the keyword exists 
                       判断关键字是否存在
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.Count">
            <summary>
            [3] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.GetRemove">
            <summary>
            [4] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.GetRemoveResponseParameter">
            <summary>
            [5] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter Deleted data and no returned data indicate that the keyword does not exist 
                       被删除数据，无返回数据表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.Remove">
            <summary>
            [6] Remove keyword 
                       删除关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.Set">
            <summary>
            [7] Force the data to be set and overwrite if the keyword already exists 
                       强制设置数据，如果关键字已存在则覆盖
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            返回值 bool Return false on failure
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.SnapshotAdd">
            <summary>
            [8] Add snapshot data 
                       添加快照数据
            AutoCSer.BinarySerializeKeyValue{byte[],byte[]} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.TryAdd">
            <summary>
            [9] If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.TryGetResponseParameter">
            <summary>
            [10] Get data based on keywords 
                       根据关键字获取数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeMethodEnum.TryGetValue">
            <summary>
            [11] Get data based on keywords 
                       根据关键字获取数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{byte[]} 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum">
            <summary>
            Hash table node interface 
                       哈希表节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.Add">
            <summary>
            [0] Add data
            T value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.Clear">
            <summary>
            [1] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.Contains">
            <summary>
            [2] Determine whether the keyword exists 
                       判断关键字是否存在
            T value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.Count">
            <summary>
            [3] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.Remove">
            <summary>
            [4] Remove keyword 
                       删除关键字
            T value 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.Renew">
            <summary>
            [5] Clear all data and rebuild the container (to solve the problem of low performance of the clear call when the data volume is large) 
                       清除所有数据并重建容器（用于解决数据量较大的情况下 Clear 调用性能低下的问题）
            int capacity Container initialization size 
                       容器初始化大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.ReusableClear">
            <summary>
            [6] Reusable dictionaries reset data locations (The presence of reference type data can cause memory leaks) 
                       可重用字典重置数据位置（存在引用类型数据会造成内存泄露）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.AddValues">
            <summary>
            [7] If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            T[] values 
            返回值 int The quantity of the added data 
                       添加数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashSetNodeMethodEnum.RemoveValues">
            <summary>
            [8] Remove keyword 
                       删除关键字
            T[] values 
            返回值 int The quantity of deleted data 
                       删除数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeMethodEnum">
            <summary>
            64-bit auto-increment identity node interface 
                       64 位自增ID 节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeMethodEnum.Next">
            <summary>
            [0] Get the next increment identity 
                       获取下一个自增ID
            返回值 long The next increment identity returns a negative number on failure 
                       下一个自增ID，失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeMethodEnum.NextFragment">
            <summary>
            [1] Gets the auto-increment identity segment 
                       获取自增 ID 分段
            int count Get the quantity of data 
                       获取数据数量
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IdentityFragment Auto-increment identity segment 
                       自增 ID 分段
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IIdentityGeneratorNodeMethodEnum.SnapshotSet">
            <summary>
            [2] Add snapshot data 
                       添加快照数据
            long identity 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum">
            <summary>
            Array node interface 
                       数组节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.Add">
            <summary>
            [0] Add data
            T value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.Clear">
            <summary>
            [1] Clear the data at the specified location 
                       清除指定位置数据
            int startIndex Starting position 
                       起始位置
            int count Clear data quantity 
                       清除数据数量
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.ClearLength">
            <summary>
            [2] Clear all the data and set the valid length of the data to 0 
                       清除所有数据并将数据有效长度设置为 0
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.Fill">
            <summary>
            [3] Fill the array with data to specify the position 
                       用数据填充数组指定位置
            T value 
            int startIndex Starting position 
                       起始位置
            int count The number of filled data 
                       填充数据数量
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.FillArray">
            <summary>
            [4] Fill the entire array with data 
                       用数据填充整个数组
            T value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.GetCapacity">
            <summary>
            [5] Get the size of the array container 
                       获取数组容器大小
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.GetFreeCount">
            <summary>
            [6] Get the number of containers free 
                       获取容器空闲数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.GetLength">
            <summary>
            [7] Get the valid length of the array 
                       获取数组有效长度
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.GetTryPopValue">
            <summary>
            [8] Remove the last data and return it 
                       移除最后一个数据并返回该数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} No data will be returned if there is no removable data 
                       没有可移除数据则无数据返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.GetValue">
            <summary>
            [9] Get data based on index location 
                       根据索引位置获取数据
            int index Index position 
                       索引位置
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} If the return exceeds the index, there will be no return value 
                       超出索引返回则无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.GetValueRemoveAt">
            <summary>
            [10] Remove the data at the specified index position and return the removed data 
                       移除指定索引位置数据并返回被移除的数据
            int index Data location 
                       数据位置
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} No data will be returned if the index range is exceeded 
                       超出索引范围则无数据返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.GetValueRemoveToEnd">
            <summary>
            [11] Remove the data at the specified index position, move the last data to the specified position, and return the removed data 
                       移除指定索引位置数据，将最后一个数据移动到该指定位置，并返回被移除的数据
            int index 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} No data will be returned if the index range is exceeded 
                       超出索引范围则无数据返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.GetValueSet">
            <summary>
            [12] Set the data according to the index position and return the data before the setting 
                       根据索引位置设置数据并返回设置之前的数据
            int index Index position 
                       索引位置
            T value data
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} Set the previous data. If it exceeds the index and returns, there will be no return value 
                       设置之前的数据，超出索引返回则无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.IndexOf">
            <summary>
            [13] Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value 
            int startIndex Starting position 
                       起始位置
            int count Search for the number of matching data 
                       查找匹配数据数量
            返回值 int Failure returns a negative number 
                       失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.IndexOfArray">
            <summary>
            [14] Find the position of the first matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找第一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value 
            返回值 int Failure returns a negative number 
                       失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.Insert">
            <summary>
            [15] Insert data 
                       插入数据
            int index Insert position 
                       插入位置
            T value data
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.LastIndexOf">
            <summary>
            [16] Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value 
            int startIndex The last matching position (the starting position) 
                       最后一个匹配位置（起始位置）
            int count Search for the number of matching data 
                       查找匹配数据数量
            返回值 int Failure returns a negative number 
                       失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.LastIndexOfArray">
            <summary>
            [17] Find the position of the last matching data from the array. (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       从数组中查找最后一个匹配数据的位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value 
            返回值 int Failure returns a negative number 
                       失败返回负数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.Remove">
            <summary>
            [18] Remove the first matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       移除第一个匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value data
            返回值 bool Returning false indicates that there is no data match 
                       返回 false 表示不存在数据匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.RemoveAt">
            <summary>
            [19] Remove the data at the specified index position 
                       移除指定索引位置数据
            int index Data location 
                       数据位置
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.RemoveToEnd">
            <summary>
            [20] Remove the data at the specified index position and move the last data to that specified position 
                       移除指定索引位置数据并将最后一个数据移动到该指定位置
            int index 
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.Reverse">
            <summary>
            [21] Reverse the array data at the specified position 
                       反转指定位置数组数据
            int startIndex Starting position 
                       起始位置
            int count Reverse the amount of data 
                       反转数据数量
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.ReverseArray">
            <summary>
            [22] Reverse the entire array data 
                       反转整个数组数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.SetEmpty">
            <summary>
            [23] Empty and release the array 
                       置空并释放数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.SetValue">
            <summary>
            [24] Set the data according to the index position 
                       根据索引位置设置数据
            int index Index position 
                       索引位置
            T value data
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.Sort">
            <summary>
            [25] Sort the array data at the specified position 
                       排序指定位置数组数据
            int startIndex Starting position 
                       起始位置
            int count The quantity of data to be sorted 
                       排序数据数量
            返回值 bool Return false if it exceeds the index range 
                       超出索引范围则返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.SortArray">
            <summary>
            [26] Array sorting 
                       数组排序
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.TryAdd">
            <summary>
            [27] Add data when there is a free place 
                       当有空闲位置时添加数据
            T value 
            返回值 bool Returning false indicates that the array is full and the addition failed 
                       返回 false 表示数组已满，添加失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ILeftArrayNodeMethodEnum.TryPop">
            <summary>
            [28] Try to remove the last data 
                       尝试移除最后一个数据
            返回值 bool Is there any removable data 
                       是否存在可移除数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeMethodEnum">
            <summary>
            Multi-hash bitmap client synchronization filter node Interface (similar to Bloom filter, suitable for small containers) 
                       多哈希位图客户端同步过滤节点接口（类似布隆过滤器，适合小容器） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeMethodEnum.GetBit">
            <summary>
            [0] Get the operation of setting a new bit 
                       获取设置新位操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeMethodEnum.GetData">
            <summary>
            [1] Get the current bitmap data 
                       获取当前位图数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeMethodEnum.SetBit">
            <summary>
            [2] Set bit 
                       设置位
            int bit The set binary bit 
                       设置的二进制位
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeMethodEnum.SetBitBeforePersistence">
            <summary>
            [3] Set bit (Check the input parameters before the persistence operation) 
                       设置位（持久化操作之前检查输入参数）
            int bit The set binary bit 
                       设置的二进制位
            返回值 bool Returning true indicates that a persistence operation is required 
                       返回 true 表示需要持久化操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeMethodEnum.SnapshotSet">
            <summary>
            [4] Add snapshot data 
                       添加快照数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap map Multi-hash bitmap data 
                       多哈希位图数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapClientFilterNodeMethodEnum.GetSize">
            <summary>
            [5] Get the bitmap size (number of bits) 
                       获取位图大小（位数量）
            返回值 int 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeMethodEnum">
            <summary>
            Multi-hash bitmap filter node interface (similar to Bloom Filter) 
                       多哈希位图过滤节点接口（类似布隆过滤器） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeMethodEnum.GetSize">
            <summary>
            [0] Get the bitmap size (number of bits) 
                       获取位图大小（位数量）
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeMethodEnum.SetBits">
            <summary>
            [1] Set bit 
                       设置位
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            uint[] bits Binary bit set 
                       位置集合
            返回值 bool Returning false indicates that the bitmap size does not match 
                       返回 false 表示位图大小不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeMethodEnum.SetBitsBeforePersistence">
            <summary>
            [2] Set bit (Check the input parameters before the persistence operation) 
                       设置位（持久化操作之前检查输入参数）
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            uint[] bits Binary bit set 
                       位置集合
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} Returning false indicates that the bitmap size does not match 
                       返回 false 表示位图大小不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeMethodEnum.SnapshotSet">
            <summary>
            [3] Add snapshot data 
                       添加快照数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ManyHashBitMap map Multi-hash bitmap data 
                       多哈希位图数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IManyHashBitMapFilterNodeMethodEnum.CheckBits">
            <summary>
            [4] Binary bit set matching 
                       位置集合匹配
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            uint[] bits Binary bit set 
                       位置集合
            返回值 AutoCSer.NullableBoolEnum Returning Null indicates that the bitmap does not match 
                       返回 Null 表示位图不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum">
            <summary>
            Message processing node interface 
                       消息处理节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.AppendMessage">
            <summary>
            [0] Producers add new message 
                       生产者添加新消息
            T message 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.Clear">
            <summary>
            [1] Clear all messages 
                       清除所有消息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.ClearFailed">
            <summary>
            [2] Clear all failure messages (including handling timeout messages) 
                       清除所有失败消息（包括处理超时消息）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.Completed">
            <summary>
            [3] The message has been processed 
                       消息完成处理
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity identity 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.Failed">
            <summary>
            [4] Message failed processing 
                       消息失败处理
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity identity 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.GetCallbackCount">
            <summary>
            [5] Get the number of consumer callbacks 
                       获取消费者回调数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.GetCount">
            <summary>
            [6] Get the number of uncompleted messages (excluding failed messages) 
                       获取未完成消息数量（不包括失败消息）
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.GetFailedCount">
            <summary>
            [7] Get the number of failed messages (Including handling timeout messages) 
                       获取失败消息数量（包括处理超时消息）
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.GetMessage">
            <summary>
            [8] The consumer client gets the message 
                       消费客户端获取消息
            int maxCount The current maximum number of concurrent messages on the client side 
                       当前客户端最大并发消息数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.GetTimeoutCount">
            <summary>
            [9] Get the number of unfinished timeout messages 
                       获取未完成的超时消息数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.GetTotalCount">
            <summary>
            [10] Get the number of uncompleted messages (including failed messages) 
                       获取未完成消息数量（包括失败消息）
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.SnapshotAdd">
            <summary>
            [11] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            T value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.AppendMessageLoadPersistence">
            <summary>
            [12] Producers add new message (Initialize and load the persistent data) 
                       生产者添加新消息（初始化加载持久化数据）
            T message 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.ClearFailedLoadPersistence">
            <summary>
            [13] Clear all failure messages (including handling timeout messages) (Initialize and load the persistent data) 
                       清除所有失败消息（包括处理超时消息）（初始化加载持久化数据）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.ClearLoadPersistence">
            <summary>
            [14] Clear all messages (Initialize and load the persistent data) 
                       清除所有消息（初始化加载持久化数据）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.CompletedLoadPersistence">
            <summary>
            [15] The message has been processed (Initialize and load the persistent data) 
                       消息完成处理（初始化加载持久化数据）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity identity 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IMessageNodeMethodEnum.FailedLoadPersistence">
            <summary>
            [16] Message failed processing (Initialize and load the persistent data) 
                       消息失败处理（初始化加载持久化数据）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MessageIdeneity identity 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeMethodEnum">
            <summary>
            Archive-only data node interface (It is used for the rapid archiving of large amounts of concurrent data without modifying memory data or defining snapshot operations) 
                       仅存档数据节点接口（用于大量并发数据快速存档，不修改内存数据，也不定义快照操作） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeMethodEnum.Save">
            <summary>
            [0] Data archiving 
                       数据存档
            T value Data to be archive 
                       待存档数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeMethodEnum.SaveLoadPersistence">
            <summary>
            [1] Load the archived data for scanning the archived mode (initializing the loading of persistent data) 
                       加载存档数据，用于扫描存档模式（初始化加载持久化数据）
            T value Data to be archive 
                       待存档数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeMethodEnum.SaveSendOnly">
            <summary>
            [2] Data archiving (The server does not respond) 
                       数据存档（服务端不响应）
            T value Data to be archive 
                       待存档数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IOnlyPersistenceNodeMethodEnum.SaveSendOnlyLoadPersistence">
            <summary>
            [3] Load the archived data for scanning the archived mode (initializing the loading of persistent data) 
                       加载保存数据，用于扫描存档模式（初始化加载持久化数据）
            T value Data to be archive 
                       待存档数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeMethodEnum">
            <summary>
            Process daemon node interface (The server needs to run as an administrator; otherwise, an exception may occur) 
                       进程守护节点接口（服务端需要以管理员身份运行，否则可能异常） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeMethodEnum.Guard">
            <summary>
            [0] Add the process to be daemon 
                       添加待守护进程
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo processInfo Process information 
                       进程信息
            返回值 bool Add failed and return false 
                       添加失败返回 false
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeMethodEnum.Remove">
            <summary>
            [1] Delete the daemon process 
                       删除被守护进程
            int processId Process identity 
                       进程标识
            System.DateTime startTime Process startup time 
                       进程启动时间
            string processName Process name 
                       进程名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeMethodEnum.SnapshotSet">
            <summary>
            [2] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeMethodEnum.Switch">
            <summary>
            [3] Switch processes 
                       切换进程
            string key The key words of the switched process 
                       切换进程关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeMethodEnum.GuardLoadPersistence">
            <summary>
            [4] Initialize and add the daemon process to be added (Initialize and load the persistent data) 
                       初始化添加待守护进程（初始化加载持久化数据）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ProcessGuardInfo processInfo Process information 
                       进程信息
            返回值 bool Add failed and return false 
                       添加失败返回 false
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeMethodEnum">
            <summary>
            Queue node interface (First In, First Out) 
                       队列节点接口（先进先出） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeMethodEnum.Clear">
            <summary>
            [0] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeMethodEnum.Contains">
            <summary>
            [1] Determine whether there is matching data in the queue (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断队列中是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value Data to be matched 
                       待匹配数据
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeMethodEnum.Count">
            <summary>
            [2] Get the number of queue data 
                       获取队列数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeMethodEnum.Enqueue">
            <summary>
            [3] Add the data to the queue 
                       将数据添加到队列
            T value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeMethodEnum.TryDequeue">
            <summary>
            [4] Pop a piece of data from the queue 
                       从队列中弹出一个数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IQueueNodeMethodEnum.TryPeek">
            <summary>
            [5] Get the next pop-up data in the queue (no pop-up data, only view) 
                       获取队列中下一个弹出数据（不弹出数据仅查看）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum">
            <summary>
            Binary search tree node interface 
                       二叉搜索树节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.Clear">
            <summary>
            [0] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.ContainsKey">
            <summary>
            [1] 
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.Count">
            <summary>
            [2] 
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.CountLess">
            <summary>
            [3] 
            KT key 
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.CountThan">
            <summary>
            [4] 
            KT key 
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.GetHeight">
            <summary>
            [5] 
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.GetRemove">
            <summary>
            [6] 
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.GetValues">
            <summary>
            [7] 
            int skipCount 
            byte getCount 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.IndexOf">
            <summary>
            [8] 
            KT key 
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.Remove">
            <summary>
            [9] 
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.Set">
            <summary>
            [10] 
            KT key 
            VT value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.SnapshotAdd">
            <summary>
            [11] 
            AutoCSer.KeyValue{KT,VT} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryAdd">
            <summary>
            [12] 
            KT key 
            VT value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetFirstKey">
            <summary>
            [13] 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{KT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetFirstKeyValue">
            <summary>
            [14] 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.KeyValue{KT,VT}} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetFirstValue">
            <summary>
            [15] 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetKeyValueByIndex">
            <summary>
            [16] 
            int index 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.KeyValue{KT,VT}} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetLastKey">
            <summary>
            [17] 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{KT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetLastKeyValue">
            <summary>
            [18] 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.KeyValue{KT,VT}} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetLastValue">
            <summary>
            [19] 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetValue">
            <summary>
            [20] 
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.TryGetValueByIndex">
            <summary>
            [21] 
            int index 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.GetValueArray">
            <summary>
            [22] 
            KT[] keys 
            返回值 VT[] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeMethodEnum.RemoveKeys">
            <summary>
            [23] 
            KT[] keys 
            返回值 int 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum">
            <summary>
            Binary search tree collection node interface 
                       二叉搜索树集合节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.Add">
            <summary>
            [0] Add data
            T value keyword
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.Clear">
            <summary>
            [1] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.Contains">
            <summary>
            [2] Determine whether the keyword exists 
                       判断关键字是否存在
            T value keyword
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.Count">
            <summary>
            [3] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.CountLess">
            <summary>
            [4] Get the number of nodes smaller than the specified keyword 
                       获取比指定关键字小的节点数量
            T value keyword
            返回值 int Returning -1 indicates that the data to be matched is null 
                       返回 -1 表示待匹配数据为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.CountThan">
            <summary>
            [5] Get the number of nodes larger than the specified keyword 
                       获取比指定关键字大的节点数量
            T value keyword
            返回值 int Returning -1 indicates that the data to be matched is null 
                       返回 -1 表示待匹配数据为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.GetByIndex">
            <summary>
            [6] Get data based on the node position 
                       根据节点位置获取数据
            int index Node position 
                       节点位置
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.GetFrist">
            <summary>
            [7] Get the first data 
                       获取第一个数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} No return value is returned when there is no data 
                       没有数据时返回无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.GetLast">
            <summary>
            [8] Get the last data 
                       获取最后一个数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} No return value is returned when there is no data 
                       没有数据时返回无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.IndexOf">
            <summary>
            [9] Get the matching node location based on the keyword 
                       根据关键字获取匹配节点位置
            T value keyword
            返回值 int Returning -1 indicates a failed match 
                       返回 -1 表示失败匹配
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.Remove">
            <summary>
            [10] Remove keyword 
                       删除关键字
            T value keyword
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.AddValues">
            <summary>
            [11] If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            T[] values 
            返回值 int The quantity of the added data 
                       添加数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeSetNodeMethodEnum.RemoveValues">
            <summary>
            [12] Remove keyword 
                       删除关键字
            T[] values 
            返回值 int The quantity of deleted data 
                       删除数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum">
            <summary>
            Server registration node interface 
                       服务注册节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum.Append">
            <summary>
            [0] Add the server registration log 
                       添加服务注册日志
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog log 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryStateEnum Server registration status 
                       服务注册状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum.GetSessionID">
            <summary>
            [1] Get the server session identity 
                       获取服务会话标识
            返回值 long 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum.LogCallback">
            <summary>
            [2] Gets the server registration log 
                       获取服务注册日志
            string serverName Monitor the server name. An empty string represents all servers 
                       监视服务名称，空字符串表示所有服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum.ServerCallback">
            <summary>
            [3] The server registration callback delegate is mainly used to register components to check the online state of the server 
                       服务注册回调委托，主要用于注册组件检查服务的在线状态
            long sessionID Server session identity 
                       服务会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum.SnapshotSet">
            <summary>
            [4] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum.GetLog">
            <summary>
            [5] Get the main log of the server 
                       获取服务主日志
            string serverName Server name 
                       服务名称
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerRegistryLog Returning null indicates that the server main log was not found 
                       返回 null 表示没有找到服务主日志
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum.Check">
            <summary>
            [6] Check the online status of the server 
                       检查服务在线状态
            long sessionID Server session identity 
                       服务会话标识
            string serverName Server name 
                       服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServerRegistryNodeMethodEnum.LostContact">
            <summary>
            [7] Persistent operations for server disconnection 
                       服务失联的持久化操作
            long sessionID Server session identity 
                       服务会话标识
            string serverName Server name 
                       服务名称
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum">
            <summary>
            Service basic operation interface 
                       服务基础操作接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateArrayNode">
            <summary>
            [0] Create a array node IArrayNode{T} 
                       创建数组节点 IArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int length Array length
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateBitmapNode">
            <summary>
            [1] Create a bitmap node IBitmapNode 
                       创建位图节点 IBitmapNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            uint capacity The number of binary bits 
                       二进制位数量
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateByteArrayDictionaryNode">
            <summary>
            [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
                       创建字典节点 IByteArrayDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateByteArrayFragmentDictionaryNode">
            <summary>
            [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
                       创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateByteArrayQueueNode">
            <summary>
            [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
                       创建队列节点（先进先出） IByteArrayQueueNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateByteArrayStackNode">
            <summary>
            [5] Create a stack node IByteArrayStackNode (Last in, first out) 
                       创建栈节点（后进先出） IByteArrayStackNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateDictionaryNode">
            <summary>
            [6] Create a dictionary node IDictionaryNode{KT,VT} 
                       创建字典节点 IDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateDistributedLockNode">
            <summary>
            [7] Create distributed lock nodes IDistributedLockNode{KT} 
                       创建分布式锁节点 IDistributedLockNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateFragmentDictionaryNode">
            <summary>
            [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
                       创建字典节点 IFragmentDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateFragmentHashSetNode">
            <summary>
            [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
                       创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateHashBytesDictionaryNode">
            <summary>
            [10] Create a dictionary node IHashBytesDictionaryNode 
                       创建字典节点 IHashBytesDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateHashBytesFragmentDictionaryNode">
            <summary>
            [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
                       创建字典节点 IHashBytesFragmentDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateHashSetNode">
            <summary>
            [12] Create a hash table node IHashSetNode{KT} 
                       创建哈希表节点 IHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateIdentityGeneratorNode">
            <summary>
            [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
                       创建 64 位自增ID 节点 IIdentityGeneratorNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            long identity Initial Allocation identity 
                       起始分配 ID
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateLeftArrayNode">
            <summary>
            [14] Create a array node ILeftArrayNode{T} 
                       创建数组节点 ILeftArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateMessageNode">
            <summary>
            [15] Create a message processing node IMessageNode{T} 
                       创建消息处理节点 IMessageNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType messageType Message data type 
                       消息数据类型
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateQueueNode">
            <summary>
            [16] Create a queue node IQueueNode{T} (First in, first Out) 
                       创建队列节点（先进先出） IQueueNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateSearchTreeDictionaryNode">
            <summary>
            [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
                       创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateSearchTreeSetNode">
            <summary>
            [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
                       创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateServerByteArrayMessageNode">
            <summary>
            [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
                       创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateSortedDictionaryNode">
            <summary>
            [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
                       创建排序字典节点 ISortedDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateSortedListNode">
            <summary>
            [21] Create a sorting list node ISortedListNode{KT,VT} 
                       创建排序列表节点 ISortedListNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateSortedSetNode">
            <summary>
            [22] Create sorted collection node ISortedSetNode{KT} 
                       创建排序集合节点 ISortedSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateStackNode">
            <summary>
            [23] Create a stack node IStackNode{T} (Last in, first out) 
                       创建栈节点（后进先出） IStackNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.RemoveNode">
            <summary>
            [24] Delete the node 
                       删除节点
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateServerRegistryNode">
            <summary>
            [25] Create a server registration node IServerRegistryNode 
                       创建服务注册节点 IServerRegistryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int loadTimeoutSeconds Cold start session timeout seconds 
                       冷启动会话超时秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateProcessGuardNode">
            <summary>
            [26] Create a service process daemon node IProcessGuardNode 
                       创建服务进程守护节点 IProcessGuardNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateManyHashBitMapClientFilterNode">
            <summary>
            [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
                       创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateManyHashBitMapFilterNode">
            <summary>
            [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
                       创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.RemoveNodeByKey">
            <summary>
            [29] Delete the node 
                       删除节点
            string key Node global keyword 
                       节点全局关键字
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeMethodEnum.CreateOnlyPersistenceNode">
            <summary>
            [30] Create an archive node only IOnlyPersistenceNode{T} 
                       创建仅存档节点 IOnlyPersistenceNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType valueType Archive data type 
                       存档数据类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum">
            <summary>
            Sort dictionary node interface 
                       排序字典节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.Clear">
            <summary>
            [0] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.ContainsKey">
            <summary>
            [1] Determine whether the keyword exists 
                       判断关键字是否存在
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.ContainsValue">
            <summary>
            [2] To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            VT value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.Count">
            <summary>
            [3] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.GetRemove">
            <summary>
            [4] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.Remove">
            <summary>
            [5] Remove keyword 
                       删除关键字
            KT key 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.SnapshotAdd">
            <summary>
            [6] Add snapshot data 
                       添加快照数据
            AutoCSer.KeyValue{KT,VT} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.TryAdd">
            <summary>
            [7] Add data
            KT key 
            VT value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.TryGetValue">
            <summary>
            [8] Get data based on keywords 
                       根据关键字获取数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.GetValueArray">
            <summary>
            [9] Get data based on keywords 
                       根据关键字获取数据
            KT[] keys 
            返回值 VT[] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedDictionaryNodeMethodEnum.RemoveKeys">
            <summary>
            [10] Remove keyword 
                       删除关键字
            KT[] keys 
            返回值 int The number of deleted keywords 
                       删除关键字数量
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum">
            <summary>
            Sort list node interface 
                       排序列表节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.Clear">
            <summary>
            [0] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.ContainsKey">
            <summary>
            [1] Determine whether the keyword exists 
                       判断关键字是否存在
            KT key 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.ContainsValue">
            <summary>
            [2] To determine whether the data exists, the time complexity is O(n). It is not recommended to call (since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断数据是否存在，时间复杂度 O(n) 不建议调用（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            VT value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.Count">
            <summary>
            [3] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.GetCapacity">
            <summary>
            [4] Get the container size 
                       获取容器大小
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.GetRemove">
            <summary>
            [5] Delete the keywords and return the deleted data 
                       删除关键字并返回被删除数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.IndexOfKey">
            <summary>
            [6] Get the ranking position of the key word 
                       获取关键字排序位置
            KT key 
            返回值 int A negative number indicates that the keyword was not found 
                       负数表示没有找到关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.IndexOfValue">
            <summary>
            [7] Get the first matching data sort position (since cached data is a serialized copy of the object, the equality test is done by implementing IEquatable{VT}) 
                       获取第一个匹配数据排序位置（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            VT value 
            返回值 int A negative number indicates that no matching data was found 
                       负数表示没有找到匹配数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.Remove">
            <summary>
            [8] Remove keyword 
                       删除关键字
            KT key 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.RemoveAt">
            <summary>
            [9] Delete the data at the specified sort index position 
                       删除指定排序索引位置数据
            int index 
            返回值 bool Returning false indicates that the index is out of range 
                       返回 false 表示索引超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.SnapshotAdd">
            <summary>
            [10] Add snapshot data 
                       添加快照数据
            AutoCSer.KeyValue{KT,VT} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.TryAdd">
            <summary>
            [11] Add data
            KT key 
            VT value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedListNodeMethodEnum.TryGetValue">
            <summary>
            [12] Get data based on keywords 
                       根据关键字获取数据
            KT key 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{VT} 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum">
            <summary>
            Sort collection node interface 
                       排序集合节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.Add">
            <summary>
            [0] Add data
            T value 
            返回值 bool Returning false indicates that the keyword already exists 
                       返回 false 表示关键字已经存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.Clear">
            <summary>
            [1] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.Contains">
            <summary>
            [2] Determine whether the keyword exists 
                       判断关键字是否存在
            T value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.Count">
            <summary>
            [3] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.GetMax">
            <summary>
            [4] Get the maximum value 
                       获取最大值
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} No return value is returned when there is no data 
                       没有数据时返回无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.GetMin">
            <summary>
            [5] Get the minimum value 
                       获取最小值
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} No return value is returned when there is no data 
                       没有数据时返回无返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.Remove">
            <summary>
            [6] Remove keyword 
                       删除关键字
            T value 
            返回值 bool Returning false indicates that the keyword does not exist 
                       返回 false 表示关键字不存在
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.AddValues">
            <summary>
            [7] If the keyword does not exist, add the data 
                       如果关键字不存在则添加数据
            T[] values 
            返回值 int The quantity of the added data 
                       添加数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISortedSetNodeMethodEnum.RemoveValues">
            <summary>
            [8] Remove keyword 
                       删除关键字
            T[] values 
            返回值 int The quantity of deleted data 
                       删除数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeMethodEnum">
            <summary>
            Stack node interface (Last in, first out) 
                       栈节点接口（后进先出） (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeMethodEnum.Clear">
            <summary>
            [0] Clear all data 
                       清除所有数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeMethodEnum.Contains">
            <summary>
            [1] Determine whether there is matching data (Since the cached data is a serialized copy of the object, the prerequisite for determining whether the objects are equal is to implement IEquatable{VT}) 
                       判断是否存在匹配数据（由于缓存数据是序列化的对象副本，所以判断是否对象相等的前提是实现 IEquatable{VT} ）
            T value Data to be matched 
                       待匹配数据
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeMethodEnum.Count">
            <summary>
            [2] Get the quantity of data 
                       获取数据数量
            返回值 int 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeMethodEnum.Push">
            <summary>
            [3] Add the data to the stack 
                       将数据添加到栈
            T value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeMethodEnum.TryPeek">
            <summary>
            [4] Get the next popped data in the stack (no popped data, only view) 
                       获取栈中下一个弹出数据（不弹出数据仅查看）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IStackNodeMethodEnum.TryPop">
            <summary>
            [5] Pop a piece of data from the stack 
                       从栈中弹出一个数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{T} If there is no pop-up data, no data will be returned 
                       没有可弹出数据则返回无数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient">
            <summary>
            Log stream persistence in-memory database client
            日志流持久化内存数据库客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.Client">
            <summary>
            Log stream persists in-memory database client socket events
            日志流持久化内存数据库客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.createNodeLock">
            <summary>
            Access lock of the create client node
            创建客户端节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.#ctor(AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent)">
            <summary>
            Log stream persistence in-memory database client
            日志流持久化内存数据库客户端
            </summary>
            <param name="client">Log stream persists in-memory database client socket events
            日志流持久化内存数据库客户端套接字事件</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.GetOrCreateNode``1(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}},System.Boolean)">
            <summary>
             Get the client node. If the server does not exist, create the node
             获取客户端客户端节点，服务端不存在则创建节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">The delegate for creating the client node
            创建客户端节点委托</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>The client node interface object is derived from AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}
            客户端节点接口对象派生自 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.GetOrCreateNode``2(System.String,``1,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,``1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}},System.Boolean)">
            <summary>
             Get the client node. If the server does not exist, create the node
             获取客户端客户端节点，服务端不存在则创建节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
            <typeparam name="PT">Additional parameter type
            附加参数类型</typeparam>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="parameter">Additional parameters
            附加参数</param>
            <param name="creator">The delegate for creating the client node
            创建客户端节点委托</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>The client node interface object is derived from AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}
            客户端节点接口对象派生自 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode{T}</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.GetOrCreateNodeIndex``1(System.String,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}})">
            <summary>
            Get the node identifier and create a node when it does not exist
            获取节点标识，不存在节点时创建节点
            </summary>
            <typeparam name="T">Client node interface type
            客户端节点接口类型</typeparam>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="creator">The delegate for creating the client node
            创建客户端节点委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.RepairNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Reflection.MethodInfo)">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <param name="node"></param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.RepairNodeMethod(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <param name="node">For instance AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode, all client node interface instances are derived from this type
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode 实例，所有的客户端节点接口实例都派生自该类型</param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.BindNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Reflection.MethodInfo)">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <param name="node"></param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.BindNodeMethod(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <param name="node">For instance AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode, all client node interface instances are derived from this type
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode 实例，所有的客户端节点接口实例都派生自该类型</param>
            <param name="method">It must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.Call(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallCommand(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallWriteCommand(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node"></param>
            <param name="methodIndex"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInput``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputWrite``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleSerializeCallInput``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleSerializeCallInputWrite``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputWriteCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleSerializeCallInputCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleSerializeCallInputWriteCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallOutputResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallOutputWriteResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallOutput``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallOutputWrite``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleDeserializeCallOutput``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleDeserializeCallOutputWrite``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallOutputCommandResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallOutputWriteCommandResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallOutputCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallOutputWriteCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleDeserializeCallOutputCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleDeserializeCallOutputWriteCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.getRequestParameterSerializer``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0@)">
            <summary>
            Get the serialization of the request parameters
            获取请求参数序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="flags"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputOutputResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputOutputWriteResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputOutput``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputOutputWrite``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputOutputCommandResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputOutputWriteCommandResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputOutputCommand``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``1}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.CallInputOutputWriteCommand``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``1}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SendOnly``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SendOnlyWrite``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleSerializeSendOnly``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleSerializeSendOnlyWrite``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.KeepCallbackResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.KeepCallbackWriteResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.KeepCallback``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.KeepCallbackWrite``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleDeserializeKeepCallback``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleDeserializeKeepCallbackWrite``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.KeepCallbackCommandResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.KeepCallbackWriteCommandResponseParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.KeepCallbackCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.KeepCallbackWriteCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleDeserializeKeepCallbackCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.SimpleDeserializeKeepCallbackWriteCommand``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.InputKeepCallbackResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.InputKeepCallbackWriteResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.InputKeepCallback``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.InputKeepCallbackWrite``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.InputKeepCallbackCommandResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.InputKeepCallbackWriteCommandResponseParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterSerializer},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="responseParameter">Return parameter
            返回参数</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.InputKeepCallbackCommand``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``1},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient.InputKeepCallbackWriteCommand``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodFlagsEnum,``0,System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{``1},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="RT"></typeparam>
            <param name="node">Client node
            客户端节点</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="flags">Server-side node method flags
            服务端节点方法标记</param>
            <param name="parameter">Call the method request parameters
            调用方法请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1">
            <summary>
            Log stream persistence in-memory database client
            日志流持久化内存数据库客户端
            </summary>
            <typeparam name="CT">Service basic operation client interface type
            服务基础操作客户端接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.ClientNode">
            <summary>
            Service basic operation client
            服务基础操作客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.#ctor(AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent)">
            <summary>
            Log stream persistence in-memory database client
            日志流持久化内存数据库客户端
            </summary>
            <param name="client">Log stream persists in-memory database client socket events
            日志流持久化内存数据库客户端套接字事件</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="node">Client node
            客户端节点</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.RemoveNode(System.String)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateServerRegistryNode(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the server registration client node. If the server does not exist, create the node IServerRegistryNode
            获取服务注册客户端节点，服务端不存在则创建节点 IServerRegistryNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="loadTimeoutSeconds">Cold start session timeout seconds
            冷启动会话超时秒数</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateProcessGuardNode(System.String,System.Boolean)">
            <summary>
            Get the process guardian client node. If the server does not exist, create the node IProcessGuardNode
            获取进程守护客户端节点，服务端不存在则创建节点 IProcessGuardNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateServerByteArrayMessageNode(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the message processing client node. If the server does not exist, create a node MessageNode{ServerByteArrayMessage}
            获取消息处理客户端节点，服务端不存在则创建节点 MessageNode{ServerByteArrayMessage}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateBinaryMessageNode``1(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the message processing client node. If the server does not exist, create the node MessageNode{BinaryMessage{T}}
            获取消息处理客户端节点，服务端不存在则创建节点 MessageNode{BinaryMessage{T}}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateMessageNode``1(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the message processing client node. If the server does not exist, create the node MessageNode{T}
            获取消息处理客户端节点，服务端不存在则创建节点 MessageNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="arraySize">The size of the message array being processed
            正在处理的消息数组大小</param>
            <param name="timeoutSeconds">The number of seconds of message processing timeout
            消息处理超时秒数</param>
            <param name="checkTimeoutSeconds">Check the interval in seconds for message timeouts
            消息超时检查间隔秒数</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateDistributedLockNode``1(System.String,System.Boolean)">
            <summary>
            Get the distributed lock client node. If the server does not exist, create the node DistributedLockNode{KT}
            获取分布式锁客户端节点，服务端不存在则创建节点 DistributedLockNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateManyHashBitMapClientFilterNode(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the multi-hash bitmap client-side synchronous filter node (similar to a Bloom filter, suitable for small containers). If the server does not exist, create node ManyHashBitMapClientFilterNode
            获取多哈希位图客户端同步过滤节点（类似布隆过滤器，适合小容器），服务端不存在则创建节点 ManyHashBitMapClientFilterNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateManyHashBitMapFilterNode(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the multi-hash bitmap filter node (similar to a Bloom filter). If the server does not exist, create node ManyHashBitMapFilterNode
            获取多哈希位图过滤节点（类似布隆过滤器），服务端不存在则创建节点 ManyHashBitMapFilterNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="size">Bitmap size (number of bits)
            位图大小（位数量）</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateHashBytesFragmentDictionaryNode(System.String,System.Boolean)">
            <summary>
            Get the dictionary client node. If the server does not exist, create node HashBytesFragmentDictionaryNode
            获取字典客户端节点，服务端不存在则创建节点 HashBytesFragmentDictionaryNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateByteArrayFragmentDictionaryNode``1(System.String,System.Boolean)">
            <summary>
            Get the dictionary client node. If the server does not exist, create node ByteArrayFragmentDictionaryNode{KT}
            获取字典客户端节点，服务端不存在则创建节点 ByteArrayFragmentDictionaryNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateFragmentDictionaryNode``2(System.String,System.Boolean)">
            <summary>
            Get the dictionary client node. If the server does not exist, create node FragmentDictionaryNode{KT,VT}
            获取字典客户端节点，服务端不存在则创建节点 FragmentDictionaryNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateHashBytesDictionaryNode(System.String,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum,System.Boolean)">
            <summary>
            Get the dictionary client node. If the server does not exist, create node HashBytesDictionaryNode
            获取字典客户端节点，服务端不存在则创建节点 HashBytesDictionaryNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateByteArrayDictionaryNode``1(System.String,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum,System.Boolean)">
            <summary>
            Get the dictionary client node. If the server does not exist, create node ByteArrayDictionaryNode{KT}
            获取字典客户端节点，服务端不存在则创建节点 ByteArrayDictionaryNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateDictionaryNode``2(System.String,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum,System.Boolean)">
            <summary>
            Get the dictionary client node. If the server does not exist, create node DictionaryNode{KT,VT}
            获取字典客户端节点，服务端不存在则创建节点 DictionaryNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateSearchTreeDictionaryNode``2(System.String,System.Boolean)">
            <summary>
            Get a binary search tree client node. If the server does not exist, create node SearchTreeDictionaryNode{KT,VT}
            获取二叉搜索树客户端节点，服务端不存在则创建节点 SearchTreeDictionaryNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateSortedDictionaryNode``2(System.String,System.Boolean)">
            <summary>
            Get the client node of the sorting dictionary. If the server does not exist, create node SortedDictionaryNode{KT,VT}
            获取排序字典客户端节点，服务端不存在则创建节点 SortedDictionaryNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateSortedListNode``2(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the client nodes of the sorting list. If the server does not exist, create node SortedListNode{KT,VT}
            获取排序列表客户端节点，服务端不存在则创建节点 SortedListNode{KT,VT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateFragmentHashSetNode``1(System.String,System.Boolean)">
            <summary>
            Get the client nodes of the 256 base fragment hash table. If the server does not exist, create node FragmentHashSetNode{KT}
            获取 256 基分片哈希表客户端节点，服务端不存在则创建节点 FragmentHashSetNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateHashSetNode``1(System.String,System.Int32,AutoCSer.ReusableDictionaryGroupTypeEnum,System.Boolean)">
            <summary>
            Get the client node of the hash table. If the server does not exist, create node HashSetNode{KT}
            获取哈希表客户端节点，服务端不存在则创建节点 HashSetNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="groupType">Reusable dictionary recombination operation type
            可重用字典重组操作类型</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateSearchTreeSetNode``1(System.String,System.Boolean)">
            <summary>
            Get the binary search tree set of client nodes. If the server does not exist, create node SearchTreeSetNode{KT}
            获取二叉搜索树集合客户端节点，服务端不存在则创建节点 SearchTreeSetNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateSortedSetNode``1(System.String,System.Boolean)">
            <summary>
            Get the client nodes of the sorted collection. If the server does not exist, create node SortedSetNode{KT}
            获取排序集合客户端节点，服务端不存在则创建节点 SortedSetNode{KT}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateByteArrayQueueNode(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the queue client node (first-in-first-out). If the server does not exist, create node ByteArrayQueueNodeClientNode
            获取队列客户端节点（先进先出），服务端不存在则创建节点 ByteArrayQueueNodeClientNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateQueueNode``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the queue client node (first-in-first-out). If the server does not exist, create node QueueNode{T}
            获取队列客户端节点（先进先出），服务端不存在则创建节点 QueueNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateByteArrayStackNode(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the stack client node (last in, first out). If the server does not exist, create node ByteArrayStackNodeClientNode
            获取栈客户端节点（后进先出），服务端不存在则创建节点 ByteArrayStackNodeClientNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateStackNode``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the stack client node (last in, first out). If the server does not exist, create node StackNode{T}
            获取栈客户端节点（后进先出），服务端不存在则创建节点 StackNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateLeftArrayNode``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the array client nodes. If the server does not exist, create node LeftArrayNode{T}
            获取数组客户端节点，服务端不存在则创建节点 LeftArrayNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateArrayNode``1(System.String,System.Int32,System.Boolean)">
            <summary>
            Get the array client nodes. If the server does not exist, create node ArrayNode{T}
            获取数组客户端节点，服务端不存在则创建节点 ArrayNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="length">Array length</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateOnlyPersistenceNode``1(System.String)">
            <summary>
            Get archive-only data client nodes. If the server does not exist, create node OnlyPersistenceNode{T}
            获取仅存档数据客户端节点，服务端不存在则创建节点 OnlyPersistenceNode{T}
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateIdentityGeneratorNode(System.String,System.Int64,System.Boolean)">
            <summary>
            Get a 64-bit auto-increment identity client node. If the server does not exist, create node IdentityGeneratorNode
            获取 64 位自增ID 客户端节点，服务端不存在则创建节点 IdentityGeneratorNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="identity">Initial Allocation identity
            起始分配 ID</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient`1.GetOrCreateBitmapNode(System.String,System.UInt32,System.Boolean)">
            <summary>
            Get the bitmap client node. If the server does not exist, create node BitmapNode
            获取位图客户端节点，服务端不存在则创建节点 BitmapNode
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <param name="isPersistenceCallbackExceptionRenewNode">Default to false said persistence service node produces success but PersistenceCallbackException when performing a abnormal state node will not operate until the anomalies have been restored and restart the server; If set to true, the server node will be automatically deleted and a new node will be recreated after the exception occurs during the call to avoid the situation where the node is unavailable for a long time. The cost is that all historical data will be lost
            默认为 false 表示服务端节点产生持久化成功但是执行异常状态时 PersistenceCallbackException 节点将不可操作直到该异常被修复并重启服务端；设置为 true 则在调用发生该异常以后自动删除该服务端节点并重新创建新节点避免该节点长时间不可使用的情况，代价是历史数据将全部丢失</param>
            <returns>Client node
            客户端节点</returns>
        </member>
        <member name="T:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient">
            <summary>
            Log stream persistence in-memory database client interface
            日志流持久化内存数据库客户端接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetUtcNow">
            <summary>
            Get the server UTC time
            获取服务端 UTC 时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetPersistencePosition">
            <summary>
            Get the current write location of the persistent stream
            获取持久化流已当前写入位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetRebuildSnapshotPosition">
            <summary>
            Get the end position of the rebuild snapshot
            获取重建快照结束位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetNodeIndex(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity
            获取节点标识
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetNodeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Gets the global keyword for all matching nodes
            获取所有匹配节点的全局关键字
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetNodeIndexs(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Gets the node index information for all matching nodes
            获取所有匹配节点的节点索引信息
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetNodeKeyIndexs(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Gets the global keyword and node index information of all matching nodes
            获取所有匹配节点的全局关键字与节点索引信息
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.SendOnly(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.Call(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.Call(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCall(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.KeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.KeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.InputKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.InputKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousInputKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousInputKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.SendOnlyWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallOutputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallOutputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallOutputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallOutputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallInputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallInputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallInputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallInputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum}})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallInputOutputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CallInputOutputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallInputOutputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousCallInputOutputWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter}})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.KeepCallbackWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.KeepCallbackWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousKeepCallbackWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousKeepCallbackWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.InputKeepCallbackWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.InputKeepCallbackWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousInputKeepCallbackWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.ClientSynchronousInputKeepCallbackWrite(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Call the node method (client I/O thread synchronization callback)
            调用节点方法（客户端 IO 线程同步回调）
            </summary>
            <param name="returnValue">The interface returns the initial value, which is used for custom deserialization operations of the return value. The parameter name must be ReturnValue, case-insensitive, and must be placed before the first data parameter. The type must be consistent with the type of the return value
            接口返回初始值，这里用于返回值的自定义反序列化操作，参数名称必须是 ReturnValue 不区分大小写，必须放在第一个数据参数之前，类型必须与返回值类型一致</param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.Rebuild">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.RepairNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName)">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <param name="index"></param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="methodName">The name of the repair method must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.BindNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName)">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <param name="index"></param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="methodName">The name of the repair method must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CreateSlave(System.Boolean)">
            <summary>
            Create a slave node
            创建从节点
            </summary>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
            <returns>Verify the timestamp from the node, and a negative number represents the CallStateEnum error status
            从节点验证时间戳，负数表示 CallStateEnum 错误状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.RemoveSlave(System.Int64)">
            <summary>
            Remove the information from the node client
            移除从节点客户端信息
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.AppendRepairNodeMethodDirectoryFile(System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile)">
            <summary>
            Add the directory and file information of the repair method from the node
            从节点添加修复方法目录与文件信息
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="directory">Directory information of the repair method
            修复方法目录信息</param>
            <param name="file">File information of the repair method
            修复方法文件信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetRepairNodeMethodPosition(System.Int64,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the repair node method information from slave node
            从节点获取修复节点方法信息
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback">Callback delegate for repair node method information
            修复节点方法信息回调委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CheckPersistenceFileHead(System.UInt32,System.UInt64)">
            <summary>
            Check whether the header of the persistent file matches
            检查持久化文件头部是否匹配
            </summary>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <returns>The persistent stream has been written to the location and returns -1 in case of failure
            持久化流已写入位置，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetPersistenceFile(System.Int64,System.UInt32,System.UInt64,System.Int64,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback">Callback delegate to get persistent file data
            获取持久化文件数据回调委托</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetPersistenceCallbackExceptionPosition(System.Int64,System.Action{AutoCSer.Net.CommandClientReturnValue{System.Int64},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the location data of the persistent callback exception
            获取持久化回调异常位置数据
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.CheckPersistenceCallbackExceptionPositionFileHead(System.UInt32,System.UInt64)">
            <summary>
            Check whether the header of the persistent callback exception location file matches
            检查持久化回调异常位置文件头部是否匹配
            </summary>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <returns>The written location of the persistent callback exception location file. Return -1 in case of failure
            持久化回调异常位置文件已写入位置，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClient.GetPersistenceCallbackExceptionPositionFile(System.Int64,System.UInt32,System.UInt64,System.Int64,System.Action{AutoCSer.Net.CommandClientReturnValue{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback">Callback delegate that gets persistent callback exception location file data
            获取持久化回调异常位置文件数据回调委托</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent">
            <summary>
            Log stream persists in-memory database client socket events
            日志流持久化内存数据库客户端套接字事件
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseClientSocketEvent.StreamPersistenceMemoryDatabaseClient">
            <summary>
            Log stream persistence in-memory database client interface
            日志流持久化内存数据库客户端接口
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`2">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <typeparam name="NT">Basic service operation client interface type
            服务基础操作客户端接口类型</typeparam>
            <typeparam name="ET">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`2.ClientCache">
            <summary>
            Command client socket events
            命令客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`2.clientLock">
            <summary>
            Log stream persistence memory database client access lock
            日志流持久化内存数据库客户端访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`2.#ctor(AutoCSer.Net.CommandClientSocketEventCache{`1})">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="client">Command client socket events
            命令客户端套接字事件</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`2.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="client">Command client</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`2.#ctor(AutoCSer.Net.CommandClientConfig)">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="config">Command client configuration
            命令客户端配置</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`2.getClient">
            <summary>
            Get the log stream persistent memory database client
            获取日志流持久化内存数据库客户端
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`1">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <typeparam name="T">Command the client socket event type
            命令客户端套接字事件类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`1.#ctor(AutoCSer.Net.CommandClientSocketEventCache{`0})">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="client">Command client socket events
            命令客户端套接字事件</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`1.#ctor(AutoCSer.Net.ICommandClient)">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="client">Command client</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientCache`1.#ctor(AutoCSer.Net.CommandClientConfig)">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
            <param name="config">Command client configuration
            命令客户端配置</param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`1">
            <summary>
            Log stream persistence memory database client node cache for client singleton
            日志流持久化内存数据库客户端节点缓存，用于客户端单例
            </summary>
            <typeparam name="T">Client node type
            客户端节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`1.nodeTask">
            <summary>
            Client node
            客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`1.synchronousNodeTask">
            <summary>
            The client node of the IO thread synchronization callback
            IO 线程同步回调客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`1.nodeLock">
            <summary>
            Client node access lock
            客户端节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`1.GetNode">
            <summary>
            Get the client node
            获取客户端节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`1.getNode">
            <summary>
            Get the client node
            获取客户端节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`1.GetSynchronousNode">
            <summary>
            Get the client node of the IO thread synchronous callback, node call await subsequent operation does not allow the existence of synchronization blocking logic or long CPU operation
            获取 IO 线程同步回调客户端节点，节点调用 await 后续操作不允许存在同步阻塞逻辑或者长时间占用 CPU 运算
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`1.getSynchronousNode">
            <summary>
            Get the client node for the IO thread synchronous callback
            获取 IO 线程同步回调客户端节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`2">
            <summary>
            Log stream persistence memory database client node cache for client singleton
            日志流持久化内存数据库客户端节点缓存，用于客户端单例
            </summary>
            <typeparam name="NT">Client node type
            客户端节点类型</typeparam>
            <typeparam name="ST">Basic service operation client interface type
            服务基础操作客户端接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`2.Client">
            <summary>
            Log stream persistence memory database client cache for client singleton
            日志流持久化内存数据库客户端缓存，用于客户端单例
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`2.getNodeTask">
            <summary>
            Get client node delegate
            获取客户端节点委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientTaskCache{`1},System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClient{`1},System.Threading.Tasks.Task{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0}}})">
            <summary>
            Log stream persistence memory database client node cache for client singleton
            日志流持久化内存数据库客户端节点缓存，用于客户端单例
            </summary>
            <param name="client">Log stream persistence memory database client cache
            日志流持久化内存数据库客户端缓存</param>
            <param name="getNode">Get client node delegate
            获取客户端节点委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache`2.getNode">
            <summary>
            Get the client node
            获取客户端节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`1">
            <summary>
            Log stream persistence memory database local client node cache for client singleton
            日志流持久化内存数据库本地客户端节点缓存，用于客户端单例
            </summary>
            <typeparam name="T">Client node type
            客户端节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`1.nodeTask">
            <summary>
            Client node
            客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`1.synchronousNodeTask">
            <summary>
            The client node of the IO thread synchronization callback
            IO 线程同步回调客户端节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`1.nodeLock">
            <summary>
            Client node access lock
            客户端节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`1.GetNode">
            <summary>
            Get the client node
            获取客户端节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`1.getNode">
            <summary>
            Get the client node
            获取客户端节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`1.GetSynchronousNode">
            <summary>
            Get the client node of the IO thread synchronous callback, node call await subsequent operation does not allow the existence of synchronization blocking logic or long CPU operation
            获取 IO 线程同步回调客户端节点，节点调用 await 后续操作不允许存在同步阻塞逻辑或者长时间占用 CPU 运算
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`1.getSynchronousNode">
            <summary>
            Get the client node for the IO thread synchronous callback
            获取 IO 线程同步回调客户端节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`2">
            <summary>
            Log stream persistence memory database local client node cache for client singleton
            日志流持久化内存数据库本地客户端节点缓存，用于客户端单例
            </summary>
            <typeparam name="NT">Client node type
            客户端节点类型</typeparam>
            <typeparam name="ST">Basic service operation client interface type
            服务基础操作客户端接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`2.client">
            <summary>
            Log stream persistence memory database local client cache for client singleton
            日志流持久化内存数据库本地客户端缓存，用于客户端单例
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`2.getNodeTask">
            <summary>
            Get client node delegate
            获取客户端节点委托
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient{`1},System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalClient{`1},System.Threading.Tasks.Task{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}}})">
            <summary>
            Log stream persistence memory database local client node cache for client singleton
            日志流持久化内存数据库本地客户端节点缓存，用于客户端单例
            </summary>
            <param name="client">Log stream persistence memory database local client cache
            日志流持久化内存数据库本地客户端缓存</param>
            <param name="getNode">Get local client node delegate
            获取本地客户端节点委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache`2.getNode">
            <summary>
            Get the client node
            获取客户端节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.NullRepairNodeMethodLoaders">
            <summary>
            The default empty collection of nodes for the repair methods to be loaded
            默认空待加载修复方法节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.Config">
            <summary>
            Log stream persistence in memory database service configuration
            日志流持久化内存数据库服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.CommandServerCallQueue">
            <summary>
            The server synchronizes the read and write queues
            服务端同步读写队列
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceDirectory">
            <summary>
            The main directory of the persistent file
            持久化文件主目录
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceFileInfo">
            <summary>
            Persistent file information
            持久化文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceCallbackExceptionPositionFileInfo">
            <summary>
            Persistent callback exception location file information
            持久化回调异常位置文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceSwitchFileInfo">
            <summary>
            Persistent rebuild file information
            持久化重建文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceCallbackExceptionPositionSwitchFileInfo">
            <summary>
            Persistent callback exception location rebuild file information
            持久化回调异常位置重建文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.removeHistoryFile">
            <summary>
            Delete the historical persistence file
            删除历史持久化文件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.nodeCreators">
            <summary>
            The collection of generate server-side nodes
            生成服务端节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.nodeCreatorLock">
            <summary>
            The access lock of the generate server node collection
            生成服务端节点集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceDataPositionBuffer">
            <summary>
            Write buffer for the persistent callback exception location
            持久化回调异常位置写入缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.nodeDictionary">
            <summary>
            Root node collection
            根节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.CreateNodes">
            <summary>
            The keyword collection for the node being created
            正在创建节点的关键字集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.serviceCallbackWait">
            <summary>
            The waiting event for the completion of the persistent callback
            持久化回调完成的等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.Nodes">
            <summary>
            Node collection
            节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.CurrentMethodParameter">
            <summary>
            The currently executed calling method and parameter information
            当前执行的调用方法与参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceQueue">
            <summary>
            A linked list of persistent calls
            持久化调用链表
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceWaitHandle">
            <summary>
            Persistent waiting events
            持久化等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.Rebuilder">
            <summary>
            Rebuild the log stream persistence file
            重建日志流持久化文件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.RepairNodeMethodLoaders">
            <summary>
            The collection of nodes of the repair methods to be loaded
            待加载修复方法节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.LoadedRepairNodeMethod">
            <summary>
            The loading repair node method has been loaded
            已加载加载修复节点方法
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.Slave">
            <summary>
            Information from the node client
            从节点客户端信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.CanCreateSlave">
            <summary>
            Whether to allow the creation of slave nodes
            是否允许创建从节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.RebuildPosition">
            <summary>
            The starting position of persistent flow rebuild
            持久化流重建起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistencePosition">
            <summary>
            The written location of the persistent stream
            持久化流已写入位置
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.RebuildPersistenceEndPosition">
            <summary>
            The absolute end position of persistent flow rebuild (RebuildPosition + PersistencePosition)
            持久化流重建绝对结束位置（RebuildPosition + PersistencePosition）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceCallbackExceptionFilePosition">
            <summary>
            The persistent callback exception location is the written location of the file
            持久化回调异常位置文件已写入位置
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.RebuildSnapshotPosition">
            <summary>
            Rebuild the end position of the snapshot
            重建快照结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.NodeIndex">
            <summary>
            The current allocated node index
            当前分配节点索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.serviceCallbackCount">
            <summary>
            The number of unfinished persistence callbacks
            未完成持久化回调次数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.SnapshotTransactionNodeVersion">
            <summary>
            Snapshot transaction relationship node version
            快照事务关系节点版本
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.IsMaster">
            <summary>
            Is master node
            是否主节点
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.IsBackup">
            <summary>
            Is Backup client
            是否备份客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.CurrentCallIsPersistence">
            <summary>
            Whether the current call is persistent
            当前调用是否持久化
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.IsLoaded">
            <summary>
            Has the data been loaded completely
            是否已经加载完数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.IsDisposed">
            <summary>
            Whether resources have been released
            是否已经释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceType">
            <summary>
            Persistent type
            持久化类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig,System.Boolean)">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
            <param name="config">Configuration of in-memory database service for log stream persistence
            日志流持久化内存数据库服务配置</param>
            <param name="isMaster">Is master node
            是否主节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.NodeDispose">
            <summary>
            Release node resources
            释放节点资源
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.GetNode(System.String)">
            <summary>
            Get node information based on keywords
            根据关键字获取节点信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.Set(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RemoveHistoryFile)">
            <summary>
            Set to delete historical persistent files
            设置删除历史持久化文件
            </summary>
            <param name="removeHistoryFile"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.SwitchPersistenceFileInfo">
            <summary>
            Switch the persistent file information
            切换持久化文件信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.GetPersistencePosition">
            <summary>
            Get the location where the persistent stream has been written
            获取持久化流已写入位置
            </summary>
            <returns>The written location of the persistent stream
            持久化流已写入位置</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.GetRebuildSnapshotPosition">
            <summary>
            Gets the end location of the rebuild snapshot
            获取重建快照结束位置
            </summary>
            <returns>Rebuild the end position of the snapshot
            重建快照结束位置</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.AppendNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,System.String)">
            <summary>
            Add a new node
            添加新节点
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns>The currently executed persistent call
            当前执行的持久化调用</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PushPersistenceMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter)">
            <summary>
            Add the persistence call method and parameter information (The persistence API persists the request data first and then executes the request to ensure the reliability of persistence and avoid the situation where persistence fails and data is lost after the client is successfully fed back)
            添加持久化调用方法与参数信息（持久化 API 先持久化请求数据再执行请求保证持久化的可靠性，避免出现反馈客户端成功以后出现持久化失败丢失数据的情况）
            </summary>
            <param name="methodParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PushPersistenceMethodParameter``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter,``0@)">
            <summary>
            Add the persistence call method and parameter information (The persistence API persists the request data first and then executes the request to ensure the reliability of persistence and avoid the situation where persistence fails and data is lost after the client is successfully fed back)
            添加持久化调用方法与参数信息（持久化 API 先持久化请求数据再执行请求保证持久化的可靠性，避免出现反馈客户端成功以后出现持久化失败丢失数据的情况）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodParameter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.SetCurrentMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter)">
            <summary>
            Set the currently executed calling method and parameter information
            设置当前执行的调用方法与参数信息
            </summary>
            <param name="methodParameter"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter,System.Int64,System.Boolean)">
            <summary>
            Persistent callback
            持久化回调
            </summary>
            <param name="head"></param>
            <param name="end"></param>
            <param name="persistencePosition"></param>
            <param name="checkRebuild"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.CheckRebuild">
            <summary>
            Rebuild the persistent file
            重建持久化文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.PersistenceException(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodParameter,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum)">
            <summary>
            Persistence exception, Release the call queue
            持久化异常释放调用队列
            </summary>
            <param name="head"></param>
            <param name="end"></param>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.WritePersistenceCallbackExceptionPosition(System.Int64)">
            <summary>
            Write the location of the persistent callback exception data
            写入持久化回调异常数据位置
            </summary>
            <param name="persistenceCallbackExceptionPosition">持久化异常位置信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.GetNodeCreator``1">
            <summary>
            Get the generate server-side node
            获取生成服务端节点
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.AppendRepairNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod)">
            <summary>
            Add the repair interface method file
            添加修复接口方法文件
            </summary>
            <param name="repairNodeMethod"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.AppendRepairNodeMethodLoader``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase,System.IO.DirectoryInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory)">
            <summary>
            Add the node of the repair method to be loaded
            添加待加载修复方法节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="methodDirectory"></param>
            <param name="repairNodeMethodDirectory"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.appendRepairNodeMethodLoader``1(System.IO.DirectoryInfo,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory@)">
            <summary>
            Add the node of the repair method to be loaded
            添加待加载修复方法节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodDirectory"></param>
            <param name="repairNodeMethodDirectory"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.AppendRepairNodeMethodLoader(System.UInt64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodLoader)">
            <summary>
            Add the node of the repair method to be loaded
            添加待加载修复方法节点
            </summary>
            <param name="position"></param>
            <param name="loader"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.AppendLoadedRepairNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethod)">
            <summary>
            Add the loaded repair node method
            添加已加载修复节点方法
            </summary>
            <param name="repairNodeMethod"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceBase.CloseLoader(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader,System.Boolean)">
            <summary>
            Close the data load
            关闭数据加载
            </summary>
            <param name="loader"></param>
            <param name="isRetry"></param>
        </member>
        <member name="T:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService">
            <summary>
            Log stream persistence in-memory database service interface
            日志流持久化内存数据库服务接口
            </summary>
            <summary>
            Log stream persistence in-memory database service interface 
                       日志流持久化内存数据库服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.GetNodeIndex(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity
            获取节点标识
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.Call(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.CallOutput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.CallInput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.CallInputOutput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.SendOnly(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.KeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.InputKeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.CallWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.CallOutputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.CallInputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.CallInputOutputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.SendOnlyWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.KeepCallbackWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.InputKeepCallbackWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.Rebuild(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue)">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.CreateSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Boolean)">
            <summary>
            Create a slave node
            创建从节点
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
            <returns>Verify the timestamp from the node, and a negative number represents the CallStateEnum error status
            从节点验证时间戳，负数表示 CallStateEnum 错误状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.RemoveSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64)">
            <summary>
            Remove the information from the node client
            移除从节点客户端信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.AppendRepairNodeMethodDirectoryFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile)">
            <summary>
            Add the directory and file information of the repair method from the node
            从节点添加修复方法目录与文件信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="directory">Directory information of the repair method
            修复方法目录信息</param>
            <param name="file">File information of the repair method
            修复方法文件信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.GetRepairNodeMethodPosition(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition})">
            <summary>
            Get the repair node method information from slave node
            从节点获取修复节点方法信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback">The callback delegate for get the method information of the repair node
            获取修复节点方法信息回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.GetPersistenceFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.GetPersistenceCallbackExceptionPosition(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,AutoCSer.Net.CommandServerKeepCallback{System.Int64})">
            <summary>
            Get the location data of the persistent callback exception
            获取持久化回调异常位置数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseService.GetPersistenceCallbackExceptionPositionFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.PersistenceBufferPool">
            <summary>
            Persistent buffer pool
            持久化缓冲区池
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.rebuildCompletedWaitHandle">
            <summary>
            After the persistent rebuild is completed, turn off the node and wait for the event
            持久化重建完毕关闭从节点等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.slaveClientTimestamp">
            <summary>
            The timestamp identifier of the last generated slave node
            最后一次生成的从节点时间戳标识
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.persistenceHead">
            <summary>
            The head node of the persistent queue has not been processed
            未处理持久化队列头节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.persistenceEnd">
            <summary>
            The tail node of the persistent queue has not been processed
            未处理持久化队列尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.PersistenceFileHeadVersion">
            <summary>
            Persistent file header version information
            持久化文件头部版本信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.PersistenceCallbackExceptionPositionFileHeadVersion">
            <summary>
            Persistent callback exception location file header version information
            持久化回调异常位置文件头部版本信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.freeIndexs">
            <summary>
            Free index collection
            空闲索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.rebuildLoadExceptionNode">
            <summary>
            Persistently rebuild and load abnormal node
            持久化重建加载异常节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.isRebuilderPersistenceWaitting">
            <summary>
            Is the rebuild persistence waiting for operation
            重建持久化是否正在等待操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig,System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode},System.Boolean)">
            <summary>
            Log stream persistence memory database service
            日志流持久化内存数据库服务
            </summary>
            <param name="config">Configuration of in-memory database service for log stream persistence
            日志流持久化内存数据库服务配置</param>
            <param name="createServiceNode">The delegate that creates the underlying operation node for the service
            创建服务基础操作节点委托</param>
            <param name="isMaster">Is master node
            是否主节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Load">
            <summary>
            Load data
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.getPersistenceFile(System.IO.FileInfo[],System.String,System.String,System.Collections.Generic.Dictionary{System.UInt64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFile},System.Byte*)">
            <summary>
            Get persistent file information
            获取持久化文件信息
            </summary>
            <param name="files"></param>
            <param name="persistenceFileName"></param>
            <param name="exceptionPositionFileName"></param>
            <param name="persistenceFiles"></param>
            <param name="bufferFixed"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.nodeLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.load(AutoCSer.LeftArray{System.Threading.Tasks.Task})">
            <summary>
            Wait for the loading data
            等待加载数据
            </summary>
            <param name="tasks"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetUtcNow">
            <summary>
            Get the server UTC time
            获取服务端 UTC 时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetNodes">
            <summary>
            Gets the collection of all valid nodes (excluding the base operation nodes)
            获取所有有效节点集合（不包括基础操作节点）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CreateInputMethodParameter(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum@)">
            <summary>
            Create the calling method and parameter information
            创建调用方法与参数信息
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.AutoCSer#Net#ICommandServerBindController#Bind(AutoCSer.Net.CommandServerController)">
            <summary>
            Bind the command service controller
            绑定命令服务控制器
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetServerNode(System.String)">
            <summary>
            Get server node based on node global keywords
            根据节点全局关键字获取服务端节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SetPersistencePosition(System.Int64,System.Int64)">
            <summary>
            Set the write location of the persistent file
            设置持久化文件写入位置
            </summary>
            <param name="persistencePosition"></param>
            <param name="persistenceCallbackExceptionFilePosition"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetNodeIndex(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity
            获取节点标识
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetNodeIndexBeforePersistence(System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity (Check the input parameters before the persistence operation)
            获取节点标识（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CreateNodeIndex">
            <summary>
            Create node identity
            创建节点标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetNodeIndex(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity
            获取节点标识
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetNodeIndex(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Boolean)">
            <summary>
            Get node identity
            获取节点标识
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="isCreate">Create a free node identity when the keyword does not exist
            关键字不存在时创建空闲节点标识</param>
            <returns>When the keyword does not exist, return an free node identifier for creating the node
            关键字不存在时返回一个空闲节点标识用于创建节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.check(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Check whether the node information matches
            检查节点信息是否匹配
            </summary>
            <param name="node"></param>
            <param name="nodeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CheckCreateNodeIndex(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Check whether the node identification matches before creating the node
            创建节点之前检查节点标识是否匹配
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="nodeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.LoadCreateNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            Initialize and load data to create nodes
            初始化加载数据创建节点
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="nodeInfo"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RemoveNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RemoveNode(System.String)">
            <summary>
            Delete the node
            删除节点
            </summary>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <returns>Returning false indicates that the node was not found
            返回 false 表示没有找到节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetFreeIndex">
            <summary>
            Get the node index
            获取节点索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RemoveFreeIndex(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex)">
            <summary>
            Release free node
            释放空闲节点
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetNodeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Net.CommandServerKeepCallbackCount{System.String})">
            <summary>
            Gets the global keyword for all matching nodes
            获取所有匹配节点的全局关键字
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetNodeIndexs(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex})">
            <summary>
            Gets the node index information for all matching nodes
            获取所有匹配节点的节点索引信息
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetNodeKeyIndexs(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}})">
            <summary>
            Gets the global keyword and node index information of all matching nodes
            获取所有匹配节点的全局关键字与节点索引信息
            </summary>
            <param name="nodeInfo">The server-side node information to be matched
            待匹配的服务端节点信息</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Call(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Call(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Call(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallOutput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallOutput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallOutputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallOutputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter@,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInputOutput(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter@,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInputOutput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInputOutput(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInputOutputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The callback of reutrn parameter
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CallInputOutputWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SendOnly(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SendOnly(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SendOnlyWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SendOnlyWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter)">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.KeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.KeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.KeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.KeepCallbackWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.KeepCallbackWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="methodIndex">Call method number
            调用方法编号</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.InputKeepCallback(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter@,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="parameter"></param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.InputKeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.InputKeepCallback(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallReadQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.InputKeepCallbackWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.InputKeepCallbackWrite(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter})">
            <summary>
            Call the node method
            调用节点方法
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="parameter">Request parameters
            请求参数</param>
            <param name="callback">The return parameters of the keep callback
            返回参数回调</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SetBeforePersistenceMethodParameterCustomSessionObject(System.Object)">
            <summary>
            Set a custom state object
            设置自定义状态对象
            </summary>
            <param name="sessionObject"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetBeforePersistenceMethodParameterCustomSessionObject">
            <summary>
            Get the custom state object
            获取自定义状态对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.persistence">
            <summary>
            Persistence
            持久化
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Load(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Int32,AutoCSer.BinaryDeserializer,AutoCSer.SubArray{System.Byte},AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode@)">
            <summary>
            Initialize and load the data
            初始化加载数据
            </summary>
            <param name="index"></param>
            <param name="methodIndex"></param>
            <param name="deserializer"></param>
            <param name="data"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SetRebuild(System.Int64,System.Int64,System.Int64)">
            <summary>
            Set the location information of the rebuild file
            设置重建文件位置信息
            </summary>
            <param name="persistencePosition"></param>
            <param name="persistenceCallbackExceptionFilePosition"></param>
            <param name="rebuildSnapshotPosition"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Rebuild">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Rebuild(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue)">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.Rebuild(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue)">
            <summary>
            Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded
            重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CheckRebuild">
            <summary>
            Rebuild the persistent file
            重建持久化文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RebuildError">
            <summary>
            Persistent file rebuild is abnormal and has been turned off
            持久化文件重建异常并已关闭
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SetPersistenceFileHeadVersion(System.UInt32,System.UInt64,System.Int64)">
            <summary>
            Set the version information of the header of the persistent file
            设置持久化文件头部版本信息
            </summary>
            <param name="persistenceFileHeadVersion"></param>
            <param name="rebuildPosition"></param>
            <param name="rebuildSnapshotPosition"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.SetRebuilderPersistenceWaitting">
            <summary>
            Set up the rebuild persistence waiting operation
            设置重建持久化等待操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.LoadRepairNodeMethod(System.Int64)">
            <summary>
            Initialize the loading repair method
            初始化加载修复方法
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RebuildCompleted">
            <summary>
            After the persistent reconstruction is completed, shut down the slave nodes
            持久化重建完毕关闭从节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.getRepairMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNode@,System.Reflection.MethodInfo@,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute@)">
            <summary>
            Get the repair method information
            获取修复方法信息
            </summary>
            <param name="index"></param>
            <param name="rawAssembly"></param>
            <param name="methodName"></param>
            <param name="node"></param>
            <param name="method"></param>
            <param name="methodAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RepairNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent
            修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            </summary>
            <param name="index"></param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="methodName">The name of the repair method must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.BindNodeMethod(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.Byte[],AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName,AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum})">
            <summary>
            Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free
            绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            </summary>
            <param name="index"></param>
            <param name="rawAssembly">Assembly file data
            程序集文件数据</param>
            <param name="methodName">The name of the repair method must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex
            修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetSlaveClientTimestamp">
            <summary>
            Get the timestamp identifier of the slave node
            获取从节点时间戳标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.createSlave(AutoCSer.Net.CommandServerSocket,System.Boolean)">
            <summary>
            Create a slave node
            创建从节点
            </summary>
            <param name="socket"></param>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
            <returns>Verify the timestamp from the node, and a negative number represents the CallStateEnum error status
            从节点验证时间戳，负数表示 CallStateEnum 错误状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CreateSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Boolean)">
            <summary>
            Create a slave node
            创建从节点
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
            <returns>Verify the timestamp from the node, and a negative number represents the CallStateEnum error status
            从节点验证时间戳，负数表示 CallStateEnum 错误状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CreateSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Boolean)">
            <summary>
            Create a slave node
            创建从节点
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="isBackup">Is the backup client
            是否备份客户端</param>
            <returns>Verify the timestamp from the node, and a negative number represents the CallStateEnum error status
            从节点验证时间戳，负数表示 CallStateEnum 错误状态</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.getSlave(System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServiceSlave@)">
            <summary>
            Get the client information from the slave node
            获取从节点客户端信息
            </summary>
            <param name="timestamp"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RemoveSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64)">
            <summary>
            Remove the information from the node client
            移除从节点客户端信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RemoveSlave(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64)">
            <summary>
            Remove the information from the node client
            移除从节点客户端信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.appendRepairNodeMethodDirectoryFile(System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile)">
            <summary>
            Add the directory and file information of the repair method from the node
            从节点添加修复方法目录与文件信息
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="directory">Directory information of the repair method
            修复方法目录信息</param>
            <param name="file">File information of the repair method
            修复方法文件信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.AppendRepairNodeMethodDirectoryFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile)">
            <summary>
            Add the directory and file information of the repair method from the node
            从节点添加修复方法目录与文件信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="directory">Directory information of the repair method
            修复方法目录信息</param>
            <param name="file">File information of the repair method
            修复方法文件信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.AppendRepairNodeMethodDirectoryFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile)">
            <summary>
            Add the directory and file information of the repair method from the node
            从节点添加修复方法目录与文件信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="directory">Directory information of the repair method
            修复方法目录信息</param>
            <param name="file">File information of the repair method
            修复方法文件信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.RemoveSlave(System.Int64)">
            <summary>
            Remove the information from the node client
            移除从节点客户端信息
            </summary>
            <param name="timestamp"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.getRepairNodeMethodPosition(System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition})">
            <summary>
            Get the repair node method information from slave node
            从节点获取修复节点方法信息
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback">The callback delegate for get the method information of the repair node
            获取修复节点方法信息回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetRepairNodeMethodPosition(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition})">
            <summary>
            Get the repair node method information from slave node
            从节点获取修复节点方法信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback">The callback delegate for get the method information of the repair node
            获取修复节点方法信息回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetRepairNodeMethodPosition(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition})">
            <summary>
            Get the repair node method information from slave node
            从节点获取修复节点方法信息
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback">The callback delegate for get the method information of the repair node
            获取修复节点方法信息回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CheckPersistenceFileHead(System.UInt32,System.UInt64)">
            <summary>
            Check whether the header of the persistent file matches
            检查持久化文件头部是否匹配
            </summary>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <returns>The persistent stream has been written to the location and returns -1 in case of failure
            持久化流已写入位置，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.getPersistenceFile(System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetPersistenceFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetPersistenceFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the persistent file data
            获取持久化文件数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent file
            持久化文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CheckPersistenceCallbackExceptionPositionFileHead(System.UInt32,System.UInt64)">
            <summary>
            Check whether the header of the persistent callback exception location file matches
            检查持久化回调异常位置文件头部是否匹配
            </summary>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <returns>The written location of the persistent callback exception location file. Return -1 in case of failure
            持久化回调异常位置文件已写入位置，失败返回 -1</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.getPersistenceCallbackExceptionPosition(System.Int64,AutoCSer.Net.CommandServerKeepCallback{System.Int64})">
            <summary>
            Get the location data of the persistent callback exception
            获取持久化回调异常位置数据
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetPersistenceCallbackExceptionPosition(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,AutoCSer.Net.CommandServerKeepCallback{System.Int64})">
            <summary>
            Get the location data of the persistent callback exception
            获取持久化回调异常位置数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetPersistenceCallbackExceptionPosition(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,AutoCSer.Net.CommandServerKeepCallback{System.Int64})">
            <summary>
            Get the location data of the persistent callback exception
            获取持久化回调异常位置数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.getPersistenceCallbackExceptionPositionFile(System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetPersistenceCallbackExceptionPositionFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue,System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.GetPersistenceCallbackExceptionPositionFile(AutoCSer.Net.CommandServerSocket,AutoCSer.Net.CommandServerCallWriteQueue,System.Int64,System.UInt32,System.UInt64,System.Int64,AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer})">
            <summary>
            Get the file data of the persistent callback exception location
            获取持久化回调异常位置文件数据
            </summary>
            <param name="socket"></param>
            <param name="queue"></param>
            <param name="timestamp">The timestamp of create the slave node client
            创建从节点客户端时间戳</param>
            <param name="fileHeadVersion">The header version information of the persistent callback exception location file
            持久化回调异常位置文件头部版本信息</param>
            <param name="rebuildPosition">The starting position of persistent flow rebuild
            持久化流重建起始位置</param>
            <param name="position">The starting position of the read file
            读取文件起始位置</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService.CloseLoader(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.SlaveLoader,System.Boolean)">
            <summary>
            Close the data load
            关闭数据加载
            </summary>
            <param name="loader"></param>
            <param name="isRetry"></param>
        </member>
        <member name="T:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig">
            <summary>
            Log stream persistence in memory database service configuration
            日志流持久化内存数据库服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.PersistenceExtensionName">
            <summary>
            Persistent Database file extension (AutoCSer Memory Database)
            持久化数据库文件扩展名（AutoCSer Memory Database）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.PersistenceCallbackExceptionPositionExtensionName">
            <summary>
            Persist the callback exception location file extension (Callback Exception Position)
            持久化回调异常位置文件扩展名（Callback Exception Position）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.DefaultPersistenceFileName">
            <summary>
            Default persistent file name
            默认持久化文件名称
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.PersistencePath">
            <summary>
            Persist the file path. It is recommended to use an absolute path (to optimize the cold start read speed, a normally formatted blank disk should be used)
            持久化文件路径，建议使用绝对路径（为了最优化冷启动读取速度，应该使用一个正常格式化的空白磁盘）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.PersistenceSwitchPath">
            <summary>
            When rebuilding the path of a persistent file, it is recommended to use an absolute path. (To optimize the cold start reading speed and file rebuild speed, a normally formatted blank disk should be used separately, that is, two normally formatted blank disks need to be switched.)
            重建持久化文件路径，建议使用绝对路径（为了最优化冷启动读取速度与文件重建速度，应该另外使用一个正常格式化的空白磁盘，也就是说需要两个正常格式化的空白磁盘切换）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.PersistenceFileName">
            <summary>
            The name of the persistent file
            持久化文件名称
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.GetPersistenceFileInfo">
            <summary>
            Get persistent file information
            获取持久化文件信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.GetPersistenceSwitchFileInfo">
            <summary>
            Get persistence rebuild file information
            获取持久化重建文件信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.RepairNodeMethodDirectoryName">
            <summary>
            The repair node method saves the directory name, with the default being RepairNodeMethod
            修复节点方法保存目录名称，默认为 RepairNodeMethod
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.RepairNodeMethodAssemblyFileName">
            <summary>
            Fix the node method assembly save the file name, which is defaulted to assembly.dll
            修复节点方法程序集保存文件名称，默认为 assembly.dll
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.RepairNodeMethodNameFileName">
            <summary>
            The repair node method specifies the file name of the static method name information, with the default being method.json
            修复节点方法指定静态方法名称信息文件名称，默认为 method.json
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.BufferMaxSize">
            <summary>
            The maximum number of bytes in the persistent data buffer is 1MB by default and 4KB by minimum
            持久化数据缓冲区最大字节数，默认为 1MB，最小值为 4KB
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.BufferSizeBits">
            <summary>
            The byte size of the persistent data cache pool pool is the number of binary bits. By default, 17 represents 128KB, and the minimum value is 12 represents 4KB
            持久化数据缓存区池字节大小二进制位数量，默认为 17 表示 128KB，最小值为 12 表示 4KB
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.PersistenceType">
            <summary>
            Persistent type
            持久化类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.CanCreateSlave">
            <summary>
            By default, false indicates that the creation of slave nodes is not allowed. If no slave node is required and set to true, it will lead to the waste of memory space
            默认为 false 表示不允许创建从节点，如果没有从节点需求设置为 true 会导致内存空间浪费
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.IsSerializeCopyString">
            <summary>
            By default, true indicates that string serialization directly copies memory data. Setting it to false can reduce space occupation by encoding ASCII
            默认为 true 表示字符串序列化直接复制内存数据，设置为 false 则对 ASCII 进行编码可以降低空间占用
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.GetBackupFileNameSuffix">
            <summary>
            Get the backup file time suffix
            获取备份文件时间后缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.GetRemoveHistoryFileTime">
            <summary>
            Obtain the Utc time for deleting persistent files. By default, the maximum time indicates that the files are not deleted
            获取删除历史持久化文件 Utc 时间，默认为时间最大值表示不删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.RemoveHistoryFile(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService)">
            <summary>
            The task of deleting persistent files is started. By default, files are not deleted
            启动删除历史持久化文件任务，默认不删除文件
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.CheckRebuild(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService)">
            <summary>
            Determine whether persistent files need to be rebuilt (the default value is more than 100MB and the size of the snapshot version is doubled). Determine the size of the rebuild file based on actual requirements to avoid frequent rebuild operations
            判断持久化文件是否需要重建（默认为超过 100MB 并且相对上次重建的快照版本增加一倍大小以后触发），要根据实际需求确定重建文件大小避免频繁触发重建操作
            </summary>
            <param name="service"></param>
            <returns>Whether the persistent file needs to be rebuilt
            持久化文件是否需要重建</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.PersistenceEncode(System.Byte[],System.Int32,System.Int32,AutoCSer.Memory.ByteArrayBuffer@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Persistent data encoding
            持久化数据编码
            </summary>
            <param name="data">Original data
            原始数据</param>
            <param name="startIndex">The starting position of the original data
            原始数据起始位置</param>
            <param name="dataSize">The number of original data bytes
            原始数据字节数</param>
            <param name="buffer">Output data buffer
            输出数据缓冲区</param>
            <param name="outputData">Output data
            输出数据</param>
            <param name="outputSeek">Start position of output data
            输出数据起始位置</param>
            <param name="outputHeadSize">The output data exceeds the header size
            输出数据多余头部大小</param>
            <returns>Whether the persistent data is encoded
            持久化数据是否编码</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.PersistenceDecode(AutoCSer.SubArray{System.Byte}@,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            Persistent data decoding
            持久化数据解码
            </summary>
            <param name="transferData">The encoded data
            编码后的数据</param>
            <param name="outputData">Original data buffer waiting to be written
            等待写入的原始数据缓冲区</param>
            <returns>Whether the decoding was successful
            是否解码成功</returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.Create">
            <summary>
            Create a default log stream to persist the in-memory database server (primary service node)
            创建默认日志流持久化内存数据库服务（主服务节点）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.StreamPersistenceMemoryDatabaseServiceConfig.Create``1(System.Func{AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService,``0})">
            <summary>
            Create a log stream persistence in-memory database server for custom basic services (primary service node)
            创建自定义基础服务的日志流持久化内存数据库服务（主服务节点）
            </summary>
            <typeparam name="T">Customize the basic service interface type
            自定义基础服务接口类型</typeparam>
            <param name="createServiceNode"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum">
            <summary>
            Log stream persistence in-memory database service interface 
                       日志流持久化内存数据库服务接口 (The method sequence number maps the enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.AppendRepairNodeMethodDirectoryFile">
            <summary>
            [0] Add the directory and file information of the repair method from the node 
                       从节点添加修复方法目录与文件信息
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            long timestamp The timestamp of create the slave node client 
                       创建从节点客户端时间戳
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodDirectory directory Directory information of the repair method 
                       修复方法目录信息
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodFile file File information of the repair method 
                       修复方法文件信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.BindNodeMethod">
            <summary>
            [1] Bind a new method to dynamically add interface functionality. The initial state of the new method number must be free 
                       绑定新方法，用于动态增加接口功能，新增方法编号初始状态必须为空闲状态
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index 
            byte[] rawAssembly Assembly file data 
                       程序集文件数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName methodName The name of the repair method must be a static method. The first parameter must be the interface type of the operation node. The method number and other necessary configuration information must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 
                       修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号与其他必要配置信息
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.Call">
            <summary>
            [2] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            int methodIndex Call method number 
                       调用方法编号
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CallInput">
            <summary>
            [3] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter parameter Request parameters 
                       请求参数
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CallInputOutput">
            <summary>
            [4] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter parameter Request parameters 
                       请求参数
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter} callback The callback of reutrn parameter 
                       返回参数回调
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CallOutput">
            <summary>
            [5] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            int methodIndex Call method number 
                       调用方法编号
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter} callback The callback of reutrn parameter 
                       返回参数回调
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CheckPersistenceCallbackExceptionPositionFileHead">
            <summary>
            [6] Check whether the header of the persistent callback exception location file matches 
                       检查持久化回调异常位置文件头部是否匹配
            uint fileHeadVersion The header version information of the persistent callback exception location file 
                       持久化回调异常位置文件头部版本信息
            ulong rebuildPosition The starting position of persistent flow rebuild 
                       持久化流重建起始位置
            返回值 long The written location of the persistent callback exception location file. Return -1 in case of failure 
                       持久化回调异常位置文件已写入位置，失败返回 -1
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CheckPersistenceFileHead">
            <summary>
            [7] Check whether the header of the persistent file matches 
                       检查持久化文件头部是否匹配
            uint fileHeadVersion The header version information of the persistent file 
                       持久化文件头部版本信息
            ulong rebuildPosition The starting position of persistent flow rebuild 
                       持久化流重建起始位置
            返回值 long The persistent stream has been written to the location and returns -1 in case of failure 
                       持久化流已写入位置，失败返回 -1
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CreateSlave">
            <summary>
            [8] Create a slave node 
                       创建从节点
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            bool isBackup Is the backup client 
                       是否备份客户端
            返回值 long Verify the timestamp from the node, and a negative number represents the CallStateEnum error status 
                       从节点验证时间戳，负数表示 CallStateEnum 错误状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetNodeIndex">
            <summary>
            [9] Get node identity 
                       获取节点标识
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            bool isCreate Create a free node identity when the keyword does not exist 
                       关键字不存在时创建空闲节点标识
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex When the keyword does not exist, return an free node identifier for creating the node 
                       关键字不存在时返回一个空闲节点标识用于创建节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetPersistenceCallbackExceptionPosition">
            <summary>
            [10] Get the location data of the persistent callback exception 
                       获取持久化回调异常位置数据
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            long timestamp The timestamp of create the slave node client 
                       创建从节点客户端时间戳
            AutoCSer.Net.CommandServerKeepCallback{long} callback 
            返回值 long 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetPersistenceCallbackExceptionPositionFile">
            <summary>
            [11] Get the file data of the persistent callback exception location 
                       获取持久化回调异常位置文件数据
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            long timestamp The timestamp of create the slave node client 
                       创建从节点客户端时间戳
            uint fileHeadVersion The header version information of the persistent callback exception location file 
                       持久化回调异常位置文件头部版本信息
            ulong rebuildPosition The starting position of persistent flow rebuild 
                       持久化流重建起始位置
            long position The starting position of the read file 
                       读取文件起始位置
            AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetPersistenceFile">
            <summary>
            [12] Get the persistent file data 
                       获取持久化文件数据
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            long timestamp The timestamp of create the slave node client 
                       创建从节点客户端时间戳
            uint fileHeadVersion The header version information of the persistent file 
                       持久化文件头部版本信息
            ulong rebuildPosition The starting position of persistent flow rebuild 
                       持久化流重建起始位置
            long position The starting position of the read file 
                       读取文件起始位置
            AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PersistenceFileBuffer 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetPersistencePosition">
            <summary>
            [13] Get the current write location of the persistent stream 
                       获取持久化流已当前写入位置
            返回值 long 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetRebuildSnapshotPosition">
            <summary>
            [14] Get the end position of the rebuild snapshot 
                       获取重建快照结束位置
            返回值 long The end position of the rebuild snapshot 
                       重建快照结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetRepairNodeMethodPosition">
            <summary>
            [15] Get the repair node method information from slave node 
                       从节点获取修复节点方法信息
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            long timestamp The timestamp of create the slave node client 
                       创建从节点客户端时间戳
            AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition} callback The callback delegate for get the method information of the repair node 
                       获取修复节点方法信息回调委托
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodPosition 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetUtcNow">
            <summary>
            [16] Get the server UTC time 
                       获取服务端 UTC 时间
            返回值 System.DateTime 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.InputKeepCallback">
            <summary>
            [17] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter parameter Request parameters 
                       请求参数
            AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter} callback The return parameters of the keep callback 
                       返回参数回调
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.KeepCallback">
            <summary>
            [18] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            int methodIndex Call method number 
                       调用方法编号
            AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter} callback The return parameters of the keep callback 
                       返回参数回调
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.Rebuild">
            <summary>
            [19] Rebuild the persistent file (clear invalid data), and note that nodes that do not support snapshots will be discarded 
                       重建持久化文件（清除无效数据），注意不支持快照的节点将被抛弃
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RebuildResult 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.RemoveSlave">
            <summary>
            [20] Remove the information from the node client 
                       移除从节点客户端信息
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            long timestamp The timestamp of create the slave node client 
                       创建从节点客户端时间戳
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.RepairNodeMethod">
            <summary>
            [21] Fix the interface method error and force overwriting the original interface method call. Except for the first parameter being the operation node object, the method definition must be consistent 
                       修复接口方法错误，强制覆盖原接口方法调用，除了第一个参数为操作节点对象，方法定义必须一致
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index 
            byte[] rawAssembly Assembly file data 
                       程序集文件数据
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RepairNodeMethodName methodName The name of the repair method must be a static method. The first parameter must be the interface type of the operation node, and the method number must be configured using AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 
                       修复方法名称，必须是静态方法，第一个参数必须是操作节点接口类型，必须使用 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerMethodAttribute.MethodIndex 配置方法编号
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.SendOnly">
            <summary>
            [22] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter parameter Request parameters 
                       请求参数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetNodeIndexs">
            <summary>
            [23] Gets the node index information for all matching nodes 
                       获取所有匹配节点的节点索引信息
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo The server-side node information to be matched 
                       待匹配的服务端节点信息
            AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetNodeKeyIndexs">
            <summary>
            [24] Gets the global keyword and node index information of all matching nodes 
                       获取所有匹配节点的全局关键字与节点索引信息
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo The server-side node information to be matched 
                       待匹配的服务端节点信息
            AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{string,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex}} callback 
            返回值 AutoCSer.BinarySerializeKeyValue{string,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.GetNodeKeys">
            <summary>
            [25] Gets the global keyword for all matching nodes 
                       获取所有匹配节点的全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo The server-side node information to be matched 
                       待匹配的服务端节点信息
            AutoCSer.Net.CommandServerKeepCallbackCount{string} callback 
            返回值 string 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CallInputOutputWrite">
            <summary>
            [26] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter parameter Request parameters 
                       请求参数
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter} callback The callback of reutrn parameter 
                       返回参数回调
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CallInputWrite">
            <summary>
            [27] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter parameter Request parameters 
                       请求参数
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CallOutputWrite">
            <summary>
            [28] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            int methodIndex Call method number 
                       调用方法编号
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter} callback The callback of reutrn parameter 
                       返回参数回调
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.CallWrite">
            <summary>
            [29] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            int methodIndex Call method number 
                       调用方法编号
            AutoCSer.Net.CommandServerCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum} callback 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.CallStateEnum 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.InputKeepCallbackWrite">
            <summary>
            [30] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter parameter Request parameters 
                       请求参数
            AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter} callback The return parameters of the keep callback 
                       返回参数回调
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.KeepCallbackWrite">
            <summary>
            [31] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            int methodIndex Call method number 
                       调用方法编号
            AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter} callback The return parameters of the keep callback 
                       返回参数回调
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponseParameter 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.IStreamPersistenceMemoryDatabaseServiceMethodEnum.SendOnlyWrite">
            <summary>
            [32] Call the node method 
                       调用节点方法
            AutoCSer.Net.CommandServerSocket socket 
            AutoCSer.Net.CommandServerCallConcurrencyReadWriteQueue queue 
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.RequestParameter parameter Request parameters 
                       请求参数
            </summary>
        </member>
        <member name="T:AutoCSer.Extensions.SnapshotEnumerableExtension">
            <summary>
            快照集合扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.SnapshotEnumerableExtension.Cast``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable{``0},System.Func{``0,``1})">
            <summary>
            快照数据类型转换
            </summary>
            <typeparam name="ST">数据类型</typeparam>
            <typeparam name="T">持久化类型</typeparam>
            <param name="snapshot">快照集合</param>
            <param name="getValue">持久化类型</param>
            <returns>快照集合</returns>
        </member>
        <member name="M:AutoCSer.Extensions.SnapshotEnumerableExtension.Cast``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISnapshotEnumerable{``0},System.Func{``0,``1},System.Func{System.Boolean})">
            <summary>
            快照数据类型转换
            </summary>
            <typeparam name="ST">数据类型</typeparam>
            <typeparam name="T">持久化类型</typeparam>
            <param name="snapshot">快照集合</param>
            <param name="getValue">持久化类型</param>
            <param name="getIsSnapshot">持久化类型</param>
            <returns>快照集合</returns>
        </member>
        <member name="T:AutoCSer.Extensions.BitmapNodeClientNodeExtension">
            <summary>
            位图客户端节点扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.BitmapNodeClientNodeExtension.GetBool(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode,System.UInt32)">
            <summary>
            Read bit status
            读取位状态
            </summary>
            <param name="node"></param>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>索引超出返回也返回 false</returns>
        </member>
        <member name="M:AutoCSer.Extensions.BitmapNodeClientNodeExtension.GetBoolClearBit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode,System.UInt32)">
            <summary>
            Clear the bit state and return to the state before setting
            清除位状态并返回设置之前的状态
            </summary>
            <param name="node"></param>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>清除操作之前的状态，索引超出返回也返回 false</returns>
        </member>
        <member name="M:AutoCSer.Extensions.BitmapNodeClientNodeExtension.GetBoolInvertBit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode,System.UInt32)">
            <summary>
            Reverse the bit state and return the state before the operation
            状态取反并返回操作之前的状态
            </summary>
            <param name="node"></param>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>取反操作之前的状态，索引超出返回也返回 false</returns>
        </member>
        <member name="M:AutoCSer.Extensions.BitmapNodeClientNodeExtension.GetBoolSetBit(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IBitmapNodeClientNode,System.UInt32)">
            <summary>
            Set the bit state and return the state before setting
            设置位状态并返回设置之前的状态
            </summary>
            <param name="node"></param>
            <param name="index">Bit index position
            位索引位置</param>
            <returns>设置之前的状态，索引超出返回也返回 false</returns>
        </member>
        <member name="T:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension">
            <summary>
            Stack client node (Last in, First Out) expansion operation
            栈客户端节点（后进先出）扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension.PushBinarySerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode,``0)">
            <summary>
            Add the data to the stack
            将数据添加到栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension.PushJsonSerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode,``0)">
            <summary>
            Add the data to the stack
            将数据添加到栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension.TryPopString(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode)">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension.TryPopBinaryDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode)">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension.TryPopJsonDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode)">
            <summary>
            Pop a piece of data from the stack
            从栈中弹出一个数据
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension.TryPeekString(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode)">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension.TryPeekBinaryDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode)">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayStackNodeClientNodeExtension.TryPeekJsonDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayStackNodeClientNode)">
            <summary>
            Get the next popped data in the stack (no popped data, only view)
            获取栈中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension">
            <summary>
            Queue client node (first-in-first-out) expansion operation
            队列客户端节点（先进先出）扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension.EnqueueBinarySerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode,``0)">
            <summary>
            Add the data to the queue
            将数据添加到队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension.EnqueueJsonSerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode,``0)">
            <summary>
            Add the data to the queue
            将数据添加到队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension.TryDequeueString(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode)">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension.TryDequeueBinaryDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode)">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension.TryDequeueJsonDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode)">
            <summary>
            Pop a piece of data from the queue
            从队列中弹出一个数据
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension.TryPeekString(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode)">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension.TryPeekBinaryDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode)">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayQueueNodeClientNodeExtension.TryPeekJsonDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayQueueNodeClientNode)">
            <summary>
            Get the next pop-up data in the queue (no pop-up data, only view)
            获取队列中下一个弹出数据（不弹出数据仅查看）
            </summary>
            <param name="node"></param>
            <returns>If there is no pop-up data, no data will be returned
            没有可弹出数据则返回无数据</returns>
        </member>
        <member name="T:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension">
            <summary>
            Dictionary client node expansion operation
            字典客户端节点扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.TryAddBinarySerialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0,``1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.TryAddJsonSerialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0,``1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.SetBinarySerialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0,``1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.SetJsonSerialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0,``1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.TryGetString``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.TryGetBinaryDeserialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.TryGetJsonDeserialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.GetRemoveString``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.GetRemoveBinaryDeserialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayDictionaryNodeClientNodeExtension.GetRemoveJsonDeserialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension">
            <summary>
            256-base fragment dictionary client node expansion operation
            256 基分片字典 客户端节点扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.TryAddBinarySerialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0,``1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.TryAddJsonSerialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0,``1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.SetBinarySerialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0,``1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.SetJsonSerialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0,``1)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.TryGetString``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.TryGetBinaryDeserialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.TryGetJsonDeserialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.GetRemoveString``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.GetRemoveBinaryDeserialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ByteArrayFragmentDictionaryNodeClientNodeExtension.GetRemoveJsonDeserialize``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IByteArrayFragmentDictionaryNodeClientNode{``0},``0)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <typeparam name="KT"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension">
            <summary>
            Dictionary client node expansion operation
            字典客户端节点扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.TryAddBinarySerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,``0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.TryAddJsonSerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,``0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.SetBinarySerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,``0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.SetJsonSerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,``0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.TryGetString(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.TryGetBinaryDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.TryGetJsonDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.GetRemoveString(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.GetRemoveBinaryDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesDictionaryNodeClientNodeExtension.GetRemoveJsonDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension">
            <summary>
            256-base fragment HashBytes dictionary client node expansion operation
            256 基分片 HashBytes 字典客户端节点扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.TryAddBinarySerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,``0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.TryAddJsonSerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,``0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returning false indicates that the keyword already exists
            返回 false 表示关键字已经存在</returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.SetBinarySerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,``0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.SetJsonSerialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray,``0)">
            <summary>
            If the keyword does not exist, add the data
            如果关键字不存在则添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Return false on failure</returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.TryGetString(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.TryGetBinaryDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.TryGetJsonDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.GetRemoveString(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.GetRemoveBinaryDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.HashBytesFragmentDictionaryNodeClientNodeExtension.GetRemoveJsonDeserialize``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IHashBytesFragmentDictionaryNodeClientNode,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerByteArray)">
            <summary>
            Get data based on keywords
            根据关键字获取数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.LocalKeepCallbackExtension">
            <summary>
            保持回调输出扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.LocalKeepCallbackExtension.GetLeftArray``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{``0}},System.Int32)">
            <summary>
            获取数组
            </summary>
            <param name="response"></param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.LocalKeepCallbackExtension.GetLeftArray``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback{``0},System.Int32)">
            <summary>
            获取数组
            </summary>
            <param name="response"></param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.LocalKeepCallbackExtension.GetLeftArray``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{``0}},System.Func{``0,``1},System.Int32)">
            <summary>
            获取数组
            </summary>
            <param name="response"></param>
            <param name="getValue">Delegate for data transformation
            数据转换委托</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.LocalKeepCallbackExtension.GetLeftArray``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalKeepCallback{``0},System.Func{``0,``1},System.Int32)">
            <summary>
            获取数组
            </summary>
            <param name="response"></param>
            <param name="getValue">Delegate for data transformation
            数据转换委托</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.KeepCallbackResponseExtension">
            <summary>
            保持回调输出扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.KeepCallbackResponseExtension.GetLeftArray``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{``0}},System.Int32)">
            <summary>
            获取数组
            </summary>
            <param name="response"></param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.KeepCallbackResponseExtension.GetLeftArray``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse{``0},System.Int32)">
            <summary>
            获取数组
            </summary>
            <param name="response"></param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.KeepCallbackResponseExtension.GetLeftArray``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{``0}},System.Func{``0,``1},System.Int32)">
            <summary>
            获取数组
            </summary>
            <param name="response"></param>
            <param name="getValue">Delegate for data transformation
            数据转换委托</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.KeepCallbackResponseExtension.GetLeftArray``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse{``0},System.Func{``0,``1},System.Int32)">
            <summary>
            获取数组
            </summary>
            <param name="response"></param>
            <param name="getValue">Delegate for data transformation
            数据转换委托</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.MethodKeepCallbackExtension">
            <summary>
            Method call callback wrapper extension operations
            方法调用回调包装扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.MethodKeepCallbackExtension.Callback``1(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{``0},``0,``0)">
            <summary>
            Data linked list callback
            数据链表回调
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodCallback"></param>
            <param name="head">Head node
            头节点</param>
            <param name="end">End node
            结束节点</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.ProcessGuardNodeClientNodeExtension">
            <summary>
            进程守护节点扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ProcessGuardNodeClientNodeExtension.RemoveCurrentProcess(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeClientNode)">
            <summary>
            删除当前进程守护
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.ProcessGuardNodeClientNodeExtension.GuardCurrentProcess(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IProcessGuardNodeClientNode,System.String[])">
            <summary>
            添加当前进程守护
            </summary>
            <param name="node"></param>
            <param name="arguments">Main 函数传参</param>
            <returns>Add failed and return false
            添加失败返回 false</returns>
        </member>
        <member name="T:AutoCSer.Extensions.ResponseResultExtension">
            <summary>
            缓存返回结果扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.ResponseResultExtension.ToBool(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{System.Int32}})">
            <summary>
            二进制位数据转 bool
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.SearchTreeDictionaryNodeLocalClientNodeExtension">
            <summary>
            二叉搜索树字典客户端节点扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.SearchTreeDictionaryNodeLocalClientNodeExtension.GetPage``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode{``0,``1},System.Int32,System.Byte)">
            <summary>
            获取分页数据集合
            </summary>
            <param name="node"></param>
            <param name="pageIndex">分页编号，从 1 开始</param>
            <param name="pageSize">分页记录数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.SearchTreeDictionaryNodeLocalClientNodeExtension.GetPageArray``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeLocalClientNode{``0,``1},System.Int32,System.Byte)">
            <summary>
            获取分页数据数组
            </summary>
            <param name="node"></param>
            <param name="pageIndex">分页编号，从 1 开始</param>
            <param name="pageSize">分页记录数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extensions.SearchTreeDictionaryNodeClientNodeExtension">
            <summary>
            二叉搜索树字典客户端节点扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extensions.SearchTreeDictionaryNodeClientNodeExtension.GetPage``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode{``0,``1},System.Int32,System.Byte)">
            <summary>
            获取分页数据集合
            </summary>
            <param name="node"></param>
            <param name="pageIndex">分页编号，从 1 开始</param>
            <param name="pageSize">分页记录数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extensions.SearchTreeDictionaryNodeClientNodeExtension.GetPageArray``2(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ISearchTreeDictionaryNodeClientNode{``0,``1},System.Int32,System.Byte)">
            <summary>
            获取分页数据数组
            </summary>
            <param name="node"></param>
            <param name="pageIndex">分页编号，从 1 开始</param>
            <param name="pageSize">分页记录数</param>
            <returns></returns>
        </member>
    </members>
</doc>
