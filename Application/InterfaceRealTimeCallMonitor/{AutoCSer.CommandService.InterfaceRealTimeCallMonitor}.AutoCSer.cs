//This file is automatically generated by a program. Please do not modify it by yourself.
//本文件由程序自动生成，请不要自行修改
using System;
using System.Numerics;
using AutoCSer;

#if NoAutoCSer
#else
#pragma warning disable
namespace AutoCSer.CommandService
{
        /// <summary>
        /// 接口实时调用监视服务接口 client interface
        /// </summary>
        public partial interface IInterfaceRealTimeCallMonitorServiceClientController
        {
            /// <summary>
            /// 接口监视服务在线检查
            /// </summary>
            AutoCSer.Net.EnumeratorCommand Check();
            /// <summary>
            /// 调用完成
            /// </summary>
            /// <param name="callIdentity">调用标识</param>
            /// <param name="isException">接口是否执行异常</param>
            AutoCSer.Net.SendOnlyCommand Completed(long callIdentity, bool isException);
            /// <summary>
            /// 获取未完成调用数量
            /// </summary>
            /// <returns></returns>
            AutoCSer.Net.ReturnCommand<int> GetCount();
            /// <summary>
            /// 获取异常调用数据
            /// </summary>
            /// <returns>实时调用时间戳信息回调</returns>
            AutoCSer.Net.EnumeratorCommand<AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp> GetException();
            /// <summary>
            /// 获取超时调用数据
            /// </summary>
            /// <returns>实时调用时间戳信息回调</returns>
            AutoCSer.Net.EnumeratorCommand<AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp> GetTimeout();
            /// <summary>
            /// 获取指定数量的超时调用
            /// </summary>
            /// <param name="count">Get the quantity of data 
///            获取数据数量</param>
            /// <returns>超时调用回调</returns>
            AutoCSer.Net.EnumeratorCommand<AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp> GetTimeoutCalls(int count);
            /// <summary>
            /// 获取超时调用数量
            /// </summary>
            /// <returns>超时调用数量</returns>
            AutoCSer.Net.ReturnCommand<int> GetTimeoutCount();
            /// <summary>
            /// 设置自定义调用步骤
            /// </summary>
            /// <param name="callIdentity">调用标识</param>
            /// <param name="step">自定义调用步骤</param>
            AutoCSer.Net.SendOnlyCommand SetStep(long callIdentity, int step);
            /// <summary>
            /// 新增一个实时调用信息
            /// </summary>
            /// <param name="callIdentity">调用标识</param>
            /// <param name="callType">Call interface type 
///            调用接口类型</param>
            /// <param name="callName">The name of the interface method to be called 
///            调用接口方法名称</param>
            /// <param name="timeoutMilliseconds">超时毫秒数</param>
            /// <param name="type">调用类型</param>
            AutoCSer.Net.SendOnlyCommand Start(long callIdentity, string callType, string callName, int timeoutMilliseconds, ushort type);
        }
}namespace AutoCSer.CommandService
{
        /// <summary>
        /// 接口实时调用监视服务接口
        /// </summary>
        [AutoCSer.Net.CommandServer.ServerControllerInterface(typeof(IInterfaceRealTimeCallMonitorServiceMethodEnum))]
        public partial interface IInterfaceRealTimeCallMonitorService { }
        /// <summary>
        /// 接口实时调用监视服务接口 (The method sequence number maps the enumeration type)
        /// </summary>
        public enum IInterfaceRealTimeCallMonitorServiceMethodEnum
        {
            /// <summary>
            /// [0] 接口监视服务在线检查
            /// AutoCSer.Net.CommandServerSocket socket 
            /// AutoCSer.Net.CommandServerCallQueue queue 
            /// AutoCSer.Net.CommandServerKeepCallback callback 在线检查回调
            /// </summary>
            Check = 0,
            /// <summary>
            /// [1] 调用完成
            /// AutoCSer.Net.CommandServerSocket socket 
            /// AutoCSer.Net.CommandServerCallQueue queue 
            /// long callIdentity 调用标识
            /// bool isException 接口是否执行异常
            /// </summary>
            Completed = 1,
            /// <summary>
            /// [2] 获取未完成调用数量
            /// 返回值 int 
            /// </summary>
            GetCount = 2,
            /// <summary>
            /// [3] 获取异常调用数据
            /// AutoCSer.Net.CommandServerSocket socket 
            /// AutoCSer.Net.CommandServerCallQueue queue 
            /// AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp} callback 实时调用时间戳信息回调
            /// 返回值 AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp 
            /// </summary>
            GetException = 3,
            /// <summary>
            /// [4] 获取超时调用数据
            /// AutoCSer.Net.CommandServerSocket socket 
            /// AutoCSer.Net.CommandServerCallQueue queue 
            /// AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp} callback 实时调用时间戳信息回调
            /// 返回值 AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp 
            /// </summary>
            GetTimeout = 4,
            /// <summary>
            /// [5] 获取指定数量的超时调用
            /// AutoCSer.Net.CommandServerSocket socket 
            /// AutoCSer.Net.CommandServerCallQueue queue 
            /// int count Get the quantity of data 
///            获取数据数量
            /// AutoCSer.Net.CommandServerKeepCallback{AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp} callback 超时调用回调
            /// 返回值 AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallTimestamp 
            /// </summary>
            GetTimeoutCalls = 5,
            /// <summary>
            /// [6] 获取超时调用数量
            /// AutoCSer.Net.CommandServerSocket socket 
            /// AutoCSer.Net.CommandServerCallQueue queue 
            /// 返回值 int 超时调用数量
            /// </summary>
            GetTimeoutCount = 6,
            /// <summary>
            /// [7] 设置自定义调用步骤
            /// AutoCSer.Net.CommandServerSocket socket 
            /// AutoCSer.Net.CommandServerCallQueue queue 
            /// long callIdentity 调用标识
            /// int step 自定义调用步骤
            /// </summary>
            SetStep = 7,
            /// <summary>
            /// [8] 新增一个实时调用信息
            /// AutoCSer.Net.CommandServerSocket socket 
            /// AutoCSer.Net.CommandServerCallQueue queue 
            /// long callIdentity 调用标识
            /// string callType Call interface type 
///            调用接口类型
            /// string callName The name of the interface method to be called 
///            调用接口方法名称
            /// int timeoutMilliseconds 超时毫秒数
            /// ushort type 调用类型
            /// </summary>
            Start = 8,
        }
}namespace AutoCSer.CommandService.InterfaceRealTimeCallMonitor
{
        /// <summary>
        /// The interface of the statistical information node for exception calls 
///            异常调用统计信息节点接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.InterfaceRealTimeCallMonitor.IExceptionStatisticsNode))]
        public partial interface IExceptionStatisticsNodeClientNode
        {
            /// <summary>
            /// Add exception call time 
///            添加异常调用时间
            /// </summary>
            /// <param name="callType">Call interface type 
///            调用接口类型</param>
            /// <param name="callName">The name of the interface method to be called 
///            调用接口方法名称</param>
            /// <param name="callTime">Exception call time 
///            异常调用时间</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter Append(string callType, string callName, System.DateTime callTime);
            /// <summary>
            /// Get the total number of exception calls 
///            获取异常调用总次数
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<long> GetCount();
            /// <summary>
            /// Get the statistics of the specified number of call exceptions 
///            获取指定数量调用异常统计信息
            /// </summary>
            /// <param name="count">The number of get the statistical information of call exceptions 
///            获取调用异常统计信息数量</param>
            /// <returns></returns>
            System.Threading.Tasks.Task<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse<AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallExceptionStatistics>> GetManyStatistics(int count);
            /// <summary>
            /// Get the statistical information of call exceptions 
///            获取调用异常统计信息
            /// </summary>
            /// <param name="callType">Call interface type 
///            调用接口类型</param>
            /// <param name="callName">The name of the interface method to be called 
///            调用接口方法名称</param>
            /// <returns>Exception statistical information, failure returns null 
///            异常统计信息，失败返回 null</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.InterfaceRealTimeCallMonitor.ExceptionStatistics> GetStatistics(string callType, string callName);
            /// <summary>
            /// Get the quantity of exception statistical information 
///            获取异常统计信息数量
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<int> GetStatisticsCount();
            /// <summary>
            /// Remove exception statistics 
///            移除异常统计信息
            /// </summary>
            /// <param name="callType">Call interface type 
///            调用接口类型</param>
            /// <param name="callName">The name of the interface method to be called 
///            调用接口方法名称</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter Remove(string callType, string callName);
            /// <summary>
            /// Remove the current node 
///            移除当前节点
            /// </summary>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter RemoveNode();
        }
        /// <summary>
        /// Get the direct return value API encapsulation (AutoCSer.CommandService.InterfaceRealTimeCallMonitor.IExceptionStatisticsNode)
        /// </summary>
        public sealed partial class IExceptionStatisticsNodeReturnValueNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientReturnValueNode<IExceptionStatisticsNodeClientNode>
        {
            /// <summary>
            /// Get the direct return value API encapsulation (AutoCSer.CommandService.InterfaceRealTimeCallMonitor.IExceptionStatisticsNode)
            /// </summary>
            /// <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            /// <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public IExceptionStatisticsNodeReturnValueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache<IExceptionStatisticsNodeClientNode> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }
            /// <summary>
            /// Add exception call time 
///            添加异常调用时间
            /// </summary>
            /// <param name="callType">Call interface type 
///            调用接口类型</param>
            /// <param name="callName">The name of the interface method to be called 
///            调用接口方法名称</param>
            /// <param name="callTime">Exception call time 
///            异常调用时间</param>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue Append(string callType, string callName, System.DateTime callTime)
            {
                return base.node.Append(callType, callName, callTime).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Get the total number of exception calls 
///            获取异常调用总次数
            /// </summary>
            /// <returns></returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<long> GetCount()
            {
                return base.node.GetCount().GetValue(isIgnoreError);
            }
            /// <summary>
            /// Get the statistics of the specified number of call exceptions 
///            获取指定数量调用异常统计信息
            /// </summary>
            /// <param name="count">The number of get the statistical information of call exceptions 
///            获取调用异常统计信息数量</param>
            /// <returns></returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public System.Threading.Tasks.Task<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.KeepCallbackResponse<AutoCSer.CommandService.InterfaceRealTimeCallMonitor.CallExceptionStatistics>> GetManyStatistics(int count)
            {
                return base.node.GetManyStatistics(count);
            }
            /// <summary>
            /// Get the statistical information of call exceptions 
///            获取调用异常统计信息
            /// </summary>
            /// <param name="callType">Call interface type 
///            调用接口类型</param>
            /// <param name="callName">The name of the interface method to be called 
///            调用接口方法名称</param>
            /// <returns>Exception statistical information, failure returns null 
///            异常统计信息，失败返回 null</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<AutoCSer.CommandService.InterfaceRealTimeCallMonitor.ExceptionStatistics> GetStatistics(string callType, string callName)
            {
                return base.node.GetStatistics(callType, callName).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Get the quantity of exception statistical information 
///            获取异常统计信息数量
            /// </summary>
            /// <returns></returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<int> GetStatisticsCount()
            {
                return base.node.GetStatisticsCount().GetValue(isIgnoreError);
            }
            /// <summary>
            /// Remove exception statistics 
///            移除异常统计信息
            /// </summary>
            /// <param name="callType">Call interface type 
///            调用接口类型</param>
            /// <param name="callName">The name of the interface method to be called 
///            调用接口方法名称</param>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue Remove(string callType, string callName)
            {
                return base.node.Remove(callType, callName).GetValue(isIgnoreError);
            }
            /// <summary>
            /// Remove the current node 
///            移除当前节点
            /// </summary>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue RemoveNode()
            {
                return base.node.RemoveNode().GetValue(isIgnoreError);
            }
        }
}namespace AutoCSer.CommandService.InterfaceRealTimeCallMonitor
{
        /// <summary>
        /// 创建异常调用统计信息节点的自定义基础服务接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.InterfaceRealTimeCallMonitor.IExceptionStatisticsServiceNode))]
        public partial interface IExceptionStatisticsServiceNodeClientNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode
        {
            /// <summary>
            /// 创建异常调用统计信息节点 IExceptionStatisticsNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="removeTime">节点自动移除时间</param>
            /// <param name="callTimeCount">保存调用时间数量</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateExceptionStatisticsNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, System.DateTime removeTime, int callTimeCount);
        }
        /// <summary>
        /// Get the direct return value API encapsulation (AutoCSer.CommandService.InterfaceRealTimeCallMonitor.IExceptionStatisticsServiceNode)
        /// </summary>
        public sealed partial class IExceptionStatisticsServiceNodeReturnValueNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientReturnValueNode<IExceptionStatisticsServiceNodeClientNode>
        {
            /// <summary>
            /// Get the direct return value API encapsulation (AutoCSer.CommandService.InterfaceRealTimeCallMonitor.IExceptionStatisticsServiceNode)
            /// </summary>
            /// <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            /// <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            /// <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
            public IExceptionStatisticsServiceNodeReturnValueNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache<IExceptionStatisticsServiceNodeClientNode> node, bool isIgnoreError = false, bool isSynchronousCallback = false) : base(node, isIgnoreError, isSynchronousCallback) { }
            /// <summary>
            /// 创建异常调用统计信息节点 IExceptionStatisticsNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="removeTime">节点自动移除时间</param>
            /// <param name="callTimeCount">保存调用时间数量</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseReturnValue<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateExceptionStatisticsNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, System.DateTime removeTime, int callTimeCount)
            {
                return base.node.CreateExceptionStatisticsNode(index, key, nodeInfo, removeTime, callTimeCount).GetValue(isIgnoreError);
            }
        }
}namespace AutoCSer.CommandService.InterfaceRealTimeCallMonitor
{
        /// <summary>
        /// The interface of the statistical information node for exception calls 
///            异常调用统计信息节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IExceptionStatisticsNodeMethodEnum))]
        public partial interface IExceptionStatisticsNode { }
        /// <summary>
        /// The interface of the statistical information node for exception calls 
///            异常调用统计信息节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IExceptionStatisticsNodeMethodEnum
        {
            /// <summary>
            /// [0] Add exception call time 
///            添加异常调用时间
            /// string callType Call interface type 
///            调用接口类型
            /// string callName The name of the interface method to be called 
///            调用接口方法名称
            /// System.DateTime callTime Exception call time 
///            异常调用时间
            /// </summary>
            Append = 0,
            /// <summary>
            /// [1] Get the total number of exception calls 
///            获取异常调用总次数
            /// 返回值 long 
            /// </summary>
            GetCount = 1,
            /// <summary>
            /// [2] Get the statistics of the specified number of call exceptions 
///            获取指定数量调用异常统计信息
            /// int count The number of get the statistical information of call exceptions 
///            获取调用异常统计信息数量
            /// </summary>
            GetManyStatistics = 2,
            /// <summary>
            /// [3] Get the statistical information of call exceptions 
///            获取调用异常统计信息
            /// string callType Call interface type 
///            调用接口类型
            /// string callName The name of the interface method to be called 
///            调用接口方法名称
            /// 返回值 AutoCSer.CommandService.InterfaceRealTimeCallMonitor.ExceptionStatistics Exception statistical information, failure returns null 
///            异常统计信息，失败返回 null
            /// </summary>
            GetStatistics = 3,
            /// <summary>
            /// [4] Get the quantity of exception statistical information 
///            获取异常统计信息数量
            /// 返回值 int 
            /// </summary>
            GetStatisticsCount = 4,
            /// <summary>
            /// [5] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.BinarySerializeKeyValue{long,AutoCSer.CommandService.InterfaceRealTimeCallMonitor.ExceptionStatistics} value data
            /// </summary>
            SnapshotSet = 5,
            /// <summary>
            /// [6] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.LeftArray{string} stringArray String cache 
///            字符串缓存
            /// </summary>
            SnapshotSetStringArray = 6,
            /// <summary>
            /// [7] Remove exception statistics 
///            移除异常统计信息
            /// string callType Call interface type 
///            调用接口类型
            /// string callName The name of the interface method to be called 
///            调用接口方法名称
            /// </summary>
            Remove = 7,
            /// <summary>
            /// [8] Remove the current node 
///            移除当前节点
            /// </summary>
            RemoveNode = 8,
        }
}namespace AutoCSer.CommandService.InterfaceRealTimeCallMonitor
{
        /// <summary>
        /// 创建异常调用统计信息节点的自定义基础服务接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IExceptionStatisticsServiceNodeMethodEnum))]
        public partial interface IExceptionStatisticsServiceNode { }
        /// <summary>
        /// 创建异常调用统计信息节点的自定义基础服务接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IExceptionStatisticsServiceNodeMethodEnum
        {
            /// <summary>
            /// [0] Create a array node IArrayNode{T} 
///            创建数组节点 IArrayNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int length Array length
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateArrayNode = 0,
            /// <summary>
            /// [1] Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// uint capacity The number of binary bits 
///            二进制位数量
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateBitmapNode = 1,
            /// <summary>
            /// [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
///            创建字典节点 IByteArrayDictionaryNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayDictionaryNode = 2,
            /// <summary>
            /// [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
///            创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayFragmentDictionaryNode = 3,
            /// <summary>
            /// [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
///            创建队列节点（先进先出） IByteArrayQueueNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayQueueNode = 4,
            /// <summary>
            /// [5] Create a stack node IByteArrayStackNode (Last in, first out) 
///            创建栈节点（后进先出） IByteArrayStackNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayStackNode = 5,
            /// <summary>
            /// [6] Create a dictionary node IDictionaryNode{KT,VT} 
///            创建字典节点 IDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDictionaryNode = 6,
            /// <summary>
            /// [7] Create distributed lock nodes IDistributedLockNode{KT} 
///            创建分布式锁节点 IDistributedLockNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDistributedLockNode = 7,
            /// <summary>
            /// [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
///            创建字典节点 IFragmentDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateFragmentDictionaryNode = 8,
            /// <summary>
            /// [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
///            创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateFragmentHashSetNode = 9,
            /// <summary>
            /// [10] Create a dictionary node IHashBytesDictionaryNode 
///            创建字典节点 IHashBytesDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashBytesDictionaryNode = 10,
            /// <summary>
            /// [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
///            创建字典节点 IHashBytesFragmentDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashBytesFragmentDictionaryNode = 11,
            /// <summary>
            /// [12] Create a hash table node IHashSetNode{KT} 
///            创建哈希表节点 IHashSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashSetNode = 12,
            /// <summary>
            /// [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// long identity Initial Allocation identity 
///            起始分配 ID
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateIdentityGeneratorNode = 13,
            /// <summary>
            /// [14] Create a array node ILeftArrayNode{T} 
///            创建数组节点 ILeftArrayNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateLeftArrayNode = 14,
            /// <summary>
            /// [15] Create a message processing node IMessageNode{T} 
///            创建消息处理节点 IMessageNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType messageType Message data type 
///            消息数据类型
            /// int arraySize The size of the message array being processed 
///            正在处理的消息数组大小
            /// int timeoutSeconds The number of seconds of message processing timeout 
///            消息处理超时秒数
            /// int checkTimeoutSeconds Check the interval in seconds for message timeouts 
///            消息超时检查间隔秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateMessageNode = 15,
            /// <summary>
            /// [16] Create a queue node IQueueNode{T} (First in, first Out) 
///            创建队列节点（先进先出） IQueueNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateQueueNode = 16,
            /// <summary>
            /// [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
///            创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSearchTreeDictionaryNode = 17,
            /// <summary>
            /// [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
///            创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSearchTreeSetNode = 18,
            /// <summary>
            /// [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
///            创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int arraySize The size of the message array being processed 
///            正在处理的消息数组大小
            /// int timeoutSeconds The number of seconds of message processing timeout 
///            消息处理超时秒数
            /// int checkTimeoutSeconds Check the interval in seconds for message timeouts 
///            消息超时检查间隔秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateServerByteArrayMessageNode = 19,
            /// <summary>
            /// [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
///            创建排序字典节点 ISortedDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedDictionaryNode = 20,
            /// <summary>
            /// [21] Create a sorting list node ISortedListNode{KT,VT} 
///            创建排序列表节点 ISortedListNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedListNode = 21,
            /// <summary>
            /// [22] Create sorted collection node ISortedSetNode{KT} 
///            创建排序集合节点 ISortedSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedSetNode = 22,
            /// <summary>
            /// [23] Create a stack node IStackNode{T} (Last in, first out) 
///            创建栈节点（后进先出） IStackNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateStackNode = 23,
            /// <summary>
            /// [24] Delete the node 
///            删除节点
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// 返回值 bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNode = 24,
            /// <summary>
            /// [25] Create a server registration node IServerRegistryNode 
///            创建服务注册节点 IServerRegistryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int loadTimeoutSeconds Cold start session timeout seconds 
///            冷启动会话超时秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateServerRegistryNode = 25,
            /// <summary>
            /// [26] Create a service process daemon node IProcessGuardNode 
///            创建服务进程守护节点 IProcessGuardNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateProcessGuardNode = 26,
            /// <summary>
            /// [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapClientFilterNode = 27,
            /// <summary>
            /// [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapFilterNode = 28,
            /// <summary>
            /// [29] Delete the node 
///            删除节点
            /// string key Node global keyword 
///            节点全局关键字
            /// 返回值 bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNodeByKey = 29,
            /// <summary>
            /// [30] Create an archive node only IOnlyPersistenceNode{T} 
///            创建仅存档节点 IOnlyPersistenceNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType valueType Archive data type 
///            存档数据类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateOnlyPersistenceNode = 30,
            /// <summary>
            /// [31] Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
///            创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateUniformProbabilityClientStatisticsNode = 31,
            /// <summary>
            /// [32] Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
///            创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
///            索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateUniformProbabilityTotalStatisticsNode = 32,
            /// <summary>
            /// [256] 创建异常调用统计信息节点 IExceptionStatisticsNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// System.DateTime removeTime 节点自动移除时间
            /// int callTimeCount 保存调用时间数量
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateExceptionStatisticsNode = 256,
        }
}
#endif