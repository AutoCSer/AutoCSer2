//This file is automatically generated by a program. Please do not modify it by yourself.
//本文件由程序自动生成，请不要自行修改
using System;
using System.Numerics;
using AutoCSer;

#if NoAutoCSer
#else
#pragma warning disable
namespace AutoCSer.CommandService.Search.DiskBlockIndex
{
        /// <summary>
        /// Node interface with reusable hash indexes with removal tags 
///            带移除标记的可重用哈希索引节点接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode<,>))]
        public partial interface IRemoveMarkHashIndexNodeClientNode<KT,VT>
        {
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Append(KT key, VT value);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter AppendArray(KT[] keys, VT value);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<VT>> GetBlockIndexData(KT key);
            /// <summary>
            /// Gets the collection of updated keyword 
///            获取更新关键字集合
            /// </summary>
            /// <returns></returns>
            AutoCSer.Net.KeepCallbackCommand GetChangeKeys(System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult<KT>,AutoCSer.Net.KeepCallbackCommand> callback);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Remove(KT key, VT value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter RemoveArray(KT[] keys, VT value);
            /// <summary>
            /// The operation of writing the disk block index information has been completed 
///            磁盘块索引信息写入完成操作
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="blockIndex">Disk block index information 
///            磁盘块索引信息</param>
            /// <param name="valueCount">The number of newly added data 
///            新增数据数量</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter WriteCompleted(KT key, AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex, int valueCount);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter AppendLeftArray(AutoCSer.LeftArray<KT> keys, VT value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter RemoveLeftArray(AutoCSer.LeftArray<KT> keys, VT value);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<VT>[]> GetBlockIndexDataArray(KT[] keys);
        }
}namespace AutoCSer.CommandService.Search.DiskBlockIndex
{
        /// <summary>
        /// Node interface with reusable hash indexes with removal tags 
///            带移除标记的可重用哈希索引节点接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode<>))]
        public partial interface IRemoveMarkHashKeyIndexNodeClientNode<T>
        {
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Append(T key, uint value);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter AppendArray(T[] keys, uint value);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<uint>> GetBlockIndexData(T key);
            /// <summary>
            /// Gets the collection of updated keyword 
///            获取更新关键字集合
            /// </summary>
            /// <returns></returns>
            AutoCSer.Net.KeepCallbackCommand GetChangeKeys(System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult<T>,AutoCSer.Net.KeepCallbackCommand> callback);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> Remove(T key, uint value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter RemoveArray(T[] keys, uint value);
            /// <summary>
            /// The operation of writing the disk block index information has been completed 
///            磁盘块索引信息写入完成操作
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="blockIndex">Disk block index information 
///            磁盘块索引信息</param>
            /// <param name="valueCount">The number of newly added data 
///            新增数据数量</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter WriteCompleted(T key, AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex, int valueCount);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter AppendLeftArray(AutoCSer.LeftArray<T> keys, uint value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter RemoveLeftArray(AutoCSer.LeftArray<T> keys, uint value);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<uint>[]> GetBlockIndexDataArray(T[] keys);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<int>> GetIntBlockIndexData(T key);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<int>[]> GetIntBlockIndexDataArray(T[] keys);
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// Non-index condition query data node interface 
///            非索引条件查询数据节点接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.IConditionDataNode<,>))]
        public partial interface IConditionDataNodeClientNode<KT,VT>
        {
            /// <summary>
            /// Create non-indexed conditional query data 
///            创建非索引条件查询数据
            /// </summary>
            /// <param name="key">Data keyword</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum> Create(KT key);
            /// <summary>
            /// Update non-indexed condition query data 
///            更新非索引条件查询数据
            /// </summary>
            /// <param name="key">Data keyword</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum> Update(KT key);
            /// <summary>
            /// Delete non-indexed condition query data 
///            删除非索引条件查询数据
            /// </summary>
            /// <param name="key">Data keyword</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum> Delete(KT key);
            /// <summary>
            /// Create non-indexed conditional query data 
///            创建非索引条件查询数据
            /// </summary>
            /// <param name="value">Non-indexed condition query data 
///            非索引条件查询数据</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResultAwaiter LoadCreate(VT value);
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// 创建哈希索引节点的自定义基础服务接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.IDiskBlockIndexServiceNode))]
        public partial interface IDiskBlockIndexServiceNodeClientNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode
        {
            /// <summary>
            /// 创建带移除标记的可重用哈希索引节点 IRemoveMarkHashIndexNode{KT,VT}
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="keyType">索引关键字类型</param>
            /// <param name="valueType">数据关键字类型</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateRemoveMarkHashIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, AutoCSer.Reflection.RemoteType keyType, AutoCSer.Reflection.RemoteType valueType);
            /// <summary>
            /// 创建带移除标记的可重用哈希索引节点 IRemoveMarkHashKeyIndexNode{T}
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="keyType">索引关键字类型</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateRemoveMarkHashKeyIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, AutoCSer.Reflection.RemoteType keyType);
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// 创建字符串 Trie 图节点的自定义基础服务接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.IStaticTrieGraphServiceNode))]
        public partial interface IStaticTrieGraphServiceNodeClientNode : AutoCSer.CommandService.StreamPersistenceMemoryDatabase.IServiceNodeClientNode
        {
            /// <summary>
            /// 创建字符串 Trie 图节点 IStaticTrieGraphNode
            /// </summary>
            /// <param name="index">Node index information 
///            节点索引信息</param>
            /// <param name="key">Node global keyword 
///            节点全局关键字</param>
            /// <param name="nodeInfo">Server-side node information 
///            服务端节点信息</param>
            /// <param name="maxTrieWordSize">Trie 词语最大文字长度</param>
            /// <param name="maxWordSize">未知词语最大文字长度</param>
            /// <param name="wordSegmentFlags">分词选项</param>
            /// <param name="replaceChars">替换文字集合</param>
            /// <returns>Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex> CreateStaticTrieGraphNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index, string key, AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo, byte maxTrieWordSize, byte maxWordSize, AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags wordSegmentFlags, string replaceChars);
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// Word segmentation result disk block index information node interface 
///            分词结果磁盘块索引信息节点接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode<>))]
        public partial interface IWordIdentityBlockIndexNodeClientNode<T>
        {
            /// <summary>
            /// Create the disk block index information of the word segmentation result 
///            创建分词结果磁盘块索引信息
            /// </summary>
            /// <param name="key">The keyword of the word segmentation data 
///            分词数据关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum> Create(T key);
            /// <summary>
            /// Delete the disk block index information of the word segmentation result 
///            删除分词结果磁盘块索引信息
            /// </summary>
            /// <param name="key">The keyword of the word segmentation data 
///            分词数据关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum> Delete(T key);
            /// <summary>
            /// Update the disk block index information of the word segmentation result 
///            更新分词结果磁盘块索引信息
            /// </summary>
            /// <param name="key">The keyword of the word segmentation data 
///            分词数据关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum> Update(T key);
            /// <summary>
            /// Create the disk block index information of the word segmentation result 
///            创建分词结果磁盘块索引信息
            /// </summary>
            /// <param name="key">The keyword of the word segmentation data 
///            分词数据关键字</param>
            /// <param name="text">Word segmentation text data 
///            分词文本数据</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum> LoadCreate(T key, string text);
        }
}namespace AutoCSer.CommandService.Search.StaticTrieGraph
{
        /// <summary>
        /// String trie graph node interface 
///            字符串 Trie 图节点接口 client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode))]
        public partial interface IStaticTrieGraphNodeClientNode
        {
            /// <summary>
            /// Add trie graph word 
///            添加 Trie 图词语
            /// </summary>
            /// <param name="word"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum> AppendWord(string word);
            /// <summary>
            /// Create the trie graph 
///            创建 Trie 图
            /// </summary>
            /// <returns>The number of words in the trie graph 
///            Trie 图词语数量</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<int> BuildGraph();
            /// <summary>
            /// Adds text and returns a collection of word numbers 
///            添加文本并返回词语编号集合
            /// </summary>
            /// <param name="text"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<int[]> GetAddTextIdentity(string text);
            /// <summary>
            /// Get the collection of query word numbers (ignore unmatched words) 
///            获取查询词语编号集合（忽略未匹配词语）
            /// </summary>
            /// <param name="text">The text content of the search 
///            搜索文本内容</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<int[]> GetWordSegmentIdentity(string text);
            /// <summary>
            /// Get the query word segmentation result 
///            获取查询分词结果
            /// </summary>
            /// <param name="text">The text content of the search 
///            搜索文本内容</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult[]> GetWordSegmentResult(string text);
            /// <summary>
            /// Has the trie graph been created 
///            是否已经创建 Trie 图
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<bool> IsGraph();
            /// <summary>
            /// Get the number of words in the trie graph 
///            获取 Trie 图词语数量
            /// </summary>
            /// <returns>The number of words in the trie graph 
///            Trie 图词语数量</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseParameterAwaiter<int> GetWordCount();
        }
}namespace AutoCSer.CommandService.Search.DiskBlockIndex
{
        /// <summary>
        /// Node interface with reusable hash indexes with removal tags 
///            带移除标记的可重用哈希索引节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode<,>))]
        public partial interface IRemoveMarkHashIndexNodeLocalClientNode<KT,VT>
        {
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Append(KT key, VT value);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> AppendArray(KT[] keys, VT value);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<VT>>> GetBlockIndexData(KT key);
            /// <summary>
            /// Gets the collection of updated keyword 
///            获取更新关键字集合
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<System.IDisposable> GetChangeKeys(System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<KT>> __callback__);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Remove(KT key, VT value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> RemoveArray(KT[] keys, VT value);
            /// <summary>
            /// The operation of writing the disk block index information has been completed 
///            磁盘块索引信息写入完成操作
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="blockIndex">Disk block index information 
///            磁盘块索引信息</param>
            /// <param name="valueCount">The number of newly added data 
///            新增数据数量</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> WriteCompleted(KT key, AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex, int valueCount);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> AppendLeftArray(AutoCSer.LeftArray<KT> keys, VT value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> RemoveLeftArray(AutoCSer.LeftArray<KT> keys, VT value);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<VT>[]>> GetBlockIndexDataArray(KT[] keys);
        }
}namespace AutoCSer.CommandService.Search.DiskBlockIndex
{
        /// <summary>
        /// Node interface with reusable hash indexes with removal tags 
///            带移除标记的可重用哈希索引节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode<>))]
        public partial interface IRemoveMarkHashKeyIndexNodeLocalClientNode<T>
        {
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Append(T key, uint value);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> AppendArray(T[] keys, uint value);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<uint>>> GetBlockIndexData(T key);
            /// <summary>
            /// Gets the collection of updated keyword 
///            获取更新关键字集合
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<System.IDisposable> GetChangeKeys(System.Action<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<T>> __callback__);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Remove(T key, uint value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> RemoveArray(T[] keys, uint value);
            /// <summary>
            /// The operation of writing the disk block index information has been completed 
///            磁盘块索引信息写入完成操作
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="blockIndex">Disk block index information 
///            磁盘块索引信息</param>
            /// <param name="valueCount">The number of newly added data 
///            新增数据数量</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> WriteCompleted(T key, AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex, int valueCount);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> AppendLeftArray(AutoCSer.LeftArray<T> keys, uint value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> RemoveLeftArray(AutoCSer.LeftArray<T> keys, uint value);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<uint>[]>> GetBlockIndexDataArray(T[] keys);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<int>>> GetIntBlockIndexData(T key);
            /// <summary>
            /// Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData<int>[]>> GetIntBlockIndexDataArray(T[] keys);
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// Non-index condition query data node interface 
///            非索引条件查询数据节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.IConditionDataNode<,>))]
        public partial interface IConditionDataNodeLocalClientNode<KT,VT>
        {
            /// <summary>
            /// Create non-indexed conditional query data 
///            创建非索引条件查询数据
            /// </summary>
            /// <param name="key">Data keyword</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum>> Create(KT key);
            /// <summary>
            /// Update non-indexed condition query data 
///            更新非索引条件查询数据
            /// </summary>
            /// <param name="key">Data keyword</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum>> Update(KT key);
            /// <summary>
            /// Delete non-indexed condition query data 
///            删除非索引条件查询数据
            /// </summary>
            /// <param name="key">Data keyword</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum>> Delete(KT key);
            /// <summary>
            /// Create non-indexed conditional query data 
///            创建非索引条件查询数据
            /// </summary>
            /// <param name="value">Non-indexed condition query data 
///            非索引条件查询数据</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> LoadCreate(VT value);
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// Word segmentation result disk block index information node interface 
///            分词结果磁盘块索引信息节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode<>))]
        public partial interface IWordIdentityBlockIndexNodeLocalClientNode<T>
        {
            /// <summary>
            /// Create the disk block index information of the word segmentation result 
///            创建分词结果磁盘块索引信息
            /// </summary>
            /// <param name="key">The keyword of the word segmentation data 
///            分词数据关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum>> Create(T key);
            /// <summary>
            /// Delete the disk block index information of the word segmentation result 
///            删除分词结果磁盘块索引信息
            /// </summary>
            /// <param name="key">The keyword of the word segmentation data 
///            分词数据关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum>> Delete(T key);
            /// <summary>
            /// Update the disk block index information of the word segmentation result 
///            更新分词结果磁盘块索引信息
            /// </summary>
            /// <param name="key">The keyword of the word segmentation data 
///            分词数据关键字</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum>> Update(T key);
            /// <summary>
            /// Create the disk block index information of the word segmentation result 
///            创建分词结果磁盘块索引信息
            /// </summary>
            /// <param name="key">The keyword of the word segmentation data 
///            分词数据关键字</param>
            /// <param name="text">Word segmentation text data 
///            分词文本数据</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum>> LoadCreate(T key, string text);
        }
}namespace AutoCSer.CommandService.Search.MemoryIndex
{
        /// <summary>
        /// Hash index node interface 
///            哈希索引节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode<>))]
        public partial interface IHashCodeKeyIndexNodeLocalClientNode<T>
        {
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Append(T key, uint value);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> AppendArray(T[] keys, uint value);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> AppendLeftArray(AutoCSer.LeftArray<T> keys, uint value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Remove(T key, uint value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> RemoveArray(T[] keys, uint value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> RemoveLeftArray(AutoCSer.LeftArray<T> keys, uint value);
        }
}namespace AutoCSer.CommandService.Search.MemoryIndex
{
        /// <summary>
        /// Hash index node interface 
///            哈希索引节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode<,>))]
        public partial interface IHashIndexNodeLocalClientNode<KT,VT>
        {
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Append(KT key, VT value);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> AppendArray(KT[] keys, VT value);
            /// <summary>
            /// Add matching data keyword 
///            添加匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> AppendLeftArray(AutoCSer.LeftArray<KT> keys, VT value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="key">Index keyword 
///            索引关键字</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            /// <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> Remove(KT key, VT value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> RemoveArray(KT[] keys, VT value);
            /// <summary>
            /// Delete the matching data keyword 
///            删除匹配数据关键字
            /// </summary>
            /// <param name="keys">Index keyword collection 
///            索引关键字集合</param>
            /// <param name="value">Matching data keyword 
///            匹配数据关键字</param>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult> RemoveLeftArray(AutoCSer.LeftArray<KT> keys, VT value);
        }
}namespace AutoCSer.CommandService.Search.StaticTrieGraph
{
        /// <summary>
        /// String trie graph node interface 
///            字符串 Trie 图节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode))]
        public partial interface IStaticTrieGraphNodeLocalClientNode
        {
            /// <summary>
            /// Add trie graph word 
///            添加 Trie 图词语
            /// </summary>
            /// <param name="word"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum>> AppendWord(string word);
            /// <summary>
            /// Create the trie graph 
///            创建 Trie 图
            /// </summary>
            /// <returns>The number of words in the trie graph 
///            Trie 图词语数量</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> BuildGraph();
            /// <summary>
            /// Adds text and returns a collection of word numbers 
///            添加文本并返回词语编号集合
            /// </summary>
            /// <param name="text"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int[]>> GetAddTextIdentity(string text);
            /// <summary>
            /// Get the collection of query word numbers (ignore unmatched words) 
///            获取查询词语编号集合（忽略未匹配词语）
            /// </summary>
            /// <param name="text">The text content of the search 
///            搜索文本内容</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int[]>> GetWordSegmentIdentity(string text);
            /// <summary>
            /// Get the query word segmentation result 
///            获取查询分词结果
            /// </summary>
            /// <param name="text">The text content of the search 
///            搜索文本内容</param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult[]>> GetWordSegmentResult(string text);
            /// <summary>
            /// Has the trie graph been created 
///            是否已经创建 Trie 图
            /// </summary>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<bool>> IsGraph();
            /// <summary>
            /// Get the number of words in the trie graph 
///            获取 Trie 图词语数量
            /// </summary>
            /// <returns>The number of words in the trie graph 
///            Trie 图词语数量</returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<int>> GetWordCount();
        }
}namespace AutoCSer.CommandService.Search.WordIdentityBlockIndex
{
        /// <summary>
        /// Word segmentation result disk block index information node interface 
///            分词结果磁盘块索引信息节点接口 local client node interface
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ClientNode(typeof(AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNode<>))]
        public partial interface ILocalNodeLocalClientNode<T>
        {
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum>> Create(T key);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum>> Delete(T key);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <param name="text"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum>> LoadCreate(T key, string text);
            /// <summary>
            /// 
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalServiceQueueNode<AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult<AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum>> Update(T key);
        }
}namespace AutoCSer.CommandService.Search.DiskBlockIndex
{
        /// <summary>
        /// Node interface with reusable hash indexes with removal tags 
///            带移除标记的可重用哈希索引节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IRemoveMarkHashIndexNodeMethodEnum))]
        public partial interface IRemoveMarkHashIndexNode<KT,VT> { }
        /// <summary>
        /// Node interface with reusable hash indexes with removal tags 
///            带移除标记的可重用哈希索引节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IRemoveMarkHashIndexNodeMethodEnum
        {
            /// <summary>
            /// [0] Add matching data keyword 
///            添加匹配数据关键字
            /// KT key Index keyword 
///            索引关键字
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null
            /// </summary>
            Append = 0,
            /// <summary>
            /// [1] Add matching data keyword 
///            添加匹配数据关键字
            /// KT[] keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendArray = 1,
            /// <summary>
            /// [2] Add matching data keyword (Initialize and load the persistent data) 
///            添加匹配数据关键字（初始化加载持久化数据）
            /// KT[] keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendArrayLoadPersistence = 2,
            /// <summary>
            /// [3] Add matching data keyword (Initialize and load the persistent data) 
///            添加匹配数据关键字（初始化加载持久化数据）
            /// KT key Index keyword 
///            索引关键字
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null
            /// </summary>
            AppendLoadPersistence = 3,
            /// <summary>
            /// [4] Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// KT key Index keyword 
///            索引关键字
            /// 返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{VT} 
            /// </summary>
            GetBlockIndexData = 4,
            /// <summary>
            /// [5] Gets the collection of updated keyword 
///            获取更新关键字集合
            /// </summary>
            GetChangeKeys = 5,
            /// <summary>
            /// [6] Delete the matching data keyword 
///            删除匹配数据关键字
            /// KT key Index keyword 
///            索引关键字
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字
            /// </summary>
            Remove = 6,
            /// <summary>
            /// [7] Delete the matching data keyword 
///            删除匹配数据关键字
            /// KT[] keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveArray = 7,
            /// <summary>
            /// [8] Delete the matching data keyword (Initialize and load the persistent data) 
///            删除匹配数据关键字（初始化加载持久化数据）
            /// KT[] keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveArrayLoadPersistence = 8,
            /// <summary>
            /// [9] Delete the matching data keyword (Initialize and load the persistent data) 
///            删除匹配数据关键字（初始化加载持久化数据）
            /// KT key Index keyword 
///            索引关键字
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字
            /// </summary>
            RemoveLoadPersistence = 9,
            /// <summary>
            /// [10] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.BinarySerializeKeyValue{KT,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{VT}} value data
            /// </summary>
            SnapshotSet = 10,
            /// <summary>
            /// [11] The operation of writing the disk block index information has been completed 
///            磁盘块索引信息写入完成操作
            /// KT key Index keyword 
///            索引关键字
            /// AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
///            磁盘块索引信息
            /// int valueCount The number of newly added data 
///            新增数据数量
            /// </summary>
            WriteCompleted = 11,
            /// <summary>
            /// [12] The operation of writing the disk block index information has been completed (Initialize and load the persistent data) 
///            磁盘块索引信息写入完成操作（初始化加载持久化数据）
            /// KT key Index keyword 
///            索引关键字
            /// AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
///            磁盘块索引信息
            /// int valueCount The number of newly added data 
///            新增数据数量
            /// </summary>
            WriteCompletedLoadPersistence = 12,
            /// <summary>
            /// [13] Add matching data keyword 
///            添加匹配数据关键字
            /// AutoCSer.LeftArray{KT} keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendLeftArray = 13,
            /// <summary>
            /// [14] Add matching data keyword (Initialize and load the persistent data) 
///            添加匹配数据关键字（初始化加载持久化数据）
            /// AutoCSer.LeftArray{KT} keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendLeftArrayLoadPersistence = 14,
            /// <summary>
            /// [15] Delete the matching data keyword 
///            删除匹配数据关键字
            /// AutoCSer.LeftArray{KT} keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveLeftArray = 15,
            /// <summary>
            /// [16] Delete the matching data keyword (Initialize and load the persistent data) 
///            删除匹配数据关键字（初始化加载持久化数据）
            /// AutoCSer.LeftArray{KT} keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveLeftArrayLoadPersistence = 16,
            /// <summary>
            /// [17] Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// KT[] keys Index keyword collection 
///            索引关键字集合
            /// 返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{VT}[] 
            /// </summary>
            GetBlockIndexDataArray = 17,
        }
}namespace AutoCSer.CommandService.Search.DiskBlockIndex
{
        /// <summary>
        /// Node interface with reusable hash indexes with removal tags 
///            带移除标记的可重用哈希索引节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IRemoveMarkHashKeyIndexNodeMethodEnum))]
        public partial interface IRemoveMarkHashKeyIndexNode<T> { }
        /// <summary>
        /// Node interface with reusable hash indexes with removal tags 
///            带移除标记的可重用哈希索引节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IRemoveMarkHashKeyIndexNodeMethodEnum
        {
            /// <summary>
            /// [0] Add matching data keyword 
///            添加匹配数据关键字
            /// T key Index keyword 
///            索引关键字
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null
            /// </summary>
            Append = 0,
            /// <summary>
            /// [1] Add matching data keyword 
///            添加匹配数据关键字
            /// T[] keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendArray = 1,
            /// <summary>
            /// [2] Add matching data keyword (Initialize and load the persistent data) 
///            添加匹配数据关键字（初始化加载持久化数据）
            /// T[] keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendArrayLoadPersistence = 2,
            /// <summary>
            /// [3] Add matching data keyword (Initialize and load the persistent data) 
///            添加匹配数据关键字（初始化加载持久化数据）
            /// T key Index keyword 
///            索引关键字
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null
            /// </summary>
            AppendLoadPersistence = 3,
            /// <summary>
            /// [4] Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// T key Index keyword 
///            索引关键字
            /// 返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{uint} 
            /// </summary>
            GetBlockIndexData = 4,
            /// <summary>
            /// [5] Gets the collection of updated keyword 
///            获取更新关键字集合
            /// </summary>
            GetChangeKeys = 5,
            /// <summary>
            /// [6] Delete the matching data keyword 
///            删除匹配数据关键字
            /// T key Index keyword 
///            索引关键字
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字
            /// </summary>
            Remove = 6,
            /// <summary>
            /// [7] Delete the matching data keyword 
///            删除匹配数据关键字
            /// T[] keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveArray = 7,
            /// <summary>
            /// [8] Delete the matching data keyword (Initialize and load the persistent data) 
///            删除匹配数据关键字（初始化加载持久化数据）
            /// T[] keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveArrayLoadPersistence = 8,
            /// <summary>
            /// [9] Delete the matching data keyword (Initialize and load the persistent data) 
///            删除匹配数据关键字（初始化加载持久化数据）
            /// T key Index keyword 
///            索引关键字
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字
            /// </summary>
            RemoveLoadPersistence = 9,
            /// <summary>
            /// [10] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.BinarySerializeKeyValue{T,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{uint}} value data
            /// </summary>
            SnapshotSet = 10,
            /// <summary>
            /// [11] The operation of writing the disk block index information has been completed 
///            磁盘块索引信息写入完成操作
            /// T key Index keyword 
///            索引关键字
            /// AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
///            磁盘块索引信息
            /// int valueCount The number of newly added data 
///            新增数据数量
            /// </summary>
            WriteCompleted = 11,
            /// <summary>
            /// [12] The operation of writing the disk block index information has been completed (Initialize and load the persistent data) 
///            磁盘块索引信息写入完成操作（初始化加载持久化数据）
            /// T key Index keyword 
///            索引关键字
            /// AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
///            磁盘块索引信息
            /// int valueCount The number of newly added data 
///            新增数据数量
            /// </summary>
            WriteCompletedLoadPersistence = 12,
            /// <summary>
            /// [13] Add matching data keyword 
///            添加匹配数据关键字
            /// AutoCSer.LeftArray{T} keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendLeftArray = 13,
            /// <summary>
            /// [14] Add matching data keyword (Initialize and load the persistent data) 
///            添加匹配数据关键字（初始化加载持久化数据）
            /// AutoCSer.LeftArray{T} keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendLeftArrayLoadPersistence = 14,
            /// <summary>
            /// [15] Delete the matching data keyword 
///            删除匹配数据关键字
            /// AutoCSer.LeftArray{T} keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveLeftArray = 15,
            /// <summary>
            /// [16] Delete the matching data keyword (Initialize and load the persistent data) 
///            删除匹配数据关键字（初始化加载持久化数据）
            /// AutoCSer.LeftArray{T} keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveLeftArrayLoadPersistence = 16,
            /// <summary>
            /// [17] Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// T[] keys Index keyword collection 
///            索引关键字集合
            /// 返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{uint}[] 
            /// </summary>
            GetBlockIndexDataArray = 17,
            /// <summary>
            /// [18] Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// T key Index keyword 
///            索引关键字
            /// 返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{int} 
            /// </summary>
            GetIntBlockIndexData = 18,
            /// <summary>
            /// [19] Get the index information of the index data disk block 
///            获取索引数据磁盘块索引信息
            /// T[] keys Index keyword collection 
///            索引关键字集合
            /// 返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{int}[] 
            /// </summary>
            GetIntBlockIndexDataArray = 19,
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// Non-index condition query data node interface 
///            非索引条件查询数据节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IConditionDataNodeMethodEnum))]
        public partial interface IConditionDataNode<KT,VT> { }
        /// <summary>
        /// Non-index condition query data node interface 
///            非索引条件查询数据节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IConditionDataNodeMethodEnum
        {
            /// <summary>
            /// [0] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// VT value data
            /// </summary>
            SnapshotSet = 0,
            /// <summary>
            /// [1] Create non-indexed conditional query data 
///            创建非索引条件查询数据
            /// KT key Data keyword
            /// </summary>
            Create = 1,
            /// <summary>
            /// [2] Update non-indexed condition query data 
///            更新非索引条件查询数据
            /// KT key Data keyword
            /// </summary>
            Update = 2,
            /// <summary>
            /// [3] The initialization data loading has been completed 
///            初始化数据加载完成
            /// </summary>
            Loaded = 3,
            /// <summary>
            /// [4] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// bool value data
            /// </summary>
            SnapshotSetLoaded = 4,
            /// <summary>
            /// [5] The non-indexed condition query data has completed the update operation 
///            非索引条件查询数据完成更新操作
            /// VT value Non-indexed condition query data 
///            非索引条件查询数据
            /// </summary>
            Completed = 5,
            /// <summary>
            /// [6] The non-indexed condition query data has completed the update operation (Check the input parameters before the persistence operation) 
///            非索引条件查询数据完成更新操作（持久化操作之前检查输入参数）
            /// VT value Non-indexed condition query data 
///            非索引条件查询数据
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum} 
            /// </summary>
            CompletedBeforePersistence = 6,
            /// <summary>
            /// [7] Delete non-indexed condition query data 
///            删除非索引条件查询数据
            /// KT key Data keyword
            /// </summary>
            Delete = 7,
            /// <summary>
            /// [8] The non-indexed condition query data has completed the update operation (Initialize and load the persistent data) 
///            非索引条件查询数据完成更新操作（初始化加载持久化数据）
            /// VT value Non-indexed condition query data 
///            非索引条件查询数据
            /// </summary>
            CompletedLoadPersistence = 8,
            /// <summary>
            /// [9] Delete non-indexed condition query data (Initialize and load the persistent data) 
///            删除非索引条件查询数据（初始化加载持久化数据）
            /// KT key Data keyword
            /// </summary>
            DeleteLoadPersistence = 9,
            /// <summary>
            /// [10] Create non-indexed conditional query data 
///            创建非索引条件查询数据
            /// VT value Non-indexed condition query data 
///            非索引条件查询数据
            /// </summary>
            LoadCreate = 10,
            /// <summary>
            /// [11] Create non-indexed conditional query data (Check the input parameters before the persistence operation) 
///            创建非索引条件查询数据（持久化操作之前检查输入参数）
            /// VT value Non-indexed condition query data 
///            非索引条件查询数据
            /// 返回值 bool Returning true indicates that a persistence operation is required 
///            返回 true 表示需要持久化操作
            /// </summary>
            LoadCreateBeforePersistence = 11,
            /// <summary>
            /// [12] Create non-indexed conditional query data (Initialize and load the persistent data) 
///            创建非索引条件查询数据（初始化加载持久化数据）
            /// VT value Non-indexed condition query data 
///            非索引条件查询数据
            /// </summary>
            LoadCreateLoadPersistence = 12,
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// 创建哈希索引节点的自定义基础服务接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IDiskBlockIndexServiceNodeMethodEnum))]
        public partial interface IDiskBlockIndexServiceNode { }
        /// <summary>
        /// 创建哈希索引节点的自定义基础服务接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IDiskBlockIndexServiceNodeMethodEnum
        {
            /// <summary>
            /// [0] Create a array node IArrayNode{T} 
///            创建数组节点 IArrayNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int length Array length
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateArrayNode = 0,
            /// <summary>
            /// [1] Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// uint capacity The number of binary bits 
///            二进制位数量
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateBitmapNode = 1,
            /// <summary>
            /// [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
///            创建字典节点 IByteArrayDictionaryNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayDictionaryNode = 2,
            /// <summary>
            /// [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
///            创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayFragmentDictionaryNode = 3,
            /// <summary>
            /// [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
///            创建队列节点（先进先出） IByteArrayQueueNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayQueueNode = 4,
            /// <summary>
            /// [5] Create a stack node IByteArrayStackNode (Last in, first out) 
///            创建栈节点（后进先出） IByteArrayStackNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayStackNode = 5,
            /// <summary>
            /// [6] Create a dictionary node IDictionaryNode{KT,VT} 
///            创建字典节点 IDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDictionaryNode = 6,
            /// <summary>
            /// [7] Create distributed lock nodes IDistributedLockNode{KT} 
///            创建分布式锁节点 IDistributedLockNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDistributedLockNode = 7,
            /// <summary>
            /// [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
///            创建字典节点 IFragmentDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateFragmentDictionaryNode = 8,
            /// <summary>
            /// [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
///            创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateFragmentHashSetNode = 9,
            /// <summary>
            /// [10] Create a dictionary node IHashBytesDictionaryNode 
///            创建字典节点 IHashBytesDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashBytesDictionaryNode = 10,
            /// <summary>
            /// [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
///            创建字典节点 IHashBytesFragmentDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashBytesFragmentDictionaryNode = 11,
            /// <summary>
            /// [12] Create a hash table node IHashSetNode{KT} 
///            创建哈希表节点 IHashSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashSetNode = 12,
            /// <summary>
            /// [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// long identity Initial Allocation identity 
///            起始分配 ID
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateIdentityGeneratorNode = 13,
            /// <summary>
            /// [14] Create a array node ILeftArrayNode{T} 
///            创建数组节点 ILeftArrayNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateLeftArrayNode = 14,
            /// <summary>
            /// [15] Create a message processing node IMessageNode{T} 
///            创建消息处理节点 IMessageNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType messageType Message data type 
///            消息数据类型
            /// int arraySize The size of the message array being processed 
///            正在处理的消息数组大小
            /// int timeoutSeconds The number of seconds of message processing timeout 
///            消息处理超时秒数
            /// int checkTimeoutSeconds Check the interval in seconds for message timeouts 
///            消息超时检查间隔秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateMessageNode = 15,
            /// <summary>
            /// [16] Create a queue node IQueueNode{T} (First in, first Out) 
///            创建队列节点（先进先出） IQueueNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateQueueNode = 16,
            /// <summary>
            /// [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
///            创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSearchTreeDictionaryNode = 17,
            /// <summary>
            /// [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
///            创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSearchTreeSetNode = 18,
            /// <summary>
            /// [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
///            创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int arraySize The size of the message array being processed 
///            正在处理的消息数组大小
            /// int timeoutSeconds The number of seconds of message processing timeout 
///            消息处理超时秒数
            /// int checkTimeoutSeconds Check the interval in seconds for message timeouts 
///            消息超时检查间隔秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateServerByteArrayMessageNode = 19,
            /// <summary>
            /// [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
///            创建排序字典节点 ISortedDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedDictionaryNode = 20,
            /// <summary>
            /// [21] Create a sorting list node ISortedListNode{KT,VT} 
///            创建排序列表节点 ISortedListNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedListNode = 21,
            /// <summary>
            /// [22] Create sorted collection node ISortedSetNode{KT} 
///            创建排序集合节点 ISortedSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedSetNode = 22,
            /// <summary>
            /// [23] Create a stack node IStackNode{T} (Last in, first out) 
///            创建栈节点（后进先出） IStackNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateStackNode = 23,
            /// <summary>
            /// [24] Delete the node 
///            删除节点
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// 返回值 bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNode = 24,
            /// <summary>
            /// [25] Create a server registration node IServerRegistryNode 
///            创建服务注册节点 IServerRegistryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int loadTimeoutSeconds Cold start session timeout seconds 
///            冷启动会话超时秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateServerRegistryNode = 25,
            /// <summary>
            /// [26] Create a service process daemon node IProcessGuardNode 
///            创建服务进程守护节点 IProcessGuardNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateProcessGuardNode = 26,
            /// <summary>
            /// [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapClientFilterNode = 27,
            /// <summary>
            /// [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapFilterNode = 28,
            /// <summary>
            /// [29] Delete the node 
///            删除节点
            /// string key Node global keyword 
///            节点全局关键字
            /// 返回值 bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNodeByKey = 29,
            /// <summary>
            /// [30] Create an archive node only IOnlyPersistenceNode{T} 
///            创建仅存档节点 IOnlyPersistenceNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType valueType Archive data type 
///            存档数据类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateOnlyPersistenceNode = 30,
            /// <summary>
            /// [256] 创建带移除标记的可重用哈希索引节点 IRemoveMarkHashIndexNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType 索引关键字类型
            /// AutoCSer.Reflection.RemoteType valueType 数据关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateRemoveMarkHashIndexNode = 256,
            /// <summary>
            /// [257] 创建带移除标记的可重用哈希索引节点 IRemoveMarkHashKeyIndexNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType 索引关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateRemoveMarkHashKeyIndexNode = 257,
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// 创建字符串 Trie 图节点的自定义基础服务接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IStaticTrieGraphServiceNodeMethodEnum))]
        public partial interface IStaticTrieGraphServiceNode { }
        /// <summary>
        /// 创建字符串 Trie 图节点的自定义基础服务接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IStaticTrieGraphServiceNodeMethodEnum
        {
            /// <summary>
            /// [0] Create a array node IArrayNode{T} 
///            创建数组节点 IArrayNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int length Array length
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateArrayNode = 0,
            /// <summary>
            /// [1] Create a bitmap node IBitmapNode 
///            创建位图节点 IBitmapNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// uint capacity The number of binary bits 
///            二进制位数量
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateBitmapNode = 1,
            /// <summary>
            /// [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
///            创建字典节点 IByteArrayDictionaryNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayDictionaryNode = 2,
            /// <summary>
            /// [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
///            创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayFragmentDictionaryNode = 3,
            /// <summary>
            /// [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
///            创建队列节点（先进先出） IByteArrayQueueNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayQueueNode = 4,
            /// <summary>
            /// [5] Create a stack node IByteArrayStackNode (Last in, first out) 
///            创建栈节点（后进先出） IByteArrayStackNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateByteArrayStackNode = 5,
            /// <summary>
            /// [6] Create a dictionary node IDictionaryNode{KT,VT} 
///            创建字典节点 IDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDictionaryNode = 6,
            /// <summary>
            /// [7] Create distributed lock nodes IDistributedLockNode{KT} 
///            创建分布式锁节点 IDistributedLockNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateDistributedLockNode = 7,
            /// <summary>
            /// [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
///            创建字典节点 IFragmentDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateFragmentDictionaryNode = 8,
            /// <summary>
            /// [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
///            创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateFragmentHashSetNode = 9,
            /// <summary>
            /// [10] Create a dictionary node IHashBytesDictionaryNode 
///            创建字典节点 IHashBytesDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashBytesDictionaryNode = 10,
            /// <summary>
            /// [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
///            创建字典节点 IHashBytesFragmentDictionaryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashBytesFragmentDictionaryNode = 11,
            /// <summary>
            /// [12] Create a hash table node IHashSetNode{KT} 
///            创建哈希表节点 IHashSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
///            可重用字典重组操作类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateHashSetNode = 12,
            /// <summary>
            /// [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
///            创建 64 位自增ID 节点 IIdentityGeneratorNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// long identity Initial Allocation identity 
///            起始分配 ID
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateIdentityGeneratorNode = 13,
            /// <summary>
            /// [14] Create a array node ILeftArrayNode{T} 
///            创建数组节点 ILeftArrayNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateLeftArrayNode = 14,
            /// <summary>
            /// [15] Create a message processing node IMessageNode{T} 
///            创建消息处理节点 IMessageNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType messageType Message data type 
///            消息数据类型
            /// int arraySize The size of the message array being processed 
///            正在处理的消息数组大小
            /// int timeoutSeconds The number of seconds of message processing timeout 
///            消息处理超时秒数
            /// int checkTimeoutSeconds Check the interval in seconds for message timeouts 
///            消息超时检查间隔秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateMessageNode = 15,
            /// <summary>
            /// [16] Create a queue node IQueueNode{T} (First in, first Out) 
///            创建队列节点（先进先出） IQueueNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateQueueNode = 16,
            /// <summary>
            /// [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
///            创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSearchTreeDictionaryNode = 17,
            /// <summary>
            /// [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
///            创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSearchTreeSetNode = 18,
            /// <summary>
            /// [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
///            创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int arraySize The size of the message array being processed 
///            正在处理的消息数组大小
            /// int timeoutSeconds The number of seconds of message processing timeout 
///            消息处理超时秒数
            /// int checkTimeoutSeconds Check the interval in seconds for message timeouts 
///            消息超时检查间隔秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateServerByteArrayMessageNode = 19,
            /// <summary>
            /// [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
///            创建排序字典节点 ISortedDictionaryNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedDictionaryNode = 20,
            /// <summary>
            /// [21] Create a sorting list node ISortedListNode{KT,VT} 
///            创建排序列表节点 ISortedListNode{KT,VT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// AutoCSer.Reflection.RemoteType valueType Data type
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedListNode = 21,
            /// <summary>
            /// [22] Create sorted collection node ISortedSetNode{KT} 
///            创建排序集合节点 ISortedSetNode{KT}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateSortedSetNode = 22,
            /// <summary>
            /// [23] Create a stack node IStackNode{T} (Last in, first out) 
///            创建栈节点（后进先出） IStackNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType keyType Keyword type 
///            关键字类型
            /// int capacity Container initialization size 
///            容器初始化大小
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateStackNode = 23,
            /// <summary>
            /// [24] Delete the node 
///            删除节点
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// 返回值 bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNode = 24,
            /// <summary>
            /// [25] Create a server registration node IServerRegistryNode 
///            创建服务注册节点 IServerRegistryNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int loadTimeoutSeconds Cold start session timeout seconds 
///            冷启动会话超时秒数
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateServerRegistryNode = 25,
            /// <summary>
            /// [26] Create a service process daemon node IProcessGuardNode 
///            创建服务进程守护节点 IProcessGuardNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateProcessGuardNode = 26,
            /// <summary>
            /// [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
///            创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapClientFilterNode = 27,
            /// <summary>
            /// [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
///            创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// int size Bitmap size (number of bits) 
///            位图大小（位数量）
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateManyHashBitMapFilterNode = 28,
            /// <summary>
            /// [29] Delete the node 
///            删除节点
            /// string key Node global keyword 
///            节点全局关键字
            /// 返回值 bool Returning false indicates that the node was not found 
///            返回 false 表示没有找到节点
            /// </summary>
            RemoveNodeByKey = 29,
            /// <summary>
            /// [30] Create an archive node only IOnlyPersistenceNode{T} 
///            创建仅存档节点 IOnlyPersistenceNode{T}
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// AutoCSer.Reflection.RemoteType valueType Archive data type 
///            存档数据类型
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateOnlyPersistenceNode = 30,
            /// <summary>
            /// [256] 创建字符串 Trie 图节点 IStaticTrieGraphNode
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
///            节点索引信息
            /// string key Node global keyword 
///            节点全局关键字
            /// AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
///            服务端节点信息
            /// byte maxTrieWordSize Trie 词语最大文字长度
            /// byte maxWordSize 未知词语最大文字长度
            /// AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags wordSegmentFlags 分词选项
            /// string replaceChars 替换文字集合
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
///            节点标识，已经存在节点则直接返回
            /// </summary>
            CreateStaticTrieGraphNode = 256,
        }
}namespace AutoCSer.CommandService.Search
{
        /// <summary>
        /// Word segmentation result disk block index information node interface 
///            分词结果磁盘块索引信息节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IWordIdentityBlockIndexNodeMethodEnum))]
        public partial interface IWordIdentityBlockIndexNode<T> { }
        /// <summary>
        /// Word segmentation result disk block index information node interface 
///            分词结果磁盘块索引信息节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IWordIdentityBlockIndexNodeMethodEnum
        {
            /// <summary>
            /// [0] The disk block index information of the word segmentation result has completed the update operation 
///            分词结果磁盘块索引信息完成更新操作
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
///            磁盘块索引信息
            /// </summary>
            Completed = 0,
            /// <summary>
            /// [1] Create the disk block index information of the word segmentation result 
///            创建分词结果磁盘块索引信息
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// </summary>
            Create = 1,
            /// <summary>
            /// [2] Create the disk block index information of the word segmentation result (Initialize and load the persistent data) 
///            创建分词结果磁盘块索引信息（初始化加载持久化数据）
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// </summary>
            CreateLoadPersistence = 2,
            /// <summary>
            /// [3] Delete the disk block index information of the word segmentation result 
///            删除分词结果磁盘块索引信息
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// </summary>
            Delete = 3,
            /// <summary>
            /// [4] Delete the disk block index information of the word segmentation result (Initialize and load the persistent data) 
///            删除分词结果磁盘块索引信息（初始化加载持久化数据）
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// </summary>
            DeleteLoadPersistence = 4,
            /// <summary>
            /// [5] Delete the disk block index information of the word segmentation result 
///            删除分词结果磁盘块索引信息
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// </summary>
            Deleted = 5,
            /// <summary>
            /// [6] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.BinarySerializeKeyValue{T,AutoCSer.CommandService.DiskBlock.BlockIndex} value data
            /// </summary>
            SnapshotSet = 6,
            /// <summary>
            /// [7] Update the disk block index information of the word segmentation result 
///            更新分词结果磁盘块索引信息
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// </summary>
            Update = 7,
            /// <summary>
            /// [8] Update the disk block index information of the word segmentation result (Initialize and load the persistent data) 
///            更新分词结果磁盘块索引信息（初始化加载持久化数据）
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// </summary>
            UpdateLoadPersistence = 8,
            /// <summary>
            /// [9] The disk block index information of the word segmentation result has completed the update operation (Initialize and load the persistent data) 
///            分词结果磁盘块索引信息完成更新操作（初始化加载持久化数据）
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
///            磁盘块索引信息
            /// </summary>
            CompletedLoadPersistence = 9,
            /// <summary>
            /// [10] Delete the disk block index information of the word segmentation result (Initialize and load the persistent data) 
///            删除分词结果磁盘块索引信息（初始化加载持久化数据）
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// </summary>
            DeletedLoadPersistence = 10,
            /// <summary>
            /// [11] The initialization data loading has been completed 
///            初始化数据加载完成
            /// </summary>
            Loaded = 11,
            /// <summary>
            /// [12] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// bool value data
            /// </summary>
            SnapshotSetLoaded = 12,
            /// <summary>
            /// [13] Create the disk block index information of the word segmentation result 
///            创建分词结果磁盘块索引信息
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// string text Word segmentation text data 
///            分词文本数据
            /// </summary>
            LoadCreate = 13,
            /// <summary>
            /// [14] Create the disk block index information of the word segmentation result (Check the input parameters before the persistence operation) 
///            创建分词结果磁盘块索引信息（持久化操作之前检查输入参数）
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// string text Word segmentation text data 
///            分词文本数据
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum} 
            /// </summary>
            LoadCreateBeforePersistence = 14,
            /// <summary>
            /// [15] Create the disk block index information of the word segmentation result (Initialize and load the persistent data) 
///            创建分词结果磁盘块索引信息（初始化加载持久化数据）
            /// T key The keyword of the word segmentation data 
///            分词数据关键字
            /// string text Word segmentation text data 
///            分词文本数据
            /// </summary>
            LoadCreateLoadPersistence = 15,
        }
}namespace AutoCSer.CommandService.Search.MemoryIndex
{
        /// <summary>
        /// Hash index node interface 
///            哈希索引节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IHashCodeKeyIndexNodeMethodEnum))]
        public partial interface IHashCodeKeyIndexNode<T> { }
        /// <summary>
        /// Hash index node interface 
///            哈希索引节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IHashCodeKeyIndexNodeMethodEnum
        {
            /// <summary>
            /// [0] Add matching data keyword 
///            添加匹配数据关键字
            /// T key Index keyword 
///            索引关键字
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null
            /// </summary>
            Append = 0,
            /// <summary>
            /// [1] Add matching data keyword 
///            添加匹配数据关键字
            /// T[] keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendArray = 1,
            /// <summary>
            /// [2] Add matching data keyword (Check the input parameters before the persistence operation) 
///            添加匹配数据关键字（持久化操作之前检查输入参数）
            /// T key Index keyword 
///            索引关键字
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} 
            /// </summary>
            AppendBeforePersistence = 2,
            /// <summary>
            /// [3] Add matching data keyword 
///            添加匹配数据关键字
            /// AutoCSer.LeftArray{T} keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendLeftArray = 3,
            /// <summary>
            /// [4] Delete the matching data keyword 
///            删除匹配数据关键字
            /// T key Index keyword 
///            索引关键字
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字
            /// </summary>
            Remove = 4,
            /// <summary>
            /// [5] Delete the matching data keyword 
///            删除匹配数据关键字
            /// T[] keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveArray = 5,
            /// <summary>
            /// [6] Delete the matching data keyword (Check the input parameters before the persistence operation) 
///            删除匹配数据关键字（持久化操作之前检查输入参数）
            /// T key Index keyword 
///            索引关键字
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} 
            /// </summary>
            RemoveBeforePersistence = 6,
            /// <summary>
            /// [7] Delete the matching data keyword 
///            删除匹配数据关键字
            /// AutoCSer.LeftArray{T} keys Index keyword collection 
///            索引关键字集合
            /// uint value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveLeftArray = 7,
            /// <summary>
            /// [8] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.BinarySerializeKeyValue{T,uint[]} value data
            /// </summary>
            SnapshotSet = 8,
        }
}namespace AutoCSer.CommandService.Search.MemoryIndex
{
        /// <summary>
        /// Hash index node interface 
///            哈希索引节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IHashIndexNodeMethodEnum))]
        public partial interface IHashIndexNode<KT,VT> { }
        /// <summary>
        /// Hash index node interface 
///            哈希索引节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IHashIndexNodeMethodEnum
        {
            /// <summary>
            /// [0] Add matching data keyword 
///            添加匹配数据关键字
            /// KT key Index keyword 
///            索引关键字
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null 
///            返回 false 表示关键字数据为 null
            /// </summary>
            Append = 0,
            /// <summary>
            /// [1] Add matching data keyword 
///            添加匹配数据关键字
            /// KT[] keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendArray = 1,
            /// <summary>
            /// [2] Add matching data keyword (Check the input parameters before the persistence operation) 
///            添加匹配数据关键字（持久化操作之前检查输入参数）
            /// KT key Index keyword 
///            索引关键字
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} 
            /// </summary>
            AppendBeforePersistence = 2,
            /// <summary>
            /// [3] Add matching data keyword 
///            添加匹配数据关键字
            /// AutoCSer.LeftArray{KT} keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            AppendLeftArray = 3,
            /// <summary>
            /// [4] Delete the matching data keyword 
///            删除匹配数据关键字
            /// KT key Index keyword 
///            索引关键字
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// 返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
///            返回 false 表示关键字数据为 null 或者没有找到索引关键字
            /// </summary>
            Remove = 4,
            /// <summary>
            /// [5] Delete the matching data keyword 
///            删除匹配数据关键字
            /// KT[] keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveArray = 5,
            /// <summary>
            /// [6] Delete the matching data keyword (Check the input parameters before the persistence operation) 
///            删除匹配数据关键字（持久化操作之前检查输入参数）
            /// KT key Index keyword 
///            索引关键字
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} 
            /// </summary>
            RemoveBeforePersistence = 6,
            /// <summary>
            /// [7] Delete the matching data keyword 
///            删除匹配数据关键字
            /// AutoCSer.LeftArray{KT} keys Index keyword collection 
///            索引关键字集合
            /// VT value Matching data keyword 
///            匹配数据关键字
            /// </summary>
            RemoveLeftArray = 7,
            /// <summary>
            /// [8] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.BinarySerializeKeyValue{KT,VT[]} value data
            /// </summary>
            SnapshotSet = 8,
        }
}namespace AutoCSer.CommandService.Search.StaticTrieGraph
{
        /// <summary>
        /// String trie graph node interface 
///            字符串 Trie 图节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(IStaticTrieGraphNodeMethodEnum))]
        public partial interface IStaticTrieGraphNode { }
        /// <summary>
        /// String trie graph node interface 
///            字符串 Trie 图节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum IStaticTrieGraphNodeMethodEnum
        {
            /// <summary>
            /// [0] Add trie graph word 
///            添加 Trie 图词语
            /// string word 
            /// 返回值 AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum 
            /// </summary>
            AppendWord = 0,
            /// <summary>
            /// [1] Create the trie graph 
///            创建 Trie 图
            /// 返回值 int The number of words in the trie graph 
///            Trie 图词语数量
            /// </summary>
            BuildGraph = 1,
            /// <summary>
            /// [2] Adds text and returns a collection of word numbers 
///            添加文本并返回词语编号集合
            /// string text 
            /// 返回值 int[] 
            /// </summary>
            GetAddTextIdentity = 2,
            /// <summary>
            /// [3] Adds text and returns a collection of word numbers (Check the input parameters before the persistence operation) 
///            添加文本并返回词语编号集合（持久化操作之前检查输入参数）
            /// string text 
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int[]} 
            /// </summary>
            GetAddTextIdentityBeforePersistence = 3,
            /// <summary>
            /// [4] Get the collection of query word numbers (ignore unmatched words) 
///            获取查询词语编号集合（忽略未匹配词语）
            /// string text The text content of the search 
///            搜索文本内容
            /// 返回值 int[] 
            /// </summary>
            GetWordSegmentIdentity = 4,
            /// <summary>
            /// [5] Get the query word segmentation result 
///            获取查询分词结果
            /// string text The text content of the search 
///            搜索文本内容
            /// 返回值 AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult[] 
            /// </summary>
            GetWordSegmentResult = 5,
            /// <summary>
            /// [6] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.CommandService.Search.StaticTrieGraph.GraphData value data
            /// </summary>
            SnapshotSetGraph = 6,
            /// <summary>
            /// [7] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// string value data
            /// </summary>
            SnapshotSetWord = 7,
            /// <summary>
            /// [8] Load snapshot data (recover memory data from snapshot data) 
///            加载快照数据（从快照数据恢复内存数据）
            /// AutoCSer.BinarySerializeKeyValue{AutoCSer.SubString,int} value data
            /// </summary>
            SnapshotSetWordIdentity = 8,
            /// <summary>
            /// [9] Has the trie graph been created 
///            是否已经创建 Trie 图
            /// 返回值 bool 
            /// </summary>
            IsGraph = 9,
            /// <summary>
            /// [10] Get the number of words in the trie graph 
///            获取 Trie 图词语数量
            /// 返回值 int The number of words in the trie graph 
///            Trie 图词语数量
            /// </summary>
            GetWordCount = 10,
        }
}namespace AutoCSer.CommandService.Search.WordIdentityBlockIndex
{
        /// <summary>
        /// Word segmentation result disk block index information node interface 
///            分词结果磁盘块索引信息节点接口
        /// </summary>
        [AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ServerNodeType(typeof(ILocalNodeMethodEnum))]
        public partial interface ILocalNode<T> { }
        /// <summary>
        /// Word segmentation result disk block index information node interface 
///            分词结果磁盘块索引信息节点接口 (Node method sequence number mapping enumeration type)
        /// </summary>
        public enum ILocalNodeMethodEnum
        {
            /// <summary>
            /// [0] 
            /// T key 
            /// AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex 
            /// </summary>
            Completed = 0,
            /// <summary>
            /// [1] 
            /// T key 
            /// AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex 
            /// </summary>
            CompletedLoadPersistence = 1,
            /// <summary>
            /// [2] 
            /// T key 
            /// </summary>
            Create = 2,
            /// <summary>
            /// [3] 
            /// T key 
            /// </summary>
            CreateLoadPersistence = 3,
            /// <summary>
            /// [4] 
            /// T key 
            /// </summary>
            Delete = 4,
            /// <summary>
            /// [5] 
            /// T key 
            /// </summary>
            DeleteLoadPersistence = 5,
            /// <summary>
            /// [6] 
            /// T key 
            /// </summary>
            Deleted = 6,
            /// <summary>
            /// [7] 
            /// T key 
            /// </summary>
            DeletedLoadPersistence = 7,
            /// <summary>
            /// [8] 
            /// T key 
            /// string text 
            /// </summary>
            LoadCreate = 8,
            /// <summary>
            /// [9] 
            /// T key 
            /// string text 
            /// 返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum} 
            /// </summary>
            LoadCreateBeforePersistence = 9,
            /// <summary>
            /// [10] 
            /// T key 
            /// string text 
            /// </summary>
            LoadCreateLoadPersistence = 10,
            /// <summary>
            /// [11] 
            /// </summary>
            Loaded = 11,
            /// <summary>
            /// [12] 
            /// AutoCSer.BinarySerializeKeyValue{T,AutoCSer.CommandService.DiskBlock.BlockIndex} value 
            /// </summary>
            SnapshotSet = 12,
            /// <summary>
            /// [13] 
            /// bool value 
            /// </summary>
            SnapshotSetLoaded = 13,
            /// <summary>
            /// [14] 
            /// T key 
            /// </summary>
            Update = 14,
            /// <summary>
            /// [15] 
            /// T key 
            /// </summary>
            UpdateLoadPersistence = 15,
        }
}
#endif