<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.CommandService.Search</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.CommandService.Search.ConditionDataLocalNode`4">
            <summary>
            非索引条件查询数据节点
            </summary>
            <typeparam name="NT">节点接口类型</typeparam>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <typeparam name="CT">客户端节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataLocalNode`4.loadClientNode">
            <summary>
            初始化加载数据获取非索引条件查询数据节点单例
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataLocalNode`4.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{`3})">
            <summary>
            非索引条件查询数据节点
            </summary>
            <param name="loadClientNode">初始化加载数据获取非索引条件查询数据节点单例</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataLocalNode`4.load">
            <summary>
            初始化加载所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataLocalNode`4.create(`3,AutoCSer.CommandService.Search.ConditionData.LocalLoadCallback{`0,`1,`2,`3})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="node">客户端节点信息</param>
            <param name="callback">初始化加载数据回调</param>
            <returns>0 表示成功，-1 表示失败</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataLocalNode`4.loadCreate(`3,`2)">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="client"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.ConditionData.LocalLoadCallback`4">
            <summary>
            初始化加载数据回调
            </summary>
            <typeparam name="NT">接口类型</typeparam>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <typeparam name="CT">客户端节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionData.LocalLoadCallback`4.CreateResponses">
            <summary>
            创建非索引条件查询数据返回参数集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionData.LocalLoadCallback`4.#ctor(AutoCSer.CommandService.Search.ConditionDataNode{`0,`1,`2},`2[])">
            <summary>
            初始化加载数据回调
            </summary>
            <param name="node">非索引条件查询数据节点</param>
            <param name="values">Data collection
            数据集合</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.ConditionData.LoadCallback`3">
            <summary>
            初始化加载数据回调
            </summary>
            <typeparam name="NT">接口类型</typeparam>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionData.LoadCallback`3.node">
            <summary>
            非索引条件查询数据节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionData.LoadCallback`3.Values">
            <summary>
            The data collection
            数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionData.LoadCallback`3.waitLock">
            <summary>
            回调等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionData.LoadCallback`3.NewCount">
            <summary>
            新数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionData.LoadCallback`3.#ctor(AutoCSer.CommandService.Search.ConditionDataNode{`0,`1,`2},`2[])">
            <summary>
            初始化加载数据回调
            </summary>
            <param name="node">非索引条件查询数据节点</param>
            <param name="values">Data collection
            数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionData.LoadCallback`3.RunTask">
            <summary>
            检查关键字
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionData.LoadCallback`3.Wait">
            <summary>
            等待关键字检查完成
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.ConditionData.LoadCallback`4">
            <summary>
            初始化加载数据回调
            </summary>
            <typeparam name="NT">接口类型</typeparam>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <typeparam name="CT">客户端节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionData.LoadCallback`4.CreateResponses">
            <summary>
            创建非索引条件查询数据返回参数集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionData.LoadCallback`4.#ctor(AutoCSer.CommandService.Search.ConditionDataNode{`0,`1,`2},`2[])">
            <summary>
            初始化加载数据回调
            </summary>
            <param name="node">非索引条件查询数据节点</param>
            <param name="values">Data collection
            数据集合</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2">
            <summary>
            带移除标记的可重用哈希索引节点接口 客户端节点接口
            </summary>
            <summary>
            Node interface with reusable hash indexes with removal tags 
                       带移除标记的可重用哈希索引节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.GetChangeKeys(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="blockIndex">Disk block index information 
                       磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data 
                       新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode`2.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode{KT,VT})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode{`0,`1}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode{KT,VT})
            </summary>
            <param name="node">Log stream persistence memory database local client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.GetChangeKeys(System.Action{`0})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.GetChangeKeys(System.Action{`0},System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="blockIndex">Disk block index information 
                       磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data 
                       新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueLocalNode`2.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode{KT,VT})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode{`0,`1}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode{KT,VT})
            </summary>
            <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.GetChangeKeys(System.Action{`0})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.GetChangeKeys(System.Action{`0},System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="blockIndex">Disk block index information 
                       磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data 
                       新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeReturnValueNode`2.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1">
            <summary>
            带移除标记的可重用哈希索引节点接口 客户端节点接口
            </summary>
            <summary>
            Node interface with reusable hash indexes with removal tags 
                       带移除标记的可重用哈希索引节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.GetChangeKeys(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0}})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="blockIndex">Disk block index information 
                       磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data 
                       新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.GetIntBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode`1.GetIntBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode{T})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{`0}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode{T})
            </summary>
            <param name="node">Log stream persistence memory database local client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.GetChangeKeys(System.Action{`0})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.GetChangeKeys(System.Action{`0},System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="blockIndex">Disk block index information 
                       磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data 
                       新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.GetIntBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueLocalNode`1.GetIntBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode{T})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{`0}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode{T})
            </summary>
            <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.GetChangeKeys(System.Action{`0})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.GetChangeKeys(System.Action{`0},System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="blockIndex">Disk block index information 
                       磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data 
                       新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.GetIntBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeReturnValueNode`1.GetIntBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1">
            <summary>
            索引数据磁盘块索引信息节点
            </summary>
            <typeparam name="T">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.BlockIndex">
            <summary>
            上一块数据磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.BlockIndexTotalCount">
            <summary>
            历史数据磁盘块索引信息中的数据总数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.BlockIndexValueCount">
            <summary>
            历史数据磁盘块索引信息中的新增数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.Values">
            <summary>
            未持久化数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.ValueCount">
            <summary>
            未持久化数据集合中的新增数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.CacheValueCount">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.#ctor(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            空节点
            </summary>
            <param name="blockIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex{`0})">
            <summary>
            关键字数据磁盘块索引信息节点
            </summary>
            <param name="index">带移除标记的可重用哈希索引</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex,`0[],System.Int32)">
            <summary>
            关键字数据磁盘块索引信息节点
            </summary>
            <param name="index">带移除标记的可重用哈希索引</param>
            <param name="values">未持久化数据集合</param>
            <param name="valueCount">未持久化数据集合中的新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.#ctor(AutoCSer.CommandService.DiskBlock.BlockIndex,`0[])">
            <summary>
            加载更新数据
            </summary>
            <param name="blockIndex"></param>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.SetEmptyValues">
            <summary>
            设置空数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.GetRemoveMarkHashSet">
            <summary>
            获取未持久化数据集合的带移除标记的可重用哈希表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData`1.GetPersistenceNode">
            <summary>
            获取持久化数据节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1">
            <summary>
            带移除标记的可重用哈希索引节点接口 客户端节点接口
            </summary>
            <summary>
            Node interface with reusable hash indexes with removal tags 
                       带移除标记的可重用哈希索引节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.GetChangeKeys(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="blockIndex">Disk block index information 
                       磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data 
                       新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.GetIntBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode`1.GetIntBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2">
            <summary>
            带移除标记的可重用哈希索引节点接口 客户端节点接口
            </summary>
            <summary>
            Node interface with reusable hash indexes with removal tags 
                       带移除标记的可重用哈希索引节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.GetChangeKeys(System.Action{AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0},AutoCSer.Net.KeepCallbackCommand})">
            <summary>
            Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="blockIndex">Disk block index information 
                       磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data 
                       新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode`2.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
            <typeparam name="T">Index keyword type
            索引关键字类型</typeparam>
            <summary>
            Node interface with reusable hash indexes with removal tags 
                       带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{System.UInt32}})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.AppendLoadPersistence(`0,System.UInt32)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.AppendArrayLoadPersistence(`0[],System.UInt32)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.AppendLeftArrayLoadPersistence(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.RemoveLoadPersistence(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.RemoveArrayLoadPersistence(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.RemoveLeftArrayLoadPersistence(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.WriteCompletedLoadPersistence(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed (Initialize and load the persistent data)
            磁盘块索引信息写入完成操作（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data
            新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed
            磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data
            新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.GetIntBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.GetIntBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNode`1.GetChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="callback">The callback delegate for gets the collection of updated keywords
            获取更新关键字集合回调委托</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">Data keyword type
            数据关键字类型</typeparam>
            <summary>
            Node interface with reusable hash indexes with removal tags 
                       带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{`1}})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.AppendLoadPersistence(`0,`1)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.AppendArrayLoadPersistence(`0[],`1)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.AppendLeftArrayLoadPersistence(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.RemoveLoadPersistence(`0,`1)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.RemoveArrayLoadPersistence(`0[],`1)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.RemoveLeftArrayLoadPersistence(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.WriteCompletedLoadPersistence(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed (Initialize and load the persistent data)
            磁盘块索引信息写入完成操作（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data
            新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed
            磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data
            新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNode`2.GetChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="callback">The callback delegate for gets the collection of updated keywords
            获取更新关键字集合回调委托</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode`1">
            <summary>
            关键字数据集合持久化数据节点
            </summary>
            <typeparam name="T">关键字数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode`1.BlockIndex">
            <summary>
            上一块数据磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode`1.Values">
            <summary>
            当前数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode`1.ValueCount">
            <summary>
            当前数据集合中的新增数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode`1.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex{`0})">
            <summary>
            关键字数据集合持久化数据节点
            </summary>
            <param name="index">带移除标记的可重用哈希索引</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode`1.#ctor(AutoCSer.CommandService.DiskBlock.BlockIndex,`0[],System.Int32)">
            <summary>
            关键字数据集合持久化数据节点
            </summary>
            <param name="blockIndex">上一块数据磁盘块索引信息</param>
            <param name="values">当前数据集合</param>
            <param name="valueCount">当前数据集合中的新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode`1.Load(System.Collections.Generic.HashSet{`0})">
            <summary>
            Load data
            </summary>
            <param name="hashSet"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <typeparam name="T">数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.BlockIndex">
            <summary>
            上一块数据磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.BlockIndexTotalCount">
            <summary>
            历史数据磁盘块索引信息中的数据总数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.BlockIndexValueCount">
            <summary>
            历史数据磁盘块索引信息中的新增数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.Values">
            <summary>
            未持久化数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.newValues">
            <summary>
            等待磁盘块索引信息写入完成以后需要操作的匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.isWriteBlock">
            <summary>
            是否正在写入磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.isException">
            <summary>
            磁盘块索引信息写入完成操作是否异常，可能是 GetHashCode() 抛出了异常，异常节点在 BUG 修复之前不可用
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.isClientGetBlockIndexData">
            <summary>
            客户端是否获取过关键字数据磁盘块索引信息节点，用于判断是否推送关键字更新数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{`0}@)">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <param name="data">关键字数据磁盘块索引信息节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.#ctor(`0)">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.AppendLoadPersistence(`0)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.RemoveLoadPersistence(`0)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.writeCompleted(AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed
            磁盘块索引信息写入完成操作
            </summary>
            <param name="blockIndex"></param>
            <param name="valueCount"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.loadNewValue">
            <summary>
            加载等待磁盘块索引信息写入完成以后需要操作的匹配数据关键字
            </summary>
            <returns>返回 false 表示需要触发写入磁盘块索引信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.WriteCompletedLoadPersistence(AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed (Initialize and load the persistent data)
            磁盘块索引信息写入完成操作（初始化加载持久化数据）
            </summary>
            <param name="blockIndex"></param>
            <param name="valueCount"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`1.GetBlockIndexData">
            <summary>
            获取关键字数据磁盘块索引信息节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">Data keyword type
            数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.node">
            <summary>
            带移除标记的可重用哈希索引节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.key">
            <summary>
            索引关键字
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode{`0,`1},`0,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{`1}@)">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <param name="node"></param>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="data">关键字数据磁盘块索引信息节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode{`0,`1},`0,`1)">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <param name="node"></param>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.Loaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.writeDiskBlock">
            <summary>
            写入磁盘块索引信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.Append(`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.Remove(`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndex`2.WriteCompleted(AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed
            磁盘块索引信息写入完成操作
            </summary>
            <param name="blockIndex"></param>
            <param name="valueCount"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1">
            <summary>
            带移除标记的可重用哈希索引节点
            </summary>
            <typeparam name="T">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.indexs">
            <summary>
            关键字索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.callbacks">
            <summary>
            关键字变更回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.#ctor">
            <summary>
            带移除标记的可重用哈希索引节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.free">
            <summary>
            释放索引节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.StreamPersistenceMemoryDatabaseServiceNodeOnRemoved">
            <summary>
            Processing operations after node removal
            节点移除后的处理操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.StreamPersistenceMemoryDatabaseServiceDisposable">
            <summary>
            Database service shutdown operation
            数据库服务关闭操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{T,AutoCSer#CommandService#Search#DiskBlockIndex#BlockIndexData{System#UInt32}}}#GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{T,AutoCSer#CommandService#Search#DiskBlockIndex#BlockIndexData{System#UInt32}}}#GetSnapshotResult(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{System.UInt32}}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{System.UInt32}})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.GetDiskBlockClient(`0)">
            <summary>
            根据索引关键字获取磁盘块索引信息客户端
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.AppendLoadPersistence(`0,System.UInt32)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.AppendArrayLoadPersistence(`0[],System.UInt32)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.AppendLeftArrayLoadPersistence(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.RemoveLoadPersistence(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.RemoveArrayLoadPersistence(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.RemoveLeftArrayLoadPersistence(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.WriteCompletedLoadPersistence(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed (Initialize and load the persistent data)
            磁盘块索引信息写入完成操作（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data
            新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed
            磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data
            新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.GetIntBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.GetIntBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.GetChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="callback">The callback delegate for gets the collection of updated keywords
            获取更新关键字集合回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode`1.Callback(`0)">
            <summary>
            获取更新关键字集合回调
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2">
            <summary>
            带移除标记的可重用哈希索引节点
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">Data keyword type
            数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.indexs">
            <summary>
            关键字索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.callbacks">
            <summary>
            关键字变更回调
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.#ctor">
            <summary>
            带移除标记的可重用哈希索引节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{KT,AutoCSer#CommandService#Search#DiskBlockIndex#BlockIndexData{VT}}}#GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{KT,AutoCSer#CommandService#Search#DiskBlockIndex#BlockIndexData{VT}}}#GetSnapshotResult(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{`1}}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{`1}})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.GetDiskBlockClient(`0)">
            <summary>
            根据索引关键字获取磁盘块索引信息客户端
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.AppendLoadPersistence(`0,`1)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.AppendArrayLoadPersistence(`0[],`1)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.AppendLeftArrayLoadPersistence(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.RemoveLoadPersistence(`0,`1)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.RemoveArrayLoadPersistence(`0[],`1)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.RemoveLeftArrayLoadPersistence(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.WriteCompletedLoadPersistence(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed (Initialize and load the persistent data)
            磁盘块索引信息写入完成操作（初始化加载持久化数据）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data
            新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.WriteCompleted(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed
            磁盘块索引信息写入完成操作
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="valueCount">The number of newly added data
            新增数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.GetBlockIndexData(`0)">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.GetBlockIndexDataArray(`0[])">
            <summary>
            Get the index information of the index data disk block
            获取索引数据磁盘块索引信息
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.GetChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodKeepCallback{`0})">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="callback">The callback delegate for gets the collection of updated keywords
            获取更新关键字集合回调委托</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashIndexNode`2.Callback(`0)">
            <summary>
            获取更新关键字集合回调
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.BlockIndex">
            <summary>
            上一块数据磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.BlockIndexTotalCount">
            <summary>
            历史数据磁盘块索引信息中的数据总数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.BlockIndexValueCount">
            <summary>
            历史数据磁盘块索引信息中的新增数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.Values">
            <summary>
            未持久化数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.newValues">
            <summary>
            等待磁盘块索引信息写入完成以后需要操作的匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.isWriteBlock">
            <summary>
            是否正在写入磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.isException">
            <summary>
            磁盘块索引信息写入完成操作是否异常，可能是 GetHashCode() 抛出了异常，异常节点在 BUG 修复之前不可用
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.isClientGetBlockIndexData">
            <summary>
            客户端是否获取过关键字数据磁盘块索引信息节点，用于判断是否推送关键字更新数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{System.UInt32}@)">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <param name="data">关键字数据磁盘块索引信息节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.#ctor(System.UInt32)">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.AppendLoadPersistence(System.UInt32)">
            <summary>
            Add matching data keyword (Initialize and load the persistent data)
            添加匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.RemoveLoadPersistence(System.UInt32)">
            <summary>
            Delete the matching data keyword (Initialize and load the persistent data)
            删除匹配数据关键字（初始化加载持久化数据）
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.writeCompleted(AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed
            磁盘块索引信息写入完成操作
            </summary>
            <param name="blockIndex"></param>
            <param name="valueCount"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.loadNewValue">
            <summary>
            加载等待磁盘块索引信息写入完成以后需要操作的匹配数据关键字
            </summary>
            <returns>返回 false 表示需要触发写入磁盘块索引信息</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.WriteCompletedLoadPersistence(AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed (Initialize and load the persistent data)
            磁盘块索引信息写入完成操作（初始化加载持久化数据）
            </summary>
            <param name="blockIndex"></param>
            <param name="valueCount"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.GetBlockIndexData(System.Boolean)">
            <summary>
            获取关键字数据磁盘块索引信息节点
            </summary>
            <param name="isClient"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex.GetIntBlockIndexData(System.Boolean)">
            <summary>
            获取关键字数据磁盘块索引信息节点
            </summary>
            <param name="isClient"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <typeparam name="T">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.node">
            <summary>
            带移除标记的可重用哈希索引节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.key">
            <summary>
            索引关键字
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode{`0},`0,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{System.UInt32}@)">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <param name="node"></param>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="data">关键字数据磁盘块索引信息节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.#ctor(AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndexNode{`0},`0,System.UInt32)">
            <summary>
            带移除标记的可重用哈希索引
            </summary>
            <param name="node"></param>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.Loaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.writeDiskBlock">
            <summary>
            写入磁盘块索引信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.Append(System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.Remove(System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.RemoveMarkHashKeyIndex`1.WriteCompleted(AutoCSer.CommandService.DiskBlock.BlockIndex,System.Int32)">
            <summary>
            The operation of writing the disk block index information has been completed
            磁盘块索引信息写入完成操作
            </summary>
            <param name="blockIndex"></param>
            <param name="valueCount"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashKeyIndexNode`1">
            <summary>
            单磁盘块索引信息 带移除标记的可重用哈希索引节点
            </summary>
            <typeparam name="T">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashKeyIndexNode`1.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashKeyIndexNode`1.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent)">
            <summary>
            关键字索引节点
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashKeyIndexNode`1.GetDiskBlockClient(`0)">
            <summary>
            根据索引关键字获取磁盘块索引信息客户端
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashKeyIndexNode`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashIndexNode`2">
            <summary>
            单磁盘块索引信息 带移除标记的可重用哈希索引节点
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">Data keyword type
            数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashIndexNode`2.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashIndexNode`2.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent)">
            <summary>
            关键字索引节点
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashIndexNode`2.GetDiskBlockClient(`0)">
            <summary>
            根据索引关键字获取磁盘块索引信息客户端
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.DiskBlockIndex.SingleDiskBlockRemoveMarkHashIndexNode`2.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum">
            <summary>
            Node interface with reusable hash indexes with removal tags 
                       带移除标记的可重用哈希索引节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.Append">
            <summary>
            [0] Add matching data keyword 
                       添加匹配数据关键字
            KT key Index keyword 
                       索引关键字
            VT value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.AppendArray">
            <summary>
            [1] Add matching data keyword 
                       添加匹配数据关键字
            KT[] keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.AppendArrayLoadPersistence">
            <summary>
            [2] Add matching data keyword (Initialize and load the persistent data) 
                       添加匹配数据关键字（初始化加载持久化数据）
            KT[] keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.AppendLoadPersistence">
            <summary>
            [3] Add matching data keyword (Initialize and load the persistent data) 
                       添加匹配数据关键字（初始化加载持久化数据）
            KT key Index keyword 
                       索引关键字
            VT value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.GetBlockIndexData">
            <summary>
            [4] Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            KT key Index keyword 
                       索引关键字
            返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{VT} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.GetChangeKeys">
            <summary>
            [5] Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.Remove">
            <summary>
            [6] Delete the matching data keyword 
                       删除匹配数据关键字
            KT key Index keyword 
                       索引关键字
            VT value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.RemoveArray">
            <summary>
            [7] Delete the matching data keyword 
                       删除匹配数据关键字
            KT[] keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.RemoveArrayLoadPersistence">
            <summary>
            [8] Delete the matching data keyword (Initialize and load the persistent data) 
                       删除匹配数据关键字（初始化加载持久化数据）
            KT[] keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.RemoveLoadPersistence">
            <summary>
            [9] Delete the matching data keyword (Initialize and load the persistent data) 
                       删除匹配数据关键字（初始化加载持久化数据）
            KT key Index keyword 
                       索引关键字
            VT value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.SnapshotSet">
            <summary>
            [10] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.BinarySerializeKeyValue{KT,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{VT}} value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.WriteCompleted">
            <summary>
            [11] The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            KT key Index keyword 
                       索引关键字
            AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
                       磁盘块索引信息
            int valueCount The number of newly added data 
                       新增数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.WriteCompletedLoadPersistence">
            <summary>
            [12] The operation of writing the disk block index information has been completed (Initialize and load the persistent data) 
                       磁盘块索引信息写入完成操作（初始化加载持久化数据）
            KT key Index keyword 
                       索引关键字
            AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
                       磁盘块索引信息
            int valueCount The number of newly added data 
                       新增数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.AppendLeftArray">
            <summary>
            [13] Add matching data keyword 
                       添加匹配数据关键字
            AutoCSer.LeftArray{KT} keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.AppendLeftArrayLoadPersistence">
            <summary>
            [14] Add matching data keyword (Initialize and load the persistent data) 
                       添加匹配数据关键字（初始化加载持久化数据）
            AutoCSer.LeftArray{KT} keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.RemoveLeftArray">
            <summary>
            [15] Delete the matching data keyword 
                       删除匹配数据关键字
            AutoCSer.LeftArray{KT} keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.RemoveLeftArrayLoadPersistence">
            <summary>
            [16] Delete the matching data keyword (Initialize and load the persistent data) 
                       删除匹配数据关键字（初始化加载持久化数据）
            AutoCSer.LeftArray{KT} keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeMethodEnum.GetBlockIndexDataArray">
            <summary>
            [17] Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            KT[] keys Index keyword collection 
                       索引关键字集合
            返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{VT}[] 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum">
            <summary>
            Node interface with reusable hash indexes with removal tags 
                       带移除标记的可重用哈希索引节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.Append">
            <summary>
            [0] Add matching data keyword 
                       添加匹配数据关键字
            T key Index keyword 
                       索引关键字
            uint value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.AppendArray">
            <summary>
            [1] Add matching data keyword 
                       添加匹配数据关键字
            T[] keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.AppendArrayLoadPersistence">
            <summary>
            [2] Add matching data keyword (Initialize and load the persistent data) 
                       添加匹配数据关键字（初始化加载持久化数据）
            T[] keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.AppendLoadPersistence">
            <summary>
            [3] Add matching data keyword (Initialize and load the persistent data) 
                       添加匹配数据关键字（初始化加载持久化数据）
            T key Index keyword 
                       索引关键字
            uint value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.GetBlockIndexData">
            <summary>
            [4] Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            T key Index keyword 
                       索引关键字
            返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{uint} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.GetChangeKeys">
            <summary>
            [5] Gets the collection of updated keyword 
                       获取更新关键字集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.Remove">
            <summary>
            [6] Delete the matching data keyword 
                       删除匹配数据关键字
            T key Index keyword 
                       索引关键字
            uint value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.RemoveArray">
            <summary>
            [7] Delete the matching data keyword 
                       删除匹配数据关键字
            T[] keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.RemoveArrayLoadPersistence">
            <summary>
            [8] Delete the matching data keyword (Initialize and load the persistent data) 
                       删除匹配数据关键字（初始化加载持久化数据）
            T[] keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.RemoveLoadPersistence">
            <summary>
            [9] Delete the matching data keyword (Initialize and load the persistent data) 
                       删除匹配数据关键字（初始化加载持久化数据）
            T key Index keyword 
                       索引关键字
            uint value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.SnapshotSet">
            <summary>
            [10] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.BinarySerializeKeyValue{T,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{uint}} value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.WriteCompleted">
            <summary>
            [11] The operation of writing the disk block index information has been completed 
                       磁盘块索引信息写入完成操作
            T key Index keyword 
                       索引关键字
            AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
                       磁盘块索引信息
            int valueCount The number of newly added data 
                       新增数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.WriteCompletedLoadPersistence">
            <summary>
            [12] The operation of writing the disk block index information has been completed (Initialize and load the persistent data) 
                       磁盘块索引信息写入完成操作（初始化加载持久化数据）
            T key Index keyword 
                       索引关键字
            AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
                       磁盘块索引信息
            int valueCount The number of newly added data 
                       新增数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.AppendLeftArray">
            <summary>
            [13] Add matching data keyword 
                       添加匹配数据关键字
            AutoCSer.LeftArray{T} keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.AppendLeftArrayLoadPersistence">
            <summary>
            [14] Add matching data keyword (Initialize and load the persistent data) 
                       添加匹配数据关键字（初始化加载持久化数据）
            AutoCSer.LeftArray{T} keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.RemoveLeftArray">
            <summary>
            [15] Delete the matching data keyword 
                       删除匹配数据关键字
            AutoCSer.LeftArray{T} keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.RemoveLeftArrayLoadPersistence">
            <summary>
            [16] Delete the matching data keyword (Initialize and load the persistent data) 
                       删除匹配数据关键字（初始化加载持久化数据）
            AutoCSer.LeftArray{T} keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.GetBlockIndexDataArray">
            <summary>
            [17] Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            T[] keys Index keyword collection 
                       索引关键字集合
            返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{uint}[] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.GetIntBlockIndexData">
            <summary>
            [18] Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            T key Index keyword 
                       索引关键字
            返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{int} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeMethodEnum.GetIntBlockIndexDataArray">
            <summary>
            [19] Get the index information of the index data disk block 
                       获取索引数据磁盘块索引信息
            T[] keys Index keyword collection 
                       索引关键字集合
            返回值 AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{int}[] 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.IIndex`1">
            <summary>
            索引接口
            </summary>
            <typeparam name="T">索引数据类型</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IIndex`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndex`1.Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1">
            <summary>
            数组索引
            </summary>
            <typeparam name="T">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1.array">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1.#ctor(`0[])">
            <summary>
            数组索引
            </summary>
            <param name="array">索引数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1.Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="bufferHashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1.Get(`0[])">
            <summary>
            获取数组索引
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayIndex`1.Empty">
            <summary>
            空数组索引
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.HashSetIndex`1">
            <summary>
            哈希表索引
            </summary>
            <typeparam name="T">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.HashSetIndex`1.HashSet">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.HashSetIndex`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetIndex`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            哈希表索引
            </summary>
            <param name="hashSet">索引数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetIndex`1.Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="bufferHashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.IndexNode`1">
            <summary>
            索引节点数据
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.IndexNode`1.Node">
            <summary>
            关键字数据磁盘块索引信息节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.IndexNode`1.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IndexNode`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IndexNode`1.IsLoaded">
            <summary>
            是否已经加载数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexNode`1.#ctor(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0})">
            <summary>
            索引节点数据
            </summary>
            <param name="node">关键字数据磁盘块索引信息节点</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexNode`1.Set(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0})">
            <summary>
            设置关键字数据磁盘块索引信息节点
            </summary>
            <param name="node">关键字数据磁盘块索引信息节点</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex">
            <summary>
            哈希表索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex.hashSet">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex.#ctor(AutoCSer.RemoveMarkHashSet)">
            <summary>
            哈希表索引
            </summary>
            <param name="hashSet">索引数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex.Contains(System.UInt32)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{System.UInt32})">
            <summary>
            并集 OR
            </summary>
            <param name="bufferHashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{System.UInt32})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex`1">
            <summary>
            哈希表索引
            </summary>
            <typeparam name="T">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex`1.hashSet">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex`1.#ctor(AutoCSer.RemoveMarkHashSet{`0})">
            <summary>
            哈希表索引
            </summary>
            <param name="hashSet">索引数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex`1.Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="bufferHashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkHashSetIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkIntHashSetIndex">
            <summary>
            哈希表索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkIntHashSetIndex.hashSet">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkIntHashSetIndex.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkIntHashSetIndex.#ctor(AutoCSer.RemoveMarkHashSet)">
            <summary>
            哈希表索引
            </summary>
            <param name="hashSet">索引数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkIntHashSetIndex.Contains(System.Int32)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkIntHashSetIndex.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{System.Int32})">
            <summary>
            并集 OR
            </summary>
            <param name="bufferHashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.RemoveMarkIntHashSetIndex.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{System.Int32})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.ReusableHashCodeKeyHashSetIndex">
            <summary>
            哈希表索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ReusableHashCodeKeyHashSetIndex.HashSet">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.ReusableHashCodeKeyHashSetIndex.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ReusableHashCodeKeyHashSetIndex.#ctor(AutoCSer.ReusableHashCodeKeyHashSet)">
            <summary>
            哈希表索引
            </summary>
            <param name="hashSet">索引数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ReusableHashCodeKeyHashSetIndex.Contains(System.UInt32)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ReusableHashCodeKeyHashSetIndex.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{System.UInt32})">
            <summary>
            并集 OR
            </summary>
            <param name="bufferHashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ReusableHashCodeKeyHashSetIndex.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{System.UInt32})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.ReusableIntHashSetIndex">
            <summary>
            哈希表索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ReusableIntHashSetIndex.HashSet">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.ReusableIntHashSetIndex.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ReusableIntHashSetIndex.#ctor(AutoCSer.ReusableHashCodeKeyHashSet)">
            <summary>
            哈希表索引
            </summary>
            <param name="hashSet">索引数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ReusableIntHashSetIndex.Contains(System.Int32)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ReusableIntHashSetIndex.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{System.Int32})">
            <summary>
            并集 OR
            </summary>
            <param name="bufferHashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ReusableIntHashSetIndex.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{System.Int32})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1">
            <summary>
            数组缓冲区
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.Array">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.count">
            <summary>
            有效数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.Count">
            <summary>
            有效数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.PoolIndex">
            <summary>
            缓冲区池所在索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.pool">
            <summary>
            数组缓冲区池数组
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.#ctor(AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray{`0})">
            <summary>
            空数组缓冲区
            </summary>
            <param name="pool"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.#ctor(AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray{`0},`0[],System.Int32)">
            <summary>
            数组缓冲区
            </summary>
            <param name="pool"></param>
            <param name="array"></param>
            <param name="poolIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.#ctor(AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray{`0},System.Int32)">
            <summary>
            数组缓冲区
            </summary>
            <param name="pool"></param>
            <param name="size">数组大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.GetLeftArray">
            <summary>
            获取数组子串并清除有效数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.GetLeftArray(System.Int32)">
            <summary>
            获取数组子串
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.Free">
            <summary>
            释放数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.UnsafeAdd(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.Add(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.SetCount(System.Int32)">
            <summary>
            设置有效数据数量
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.GetCount">
            <summary>
            获取有效数据数量并设置为 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer`1.CopyFrom(`0[])">
            <summary>
            Copy data
            </summary>
            <param name="array"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPool`1">
            <summary>
            数组缓冲区池
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPool`1.buffers">
            <summary>
            数组缓冲区集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPool`1.size">
            <summary>
            数组大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPool`1.isGetNewBuffer">
            <summary>
            是否申请了新的缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPool`1.#ctor(System.Int32)">
            <summary>
            数组缓冲区池
            </summary>
            <param name="bit">数组大小二进制位数</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPool`1.GetBuffer(AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray{`0},System.Int32)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="pool"></param>
            <param name="poolIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPool`1.Free(`0[]@)">
            <summary>
            释放数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPool`1.FreeCache">
            <summary>
            释放部分缓冲区
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1">
            <summary>
            数组缓冲区池数组
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1.pools">
            <summary>
            数组缓冲区池集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1.startBit">
            <summary>
            数组大小起始二进制位数
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1.#ctor(System.Int32,System.Int32)">
            <summary>
            数组缓冲区池数组
            </summary>
            <param name="startBit">数组大小起始二进制位数，建议为 10</param>
            <param name="endBit">数组大小结束二进制位数，默认为最大值 30</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1.Free(AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0}@)">
            <summary>
            释放数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1.GetBuffer(System.Int32)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="size">数组最小容量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1.GetBuffer(System.Int32,AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0}@)">
            <summary>
            根据缓冲区池索引位置获取数组缓冲区
            </summary>
            <param name="poolIndex"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1.GetNull">
            <summary>
            获取空数组缓冲区
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.ArrayBufferPoolArray`1.FreeCache">
            <summary>
            释放部分缓冲区
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1">
            <summary>
            可重用哈希表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.pools">
            <summary>
            可重用哈希表缓冲区池数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.pool">
            <summary>
            当前可重用哈希表缓冲区池
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.#ctor(System.Int32)">
            <summary>
            可重用哈希表
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.#ctor(AutoCSer.CommandService.Search.IndexQuery.HashSetPool{`0}[],AutoCSer.CommandService.Search.IndexQuery.HashSetPool{`0},AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            可重用哈希表
            </summary>
            <param name="pools"></param>
            <param name="pool"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.resize">
            <summary>
            重组数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.Free">
            <summary>
            释放可重用哈希表
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.copyTo(AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0}@)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.GetArrayBuffer(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BufferHashSet`1.GetArrayBuffer(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1">
            <summary>
            可重用哈希表缓冲区池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.buffers">
            <summary>
            可重用哈希表缓冲区数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.hashSets">
            <summary>
            可重用哈希表集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.CapacityDivision">
            <summary>
            哈希取余
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.isGetNewBuffer">
            <summary>
            是否申请了新的缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.isGetNewHashSet">
            <summary>
            是否申请了新的缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.#ctor(System.Int32)">
            <summary>
            可重用哈希表缓冲区池
            </summary>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.GetBuffer">
            <summary>
            获取数组缓冲区
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.Free(AutoCSer.ReusableHashNode{`0}[])">
            <summary>
            释放数组缓冲区
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.GetHashSet(AutoCSer.CommandService.Search.IndexQuery.HashSetPool{`0}[])">
            <summary>
            获取可重用哈希表
            </summary>
            <param name="pools"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.Free(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            释放可重用哈希表
            </summary>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.FreeCache">
            <summary>
            释放部分缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.GetArray(System.Int32,System.Int32)">
            <summary>
            获取可重用哈希表缓冲区池数组
            </summary>
            <param name="minCapacity">最小容器数组大小，建议为 1024</param>
            <param name="maxCapacity">最大容器数组大小，默认为最大值 0x7fffffc3</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.Get(AutoCSer.CommandService.Search.IndexQuery.HashSetPool{`0}[],System.Int32)">
            <summary>
            根据指定容器大小获取可重用哈希表缓冲区池
            </summary>
            <param name="pools"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.GetHashSet(AutoCSer.CommandService.Search.IndexQuery.HashSetPool{`0}[],System.Int32)">
            <summary>
            获取可重用哈希表
            </summary>
            <param name="pools"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.HashSetPool`1.FreeCache(AutoCSer.CommandService.Search.IndexQuery.HashSetPool{`0}[])">
            <summary>
            释放部分缓冲区
            </summary>
            <param name="pools"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1">
            <summary>
            索引集合条件
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.conditions">
            <summary>
            索引条件集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.loadedCount">
            <summary>
            已经加载数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#IsLoaded">
            <summary>
            是否已经加载数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.type">
            <summary>
            索引合并操作类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.#ctor(AutoCSer.LeftArray{AutoCSer.CommandService.Search.IndexQuery.IIndexCondition{`0}},AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            索引集合条件
            </summary>
            <param name="conditions">索引条件集合</param>
            <param name="type">索引合并操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.#ctor(AutoCSer.CommandService.Search.IndexQuery.IIndexCondition{`0}[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            索引集合条件
            </summary>
            <param name="conditions">索引条件集合</param>
            <param name="type">索引合并操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.setEstimatedCount(System.Int64)">
            <summary>
            设置预估数据数量
            </summary>
            <param name="unionCount"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#Load">
            <summary>
            Load data
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#GetLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.intersection(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            交集 AND
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.intersection(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            交集 AND
            </summary>
            <param name="condition"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.intersectionNotEmpty(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            交集 AND（忽略空集，必须存在一个非空集）
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.intersectionNotEmpty(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0},System.Int32)">
            <summary>
            交集 AND（忽略空集，必须存在一个非空集）
            </summary>
            <param name="condition"></param>
            <param name="buffer"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.union(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.unionLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},System.Int32)">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.GetLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#GetFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.intersectionFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            交集 AND
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.intersectionNotEmptyFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            交集 AND（忽略空集，必须存在一个非空集）
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IndexArrayCondition`1.unionFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1">
            <summary>
            索引条件接口
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1.IsLoaded">
            <summary>
            是否已经加载数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1.GetFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1.Load">
            <summary>
            Load data
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1.Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1.GetLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition">查询条件</param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IIndexCondition`1.GetLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1">
            <summary>
            索引条件
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.node">
            <summary>
            关键字数据磁盘块索引信息节点
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#IsLoaded">
            <summary>
            是否已经加载数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.#ctor(AutoCSer.CommandService.Search.IndexQuery.IndexNode{`0})">
            <summary>
            索引条件
            </summary>
            <param name="node">关键字数据磁盘块索引信息节点集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.#ctor(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0})">
            <summary>
            索引条件
            </summary>
            <param name="node">关键字数据磁盘块索引信息节点集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#GetFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#Load">
            <summary>
            Load data
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#GetLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition">查询条件</param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#GetLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1">
            <summary>
            索引集合条件
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.nodes">
            <summary>
            索引节点数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.loadedCount">
            <summary>
            已经加载数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#IsLoaded">
            <summary>
            是否已经加载数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.type">
            <summary>
            索引合并操作类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.#ctor(AutoCSer.LeftArray{AutoCSer.CommandService.Search.IndexQuery.IndexNode{`0}},AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            索引集合条件
            </summary>
            <param name="nodes">索引节点数据集合</param>
            <param name="type">索引合并操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.#ctor(AutoCSer.CommandService.Search.IndexQuery.IndexNode{`0}[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            索引集合条件
            </summary>
            <param name="nodes">索引节点数据集合</param>
            <param name="type">索引合并操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.setEstimatedCount(System.Int64)">
            <summary>
            设置预估数据数量
            </summary>
            <param name="unionCount"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#Load">
            <summary>
            Load data
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#Get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.get(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.IndexNode{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.intersection(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            交集 AND
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.intersection(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            交集 AND
            </summary>
            <param name="condition"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.intersectionNotEmpty(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            交集 AND（忽略空集，必须存在一个非空集）
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.intersectionNotEmpty(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0},System.Int32)">
            <summary>
            交集 AND（忽略空集，必须存在一个非空集）
            </summary>
            <param name="condition"></param>
            <param name="buffer"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.union(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#GetFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.getFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.IndexNode{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.intersectionFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            交集 AND
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.intersectionNotEmptyFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            交集 AND（忽略空集，必须存在一个非空集）
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.unionFilter(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.AutoCSer#CommandService#Search#IndexQuery#IIndexCondition{T}#GetLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition">查询条件</param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.GetLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.BlockIndexArrayCondition`1.unionLoaded(AutoCSer.CommandService.Search.IndexQuery.QueryCondition{`0},System.Int32)">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum">
            <summary>
            索引合并操作类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum.Intersection">
            <summary>
            交集 AND
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum.Union">
            <summary>
            并集 OR
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum.IntersectionNotEmpty">
            <summary>
            交集 AND（忽略空集，必须存在一个非空集）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.IQueryContext`2">
            <summary>
            查询上下文
            </summary>
            <typeparam name="KT">查询数据关键字类型</typeparam>
            <typeparam name="VT">查询条件数据</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IQueryContext`2.Filter(AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0},System.Func{`1,System.Boolean})">
            <summary>
            非索引条件过滤
            </summary>
            <param name="keys">关键字集合</param>
            <param name="isValue">条件委托</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IQueryContext`2.NullBufferTask">
            <summary>
            空数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.IQueryContext`2.GetBuffer(System.Int32)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="size">数组最小容量</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.CommandService.Search.IndexQuery.IQueryContext`2.HashSetPool">
            <summary>
            关键字可重用哈希表缓冲区池
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`1">
            <summary>
            查询条件
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`1.Filter(AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            非索引条件过滤
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`1.GetNullBuffer">
            <summary>
            获取空数组缓冲区
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`1.GetBuffer(System.Int32)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="size">数组最小容量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`1.GetHashSetPool">
            <summary>
            获取可重用哈希表
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2">
            <summary>
            查询条件
            </summary>
            <typeparam name="KT">查询数据关键字类型</typeparam>
            <typeparam name="VT">查询条件数据</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.context">
            <summary>
            查询上下文
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.indexCondition">
            <summary>
            索引条件集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.condition">
            <summary>
            非索引条件
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.#ctor(AutoCSer.CommandService.Search.IndexQuery.IQueryContext{`0,`1},AutoCSer.CommandService.Search.IndexQuery.IIndexCondition{`0},System.Func{`1,System.Boolean})">
            <summary>
            查询条件
            </summary>
            <param name="context">查询上下文</param>
            <param name="indexCondition">索引条件</param>
            <param name="condition">非索引条件</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.#ctor(AutoCSer.CommandService.Search.IndexQuery.IQueryContext{`0,`1},AutoCSer.LeftArray{AutoCSer.CommandService.Search.IndexQuery.IIndexCondition{`0}},System.Func{`1,System.Boolean})">
            <summary>
            查询条件
            </summary>
            <param name="context">查询上下文</param>
            <param name="indexs">索引条件集合</param>
            <param name="condition">非索引条件</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.#ctor(AutoCSer.CommandService.Search.IndexQuery.IQueryContext{`0,`1},AutoCSer.CommandService.Search.IndexQuery.IIndexCondition{`0}[],System.Func{`1,System.Boolean})">
            <summary>
            查询条件
            </summary>
            <param name="context">查询上下文</param>
            <param name="indexs">索引条件集合</param>
            <param name="condition">非索引条件</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.Query(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter)">
            <summary>
            查询分页数据
            </summary>
            <param name="queryParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.Filter(AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            非索引条件过滤
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.GetNullBuffer">
            <summary>
            获取空数组缓冲区
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.GetBuffer(System.Int32)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="size">数组最小容量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IndexQuery.QueryCondition`2.GetHashSetPool">
            <summary>
            获取可重用哈希表
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1">
            <summary>
            索引集合条件
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.indexs">
            <summary>
            索引集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.type">
            <summary>
            索引合并操作类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.#ctor(AutoCSer.LeftArray{AutoCSer.CommandService.Search.MemoryIndex.IIndex{`0}},AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            索引集合条件
            </summary>
            <param name="indexs">索引节点数据集合</param>
            <param name="type">索引合并操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.AutoCSer#CommandService#Search#MemoryIndex#IIndexCondition{T}#Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.AutoCSer#CommandService#Search#MemoryIndex#IIndexCondition{T}#Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition">查询条件</param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.intersection(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            交集 AND
            </summary>
            <param name="condition"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.isUnion">
            <summary>
            判断是否需要求并集 OR
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.union(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexArrayCondition`1.GetFilter(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IndexCondition`1">
            <summary>
            索引条件
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IndexCondition`1.index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.IndexCondition`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexCondition`1.#ctor(AutoCSer.CommandService.Search.MemoryIndex.IIndex{`0})">
            <summary>
            索引条件
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexCondition`1.AutoCSer#CommandService#Search#MemoryIndex#IIndexCondition{T}#Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexCondition`1.AutoCSer#CommandService#Search#MemoryIndex#IIndexCondition{T}#Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition">查询条件</param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexCondition`1.Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexCondition`1.GetFilter(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1">
            <summary>
            哈希索引节点
            </summary>
            <typeparam name="T">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.indexs">
            <summary>
            关键字索引集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.#ctor">
            <summary>
            哈希索引节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.free">
            <summary>
            释放索引节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.StreamPersistenceMemoryDatabaseServiceNodeOnRemoved">
            <summary>
            Processing operations after node removal
            节点移除后的处理操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.StreamPersistenceMemoryDatabaseServiceDisposable">
            <summary>
            Database service shutdown operation
            数据库服务关闭操作
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{T,System#UInt32[]}}#GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{T,System#UInt32[]}}#GetSnapshotResult(AutoCSer.BinarySerializeKeyValue{`0,System.UInt32[]}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,System.UInt32[]})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.AppendBeforePersistence(`0,System.UInt32)">
            <summary>
            Add matching data keyword (Check the input parameters before the persistence operation)
            添加匹配数据关键字（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.RemoveBeforePersistence(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword (Check the input parameters before the persistence operation)
            删除匹配数据关键字（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.GetIndexCondition(`0[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="type">索引合并操作类型</param>
            <returns>Return null on failure</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeyIndexNode`1.GetIntIndexCondition(`0[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="type">索引合并操作类型</param>
            <returns>Return null on failure</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2">
            <summary>
            哈希索引节点
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">Data keyword type
            数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.indexs">
            <summary>
            关键字索引集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.#ctor">
            <summary>
            哈希索引节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{KT,VT[]}}#GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{KT,VT[]}}#GetSnapshotResult(AutoCSer.BinarySerializeKeyValue{`0,`1[]}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{KT,VT[]}}#SetSnapshotResult(AutoCSer.LeftArray{AutoCSer.BinarySerializeKeyValue{`0,`1[]}}@,AutoCSer.LeftArray{AutoCSer.BinarySerializeKeyValue{`0,`1[]}}@)">
            <summary>
            Reorganize the snapshot data before persistence
            持久化之前重组快照数据
            </summary>
            <param name="array">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="newArray">Snapshot data collection that exceed the pre-application scope
            超出预申请范围的快照数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,`1[]})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.AppendBeforePersistence(`0,`1)">
            <summary>
            Add matching data keyword (Check the input parameters before the persistence operation)
            添加匹配数据关键字（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.RemoveBeforePersistence(`0,`1)">
            <summary>
            Delete the matching data keyword (Check the input parameters before the persistence operation)
            删除匹配数据关键字（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashIndexNode`2.GetIndexCondition(`0[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="type">索引合并操作类型</param>
            <returns>Return null on failure</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex">
            <summary>
            哈希索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.littleValues">
            <summary>
            索引数据（8B 哈希+ VT）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.manyValues">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.#ctor(System.UInt32)">
            <summary>
            哈希索引
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.#ctor(System.UInt32[])">
            <summary>
            哈希索引
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.Free">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.ToArray">
            <summary>
            获取数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.Contains(System.UInt32)">
            <summary>
            Determine whether there is data
            判断是否存在数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.Contains(System.Int32)">
            <summary>
            Determine whether there is data
            判断是否存在数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.Append(System.UInt32)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.Remove(System.UInt32)">
            <summary>
            Delete data
            删除数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.AutoCSer#CommandService#Search#MemoryIndex#IIndex{System#UInt32}#Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{System.UInt32})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.AutoCSer#CommandService#Search#MemoryIndex#IIndex{System#UInt32}#GetFilter(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{System.UInt32})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.AutoCSer#CommandService#Search#MemoryIndex#IIndex{System#UInt32}#Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{System.UInt32})">
            <summary>
            并集 OR
            </summary>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.AutoCSer#CommandService#Search#MemoryIndex#IIndex{System#UInt32}#AllIn(AutoCSer.CommandService.Search.MemoryIndex.IIndex{System.UInt32})">
            <summary>
            判断是否全部包含于另一个集合
            </summary>
            <param name="index">另一个集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.AutoCSer#CommandService#Search#MemoryIndex#IIndex{System#Int32}#Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{System.Int32})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.AutoCSer#CommandService#Search#MemoryIndex#IIndex{System#Int32}#GetFilter(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{System.Int32})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.AutoCSer#CommandService#Search#MemoryIndex#IIndex{System#Int32}#Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{System.Int32})">
            <summary>
            并集 OR
            </summary>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashCodeKeySetIndex.AutoCSer#CommandService#Search#MemoryIndex#IIndex{System#Int32}#AllIn(AutoCSer.CommandService.Search.MemoryIndex.IIndex{System.Int32})">
            <summary>
            判断是否全部包含于另一个集合
            </summary>
            <param name="index">另一个集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1">
            <summary>
            哈希索引
            </summary>
            <typeparam name="T">数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.littleValues">
            <summary>
            索引数据（8B 哈希+ VT）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.manyValues">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.#ctor(`0)">
            <summary>
            哈希索引
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.#ctor(`0[])">
            <summary>
            哈希索引
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.ToArray">
            <summary>
            获取数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.Contains(`0)">
            <summary>
            Determine whether there is data
            判断是否存在数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.Append(`0)">
            <summary>
            Add data
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.Remove(`0)">
            <summary>
            Delete data
            删除数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.AutoCSer#CommandService#Search#MemoryIndex#IIndex{T}#Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.AutoCSer#CommandService#Search#MemoryIndex#IIndex{T}#GetFilter(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.AutoCSer#CommandService#Search#MemoryIndex#IIndex{T}#Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.HashSetIndex`1.AutoCSer#CommandService#Search#MemoryIndex#IIndex{T}#AllIn(AutoCSer.CommandService.Search.MemoryIndex.IIndex{`0})">
            <summary>
            判断是否全部包含于另一个集合
            </summary>
            <param name="index">另一个集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1">
            <summary>
            Hash index node interface
            哈希索引节点接口
            </summary>
            <typeparam name="T">Index keyword type
            索引关键字类型</typeparam>
            <summary>
            Hash index node interface 
                       哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,System.UInt32[]})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.AppendBeforePersistence(`0,System.UInt32)">
            <summary>
            Add matching data keyword (Check the input parameters before the persistence operation)
            添加匹配数据关键字（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.RemoveBeforePersistence(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword (Check the input parameters before the persistence operation)
            删除匹配数据关键字（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2">
            <summary>
            Hash index node interface
            哈希索引节点接口
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">Data keyword type
            数据关键字类型</typeparam>
            <summary>
            Hash index node interface 
                       哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,`1[]})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.AppendBeforePersistence(`0,`1)">
            <summary>
            Add matching data keyword (Check the input parameters before the persistence operation)
            添加匹配数据关键字（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null
            返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword
            添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.RemoveBeforePersistence(`0,`1)">
            <summary>
            Delete the matching data keyword (Check the input parameters before the persistence operation)
            删除匹配数据关键字（持久化操作之前检查输入参数）
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="key">Index keyword
            索引关键字</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found
            返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword
            删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection
            索引关键字集合</param>
            <param name="value">Matching data keyword
            匹配数据关键字</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IIndex`1">
            <summary>
            索引接口
            </summary>
            <typeparam name="T">索引数据类型</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.IIndex`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndex`1.Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndex`1.AllIn(AutoCSer.CommandService.Search.MemoryIndex.IIndex{`0})">
            <summary>
            判断是否全部包含于另一个集合
            </summary>
            <param name="index">另一个集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndex`1.Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndex`1.GetFilter(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndex`1.Get(AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="hashSet"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition`1">
            <summary>
            索引条件接口
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition`1.Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition`1.Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition`1.GetFilter(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition`1.Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <param name="hashSet"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1">
            <summary>
            索引集合条件
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.conditions">
            <summary>
            索引条件集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.type">
            <summary>
            索引合并操作类型
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.#ctor(AutoCSer.LeftArray{AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition{`0}},AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            索引集合条件
            </summary>
            <param name="conditions">索引条件集合</param>
            <param name="type">索引合并操作类型</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.AutoCSer#CommandService#Search#MemoryIndex#IIndexCondition{T}#Contains(`0)">
            <summary>
            判断是否包含数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.AutoCSer#CommandService#Search#MemoryIndex#IIndexCondition{T}#Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.BufferHashSet{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.Get(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.intersection(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            交集 AND
            </summary>
            <param name="condition"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.union(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            并集 OR
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.GetFilter(AutoCSer.CommandService.Search.MemoryIndex.QueryCondition{`0})">
            <summary>
            计算查询数据关键字（非索引条件过滤）
            </summary>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IndexConditionArray`1.GetIndexCondition(AutoCSer.LeftArray{AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition{`0}},AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="conditions">索引条件集合</param>
            <param name="type">索引合并操作类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IQueryContext`2">
            <summary>
            查询上下文
            </summary>
            <typeparam name="KT">查询数据关键字类型</typeparam>
            <typeparam name="VT">查询条件数据</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IQueryContext`2.Filter(System.Collections.Generic.IEnumerable{`0},System.Func{`1,System.Boolean},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            非索引条件过滤
            </summary>
            <param name="keys">关键字集合</param>
            <param name="isValue">条件委托</param>
            <param name="buffer">关键字集合</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.IQueryContext`2.NullBuffer">
            <summary>
            空数组缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IQueryContext`2.GetBuffer(System.Int32)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="size">数组最小容量</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.CommandService.Search.MemoryIndex.IQueryContext`2.HashSetPool">
            <summary>
            关键字可重用哈希表缓冲区池
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`1">
            <summary>
            查询条件
            </summary>
            <typeparam name="T">查询数据关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`1.Filter(System.Collections.Generic.IEnumerable{`0},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            非索引条件过滤
            </summary>
            <param name="keys"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`1.GetNullBuffer">
            <summary>
            获取空数组缓冲区
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`1.GetBuffer(System.Int32)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="size">数组最小容量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`1.GetHashSetPool">
            <summary>
            获取可重用哈希表
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2">
            <summary>
            查询条件
            </summary>
            <typeparam name="KT">查询数据关键字类型</typeparam>
            <typeparam name="VT">查询条件数据</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.context">
            <summary>
            查询上下文
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.indexCondition">
            <summary>
            索引条件集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.condition">
            <summary>
            非索引条件
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.#ctor(AutoCSer.CommandService.Search.MemoryIndex.IQueryContext{`0,`1},AutoCSer.CommandService.Search.MemoryIndex.IIndexCondition{`0},System.Func{`1,System.Boolean})">
            <summary>
            查询条件
            </summary>
            <param name="context">查询上下文</param>
            <param name="indexCondition">索引条件</param>
            <param name="condition">非索引条件</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.Query(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageParameter)">
            <summary>
            查询分页数据
            </summary>
            <param name="queryParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.GetNullBuffer">
            <summary>
            获取空数组缓冲区
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.GetBuffer(System.Int32)">
            <summary>
            获取数组缓冲区
            </summary>
            <param name="size">数组最小容量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.Filter(System.Collections.Generic.IEnumerable{`0},AutoCSer.CommandService.Search.IndexQuery.ArrayBuffer{`0})">
            <summary>
            非索引条件过滤
            </summary>
            <param name="keys"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.QueryCondition`2.GetHashSetPool">
            <summary>
            获取可重用哈希表
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeLocalClientNode`1">
            <summary>
            Hash index node interface 
                       哈希索引节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeLocalClientNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeLocalClientNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeLocalClientNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeLocalClientNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeLocalClientNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeLocalClientNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeReturnValueLocalNode`1">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode{T})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeReturnValueLocalNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeLocalClientNode{`0}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNode{T})
            </summary>
            <param name="node">Log stream persistence memory database local client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeReturnValueLocalNode`1.Append(`0,System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeReturnValueLocalNode`1.AppendArray(`0[],System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeReturnValueLocalNode`1.AppendLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeReturnValueLocalNode`1.Remove(`0,System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeReturnValueLocalNode`1.RemoveArray(`0[],System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeReturnValueLocalNode`1.RemoveLeftArray(AutoCSer.LeftArray{`0},System.UInt32)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeLocalClientNode`2">
            <summary>
            Hash index node interface 
                       哈希索引节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeLocalClientNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeLocalClientNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeLocalClientNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeLocalClientNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeLocalClientNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeLocalClientNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeReturnValueLocalNode`2">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode{KT,VT})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeReturnValueLocalNode`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeLocalClientNode{`0,`1}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNode{KT,VT})
            </summary>
            <param name="node">Log stream persistence memory database local client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeReturnValueLocalNode`2.Append(`0,`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeReturnValueLocalNode`2.AppendArray(`0[],`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeReturnValueLocalNode`2.AppendLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Add matching data keyword 
                       添加匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeReturnValueLocalNode`2.Remove(`0,`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="key">Index keyword 
                       索引关键字</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
            <returns>Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeReturnValueLocalNode`2.RemoveArray(`0[],`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeReturnValueLocalNode`2.RemoveLeftArray(AutoCSer.LeftArray{`0},`1)">
            <summary>
            Delete the matching data keyword 
                       删除匹配数据关键字
            </summary>
            <param name="keys">Index keyword collection 
                       索引关键字集合</param>
            <param name="value">Matching data keyword 
                       匹配数据关键字</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum">
            <summary>
            Hash index node interface 
                       哈希索引节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.Append">
            <summary>
            [0] Add matching data keyword 
                       添加匹配数据关键字
            T key Index keyword 
                       索引关键字
            uint value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.AppendArray">
            <summary>
            [1] Add matching data keyword 
                       添加匹配数据关键字
            T[] keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.AppendBeforePersistence">
            <summary>
            [2] Add matching data keyword (Check the input parameters before the persistence operation) 
                       添加匹配数据关键字（持久化操作之前检查输入参数）
            T key Index keyword 
                       索引关键字
            uint value Matching data keyword 
                       匹配数据关键字
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.AppendLeftArray">
            <summary>
            [3] Add matching data keyword 
                       添加匹配数据关键字
            AutoCSer.LeftArray{T} keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.Remove">
            <summary>
            [4] Delete the matching data keyword 
                       删除匹配数据关键字
            T key Index keyword 
                       索引关键字
            uint value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.RemoveArray">
            <summary>
            [5] Delete the matching data keyword 
                       删除匹配数据关键字
            T[] keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.RemoveBeforePersistence">
            <summary>
            [6] Delete the matching data keyword (Check the input parameters before the persistence operation) 
                       删除匹配数据关键字（持久化操作之前检查输入参数）
            T key Index keyword 
                       索引关键字
            uint value Matching data keyword 
                       匹配数据关键字
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.RemoveLeftArray">
            <summary>
            [7] Delete the matching data keyword 
                       删除匹配数据关键字
            AutoCSer.LeftArray{T} keys Index keyword collection 
                       索引关键字集合
            uint value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashCodeKeyIndexNodeMethodEnum.SnapshotSet">
            <summary>
            [8] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.BinarySerializeKeyValue{T,uint[]} value data
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum">
            <summary>
            Hash index node interface 
                       哈希索引节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.Append">
            <summary>
            [0] Add matching data keyword 
                       添加匹配数据关键字
            KT key Index keyword 
                       索引关键字
            VT value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null 
                       返回 false 表示关键字数据为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.AppendArray">
            <summary>
            [1] Add matching data keyword 
                       添加匹配数据关键字
            KT[] keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.AppendBeforePersistence">
            <summary>
            [2] Add matching data keyword (Check the input parameters before the persistence operation) 
                       添加匹配数据关键字（持久化操作之前检查输入参数）
            KT key Index keyword 
                       索引关键字
            VT value Matching data keyword 
                       匹配数据关键字
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.AppendLeftArray">
            <summary>
            [3] Add matching data keyword 
                       添加匹配数据关键字
            AutoCSer.LeftArray{KT} keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.Remove">
            <summary>
            [4] Delete the matching data keyword 
                       删除匹配数据关键字
            KT key Index keyword 
                       索引关键字
            VT value Matching data keyword 
                       匹配数据关键字
            返回值 bool Returning false indicates that the keyword data is null or the index keyword is not found 
                       返回 false 表示关键字数据为 null 或者没有找到索引关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.RemoveArray">
            <summary>
            [5] Delete the matching data keyword 
                       删除匹配数据关键字
            KT[] keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.RemoveBeforePersistence">
            <summary>
            [6] Delete the matching data keyword (Check the input parameters before the persistence operation) 
                       删除匹配数据关键字（持久化操作之前检查输入参数）
            KT key Index keyword 
                       索引关键字
            VT value Matching data keyword 
                       匹配数据关键字
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{bool} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.RemoveLeftArray">
            <summary>
            [7] Delete the matching data keyword 
                       删除匹配数据关键字
            AutoCSer.LeftArray{KT} keys Index keyword collection 
                       索引关键字集合
            VT value Matching data keyword 
                       匹配数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.MemoryIndex.IHashIndexNodeMethodEnum.SnapshotSet">
            <summary>
            [8] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.BinarySerializeKeyValue{KT,VT[]} value data
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <typeparam name="T">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.CacheLock">
            <summary>
            缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.getChangeKeyKeepCallback">
            <summary>
            获取更新关键字集合保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.maxCount">
            <summary>
            最大缓存数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.GetChangeKeyVersion">
            <summary>
            获取更新关键字集合保持回调版本
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.isDispose">
            <summary>
            Whether to release resources
            是否释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.#ctor(System.Int64)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="maxCount">最大缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.setGetChangeKeyKeepCallback(System.IDisposable)">
            <summary>
            设置获取更新关键字集合保持回调
            </summary>
            <param name="keepCallback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.loadCondition(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0})">
            <summary>
            获取索引条件
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.loadCondition(AutoCSer.CommandService.Search.IndexQuery.IndexNode{`0}[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="nodes"></param>
            <param name="indexMergeType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.AddValueCount(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0},System.Int32)">
            <summary>
            添加缓存数据数量
            </summary>
            <param name="node"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.RemoveValueCount(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0},System.Int32)">
            <summary>
            移除缓存数据数量
            </summary>
            <param name="node"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.remove">
            <summary>
            淘汰缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`2">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`2.loadLocks">
            <summary>
            节点缓存加载访问锁集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`2.#ctor(System.Int64)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="maxCount">最大缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`2.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0,`1})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`2.GetSemaphoreSlimCache(`0)">
            <summary>
            获取节点缓存加载访问锁
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache`2.Release(AutoCSer.Threading.SemaphoreSlimCache,`0)">
            <summary>
            释放获取节点缓存加载访问锁
            </summary>
            <param name="semaphoreSlim"></param>
            <param name="key"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <typeparam name="T">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.LittleMinCount">
            <summary>
            少量数据最小数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.cache">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.data">
            <summary>
            索引数据磁盘块索引信息节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.getKeyVersion">
            <summary>
            获取数据关键字更新版本
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.getChangeKeyVersion">
            <summary>
            获取更新关键字集合保持回调版本
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.ChangeKeyVersion">
            <summary>
            关键字更新版本
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.isVersion">
            <summary>
            返回 true 表示索引数据版本有效
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.Type">
            <summary>
            哈希节点类型
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.EstimatedCount">
            <summary>
            预估数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.littleCount">
            <summary>
            少量数据集合数据量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.manyCount">
            <summary>
            大量数据集合数据量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.LittleIndex">
            <summary>
            少量数据索引
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.ManyIndex">
            <summary>
            大量数据索引
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.IsRemoved">
            <summary>
            是否已删除节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.#ctor(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache{`0})">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.GetSemaphoreSlimCache">
            <summary>
            获取节点缓存加载访问锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.Release(AutoCSer.Threading.SemaphoreSlimCache)">
            <summary>
            释放获取节点缓存加载访问锁
            </summary>
            <param name="semaphoreSlim"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.GetBlockIndexData">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.getBlockIndexData">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.Set(System.Int32,System.Int32,AutoCSer.CommandService.Search.DiskBlockIndex.BlockIndexData{`0})">
            <summary>
            设置索引数据磁盘块索引信息节点
            </summary>
            <param name="getKeyVersion"></param>
            <param name="getChangeKeyVersion"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.getRemoveLittleCount">
            <summary>
            获取少量数据集合数据量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.getRemoveManyCount">
            <summary>
            获取大量数据集合数据量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.setLittleValues">
            <summary>
            设置为少量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.setManyValues">
            <summary>
            设置为大量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.GetRemoveCacheValueCount">
            <summary>
            获取删除节点的缓存数据数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.GetLoadedIndex">
            <summary>
            获取索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.getIndex">
            <summary>
            获取索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.Load">
            <summary>
            Load data
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.Load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{`0}},System.Int32)">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.Load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{`0}},AutoCSer.CommandService.Search.IndexQuery.IIndex{`0})">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="manyIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.SetManyValues(AutoCSer.CommandService.Search.IndexQuery.IIndex{`0})">
            <summary>
            加载数据失败恢复数据
            </summary>
            <param name="manyIndex"></param>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.EmptyRemoveMarkHashSet">
            <summary>
            空索引数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.EmptyHashSet">
            <summary>
            空索引数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`1.NullIndexCondition">
            <summary>
            空索引条件
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`2">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`2.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`2.#ctor(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache{`0,`1},`0)">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <param name="cache">索引数据磁盘块索引缓存</param>
            <param name="key">keyword</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`2.getBlockIndexData">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`2.GetSemaphoreSlimCache">
            <summary>
            获取节点缓存加载访问锁
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode`2.Release(AutoCSer.Threading.SemaphoreSlimCache)">
            <summary>
            释放获取节点缓存加载访问锁
            </summary>
            <param name="semaphoreSlim"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyIntValueLocalCache`2">
            <summary>
            索引数据磁盘块索引缓存 KT:int
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="NT">索引数据磁盘块索引缓存节点类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyIntValueLocalCache`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 KT:int
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyIntValueLocalCache`2.createNode(`0)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyIntValueLocalCache`2.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0,System.Int32})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyLocalCache`2">
            <summary>
            索引数据磁盘块索引缓存 KT:VT
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyLocalCache`2.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyLocalCache`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode{`0,`1}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyLocalCache`2.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyLocalCache`2.createNode(`0)">
            <summary>
            创建索引数据磁盘块索引缓存节点 KT:VT
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyLocalCache`2.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0,`1})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`3">
            <summary>
            索引数据磁盘块索引缓存 KT:int/uint
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
            <typeparam name="NT">索引数据磁盘块索引缓存节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`3.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`3.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`3.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`3.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`1">
            <summary>
            索引数据磁盘块索引缓存 KT:uint
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 KT:uint
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`1.createNode(`0)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueLocalCache`1.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0,System.UInt32})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyLocalCache`2">
            <summary>
            索引数据磁盘块索引缓存 KT:VT
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyLocalCache`2.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyLocalCache`2.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode{`0,`1}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyLocalCache`2.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyIntValueLocalCache`2">
            <summary>
            索引数据磁盘块索引缓存 KT:int
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="NT">索引数据磁盘块索引缓存节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyIntValueLocalCache`2.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyIntValueLocalCache`2.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 KT:int
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyIntValueLocalCache`2.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyUIntValueLocalCache`1">
            <summary>
            索引数据磁盘块索引缓存 KT:uint
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyUIntValueLocalCache`1.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyUIntValueLocalCache`1.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 KT:uint
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyUIntValueLocalCache`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyLocalCache`1">
            <summary>
            索引数据磁盘块索引缓存 uint:VT
            </summary>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyLocalCache`1.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyLocalCache`1.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode{System.UInt32,`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:VT
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyLocalCache`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyIntValueLocalCache">
            <summary>
            索引数据磁盘块索引缓存 uint:int
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyIntValueLocalCache.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyIntValueLocalCache.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{System.Int32}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:int
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyIntValueLocalCache.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyUIntValueLocalCache">
            <summary>
            索引数据磁盘块索引缓存 uint:uint
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyUIntValueLocalCache.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyUIntValueLocalCache.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{System.UInt32}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:uint
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyUIntValueLocalCache.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueLocalCache">
            <summary>
            索引数据磁盘块索引缓存 uint:int
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueLocalCache.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueLocalCache.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{System.Int32}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:int
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueLocalCache.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueLocalCache.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueLocalCache.createNode(System.UInt32)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueLocalCache.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{System.UInt32,System.Int32})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyLocalCache`1">
            <summary>
            索引数据磁盘块索引缓存 uint:VT
            </summary>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyLocalCache`1.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyLocalCache`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeLocalClientNode{System.UInt32,`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:VT
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyLocalCache`1.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyLocalCache`1.createNode(System.UInt32)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyLocalCache`1.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{System.UInt32,`0})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueLocalCache">
            <summary>
            索引数据磁盘块索引缓存 uint:uint
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueLocalCache.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueLocalCache.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeLocalClientNode{System.UInt32}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:uint
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueLocalCache.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueLocalCache.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueLocalCache.createNode(System.UInt32)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueLocalCache.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{System.UInt32,System.UInt32})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyCache`2">
            <summary>
            索引数据磁盘块索引缓存 KT:VT
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyCache`2.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyCache`2.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode{`0,`1}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyCache`2.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyIntValueCache`2">
            <summary>
            索引数据磁盘块索引缓存 KT:int
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="NT">索引数据磁盘块索引缓存节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyIntValueCache`2.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyIntValueCache`2.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 KT:int
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyIntValueCache`2.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyUIntValueCache`1">
            <summary>
            索引数据磁盘块索引缓存 KT:uint
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyUIntValueCache`1.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyUIntValueCache`1.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 KT:uint
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockGenericKeyUIntValueCache`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyCache`1">
            <summary>
            索引数据磁盘块索引缓存 uint:VT
            </summary>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyCache`1.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyCache`1.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode{System.UInt32,`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:VT
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyCache`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyIntValueCache">
            <summary>
            索引数据磁盘块索引缓存 uint:int
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyIntValueCache.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyIntValueCache.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{System.Int32}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:int
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyIntValueCache.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyUIntValueCache">
            <summary>
            索引数据磁盘块索引缓存 uint:uint
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyUIntValueCache.diskBlockClient">
            <summary>
            数据关键字磁盘块索引信息客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyUIntValueCache.#ctor(AutoCSer.CommandService.IDiskBlockClientSocketEvent,AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{System.UInt32}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:uint
            </summary>
            <param name="diskBlockClient">数据关键字磁盘块索引信息客户端</param>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.SingleDiskBlockUIntKeyUIntValueCache.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <typeparam name="VT">索引数据类型</typeparam>
            <typeparam name="NT">索引数据磁盘块索引缓存节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.cache">
            <summary>
            索引缓存
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.#ctor(System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.getChangeKeys(System.UInt32)">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.getChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{System.UInt32},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="result"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.getChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{System.Int32},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="result"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.getChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{System.UInt32})">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.getChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{System.Int32})">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.remove">
            <summary>
            淘汰缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.createNode(System.UInt32)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.GetNode(System.UInt32)">
            <summary>
            获取索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.GetNode(System.Int32)">
            <summary>
            获取索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.GetNode(System.UInt32[])">
            <summary>
            获取索引数据磁盘块索引缓存节点集合
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.GetNode(System.Int32[])">
            <summary>
            获取索引数据磁盘块索引缓存节点集合
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.GetCondition(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode},System.String,AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取文本搜索索引条件
            </summary>
            <param name="trieGraphNodeCache">字符串 Trie 图客户端节点接口</param>
            <param name="text">搜索文本</param>
            <param name="indexMergeType">索引合并操作类型</param>
            <returns>索引条件</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.GetCondition(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode},System.String,AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取文本搜索索引条件
            </summary>
            <param name="trieGraphNodeCache">字符串 Trie 图客户端节点接口</param>
            <param name="text">搜索文本</param>
            <param name="indexMergeType">索引合并操作类型</param>
            <returns>索引条件</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.GetCondition(System.UInt32[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="keys"></param>
            <param name="indexMergeType">索引合并操作类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.GetCondition(System.Int32[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="keys"></param>
            <param name="indexMergeType">索引合并操作类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.getCondition(`1)">
            <summary>
            获取索引条件
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`2.getCondition(AutoCSer.CommandService.Search.IndexQuery.IndexNode{`0}[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="nodes"></param>
            <param name="indexMergeType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`1">
            <summary>
            索引数据磁盘块索引缓存 uint:VT
            </summary>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`1.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode{System.UInt32,`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:VT
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`1.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`1.createNode(System.UInt32)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyCache`1.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{System.UInt32,`0})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueCache">
            <summary>
            索引数据磁盘块索引缓存 uint:uint
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueCache.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueCache.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{System.UInt32}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:uint
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueCache.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueCache.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueCache.createNode(System.UInt32)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyUIntValueCache.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{System.UInt32,System.UInt32})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueCache">
            <summary>
            索引数据磁盘块索引缓存 uint:int
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueCache.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueCache.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{System.Int32}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 uint:int
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueCache.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueCache.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueCache.createNode(System.UInt32)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntKeyIntValueCache.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{System.UInt32,System.Int32})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.LittleValues">
            <summary>
            索引数据（8B 数据）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.manyValues">
            <summary>
            索引数据（16B 数据）
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.littleCount">
            <summary>
            少量数据集合数据量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.manyCount">
            <summary>
            大量数据集合数据量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.Free">
            <summary>
            释放节点集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.#ctor(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache{`0,`1},`0)">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <param name="cache">索引数据磁盘块索引缓存</param>
            <param name="key">keyword</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.getRemoveLittleCount">
            <summary>
            获取少量数据集合数据量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.getRemoveManyCount">
            <summary>
            获取大量数据集合数据量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`2.load(AutoCSer.ReusableHashCodeKeyHashSet)">
            <summary>
            Load data
            </summary>
            <param name="hashSet"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1">
            <summary>
            索引数据磁盘块索引缓存节点 KT:uint
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.#ctor(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache{`0,System.UInt32},`0)">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <param name="cache">索引数据磁盘块索引缓存</param>
            <param name="key">keyword</param>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.LittleIndex">
            <summary>
            少量数据索引
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.ManyIndex">
            <summary>
            大量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.setLittleValues">
            <summary>
            设置为少量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.setManyValues">
            <summary>
            设置为大量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.Load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{System.UInt32}},System.Int32)">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{System.UInt32}},AutoCSer.ReusableHashCodeKeyHashSet)">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.Load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{System.UInt32}},AutoCSer.CommandService.Search.IndexQuery.IIndex{System.UInt32})">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="manyIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.UIntIndex`1.SetManyValues(AutoCSer.CommandService.Search.IndexQuery.IIndex{System.UInt32})">
            <summary>
            加载数据失败恢复数据
            </summary>
            <param name="manyIndex"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.littleValues">
            <summary>
            索引数据（8B 哈希+ VT）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.manyValues">
            <summary>
            索引数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.LittleIndex">
            <summary>
            少量数据索引
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.ManyIndex">
            <summary>
            大量数据索引
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.littleCount">
            <summary>
            少量数据集合数据量
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.manyCount">
            <summary>
            大量数据集合数据量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.#ctor(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache{`0,`1},`0)">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <param name="cache">索引数据磁盘块索引缓存</param>
            <param name="key">keyword</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.setLittleValues">
            <summary>
            设置为少量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.setManyValues">
            <summary>
            设置为大量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.getRemoveLittleCount">
            <summary>
            获取少量数据集合数据量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.getRemoveManyCount">
            <summary>
            获取大量数据集合数据量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.Load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{`1}},System.Int32)">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{`1}},System.Int32,System.Collections.Generic.HashSet{`1})">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="capacity"></param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.Load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{`1}},AutoCSer.CommandService.Search.IndexQuery.IIndex{`1})">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="manyIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericIndex`2.SetManyValues(AutoCSer.CommandService.Search.IndexQuery.IIndex{`1})">
            <summary>
            加载数据失败恢复数据
            </summary>
            <param name="manyIndex"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IndexDataTypeEnum">
            <summary>
            索引数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IndexDataTypeEnum.None">
            <summary>
            仅创建，还没有获取索引数据磁盘块索引信息节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IndexDataTypeEnum.NotLoaded">
            <summary>
            未加载
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IndexDataTypeEnum.BlockIndexData">
            <summary>
            索引数据磁盘块索引数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IndexDataTypeEnum.Little">
            <summary>
            少量数据（最大数据量 1021）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IndexDataTypeEnum.Many">
            <summary>
            大量数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1">
            <summary>
            索引数据磁盘块索引缓存节点 KT:int
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.LittleIndex">
            <summary>
            少量数据索引
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.ManyIndex">
            <summary>
            大量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.#ctor(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCache{`0,System.Int32},`0)">
            <summary>
            索引数据磁盘块索引缓存节点
            </summary>
            <param name="cache">索引数据磁盘块索引缓存</param>
            <param name="key">keyword</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.setLittleValues">
            <summary>
            设置为少量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.setManyValues">
            <summary>
            设置为大量数据索引
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.Load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{System.Int32}},System.Int32)">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{System.Int32}},AutoCSer.ReusableHashCodeKeyHashSet)">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="hashSet"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.Load(AutoCSer.LeftArray{AutoCSer.CommandService.Search.DiskBlockIndex.PersistenceNode{System.Int32}},AutoCSer.CommandService.Search.IndexQuery.IIndex{System.Int32})">
            <summary>
            Load data
            </summary>
            <param name="nodes"></param>
            <param name="manyIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.IntIndex`1.SetManyValues(AutoCSer.CommandService.Search.IndexQuery.IIndex{System.Int32})">
            <summary>
            加载数据失败恢复数据
            </summary>
            <param name="manyIndex"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
            <typeparam name="NT">索引数据磁盘块索引缓存节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.cache">
            <summary>
            索引缓存
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.#ctor(System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.getChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ResponseResult{`0},AutoCSer.Net.KeepCallbackCommand)">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="result"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.getChangeKeys(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.LocalResult{`0})">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.remove">
            <summary>
            淘汰缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.createNode(`0)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.GetNode(`0)">
            <summary>
            获取索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.GetNode(`0[])">
            <summary>
            获取索引数据磁盘块索引缓存节点集合
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`3.GetCondition(`0[],AutoCSer.CommandService.Search.IndexQuery.IndexMergeTypeEnum)">
            <summary>
            获取索引条件
            </summary>
            <param name="keys"></param>
            <param name="indexMergeType">索引合并操作类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`2">
            <summary>
            索引数据磁盘块索引缓存 KT:VT
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`2.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashIndexNodeClientNode{`0,`1}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`2.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`2.createNode(`0)">
            <summary>
            创建索引数据磁盘块索引缓存节点 KT:VT
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyCache`2.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0,`1})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`3">
            <summary>
            索引数据磁盘块索引缓存 KT:int/uint
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="VT">索引数据类型</typeparam>
            <typeparam name="NT">索引数据磁盘块索引缓存节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`3.node">
            <summary>
            Node interface with reusable hash indexes with removal tags
            带移除标记的可重用哈希索引节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`3.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`3.getChangeKeys">
            <summary>
            Gets the collection of updated keyword
            获取更新关键字集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`3.Dispose">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`1">
            <summary>
            索引数据磁盘块索引缓存 KT:uint
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 KT:uint
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`1.createNode(`0)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyUIntValueCache`1.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0,System.UInt32})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyIntValueCache`2">
            <summary>
            索引数据磁盘块索引缓存 KT:int
            </summary>
            <typeparam name="KT">Index keyword type
            索引关键字类型</typeparam>
            <typeparam name="NT">索引数据磁盘块索引缓存节点类型</typeparam>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyIntValueCache`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.DiskBlockIndex.IRemoveMarkHashKeyIndexNodeClientNode{`0}},System.Int64,System.Int32)">
            <summary>
            索引数据磁盘块索引缓存 KT:int
            </summary>
            <param name="node">带移除标记的可重用哈希索引节点接口</param>
            <param name="maxCount">最大缓存数据数量，少量数据为 8B 元素，大量数据为 16B 元素</param>
            <param name="capacity">Container initialization size
            容器初始化大小</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyIntValueCache`2.createNode(`0)">
            <summary>
            创建索引数据磁盘块索引缓存节点
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.GenericKeyIntValueCache`2.GetBlockIndexData(AutoCSer.CommandService.Search.RemoveMarkHashIndexCache.BlockIndexDataCacheNode{`0,System.Int32})">
            <summary>
            获取索引数据磁盘块索引信息节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.ConditionDataNode`3">
            <summary>
            非索引条件查询数据节点
            </summary>
            <typeparam name="NT">节点接口类型</typeparam>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
        </member>
        <member name="P:AutoCSer.CommandService.Search.ConditionDataNode`3.snapshotCapacity">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.ConditionDataNode`3.snapshotValues">
            <summary>
            Get the snapshot data collection
            获取快照数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.ConditionDataNode`3.loadArraySize">
            <summary>
            初始化加载数据数组大小，默认为 1024
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataNode`3.isLoaded">
            <summary>
            是否已经加载初始化数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.ConditionDataNode`3.SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.#ctor">
            <summary>
            非索引条件查询数据节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.load">
            <summary>
            初始化加载所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.getLoadCommand">
            <summary>
            获取初始化加载所有数据命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{VT}#GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{VT}#GetSnapshotResult(`2[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.SnapshotSet(`2)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.getIsLoaded">
            <summary>
            是否已经加载初始化数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.SnapshotSetLoaded(System.Boolean)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.Loaded">
            <summary>
            The initialization data loading has been completed
            初始化数据加载完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.ContainsKey(`1)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.Contains(`2)">
            <summary>
            判断是否存在关键字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.LoadCreateBeforePersistence(`2)">
            <summary>
            Create non-indexed conditional query data (Check the input parameters before the persistence operation)
            创建非索引条件查询数据（持久化操作之前检查输入参数）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <returns>Returning true indicates that a persistence operation is required
            返回 true 表示需要持久化操作</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.LoadCreateLoadPersistence(`2)">
            <summary>
            Create non-indexed conditional query data (Initialize and load the persistent data)
            创建非索引条件查询数据（初始化加载持久化数据）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.LoadCreate(`2)">
            <summary>
            Create non-indexed conditional query data
            创建非索引条件查询数据
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.Create(`1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Create non-indexed conditional query data
            创建非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.create(`1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Create non-indexed conditional query data
            创建非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.Update(`1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Update non-indexed condition query data
            更新非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.update(`1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Update non-indexed condition query data
            更新非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.DeleteLoadPersistence(`1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Delete non-indexed condition query data (Initialize and load the persistent data)
            删除非索引条件查询数据（初始化加载持久化数据）
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.deleteLoadPersistence(`1)">
            <summary>
            Delete non-indexed condition query data (Initialize and load the persistent data)
            删除非索引条件查询数据（初始化加载持久化数据）
            </summary>
            <param name="key">Data keyword</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.Delete(`1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Delete non-indexed condition query data
            删除非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.delete(`1)">
            <summary>
            Delete non-indexed condition query data
            删除非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.CompletedBeforePersistence(`2)">
            <summary>
            The non-indexed condition query data has completed the update operation (Check the input parameters before the persistence operation)
            非索引条件查询数据完成更新操作（持久化操作之前检查输入参数）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.CompletedLoadPersistence(`2,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            The non-indexed condition query data has completed the update operation (Initialize and load the persistent data)
            非索引条件查询数据完成更新操作（初始化加载持久化数据）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.completedLoadPersistence(`2)">
            <summary>
            The non-indexed condition query data has completed the update operation (Initialize and load the persistent data)
            非索引条件查询数据完成更新操作（初始化加载持久化数据）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.Completed(`2,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            The non-indexed condition query data has completed the update operation
            非索引条件查询数据完成更新操作
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`3.completed(`2)">
            <summary>
            The non-indexed condition query data has completed the update operation
            非索引条件查询数据完成更新操作
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.ConditionDataNode`4">
            <summary>
            非索引条件查询数据节点
            </summary>
            <typeparam name="NT">节点接口类型</typeparam>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <typeparam name="CT">客户端节点类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataNode`4.loadClientNode">
            <summary>
            初始化加载数据获取非索引条件查询数据节点单例
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`4.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{`3})">
            <summary>
            非索引条件查询数据节点
            </summary>
            <param name="loadClientNode"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`4.load">
            <summary>
            初始化加载所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`4.create(`3,AutoCSer.CommandService.Search.ConditionData.LoadCallback{`0,`1,`2,`3})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="node">客户端节点信息</param>
            <param name="callback">初始化加载数据回调</param>
            <returns>0 表示成功，-1 表示失败</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataNode`4.loadCreate(`3,`2)">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="client"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum">
            <summary>
            非索引条件查询数据更新状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum.Unknown">
            <summary>
            未知错误或者异常
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum.DeletedNotFoundKey">
            <summary>
            未找到关键字触发删除操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum.NotSupportDeleteKey">
            <summary>
            不支持删除存在数据的关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum.NullKey">
            <summary>
            关键字不允许为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum.GetDataFailed">
            <summary>
            获取数据失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum.Callbacked">
            <summary>
            已回调
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IConditionData">
            <summary>
            非索引条件查询数据，用于解决快照类型冲突
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IConditionDataNode`2">
            <summary>
            Non-index condition query data node interface
            非索引条件查询数据节点接口
            </summary>
            <typeparam name="KT">Keyword type
            关键字类型</typeparam>
            <typeparam name="VT">Data type</typeparam>
            <summary>
            Non-index condition query data node interface 
                       非索引条件查询数据节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.SnapshotSet(`1)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.SnapshotSetLoaded(System.Boolean)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.Loaded">
            <summary>
            The initialization data loading has been completed
            初始化数据加载完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.LoadCreateBeforePersistence(`1)">
            <summary>
            Create non-indexed conditional query data (Check the input parameters before the persistence operation)
            创建非索引条件查询数据（持久化操作之前检查输入参数）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <returns>Returning true indicates that a persistence operation is required
            返回 true 表示需要持久化操作</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.LoadCreateLoadPersistence(`1)">
            <summary>
            Create non-indexed conditional query data (Initialize and load the persistent data)
            创建非索引条件查询数据（初始化加载持久化数据）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.LoadCreate(`1)">
            <summary>
            Create non-indexed conditional query data
            创建非索引条件查询数据
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.Create(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Create non-indexed conditional query data
            创建非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.Update(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Update non-indexed condition query data
            更新非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.DeleteLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Delete non-indexed condition query data (Initialize and load the persistent data)
            删除非索引条件查询数据（初始化加载持久化数据）
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.Delete(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            Delete non-indexed condition query data
            删除非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.CompletedBeforePersistence(`1)">
            <summary>
            The non-indexed condition query data has completed the update operation (Check the input parameters before the persistence operation)
            非索引条件查询数据完成更新操作（持久化操作之前检查输入参数）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.CompletedLoadPersistence(`1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            The non-indexed condition query data has completed the update operation (Initialize and load the persistent data)
            非索引条件查询数据完成更新操作（初始化加载持久化数据）
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNode`2.Completed(`1,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum})">
            <summary>
            The non-indexed condition query data has completed the update operation
            非索引条件查询数据完成更新操作
            </summary>
            <param name="value">Non-indexed condition query data
            非索引条件查询数据</param>
            <param name="callback"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNode">
            <summary>
            创建哈希索引节点的自定义基础服务接口
            </summary>
            <summary>
            创建哈希索引节点的自定义基础服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNode.CreateRemoveMarkHashIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建带移除标记的可重用哈希索引节点 IRemoveMarkHashIndexNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <param name="valueType">数据关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNode.CreateRemoveMarkHashKeyIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建带移除标记的可重用哈希索引节点 IRemoveMarkHashKeyIndexNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IConditionDataCache`2">
            <summary>
            非索引条件查询数据缓存
            </summary>
            <typeparam name="KT">查询数据关键字类型</typeparam>
            <typeparam name="VT">查询条件数据</typeparam>
        </member>
        <member name="T:AutoCSer.CommandService.Search.ConditionDataCache`1">
            <summary>
            非索引条件查询数据缓存
            </summary>
            <typeparam name="T">查询条件数据</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataCache`1.cache">
            <summary>
            查询条件数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataCache`1.cacheLock">
            <summary>
            缓存数据访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataCache`1.maxCount">
            <summary>
            最大缓存数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataCache`1.#ctor(System.Int32)">
            <summary>
            查询数据缓存
            </summary>
            <param name="maxCount">最大缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataCache`1.Remove(System.UInt32)">
            <summary>
            删除缓存数据
            </summary>
            <param name="key">查询数据关键字</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataCache`1.Remove(System.Int32)">
            <summary>
            删除缓存数据
            </summary>
            <param name="key">查询数据关键字</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataCache`1.Set(System.UInt32,`0)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataCache`1.Set(System.Int32,`0)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.ConditionDataCache`2">
            <summary>
            非索引条件查询数据缓存
            </summary>
            <typeparam name="KT">查询数据关键字类型</typeparam>
            <typeparam name="VT">查询条件数据</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataCache`2.cache">
            <summary>
            查询条件数据缓存
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataCache`2.cacheLock">
            <summary>
            缓存数据访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.ConditionDataCache`2.maxCount">
            <summary>
            最大缓存数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataCache`2.#ctor(System.Int32)">
            <summary>
            查询数据缓存
            </summary>
            <param name="maxCount">最大缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataCache`2.Remove(`0)">
            <summary>
            删除缓存数据
            </summary>
            <param name="key">查询数据关键字</param>
            <returns>Returning false indicates that the keyword does not exist
            返回 false 表示关键字不存在</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.ConditionDataCache`2.Set(`0,`1)">
            <summary>
            Set the data
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode">
            <summary>
            字符串 Trie 图哈希节点（二级节点）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.HashNodeIndex">
            <summary>
            哈希数据起始位置，最高位表示是否最后一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.NodeIndex">
            <summary>
            子节点集合数组起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.Characters">
            <summary>
            前两个字符，也是 HashCode
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.Identity">
            <summary>
            词语编号
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.TrySetHashIndex(AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode)">
            <summary>
            首节点设置数据位置
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.Set(AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode,System.Int32,System.Boolean)">
            <summary>
            设置节点数据
            </summary>
            <param name="node"></param>
            <param name="nodeIndex"></param>
            <param name="isLastHashIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.GetLinkCharacters(System.Char)">
            <summary>
            获取失败节点哈希关键字
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.Check(System.UInt32,System.Boolean@)">
            <summary>
            检查前两个字符是否匹配
            </summary>
            <param name="characters"></param>
            <param name="isNext">是否需要匹配下一个节点</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode.GetLinkIndex(AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode[],System.Char)">
            <summary>
            获取失败节点索引位置
            </summary>
            <param name="nodes"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNodeHashCount">
            <summary>
            哈希索引冲突计数
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNodeHashCount.Count">
            <summary>
            冲突数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNodeHashCount.Nodes">
            <summary>
            冲突节点集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNodeHashCount.#ctor(System.Int32)">
            <summary>
            哈希索引冲突计数
            </summary>
            <param name="count">冲突数量</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNodeHashCount.SetHashNodeIndex(System.Int32)">
            <summary>
            设置哈希节点位置
            </summary>
            <param name="hashNodeIndex"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags">
            <summary>
            分词选项
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags.SingleCharacter">
            <summary>
            是否支持单字符搜索结果（设置为 true 会造成索引占用大量内存并浪费大量计算资源）
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum">
            <summary>
            添加词语返回状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum.Unknown">
            <summary>
            未知状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum.Success">
            <summary>
            添加成功
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum.WordSizeLess">
            <summary>
            文字长度不足（不允许小于 2）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum.WordSizeLimit">
            <summary>
            文字长度超出指定限制
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum.GraphBuilded">
            <summary>
            已建图，不允许添加新词语
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder">
            <summary>
            Trie 树转数组创建器
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder.hashCapacityDivision">
            <summary>
            哈希取余
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder.HashNodes">
            <summary>
            二级节点哈希数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder.Nodes">
            <summary>
            三级及以下节点数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder.BuildGraphIndexs">
            <summary>
            等待建图节点数组索引位置集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder.buildGraphIndexs">
            <summary>
            正在建图的节点数组索引位置集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder.#ctor(AutoCSer.CommandService.Search.StaticTrieGraph.GraphData@,AutoCSer.Algorithm.IntegerDivision@)">
            <summary>
            Trie 树转数组创建器
            </summary>
            <param name="data"></param>
            <param name="hashCapacityDivision"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder.BuildGraph">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder.GetLinkIndex(System.UInt32)">
            <summary>
            获取失败节点位置
            </summary>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData">
            <summary>
            Trie 图序列化数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.HashNodes">
            <summary>
            二级节点哈希数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.Nodes">
            <summary>
            三级及以下节点数组
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.WordTypes">
            <summary>
            文字类型数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.HashCapacityDivision">
            <summary>
            哈希取余
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.WordCount">
            <summary>
            Trie 图词语最大编号（词语数量）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.CurrentIdentity">
            <summary>
            当前分配未知词语编号
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.IsCurrentIdentity">
            <summary>
            判断是否可以新增未知词语
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.HashCapacity">
            <summary>
            哈希取余空间大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.AnyTrieHeadChar">
            <summary>
            任意 Trie 图首节点字符
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.IsGraph">
            <summary>
            Has the trie graph been created
            是否已经创建 Trie 图
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.Build(AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder)">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
            <param name="treeBuilder"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.tree(AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode,System.Int32,System.Int32@,System.Int32)">
            <summary>
            生成树节点
            </summary>
            <param name="node"></param>
            <param name="nodeCount"></param>
            <param name="nodeIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GraphData.Match(System.Char*,System.Char*,AutoCSer.CommandService.Search.StaticTrieGraphNode)">
            <summary>
            从左到右匹配
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <param name="staticTrieGraphNode">字符串 Trie 图节点</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode">
            <summary>
            字符串 Trie 图三级及以下节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.Identity">
            <summary>
            词语编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.LinkIndex">
            <summary>
            失败节点数组索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.NodeIndex">
            <summary>
            子节点集合数组起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.Character">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.Length">
            <summary>
            词语长度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.LinkType">
            <summary>
            低2b表示失败节点类型，最高位表示是否最后一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.Set(AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode,System.Int32,System.Byte,System.Boolean)">
            <summary>
            初始化节点数据
            </summary>
            <param name="node"></param>
            <param name="nodeIndex"></param>
            <param name="length"></param>
            <param name="isLastNode"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.BuildGraph(AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder,AutoCSer.CommandService.Search.StaticTrieGraph.GrahpHashNode,System.Int32@)">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
            <param name="builder"></param>
            <param name="node"></param>
            <param name="nodeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.setLinkTypeHashNode(AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder,System.Int32)">
            <summary>
            设置失败节点类型
            </summary>
            <param name="builder"></param>
            <param name="linkIndex"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.BuildGraph(AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder)">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.buildGraph(AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder,AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode@,System.Int32@)">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
            <param name="builder"></param>
            <param name="parent"></param>
            <param name="nodeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.buildGraph(AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder,AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode@)">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
            <param name="builder"></param>
            <param name="parent"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.copyLinkWord(AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode@)">
            <summary>
            获取失败节点的词语信息
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.copyLinkIndex(AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode@)">
            <summary>
            获取失败节点的失败节点数据
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.Check(System.Char,System.Boolean@)">
            <summary>
            检查字符是否匹配
            </summary>
            <param name="character"></param>
            <param name="isNext">是否需要匹配下一个节点</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.GrahpNode.getLinkIndex(AutoCSer.CommandService.Search.StaticTrieGraph.GraphBuilder,System.Char)">
            <summary>
            获取失败节点索引位置
            </summary>
            <param name="builder"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode">
            <summary>
            String trie graph node interface
            字符串 Trie 图节点接口
            </summary>
            <summary>
            String trie graph node interface 
                       字符串 Trie 图节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.SnapshotSetWord(System.String)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.SnapshotSetGraph(AutoCSer.CommandService.Search.StaticTrieGraph.GraphData)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.SnapshotSetWordIdentity(AutoCSer.BinarySerializeKeyValue{AutoCSer.SubString,System.Int32})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.AppendWord(System.String)">
            <summary>
            Add trie graph word
            添加 Trie 图词语
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.IsGraph">
            <summary>
            Has the trie graph been created
            是否已经创建 Trie 图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.GetWordCount">
            <summary>
            Get the number of words in the trie graph
            获取 Trie 图词语数量
            </summary>
            <returns>The number of words in the trie graph
            Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.BuildGraph">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
            <returns>The number of words in the trie graph
            Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.GetAddTextIdentityBeforePersistence(System.String)">
            <summary>
            Adds text and returns a collection of word numbers (Check the input parameters before the persistence operation)
            添加文本并返回词语编号集合（持久化操作之前检查输入参数）
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.GetAddTextIdentity(System.String)">
            <summary>
            Adds text and returns a collection of word numbers
            添加文本并返回词语编号集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.GetWordSegmentIdentity(System.String)">
            <summary>
            Get the collection of query word numbers (ignore unmatched words)
            获取查询词语编号集合（忽略未匹配词语）
            </summary>
            <param name="text">The text content of the search
            搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode.GetWordSegmentResult(System.String)">
            <summary>
            Get the query word segmentation result
            获取查询分词结果
            </summary>
            <param name="text">The text content of the search
            搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.LinkTypeEnum">
            <summary>
            Trie 图失败节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.LinkTypeEnum.None">
            <summary>
            找不到失败节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.LinkTypeEnum.HashNode">
            <summary>
            二级节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.LinkTypeEnum.Node">
            <summary>
            三级及以下节点
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.Simplified">
            <summary>
            简体字符
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.Simplified.SetChinese(System.Byte*)">
            <summary>
            设置中文字符类型
            </summary>
            <param name="charTypeData">分词字符类型数据</param>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.Simplified.Chars">
            <summary>
            简体字符集
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient">
            <summary>
            字符串 Trie 图节点客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.NodeCache">
            <summary>
            字符串 Trie 图节点客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode})">
            <summary>
            字符串 Trie 图节点客户端
            </summary>
            <param name="nodeCache"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.AppendWord(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            批量添加 Trie 图词语
            </summary>
            <param name="words"></param>
            <param name="concurrency">并发数量</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.AppendWord(System.String)">
            <summary>
            批量添加 Trie 图词语
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.BuildGraph">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
            <returns>The number of words in the trie graph
            Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.GetAddTextIdentity(System.String)">
            <summary>
            Adds text and returns a collection of word numbers
            添加文本并返回词语编号集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.GetWordSegmentIdentity(System.String)">
            <summary>
            Get the collection of query word numbers (ignore unmatched words)
            获取查询词语编号集合（忽略未匹配词语）
            </summary>
            <param name="text">The text content of the search
            搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.GetWordSegmentResult(System.String)">
            <summary>
            Get the query word segmentation result
            获取查询分词结果
            </summary>
            <param name="text">The text content of the search
            搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.StaticTrieGraphClient.GetWordIdentitys(System.Int32[],System.Int32[],AutoCSer.LeftArray{System.Int32}@)">
            <summary>
            获取需要更新的编号标识集合
            </summary>
            <param name="wordIdentitys">词语编号标识集合</param>
            <param name="historyWordIdentitys">更新之前的词语编号标识集合</param>
            <param name="removeWordIdentity">需要删除的编号标识集合</param>
            <returns>新增的编号标识集合</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder">
            <summary>
            Trie 树初始化创建器
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder.node">
            <summary>
            字符串 Trie 图节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder.Words">
            <summary>
            词语集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder.CurrentIdentity">
            <summary>
            当前已分配词语编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder.NodeArraySize">
            <summary>
            三级及以下节点累计数组大小
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder.Nodes">
            <summary>
            二级节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder.WordTypes">
            <summary>
            文字类型数据
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder.#ctor(AutoCSer.CommandService.Search.StaticTrieGraphNode)">
            <summary>
            Trie 树初始化创建器
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeBuilder.Append(System.String)">
            <summary>
            添加词语
            </summary>
            <param name="word"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode">
            <summary>
            Trie 树节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.HashIndex">
            <summary>
            一二级节点哈希索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.HashKey">
            <summary>
            一二级节点关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.Identity">
            <summary>
            词语编号
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.Character">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.Nodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.NodeCount">
            <summary>
            有效子节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.#ctor(System.UInt32)">
            <summary>
            Trie 树节点
            </summary>
            <param name="hashKey"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.#ctor(System.UInt32,System.Int32@)">
            <summary>
            Trie 树节点
            </summary>
            <param name="hashKey"></param>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.#ctor(System.Char)">
            <summary>
            Trie 树节点
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.Set(System.Int32@)">
            <summary>
            设置词语编号
            </summary>
            <param name="identity"></param>
            <returns>是否新词语</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.GetNode(System.Char,System.Int32@)">
            <summary>
            获取子节点
            </summary>
            <param name="character"></param>
            <param name="nodeArraySize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.getCharacter(AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode)">
            <summary>
            获取节点文字
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.TreeNode.GetCharacter">
            <summary>
            获取节点文字
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult">
            <summary>
            查询分词结果
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult.Identity">
            <summary>
            词语编号，0 表示未匹配词语
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult.StartIndex">
            <summary>
            词语在原文本中的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult.Length">
            <summary>
            词语长度
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult.Set(AutoCSer.KeyValue{AutoCSer.SubString,System.Int32}@)">
            <summary>
            设置查询分词结果
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentTypeEnum">
            <summary>
            分词类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentTypeEnum.QueryIdentity">
            <summary>
            查询词语编号（忽略未匹配词语）
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentTypeEnum.Query">
            <summary>
            查询分词结果
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentTypeEnum.AddTextBeforePersistence">
            <summary>
            添加文本前持久化检查
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentTypeEnum.AddText">
            <summary>
            添加文本
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum">
            <summary>
            文字类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.Chinese">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.OtherLetter">
            <summary>
            其它字母，不包括中文
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.Letter">
            <summary>
            字母
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.Keep">
            <summary>
            保留字符
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.TrieGraph">
            <summary>
            Trie 图
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.TrieGraphHead">
            <summary>
            Trie 图首字符
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.WordTypeEnum.TrieGraphEnd">
            <summary>
            Trie 图尾字符
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode">
            <summary>
            String trie graph node interface 
                       字符串 Trie 图节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode.AppendWord(System.String)">
            <summary>
            Add trie graph word 
                       添加 Trie 图词语
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode.BuildGraph">
            <summary>
            Create the trie graph 
                       创建 Trie 图
            </summary>
            <returns>The number of words in the trie graph 
                       Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode.GetAddTextIdentity(System.String)">
            <summary>
            Adds text and returns a collection of word numbers 
                       添加文本并返回词语编号集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode.GetWordSegmentIdentity(System.String)">
            <summary>
            Get the collection of query word numbers (ignore unmatched words) 
                       获取查询词语编号集合（忽略未匹配词语）
            </summary>
            <param name="text">The text content of the search 
                       搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode.GetWordSegmentResult(System.String)">
            <summary>
            Get the query word segmentation result 
                       获取查询分词结果
            </summary>
            <param name="text">The text content of the search 
                       搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode.IsGraph">
            <summary>
            Has the trie graph been created 
                       是否已经创建 Trie 图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode.GetWordCount">
            <summary>
            Get the number of words in the trie graph 
                       获取 Trie 图词语数量
            </summary>
            <returns>The number of words in the trie graph 
                       Trie 图词语数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode)
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode)
            </summary>
            <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode.AppendWord(System.String)">
            <summary>
            Add trie graph word 
                       添加 Trie 图词语
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode.BuildGraph">
            <summary>
            Create the trie graph 
                       创建 Trie 图
            </summary>
            <returns>The number of words in the trie graph 
                       Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode.GetAddTextIdentity(System.String)">
            <summary>
            Adds text and returns a collection of word numbers 
                       添加文本并返回词语编号集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode.GetWordSegmentIdentity(System.String)">
            <summary>
            Get the collection of query word numbers (ignore unmatched words) 
                       获取查询词语编号集合（忽略未匹配词语）
            </summary>
            <param name="text">The text content of the search 
                       搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode.GetWordSegmentResult(System.String)">
            <summary>
            Get the query word segmentation result 
                       获取查询分词结果
            </summary>
            <param name="text">The text content of the search 
                       搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode.IsGraph">
            <summary>
            Has the trie graph been created 
                       是否已经创建 Trie 图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueNode.GetWordCount">
            <summary>
            Get the number of words in the trie graph 
                       获取 Trie 图词语数量
            </summary>
            <returns>The number of words in the trie graph 
                       Trie 图词语数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode">
            <summary>
            String trie graph node interface 
                       字符串 Trie 图节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode.AppendWord(System.String)">
            <summary>
            Add trie graph word 
                       添加 Trie 图词语
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode.BuildGraph">
            <summary>
            Create the trie graph 
                       创建 Trie 图
            </summary>
            <returns>The number of words in the trie graph 
                       Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode.GetAddTextIdentity(System.String)">
            <summary>
            Adds text and returns a collection of word numbers 
                       添加文本并返回词语编号集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode.GetWordSegmentIdentity(System.String)">
            <summary>
            Get the collection of query word numbers (ignore unmatched words) 
                       获取查询词语编号集合（忽略未匹配词语）
            </summary>
            <param name="text">The text content of the search 
                       搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode.GetWordSegmentResult(System.String)">
            <summary>
            Get the query word segmentation result 
                       获取查询分词结果
            </summary>
            <param name="text">The text content of the search 
                       搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode.IsGraph">
            <summary>
            Has the trie graph been created 
                       是否已经创建 Trie 图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode.GetWordCount">
            <summary>
            Get the number of words in the trie graph 
                       获取 Trie 图词语数量
            </summary>
            <returns>The number of words in the trie graph 
                       Trie 图词语数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode)
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNode)
            </summary>
            <param name="node">Log stream persistence memory database local client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode.AppendWord(System.String)">
            <summary>
            Add trie graph word 
                       添加 Trie 图词语
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode.BuildGraph">
            <summary>
            Create the trie graph 
                       创建 Trie 图
            </summary>
            <returns>The number of words in the trie graph 
                       Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode.GetAddTextIdentity(System.String)">
            <summary>
            Adds text and returns a collection of word numbers 
                       添加文本并返回词语编号集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode.GetWordSegmentIdentity(System.String)">
            <summary>
            Get the collection of query word numbers (ignore unmatched words) 
                       获取查询词语编号集合（忽略未匹配词语）
            </summary>
            <param name="text">The text content of the search 
                       搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode.GetWordSegmentResult(System.String)">
            <summary>
            Get the query word segmentation result 
                       获取查询分词结果
            </summary>
            <param name="text">The text content of the search 
                       搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode.IsGraph">
            <summary>
            Has the trie graph been created 
                       是否已经创建 Trie 图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeReturnValueLocalNode.GetWordCount">
            <summary>
            Get the number of words in the trie graph 
                       获取 Trie 图词语数量
            </summary>
            <returns>The number of words in the trie graph 
                       Trie 图词语数量</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum">
            <summary>
            String trie graph node interface 
                       字符串 Trie 图节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.AppendWord">
            <summary>
            [0] Add trie graph word 
                       添加 Trie 图词语
            string word 
            返回值 AutoCSer.CommandService.Search.StaticTrieGraph.AppendWordStateEnum 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.BuildGraph">
            <summary>
            [1] Create the trie graph 
                       创建 Trie 图
            返回值 int The number of words in the trie graph 
                       Trie 图词语数量
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.GetAddTextIdentity">
            <summary>
            [2] Adds text and returns a collection of word numbers 
                       添加文本并返回词语编号集合
            string text 
            返回值 int[] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.GetAddTextIdentityBeforePersistence">
            <summary>
            [3] Adds text and returns a collection of word numbers (Check the input parameters before the persistence operation) 
                       添加文本并返回词语编号集合（持久化操作之前检查输入参数）
            string text 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{int[]} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.GetWordSegmentIdentity">
            <summary>
            [4] Get the collection of query word numbers (ignore unmatched words) 
                       获取查询词语编号集合（忽略未匹配词语）
            string text The text content of the search 
                       搜索文本内容
            返回值 int[] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.GetWordSegmentResult">
            <summary>
            [5] Get the query word segmentation result 
                       获取查询分词结果
            string text The text content of the search 
                       搜索文本内容
            返回值 AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentResult[] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.SnapshotSetGraph">
            <summary>
            [6] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.CommandService.Search.StaticTrieGraph.GraphData value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.SnapshotSetWord">
            <summary>
            [7] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            string value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.SnapshotSetWordIdentity">
            <summary>
            [8] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.BinarySerializeKeyValue{AutoCSer.SubString,int} value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.IsGraph">
            <summary>
            [9] Has the trie graph been created 
                       是否已经创建 Trie 图
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeMethodEnum.GetWordCount">
            <summary>
            [10] Get the number of words in the trie graph 
                       获取 Trie 图词语数量
            返回值 int The number of words in the trie graph 
                       Trie 图词语数量
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraphServiceNode">
            <summary>
            创建字符串 Trie 图节点的自定义基础服务
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphServiceNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseService)">
            <summary>
            创建字符串 Trie 图节点的自定义基础服务
            </summary>
            <param name="service">Log stream persistence memory database service
            日志流持久化内存数据库服务</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphServiceNode.CreateStaticTrieGraphNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Byte,System.Byte,AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags,System.String)">
            <summary>
            创建字符串 Trie 图节点 IStaticTrieGraphNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="maxTrieWordSize">Trie 词语最大文字长度</param>
            <param name="maxWordSize">未知词语最大文字长度</param>
            <param name="wordSegmentFlags">分词选项</param>
            <param name="replaceChars">替换文字集合</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNode">
            <summary>
            创建字符串 Trie 图节点的自定义基础服务接口
            </summary>
            <summary>
            创建字符串 Trie 图节点的自定义基础服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNode.CreateStaticTrieGraphNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Byte,System.Byte,AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags,System.String)">
            <summary>
            创建字符串 Trie 图节点 IStaticTrieGraphNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="maxTrieWordSize">Trie 词语最大文字长度</param>
            <param name="maxWordSize">未知词语最大文字长度</param>
            <param name="wordSegmentFlags">分词选项</param>
            <param name="replaceChars">替换文字集合</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNode`1">
            <summary>
            Word segmentation result disk block index information node interface
            分词结果磁盘块索引信息节点接口
            </summary>
            <typeparam name="T">Keyword type for word segmentation data
            分词数据关键字类型</typeparam>
            <summary>
            Word segmentation result disk block index information node interface 
                       分词结果磁盘块索引信息节点接口
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1">
            <summary>
            初始化加载数据回调
            </summary>
            <typeparam name="T">Keyword type for word segmentation data
            分词数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1.node">
            <summary>
            分词结果磁盘块索引信息节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1.CreateResponses">
            <summary>
            创建分词结果磁盘块索引信息返回参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1.Values">
            <summary>
            分词数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1.waitLock">
            <summary>
            回调等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1.NewCount">
            <summary>
            新关键字数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1.#ctor(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode{`0},AutoCSer.BinarySerializeKeyValue{`0,System.String}[])">
            <summary>
            初始化加载数据回调
            </summary>
            <param name="node">分词结果磁盘块索引信息节点</param>
            <param name="values">分词数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1.RunTask">
            <summary>
            检查关键字
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback`1.Wait">
            <summary>
            等待关键字检查完成
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1">
            <summary>
            分词结果磁盘块索引信息节点
            </summary>
            <typeparam name="T">Keyword type for word segmentation data
            分词数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.Datas">
            <summary>
            分词数据磁盘块索引信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.queueLocks">
            <summary>
            操作队列访问锁集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.loadClientNode">
            <summary>
            初始化加载数据获取分词结果磁盘块索引信息节点单例
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.trieGraphNode">
            <summary>
            获取字符串 Trie 图节点单例
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.loadArraySize">
            <summary>
            初始化加载数据数组大小，默认为 1024
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.isLoaded">
            <summary>
            是否已经加载初始化数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{System#Boolean}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeLocalClientNode},AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeLocalClientNode{`0}})">
            <summary>
            分词结果磁盘块索引信息节点
            </summary>
            <param name="trieGraphNode">字符串 Trie 图节点单例</param>
            <param name="loadClientNode">初始化加载数据获取分词结果磁盘块索引信息节点单例</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.getLoadCommand">
            <summary>
            获取初始化加载所有数据命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.load">
            <summary>
            初始化加载所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.create(AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeLocalClientNode{`0},AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalLoadCallback{`0})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="node">客户端节点信息</param>
            <param name="callback">初始化加载数据回调</param>
            <returns>0 表示成功，-1 表示失败</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{T,AutoCSer#CommandService#DiskBlock#BlockIndex}}#GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{T,AutoCSer#CommandService#DiskBlock#BlockIndex}}#GetSnapshotResult(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.DiskBlock.BlockIndex}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.DiskBlock.BlockIndex})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.getIsLoaded">
            <summary>
            是否已经加载初始化数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.SnapshotSetLoaded(System.Boolean)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.GetSemaphoreSlimCache(`0)">
            <summary>
            获取操作队列访问锁
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.Release(AutoCSer.Threading.SemaphoreSlimCache,`0)">
            <summary>
            释放操作队列访问锁
            </summary>
            <param name="semaphoreSlim"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.Loaded">
            <summary>
            The initialization data loading has been completed
            初始化数据加载完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.LoadCreateBeforePersistence(`0,System.String)">
            <summary>
            Create the disk block index information of the word segmentation result (Check the input parameters before the persistence operation)
            创建分词结果磁盘块索引信息（持久化操作之前检查输入参数）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.LoadCreateLoadPersistence(`0,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result (Initialize and load the persistent data)
            创建分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.LoadCreate(`0,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.CreateLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result (Initialize and load the persistent data)
            创建分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.Create(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.UpdateLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Update the disk block index information of the word segmentation result (Initialize and load the persistent data)
            更新分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.Update(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Update the disk block index information of the word segmentation result
            更新分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.DeleteLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result (Initialize and load the persistent data)
            删除分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.Delete(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.CompletedLoadPersistence(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            The disk block index information of the word segmentation result has completed the update operation (Initialize and load the persistent data)
            分词结果磁盘块索引信息完成更新操作（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.Completed(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            The disk block index information of the word segmentation result has completed the update operation
            分词结果磁盘块索引信息完成更新操作
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.DeletedLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result (Initialize and load the persistent data)
            删除分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.Deleted(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.OnException(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData{`0},System.Exception)">
            <summary>
            执行任务异常处理
            </summary>
            <param name="data"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.GetText(`0)">
            <summary>
            根据关键字获取需要分词的文本数据
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <returns>null 表示没有找到关键字数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.GetWordIdentitys(System.String)">
            <summary>
            获取分词词语编号标识集合
            </summary>
            <param name="text">分词文本</param>
            <returns>词语编号标识集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.GetDiskBlockClient(`0)">
            <summary>
            根据分词数据关键字获取磁盘块索引信息客户端
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.AppendIndex(System.Int32[],`0)">
            <summary>
            添加分词匹配数据关键字
            </summary>
            <param name="wordIdentitys">词语编号标识集合</param>
            <param name="key">匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.AppendIndex(System.Int32[],System.Int32[],`0)">
            <summary>
            更新分词匹配数据关键字
            </summary>
            <param name="wordIdentitys">词语编号标识集合</param>
            <param name="historyWordIdentitys">更新之前的词语编号标识集合</param>
            <param name="key">匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode`1.RemoveIndex(System.Int32[],`0)">
            <summary>
            删除分词匹配数据关键字
            </summary>
            <param name="wordIdentitys">词语编号标识集合</param>
            <param name="key">匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1">
            <summary>
            分词结果磁盘块索引信息
            </summary>
            <typeparam name="T">Keyword type for word segmentation data
            分词数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.BlockIndex">
            <summary>
            磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.IsLoadedDeleted">
            <summary>
            是否已经删除
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.#ctor">
            <summary>
            分词结果磁盘块索引信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.#ctor(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            分词结果磁盘块索引信息
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.Loaded(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode{`0},`0)">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <param name="node"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.Create(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode{`0},`0)">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.Create(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode{`0},`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum},System.String)">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="callback"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.Update(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode{`0},`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Update the disk block index information of the word segmentation result
            更新分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.Delete(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode{`0},`0)">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.Delete(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode{`0},`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.Completed(AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalNode{`0},`0,AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            完成数据更新
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="blockIndex">新的磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LocalData`1.sequenceEqual(System.Int32[],System.Int32[])">
            <summary>
            数组比较
            </summary>
            <param name="wordIdentitys"></param>
            <param name="historyWordIdentitys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1">
            <summary>
            初始化加载数据回调
            </summary>
            <typeparam name="T">Keyword type for word segmentation data
            分词数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1.node">
            <summary>
            分词结果磁盘块索引信息节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1.CreateResponses">
            <summary>
            创建分词结果磁盘块索引信息返回参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1.Values">
            <summary>
            分词数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1.waitLock">
            <summary>
            回调等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1.NewCount">
            <summary>
            新关键字数量
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1.#ctor(AutoCSer.CommandService.Search.WordIdentityBlockIndexNode{`0},AutoCSer.BinarySerializeKeyValue{`0,System.String}[])">
            <summary>
            初始化加载数据回调
            </summary>
            <param name="node">分词结果磁盘块索引信息节点</param>
            <param name="values">分词数据集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1.RunTask">
            <summary>
            检查关键字
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback`1.Wait">
            <summary>
            等待关键字检查完成
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeLocalClientNode`1">
            <summary>
            Word segmentation result disk block index information node interface 
                       分词结果磁盘块索引信息节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeLocalClientNode`1.Create(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeLocalClientNode`1.Delete(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeLocalClientNode`1.LoadCreate(`0,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeLocalClientNode`1.Update(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeReturnValueLocalNode`1">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNode{T})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeReturnValueLocalNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeLocalClientNode{`0}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNode{T})
            </summary>
            <param name="node">Log stream persistence memory database local client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeReturnValueLocalNode`1.Create(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeReturnValueLocalNode`1.Delete(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeReturnValueLocalNode`1.LoadCreate(`0,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeReturnValueLocalNode`1.Update(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum">
            <summary>
            Word segmentation result disk block index information node interface 
                       分词结果磁盘块索引信息节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.Completed">
            <summary>
            [0] 
            T key 
            AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.CompletedLoadPersistence">
            <summary>
            [1] 
            T key 
            AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.Create">
            <summary>
            [2] 
            T key 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.CreateLoadPersistence">
            <summary>
            [3] 
            T key 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.Delete">
            <summary>
            [4] 
            T key 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.DeleteLoadPersistence">
            <summary>
            [5] 
            T key 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.Deleted">
            <summary>
            [6] 
            T key 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.DeletedLoadPersistence">
            <summary>
            [7] 
            T key 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.LoadCreate">
            <summary>
            [8] 
            T key 
            string text 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.LoadCreateBeforePersistence">
            <summary>
            [9] 
            T key 
            string text 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.LoadCreateLoadPersistence">
            <summary>
            [10] 
            T key 
            string text 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.Loaded">
            <summary>
            [11] 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.SnapshotSet">
            <summary>
            [12] 
            AutoCSer.BinarySerializeKeyValue{T,AutoCSer.CommandService.DiskBlock.BlockIndex} value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.SnapshotSetLoaded">
            <summary>
            [13] 
            bool value 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.Update">
            <summary>
            [14] 
            T key 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndex.ILocalNodeMethodEnum.UpdateLoadPersistence">
            <summary>
            [15] 
            T key 
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1">
            <summary>
            分词结果磁盘块索引信息节点
            </summary>
            <typeparam name="T">Keyword type for word segmentation data
            分词数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.Datas">
            <summary>
            分词数据磁盘块索引信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.queueLocks">
            <summary>
            操作队列访问锁集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.loadClientNode">
            <summary>
            初始化加载数据获取分词结果磁盘块索引信息节点单例
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.trieGraphNode">
            <summary>
            获取字符串 Trie 图节点单例
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.loadArraySize">
            <summary>
            初始化加载数据数组大小，默认为 1024
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.isLoaded">
            <summary>
            是否已经加载初始化数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{System#Boolean}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.StaticTrieGraph.IStaticTrieGraphNodeClientNode},AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeClientNode{`0}})">
            <summary>
            分词结果磁盘块索引信息节点
            </summary>
            <param name="trieGraphNode">字符串 Trie 图节点单例</param>
            <param name="loadClientNode">初始化加载数据获取分词结果磁盘块索引信息节点单例</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.getLoadCommand">
            <summary>
            获取初始化加载所有数据命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.load">
            <summary>
            初始化加载所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.create(AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeClientNode{`0},AutoCSer.CommandService.Search.WordIdentityBlockIndex.LoadCallback{`0})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="node">客户端节点信息</param>
            <param name="callback">初始化加载数据回调</param>
            <returns>0 表示成功，-1 表示失败</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{T,AutoCSer#CommandService#DiskBlock#BlockIndex}}#GetSnapshotCapacity(System.Object@)">
            <summary>
            Get the snapshot data collection container size for pre-applying snapshot data containers
            获取快照数据集合容器大小，用于预申请快照数据容器
            </summary>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>The size of the snapshot data collection container
            快照数据集合容器大小</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#ISnapshot{AutoCSer#BinarySerializeKeyValue{T,AutoCSer#CommandService#DiskBlock#BlockIndex}}#GetSnapshotResult(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.DiskBlock.BlockIndex}[],System.Object)">
            <summary>
            Get the snapshot data collection. If the data object may be modified, the cloned data object should be returned to prevent the data from being modified during the snapshot establishment
            获取快照数据集合，如果数据对象可能被修改则应该返回克隆数据对象防止建立快照期间数据被修改
            </summary>
            <param name="snapshotArray">Pre-applied snapshot data container
            预申请的快照数据容器</param>
            <param name="customObject">Custom objects for pre-generating auxiliary data
            自定义对象，用于预生成辅助数据</param>
            <returns>Snapshot data
            快照数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.DiskBlock.BlockIndex})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.getIsLoaded">
            <summary>
            是否已经加载初始化数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.SnapshotSetLoaded(System.Boolean)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.GetSemaphoreSlimCache(`0)">
            <summary>
            获取操作队列访问锁
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.Release(AutoCSer.Threading.SemaphoreSlimCache,`0)">
            <summary>
            释放操作队列访问锁
            </summary>
            <param name="semaphoreSlim"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.Loaded">
            <summary>
            The initialization data loading has been completed
            初始化数据加载完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.LoadCreateBeforePersistence(`0,System.String)">
            <summary>
            Create the disk block index information of the word segmentation result (Check the input parameters before the persistence operation)
            创建分词结果磁盘块索引信息（持久化操作之前检查输入参数）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.LoadCreateLoadPersistence(`0,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result (Initialize and load the persistent data)
            创建分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.LoadCreate(`0,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.CreateLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result (Initialize and load the persistent data)
            创建分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.Create(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.UpdateLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Update the disk block index information of the word segmentation result (Initialize and load the persistent data)
            更新分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.Update(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Update the disk block index information of the word segmentation result
            更新分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.DeleteLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result (Initialize and load the persistent data)
            删除分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.Delete(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.CompletedLoadPersistence(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            The disk block index information of the word segmentation result has completed the update operation (Initialize and load the persistent data)
            分词结果磁盘块索引信息完成更新操作（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.Completed(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            The disk block index information of the word segmentation result has completed the update operation
            分词结果磁盘块索引信息完成更新操作
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.DeletedLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result (Initialize and load the persistent data)
            删除分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.Deleted(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.OnException(AutoCSer.CommandService.Search.WordIdentityBlockIndexData{`0},System.Exception)">
            <summary>
            执行任务异常处理
            </summary>
            <param name="data"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.GetText(`0)">
            <summary>
            根据关键字获取需要分词的文本数据
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <returns>null 表示没有找到关键字数据</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.GetWordIdentitys(System.String)">
            <summary>
            获取分词词语编号标识集合
            </summary>
            <param name="text">分词文本</param>
            <returns>词语编号标识集合</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.GetDiskBlockClient(`0)">
            <summary>
            根据分词数据关键字获取磁盘块索引信息客户端
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.GetDiskBlockClient(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            获取磁盘块索引信息客户端
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.AppendIndex(System.Int32[],`0)">
            <summary>
            添加分词匹配数据关键字
            </summary>
            <param name="wordIdentitys">词语编号标识集合</param>
            <param name="key">匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.AppendIndex(System.Int32[],System.Int32[],`0)">
            <summary>
            更新分词匹配数据关键字
            </summary>
            <param name="wordIdentitys">词语编号标识集合</param>
            <param name="historyWordIdentitys">更新之前的词语编号标识集合</param>
            <param name="key">匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexNode`1.RemoveIndex(System.Int32[],`0)">
            <summary>
            删除分词匹配数据关键字
            </summary>
            <param name="wordIdentitys">词语编号标识集合</param>
            <param name="key">匹配数据关键字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum">
            <summary>
            分词结果磁盘块索引信息更新状态
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.Unknown">
            <summary>
            未知错误或者异常
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.DeletedNotFoundKey">
            <summary>
            未找到关键字触发删除操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.NotSupportDeleteKey">
            <summary>
            不支持删除存在数据的关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.NullKey">
            <summary>
            关键字不允许为 null
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.GetTextFailed">
            <summary>
            获取需要分词的文本数据失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.GetWordIdentityFailed">
            <summary>
            获取分词词语标识集合失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.SetWordIndexFailed">
            <summary>
            设置本文分词索引失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.GetBlockIndexFailed">
            <summary>
            获取磁盘块索引信息失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.GetBlockIndexResultFailed">
            <summary>
            获取文本分词结果失败
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum.Callbacked">
            <summary>
            已回调
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1">
            <summary>
            分词结果磁盘块索引信息
            </summary>
            <typeparam name="T">Keyword type for word segmentation data
            分词数据关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.BlockIndex">
            <summary>
            磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.IsLoadedDeleted">
            <summary>
            是否已经删除
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.#ctor">
            <summary>
            分词结果磁盘块索引信息
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.#ctor(AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            分词结果磁盘块索引信息
            </summary>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.Loaded(AutoCSer.CommandService.Search.WordIdentityBlockIndexNode{`0},`0)">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <param name="node"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.Create(AutoCSer.CommandService.Search.WordIdentityBlockIndexNode{`0},`0)">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.Create(AutoCSer.CommandService.Search.WordIdentityBlockIndexNode{`0},`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum},System.String)">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="callback"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.Update(AutoCSer.CommandService.Search.WordIdentityBlockIndexNode{`0},`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Update the disk block index information of the word segmentation result
            更新分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.Delete(AutoCSer.CommandService.Search.WordIdentityBlockIndexNode{`0},`0)">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.Delete(AutoCSer.CommandService.Search.WordIdentityBlockIndexNode{`0},`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.Completed(AutoCSer.CommandService.Search.WordIdentityBlockIndexNode{`0},`0,AutoCSer.CommandService.DiskBlock.BlockIndex)">
            <summary>
            完成数据更新
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="blockIndex">新的磁盘块索引信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.WordIdentityBlockIndexData`1.sequenceEqual(System.Int32[],System.Int32[])">
            <summary>
            数组比较
            </summary>
            <param name="wordIdentitys"></param>
            <param name="historyWordIdentitys"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1">
            <summary>
            Word segmentation result disk block index information node interface
            分词结果磁盘块索引信息节点接口
            </summary>
            <typeparam name="T">Keyword type for word segmentation data
            分词数据关键字类型</typeparam>
            <summary>
            Word segmentation result disk block index information node interface 
                       分词结果磁盘块索引信息节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.SnapshotSet(AutoCSer.BinarySerializeKeyValue{`0,AutoCSer.CommandService.DiskBlock.BlockIndex})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.SnapshotSetLoaded(System.Boolean)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.Loaded">
            <summary>
            The initialization data loading has been completed
            初始化数据加载完成
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.LoadCreateBeforePersistence(`0,System.String)">
            <summary>
            Create the disk block index information of the word segmentation result (Check the input parameters before the persistence operation)
            创建分词结果磁盘块索引信息（持久化操作之前检查输入参数）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.LoadCreateLoadPersistence(`0,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result (Initialize and load the persistent data)
            创建分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.LoadCreate(`0,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="text">Word segmentation text data
            分词文本数据</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.CreateLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result (Initialize and load the persistent data)
            创建分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.Create(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Create the disk block index information of the word segmentation result
            创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.UpdateLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Update the disk block index information of the word segmentation result (Initialize and load the persistent data)
            更新分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.Update(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Update the disk block index information of the word segmentation result
            更新分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.DeleteLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result (Initialize and load the persistent data)
            删除分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.Delete(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.CompletedLoadPersistence(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            The disk block index information of the word segmentation result has completed the update operation (Initialize and load the persistent data)
            分词结果磁盘块索引信息完成更新操作（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.Completed(`0,AutoCSer.CommandService.DiskBlock.BlockIndex,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            The disk block index information of the word segmentation result has completed the update operation
            分词结果磁盘块索引信息完成更新操作
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="blockIndex">Disk block index information
            磁盘块索引信息</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.DeletedLoadPersistence(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result (Initialize and load the persistent data)
            删除分词结果磁盘块索引信息（初始化加载持久化数据）
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode`1.Deleted(`0,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.MethodCallback{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum})">
            <summary>
            Delete the disk block index information of the word segmentation result
            删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data
            分词数据关键字</param>
            <param name="callback"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.StaticTrieGraphNode">
            <summary>
            字符串 Trie 图节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.wordStringLength">
            <summary>
            未知词语长度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.ReplaceChars">
            <summary>
            替换文字集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.maxTrieWordSize">
            <summary>
            Trie 词语最大文字长度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.maxWordSize">
            <summary>
            未知词语最大文字长度
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.wordSegmentFlags">
            <summary>
            分词选项
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.wordSegmentType">
            <summary>
            分词类型
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.wordStringIndex">
            <summary>
            当前未知词语字符串位置
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.graphData">
            <summary>
            Trie 图序列化数据
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.StaticTrieGraphNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#CommandService#Search#StaticTrieGraph#GraphData}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.formatedText">
            <summary>
            分词格式化文本
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.formatTextFixed">
            <summary>
            分词格式化文本
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.words">
            <summary>
            未知词语集合
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.StaticTrieGraphNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{AutoCSer#BinarySerializeKeyValue{AutoCSer#SubString,System#Int32}}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.wordSegments">
            <summary>
            文本分词结果
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.wordSegmentIdentityMap">
            <summary>
            文本分词词语编号位图
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.wordString">
            <summary>
            当前未知词语字符串
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.StaticTrieGraphNode.builder">
            <summary>
            Trie 树初始化创建器
            </summary>
        </member>
        <member name="P:AutoCSer.CommandService.Search.StaticTrieGraphNode.AutoCSer#CommandService#StreamPersistenceMemoryDatabase#IEnumerableSnapshot{System#String}#SnapshotEnumerable">
            <summary>
            Snapshot collection
            快照集合
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.#ctor(System.Byte,System.Byte,AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags,System.String)">
            <summary>
            字符串 Trie 图节点
            </summary>
            <param name="maxTrieWordSize">Trie 词语最大文字长度</param>
            <param name="maxWordSize">未知词语最大文字长度</param>
            <param name="wordSegmentFlags">分词选项</param>
            <param name="replaceChars">替换文字集合</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.StreamPersistenceMemoryDatabaseServiceLoaded">
            <summary>
            Initialization loading is completed and processed
            初始化加载完毕处理
            </summary>
            <returns>The new node that has been loaded and replaced
            加载完毕替换的新节点</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.getTreeBuilder">
            <summary>
            获取 Trie 树初始化创建器
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.getGraphData">
            <summary>
            获取 Trie 图序列化数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.SnapshotSetGraph(AutoCSer.CommandService.Search.StaticTrieGraph.GraphData)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.getWords">
            <summary>
            获取 Trie 图词语集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.SnapshotSetWord(System.String)">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.SnapshotSetWordIdentity(AutoCSer.BinarySerializeKeyValue{AutoCSer.SubString,System.Int32})">
            <summary>
            Load snapshot data (recover memory data from snapshot data)
            加载快照数据（从快照数据恢复内存数据）
            </summary>
            <param name="value">data</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.getWord(AutoCSer.SubString@,System.Boolean)">
            <summary>
            获取未知词语字符串
            </summary>
            <param name="word">未知词语</param>
            <param name="isSnapshot"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.AppendWord(System.String)">
            <summary>
            Add trie graph word
            添加 Trie 图词语
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.IsGraph">
            <summary>
            Has the trie graph been created
            是否已经创建 Trie 图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.GetWordCount">
            <summary>
            Get the number of words in the trie graph
            获取 Trie 图词语数量
            </summary>
            <returns>The number of words in the trie graph
            Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.BuildGraph">
            <summary>
            Create the trie graph
            创建 Trie 图
            </summary>
            <returns>The number of words in the trie graph
            Trie 图词语数量</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.GetAddTextIdentityBeforePersistence(System.String)">
            <summary>
            Adds text and returns a collection of word numbers (Check the input parameters before the persistence operation)
            添加文本并返回词语编号集合（持久化操作之前检查输入参数）
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.GetAddTextIdentity(System.String)">
            <summary>
            Adds text and returns a collection of word numbers
            添加文本并返回词语编号集合
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.getWordSegmentIdentityArray">
            <summary>
            获取分词结果词语编号集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.GetWordSegmentIdentity(System.String)">
            <summary>
            Get the collection of query word numbers (ignore unmatched words)
            获取查询词语编号集合（忽略未匹配词语）
            </summary>
            <param name="text">The text content of the search
            搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.GetWordSegmentResult(System.String)">
            <summary>
            Get the query word segmentation result
            获取查询分词结果
            </summary>
            <param name="text">The text content of the search
            搜索文本内容</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.setWordSegmentType(AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentTypeEnum)">
            <summary>
            设置分词类型
            </summary>
            <param name="wordSegmentType"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.wordSegment(System.String,System.Int32)">
            <summary>
            文本分词
            </summary>
            <param name="text"></param>
            <param name="formatLength"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.clearIdentityMap(System.Int32)">
            <summary>
            清除词语编号位图
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.addWord(System.Int32,System.Int32)">
            <summary>
            添加文本分词结果
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.trySetIdentityMap(System.Int32)">
            <summary>
            尝试设置词语编号位图
            </summary>
            <param name="identity"></param>
            <returns>新词语返回 true</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.newWordSegmentIdentityMap(System.Int32)">
            <summary>
            文本分词词语编号位图扩容
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.setIdentityMap(System.Int32)">
            <summary>
            设置词语编号位图
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.AddStartWord(System.Int32,System.Char*,System.Int32)">
            <summary>
            添加 Trie 图分词结果
            </summary>
            <param name="identity"></param>
            <param name="startChar"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.StaticTrieGraphNode.AddWord(System.Int32,System.Char*,System.Int32)">
            <summary>
            添加 Trie 图分词结果
            </summary>
            <param name="identity"></param>
            <param name="endChar"></param>
            <param name="length"></param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IConditionDataNodeClientNode`2">
            <summary>
            Non-index condition query data node interface 
                       非索引条件查询数据节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeClientNode`2.Create(`0)">
            <summary>
            Create non-indexed conditional query data 
                       创建非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeClientNode`2.Update(`0)">
            <summary>
            Update non-indexed condition query data 
                       更新非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeClientNode`2.Delete(`0)">
            <summary>
            Delete non-indexed condition query data 
                       删除非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeClientNode`2.LoadCreate(`1)">
            <summary>
            Create non-indexed conditional query data 
                       创建非索引条件查询数据
            </summary>
            <param name="value">Non-indexed condition query data 
                       非索引条件查询数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueNode`2">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IConditionDataNode{KT,VT})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueNode`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.IConditionDataNodeClientNode{`0,`1}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IConditionDataNode{KT,VT})
            </summary>
            <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueNode`2.Create(`0)">
            <summary>
            Create non-indexed conditional query data 
                       创建非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueNode`2.Update(`0)">
            <summary>
            Update non-indexed condition query data 
                       更新非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueNode`2.Delete(`0)">
            <summary>
            Delete non-indexed condition query data 
                       删除非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueNode`2.LoadCreate(`1)">
            <summary>
            Create non-indexed conditional query data 
                       创建非索引条件查询数据
            </summary>
            <param name="value">Non-indexed condition query data 
                       非索引条件查询数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeClientNode">
            <summary>
            创建哈希索引节点的自定义基础服务接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeClientNode.CreateRemoveMarkHashIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建带移除标记的可重用哈希索引节点 IRemoveMarkHashIndexNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <param name="valueType">数据关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeClientNode.CreateRemoveMarkHashKeyIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建带移除标记的可重用哈希索引节点 IRemoveMarkHashKeyIndexNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeReturnValueNode">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IDiskBlockIndexServiceNode)
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeReturnValueNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeClientNode},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IDiskBlockIndexServiceNode)
            </summary>
            <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeReturnValueNode.CreateRemoveMarkHashIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建带移除标记的可重用哈希索引节点 IRemoveMarkHashIndexNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <param name="valueType">数据关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeReturnValueNode.CreateRemoveMarkHashKeyIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建带移除标记的可重用哈希索引节点 IRemoveMarkHashKeyIndexNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeClientNode">
            <summary>
            创建字符串 Trie 图节点的自定义基础服务接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeClientNode.CreateStaticTrieGraphNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Byte,System.Byte,AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags,System.String)">
            <summary>
            创建字符串 Trie 图节点 IStaticTrieGraphNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="maxTrieWordSize">Trie 词语最大文字长度</param>
            <param name="maxWordSize">未知词语最大文字长度</param>
            <param name="wordSegmentFlags">分词选项</param>
            <param name="replaceChars">替换文字集合</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeReturnValueNode">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IStaticTrieGraphServiceNode)
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeReturnValueNode.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeClientNode},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IStaticTrieGraphServiceNode)
            </summary>
            <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeReturnValueNode.CreateStaticTrieGraphNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Byte,System.Byte,AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags,System.String)">
            <summary>
            创建字符串 Trie 图节点 IStaticTrieGraphNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="maxTrieWordSize">Trie 词语最大文字长度</param>
            <param name="maxWordSize">未知词语最大文字长度</param>
            <param name="wordSegmentFlags">分词选项</param>
            <param name="replaceChars">替换文字集合</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeClientNode`1">
            <summary>
            Word segmentation result disk block index information node interface 
                       分词结果磁盘块索引信息节点接口 client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeClientNode`1.Create(`0)">
            <summary>
            Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeClientNode`1.Delete(`0)">
            <summary>
            Delete the disk block index information of the word segmentation result 
                       删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeClientNode`1.Update(`0)">
            <summary>
            Update the disk block index information of the word segmentation result 
                       更新分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeClientNode`1.LoadCreate(`0,System.String)">
            <summary>
            Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <param name="text">Word segmentation text data 
                       分词文本数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueNode`1">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode{T})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseClientNodeCache{AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeClientNode{`0}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode{T})
            </summary>
            <param name="node">Log stream persistence memory database client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueNode`1.Create(`0)">
            <summary>
            Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueNode`1.Delete(`0)">
            <summary>
            Delete the disk block index information of the word segmentation result 
                       删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueNode`1.Update(`0)">
            <summary>
            Update the disk block index information of the word segmentation result 
                       更新分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueNode`1.LoadCreate(`0,System.String)">
            <summary>
            Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <param name="text">Word segmentation text data 
                       分词文本数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IConditionDataNodeLocalClientNode`2">
            <summary>
            Non-index condition query data node interface 
                       非索引条件查询数据节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeLocalClientNode`2.Create(`0)">
            <summary>
            Create non-indexed conditional query data 
                       创建非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeLocalClientNode`2.Update(`0)">
            <summary>
            Update non-indexed condition query data 
                       更新非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeLocalClientNode`2.Delete(`0)">
            <summary>
            Delete non-indexed condition query data 
                       删除非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeLocalClientNode`2.LoadCreate(`1)">
            <summary>
            Create non-indexed conditional query data 
                       创建非索引条件查询数据
            </summary>
            <param name="value">Non-indexed condition query data 
                       非索引条件查询数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueLocalNode`2">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IConditionDataNode{KT,VT})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueLocalNode`2.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.IConditionDataNodeLocalClientNode{`0,`1}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IConditionDataNode{KT,VT})
            </summary>
            <param name="node">Log stream persistence memory database local client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueLocalNode`2.Create(`0)">
            <summary>
            Create non-indexed conditional query data 
                       创建非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueLocalNode`2.Update(`0)">
            <summary>
            Update non-indexed condition query data 
                       更新非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueLocalNode`2.Delete(`0)">
            <summary>
            Delete non-indexed condition query data 
                       删除非索引条件查询数据
            </summary>
            <param name="key">Data keyword</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IConditionDataNodeReturnValueLocalNode`2.LoadCreate(`1)">
            <summary>
            Create non-indexed conditional query data 
                       创建非索引条件查询数据
            </summary>
            <param name="value">Non-indexed condition query data 
                       非索引条件查询数据</param>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeLocalClientNode`1">
            <summary>
            Word segmentation result disk block index information node interface 
                       分词结果磁盘块索引信息节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeLocalClientNode`1.Create(`0)">
            <summary>
            Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeLocalClientNode`1.Delete(`0)">
            <summary>
            Delete the disk block index information of the word segmentation result 
                       删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeLocalClientNode`1.Update(`0)">
            <summary>
            Update the disk block index information of the word segmentation result 
                       更新分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeLocalClientNode`1.LoadCreate(`0,System.String)">
            <summary>
            Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <param name="text">Word segmentation text data 
                       分词文本数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueLocalNode`1">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode{T})
            </summary>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueLocalNode`1.#ctor(AutoCSer.CommandService.StreamPersistenceMemoryDatabaseLocalClientNodeCache{AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeLocalClientNode{`0}},System.Boolean,System.Boolean)">
            <summary>
            Get the direct return value API encapsulation (AutoCSer.CommandService.Search.IWordIdentityBlockIndexNode{T})
            </summary>
            <param name="node">Log stream persistence memory database local client node cache for client singleton</param>
            <param name="isIgnoreError">A default value of false indicates that exceptions and error messages are not ignored</param>
            <param name="isSynchronousCallback">The default value of false indicates that the IO thread synchronization callback is not used; otherwise, the subsequent operations of the API call await are not allowed to have synchronization blocking logic or long-term CPU occupation operations</param>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueLocalNode`1.Create(`0)">
            <summary>
            Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueLocalNode`1.Delete(`0)">
            <summary>
            Delete the disk block index information of the word segmentation result 
                       删除分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueLocalNode`1.Update(`0)">
            <summary>
            Update the disk block index information of the word segmentation result 
                       更新分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeReturnValueLocalNode`1.LoadCreate(`0,System.String)">
            <summary>
            Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            </summary>
            <param name="key">The keyword of the word segmentation data 
                       分词数据关键字</param>
            <param name="text">Word segmentation text data 
                       分词文本数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum">
            <summary>
            Non-index condition query data node interface 
                       非索引条件查询数据节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.SnapshotSet">
            <summary>
            [0] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            VT value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.Create">
            <summary>
            [1] Create non-indexed conditional query data 
                       创建非索引条件查询数据
            KT key Data keyword
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.Update">
            <summary>
            [2] Update non-indexed condition query data 
                       更新非索引条件查询数据
            KT key Data keyword
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.Loaded">
            <summary>
            [3] The initialization data loading has been completed 
                       初始化数据加载完成
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.SnapshotSetLoaded">
            <summary>
            [4] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            bool value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.Completed">
            <summary>
            [5] The non-indexed condition query data has completed the update operation 
                       非索引条件查询数据完成更新操作
            VT value Non-indexed condition query data 
                       非索引条件查询数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.CompletedBeforePersistence">
            <summary>
            [6] The non-indexed condition query data has completed the update operation (Check the input parameters before the persistence operation) 
                       非索引条件查询数据完成更新操作（持久化操作之前检查输入参数）
            VT value Non-indexed condition query data 
                       非索引条件查询数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.Delete">
            <summary>
            [7] Delete non-indexed condition query data 
                       删除非索引条件查询数据
            KT key Data keyword
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.CompletedLoadPersistence">
            <summary>
            [8] The non-indexed condition query data has completed the update operation (Initialize and load the persistent data) 
                       非索引条件查询数据完成更新操作（初始化加载持久化数据）
            VT value Non-indexed condition query data 
                       非索引条件查询数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.DeleteLoadPersistence">
            <summary>
            [9] Delete non-indexed condition query data (Initialize and load the persistent data) 
                       删除非索引条件查询数据（初始化加载持久化数据）
            KT key Data keyword
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.LoadCreate">
            <summary>
            [10] Create non-indexed conditional query data 
                       创建非索引条件查询数据
            VT value Non-indexed condition query data 
                       非索引条件查询数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.LoadCreateBeforePersistence">
            <summary>
            [11] Create non-indexed conditional query data (Check the input parameters before the persistence operation) 
                       创建非索引条件查询数据（持久化操作之前检查输入参数）
            VT value Non-indexed condition query data 
                       非索引条件查询数据
            返回值 bool Returning true indicates that a persistence operation is required 
                       返回 true 表示需要持久化操作
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IConditionDataNodeMethodEnum.LoadCreateLoadPersistence">
            <summary>
            [12] Create non-indexed conditional query data (Initialize and load the persistent data) 
                       创建非索引条件查询数据（初始化加载持久化数据）
            VT value Non-indexed condition query data 
                       非索引条件查询数据
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum">
            <summary>
            创建哈希索引节点的自定义基础服务接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateArrayNode">
            <summary>
            [0] Create a array node IArrayNode{T} 
                       创建数组节点 IArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int length Array length
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateBitmapNode">
            <summary>
            [1] Create a bitmap node IBitmapNode 
                       创建位图节点 IBitmapNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            uint capacity The number of binary bits 
                       二进制位数量
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateByteArrayDictionaryNode">
            <summary>
            [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
                       创建字典节点 IByteArrayDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateByteArrayFragmentDictionaryNode">
            <summary>
            [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
                       创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateByteArrayQueueNode">
            <summary>
            [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
                       创建队列节点（先进先出） IByteArrayQueueNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateByteArrayStackNode">
            <summary>
            [5] Create a stack node IByteArrayStackNode (Last in, first out) 
                       创建栈节点（后进先出） IByteArrayStackNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateDictionaryNode">
            <summary>
            [6] Create a dictionary node IDictionaryNode{KT,VT} 
                       创建字典节点 IDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateDistributedLockNode">
            <summary>
            [7] Create distributed lock nodes IDistributedLockNode{KT} 
                       创建分布式锁节点 IDistributedLockNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateFragmentDictionaryNode">
            <summary>
            [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
                       创建字典节点 IFragmentDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateFragmentHashSetNode">
            <summary>
            [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
                       创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateHashBytesDictionaryNode">
            <summary>
            [10] Create a dictionary node IHashBytesDictionaryNode 
                       创建字典节点 IHashBytesDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateHashBytesFragmentDictionaryNode">
            <summary>
            [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
                       创建字典节点 IHashBytesFragmentDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateHashSetNode">
            <summary>
            [12] Create a hash table node IHashSetNode{KT} 
                       创建哈希表节点 IHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateIdentityGeneratorNode">
            <summary>
            [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
                       创建 64 位自增ID 节点 IIdentityGeneratorNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            long identity Initial Allocation identity 
                       起始分配 ID
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateLeftArrayNode">
            <summary>
            [14] Create a array node ILeftArrayNode{T} 
                       创建数组节点 ILeftArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateMessageNode">
            <summary>
            [15] Create a message processing node IMessageNode{T} 
                       创建消息处理节点 IMessageNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType messageType Message data type 
                       消息数据类型
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateQueueNode">
            <summary>
            [16] Create a queue node IQueueNode{T} (First in, first Out) 
                       创建队列节点（先进先出） IQueueNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateSearchTreeDictionaryNode">
            <summary>
            [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
                       创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateSearchTreeSetNode">
            <summary>
            [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
                       创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateServerByteArrayMessageNode">
            <summary>
            [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
                       创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateSortedDictionaryNode">
            <summary>
            [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
                       创建排序字典节点 ISortedDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateSortedListNode">
            <summary>
            [21] Create a sorting list node ISortedListNode{KT,VT} 
                       创建排序列表节点 ISortedListNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateSortedSetNode">
            <summary>
            [22] Create sorted collection node ISortedSetNode{KT} 
                       创建排序集合节点 ISortedSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateStackNode">
            <summary>
            [23] Create a stack node IStackNode{T} (Last in, first out) 
                       创建栈节点（后进先出） IStackNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.RemoveNode">
            <summary>
            [24] Delete the node 
                       删除节点
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateServerRegistryNode">
            <summary>
            [25] Create a server registration node IServerRegistryNode 
                       创建服务注册节点 IServerRegistryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int loadTimeoutSeconds Cold start session timeout seconds 
                       冷启动会话超时秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateProcessGuardNode">
            <summary>
            [26] Create a service process daemon node IProcessGuardNode 
                       创建服务进程守护节点 IProcessGuardNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateManyHashBitMapClientFilterNode">
            <summary>
            [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
                       创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateManyHashBitMapFilterNode">
            <summary>
            [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
                       创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.RemoveNodeByKey">
            <summary>
            [29] Delete the node 
                       删除节点
            string key Node global keyword 
                       节点全局关键字
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateOnlyPersistenceNode">
            <summary>
            [30] Create an archive node only IOnlyPersistenceNode{T} 
                       创建仅存档节点 IOnlyPersistenceNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType valueType Archive data type 
                       存档数据类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateUniformProbabilityClientStatisticsNode">
            <summary>
            [31] Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
                       创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
                       索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateUniformProbabilityTotalStatisticsNode">
            <summary>
            [32] Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
                       创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
                       索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateRemoveMarkHashIndexNode">
            <summary>
            [256] 创建带移除标记的可重用哈希索引节点 IRemoveMarkHashIndexNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType 索引关键字类型
            AutoCSer.Reflection.RemoteType valueType 数据关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IDiskBlockIndexServiceNodeMethodEnum.CreateRemoveMarkHashKeyIndexNode">
            <summary>
            [257] 创建带移除标记的可重用哈希索引节点 IRemoveMarkHashKeyIndexNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType 索引关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum">
            <summary>
            创建字符串 Trie 图节点的自定义基础服务接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateArrayNode">
            <summary>
            [0] Create a array node IArrayNode{T} 
                       创建数组节点 IArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int length Array length
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateBitmapNode">
            <summary>
            [1] Create a bitmap node IBitmapNode 
                       创建位图节点 IBitmapNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            uint capacity The number of binary bits 
                       二进制位数量
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateByteArrayDictionaryNode">
            <summary>
            [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
                       创建字典节点 IByteArrayDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateByteArrayFragmentDictionaryNode">
            <summary>
            [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
                       创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateByteArrayQueueNode">
            <summary>
            [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
                       创建队列节点（先进先出） IByteArrayQueueNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateByteArrayStackNode">
            <summary>
            [5] Create a stack node IByteArrayStackNode (Last in, first out) 
                       创建栈节点（后进先出） IByteArrayStackNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateDictionaryNode">
            <summary>
            [6] Create a dictionary node IDictionaryNode{KT,VT} 
                       创建字典节点 IDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateDistributedLockNode">
            <summary>
            [7] Create distributed lock nodes IDistributedLockNode{KT} 
                       创建分布式锁节点 IDistributedLockNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateFragmentDictionaryNode">
            <summary>
            [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
                       创建字典节点 IFragmentDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateFragmentHashSetNode">
            <summary>
            [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
                       创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateHashBytesDictionaryNode">
            <summary>
            [10] Create a dictionary node IHashBytesDictionaryNode 
                       创建字典节点 IHashBytesDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateHashBytesFragmentDictionaryNode">
            <summary>
            [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
                       创建字典节点 IHashBytesFragmentDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateHashSetNode">
            <summary>
            [12] Create a hash table node IHashSetNode{KT} 
                       创建哈希表节点 IHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateIdentityGeneratorNode">
            <summary>
            [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
                       创建 64 位自增ID 节点 IIdentityGeneratorNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            long identity Initial Allocation identity 
                       起始分配 ID
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateLeftArrayNode">
            <summary>
            [14] Create a array node ILeftArrayNode{T} 
                       创建数组节点 ILeftArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateMessageNode">
            <summary>
            [15] Create a message processing node IMessageNode{T} 
                       创建消息处理节点 IMessageNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType messageType Message data type 
                       消息数据类型
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateQueueNode">
            <summary>
            [16] Create a queue node IQueueNode{T} (First in, first Out) 
                       创建队列节点（先进先出） IQueueNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateSearchTreeDictionaryNode">
            <summary>
            [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
                       创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateSearchTreeSetNode">
            <summary>
            [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
                       创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateServerByteArrayMessageNode">
            <summary>
            [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
                       创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateSortedDictionaryNode">
            <summary>
            [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
                       创建排序字典节点 ISortedDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateSortedListNode">
            <summary>
            [21] Create a sorting list node ISortedListNode{KT,VT} 
                       创建排序列表节点 ISortedListNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateSortedSetNode">
            <summary>
            [22] Create sorted collection node ISortedSetNode{KT} 
                       创建排序集合节点 ISortedSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateStackNode">
            <summary>
            [23] Create a stack node IStackNode{T} (Last in, first out) 
                       创建栈节点（后进先出） IStackNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.RemoveNode">
            <summary>
            [24] Delete the node 
                       删除节点
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateServerRegistryNode">
            <summary>
            [25] Create a server registration node IServerRegistryNode 
                       创建服务注册节点 IServerRegistryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int loadTimeoutSeconds Cold start session timeout seconds 
                       冷启动会话超时秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateProcessGuardNode">
            <summary>
            [26] Create a service process daemon node IProcessGuardNode 
                       创建服务进程守护节点 IProcessGuardNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateManyHashBitMapClientFilterNode">
            <summary>
            [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
                       创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateManyHashBitMapFilterNode">
            <summary>
            [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
                       创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.RemoveNodeByKey">
            <summary>
            [29] Delete the node 
                       删除节点
            string key Node global keyword 
                       节点全局关键字
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateOnlyPersistenceNode">
            <summary>
            [30] Create an archive node only IOnlyPersistenceNode{T} 
                       创建仅存档节点 IOnlyPersistenceNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType valueType Archive data type 
                       存档数据类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateUniformProbabilityClientStatisticsNode">
            <summary>
            [31] Create a client synchronization total statistics node based on uniform probability IUniformProbabilityClientStatisticsNode 
                       创建基于均匀概率的客户端同步总量统计节点 IUniformProbabilityClientStatisticsNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
                       索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateUniformProbabilityTotalStatisticsNode">
            <summary>
            [32] Create a total statistics node based on uniform probability IUniformProbabilityTotalStatisticsNode 
                       创建基于均匀概率的总量统计节点 IUniformProbabilityTotalStatisticsNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            byte indexBits The number of binary bits in the index must be even, with a minimum of 8 and a maximum of 20 
                       索引二进制位数量，必须为偶数，最小值为 8，最大值为 20
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IStaticTrieGraphServiceNodeMethodEnum.CreateStaticTrieGraphNode">
            <summary>
            [256] 创建字符串 Trie 图节点 IStaticTrieGraphNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            byte maxTrieWordSize Trie 词语最大文字长度
            byte maxWordSize 未知词语最大文字长度
            AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags wordSegmentFlags 分词选项
            string replaceChars 替换文字集合
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="T:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum">
            <summary>
            Word segmentation result disk block index information node interface 
                       分词结果磁盘块索引信息节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.Completed">
            <summary>
            [0] The disk block index information of the word segmentation result has completed the update operation 
                       分词结果磁盘块索引信息完成更新操作
            T key The keyword of the word segmentation data 
                       分词数据关键字
            AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
                       磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.Create">
            <summary>
            [1] Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            T key The keyword of the word segmentation data 
                       分词数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.CreateLoadPersistence">
            <summary>
            [2] Create the disk block index information of the word segmentation result (Initialize and load the persistent data) 
                       创建分词结果磁盘块索引信息（初始化加载持久化数据）
            T key The keyword of the word segmentation data 
                       分词数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.Delete">
            <summary>
            [3] Delete the disk block index information of the word segmentation result 
                       删除分词结果磁盘块索引信息
            T key The keyword of the word segmentation data 
                       分词数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.DeleteLoadPersistence">
            <summary>
            [4] Delete the disk block index information of the word segmentation result (Initialize and load the persistent data) 
                       删除分词结果磁盘块索引信息（初始化加载持久化数据）
            T key The keyword of the word segmentation data 
                       分词数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.Deleted">
            <summary>
            [5] Delete the disk block index information of the word segmentation result 
                       删除分词结果磁盘块索引信息
            T key The keyword of the word segmentation data 
                       分词数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.SnapshotSet">
            <summary>
            [6] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            AutoCSer.BinarySerializeKeyValue{T,AutoCSer.CommandService.DiskBlock.BlockIndex} value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.Update">
            <summary>
            [7] Update the disk block index information of the word segmentation result 
                       更新分词结果磁盘块索引信息
            T key The keyword of the word segmentation data 
                       分词数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.UpdateLoadPersistence">
            <summary>
            [8] Update the disk block index information of the word segmentation result (Initialize and load the persistent data) 
                       更新分词结果磁盘块索引信息（初始化加载持久化数据）
            T key The keyword of the word segmentation data 
                       分词数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.CompletedLoadPersistence">
            <summary>
            [9] The disk block index information of the word segmentation result has completed the update operation (Initialize and load the persistent data) 
                       分词结果磁盘块索引信息完成更新操作（初始化加载持久化数据）
            T key The keyword of the word segmentation data 
                       分词数据关键字
            AutoCSer.CommandService.DiskBlock.BlockIndex blockIndex Disk block index information 
                       磁盘块索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.DeletedLoadPersistence">
            <summary>
            [10] Delete the disk block index information of the word segmentation result (Initialize and load the persistent data) 
                       删除分词结果磁盘块索引信息（初始化加载持久化数据）
            T key The keyword of the word segmentation data 
                       分词数据关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.Loaded">
            <summary>
            [11] The initialization data loading has been completed 
                       初始化数据加载完成
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.SnapshotSetLoaded">
            <summary>
            [12] Load snapshot data (recover memory data from snapshot data) 
                       加载快照数据（从快照数据恢复内存数据）
            bool value data
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.LoadCreate">
            <summary>
            [13] Create the disk block index information of the word segmentation result 
                       创建分词结果磁盘块索引信息
            T key The keyword of the word segmentation data 
                       分词数据关键字
            string text Word segmentation text data 
                       分词文本数据
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.LoadCreateBeforePersistence">
            <summary>
            [14] Create the disk block index information of the word segmentation result (Check the input parameters before the persistence operation) 
                       创建分词结果磁盘块索引信息（持久化操作之前检查输入参数）
            T key The keyword of the word segmentation data 
                       分词数据关键字
            string text Word segmentation text data 
                       分词文本数据
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.CommandService.Search.WordIdentityBlockIndexUpdateStateEnum} 
            </summary>
        </member>
        <member name="F:AutoCSer.CommandService.Search.IWordIdentityBlockIndexNodeMethodEnum.LoadCreateLoadPersistence">
            <summary>
            [15] Create the disk block index information of the word segmentation result (Initialize and load the persistent data) 
                       创建分词结果磁盘块索引信息（初始化加载持久化数据）
            T key The keyword of the word segmentation data 
                       分词数据关键字
            string text Word segmentation text data 
                       分词文本数据
            </summary>
        </member>
    </members>
</doc>
