<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.TestCase.MemorySearchCommon</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.TestCase.SearchQueryService.ISearchUserNode">
            <summary>
            Non-index condition query data node interface
            非索引条件查询数据节点接口
            </summary>
            <summary>
            Non-index condition query data node interface 
                       非索引条件查询数据节点接口
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.ISearchUserNode.GetPage(AutoCSer.TestCase.SearchQueryService.SearchUserQueryParameter,System.Int32[],System.Int32[])">
            <summary>
            获取非索引条件数据用户分页数据
            </summary>
            <param name="queryParameter">用户搜索非索引条件数据查询参数</param>
            <param name="userNameWordIdentitys">用户名称查询分词编号集合</param>
            <param name="userRemarkWordIdentitys">用户备注查询分词编号集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.IQueryService">
            <summary>
            搜索聚合查询服务接口
            </summary>
            <summary>
            搜索聚合查询服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryService.GetUserPage(AutoCSer.TestCase.SearchQueryService.UserQueryParameter)">
            <summary>
            获取用户标识分页记录
            </summary>
            <param name="queryParameter">用户搜索查询参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryService.UserMessage(AutoCSer.TestCase.SearchDataSource.OperationData{System.Int32})">
            <summary>
            用户数据更新消息
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.IQueryServiceNode">
            <summary>
            搜索聚合查询服务服务本地节点的自定义基础服务接口
            </summary>
            <summary>
            搜索聚合查询服务服务本地节点的自定义基础服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNode.CreateStaticTrieGraphNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Byte,System.Byte,AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags,System.String)">
            <summary>
            创建字符串 Trie 图节点 IStaticTrieGraphNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="maxTrieWordSize">Trie 词语最大文字长度</param>
            <param name="maxWordSize">未知词语最大文字长度</param>
            <param name="wordSegmentFlags">分词选项</param>
            <param name="replaceChars">替换文字集合</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNode.CreateUserNameWordIdentityBlockIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建用户名称分词结果磁盘块索引信息节点 IWordIdentityBlockIndex
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNode.CreateUserRemarkWordIdentityBlockIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建用户备注分词结果磁盘块索引信息节点 IWordIdentityBlockIndex
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNode.CreateSearchUserNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建非索引条件查询数据节点 ISearchUserNode
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNode.CreateHashIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建哈希索引节点 IHashIndexNode{KT,VT}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <param name="valueType">数据关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNode.CreateHashCodeKeyIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建哈希索引节点 IHashCodeKeyIndexNode{T}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.SearchUserQueryParameter">
            <summary>
            用户搜索非索引条件数据查询参数
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.SearchUserQueryParameter.Gender">
            <summary>
            查询性别
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.SearchUserQueryParameter.Order">
            <summary>
            排序类型，默认为 用户标识降序
            </summary>
        </member>
        <member name="P:AutoCSer.TestCase.SearchQueryService.SearchUserQueryParameter.IsSearchCondition">
            <summary>
            是否存在非索引条件查询参数
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.SearchUserQueryParameter.SearchCondition(AutoCSer.TestCase.SearchDataSource.SearchUser)">
            <summary>
            非索引条件
            </summary>
            <param name="user">用户搜索非索引条件数据</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.UserOrderEnum">
            <summary>
            用户数据排序类型
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.UserOrderEnum.IdDesc">
            <summary>
            用户标识降序
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.UserOrderEnum.LoginTimeDesc">
            <summary>
            最后登录时间降序
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.UserQueryParameter">
            <summary>
            用户搜索查询参数
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.UserQueryParameter.Name">
            <summary>
            搜索用户名称
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.UserQueryParameter.Remark">
            <summary>
            搜索用户备注
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.IQueryServiceClientController">
            <summary>
            搜索聚合查询服务接口 client interface
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceClientController.GetUserPage(AutoCSer.TestCase.SearchQueryService.UserQueryParameter)">
            <summary>
            获取用户标识分页记录
            </summary>
            <param name="queryParameter">用户搜索查询参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceClientController.UserMessage(AutoCSer.TestCase.SearchDataSource.OperationData{System.Int32})">
            <summary>
            用户数据更新消息
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.IQueryServiceMethodEnum">
            <summary>
            搜索聚合查询服务接口 (The method sequence number maps the enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceMethodEnum.GetUserPage">
            <summary>
            [0] 获取用户标识分页记录
            AutoCSer.TestCase.SearchQueryService.UserQueryParameter queryParameter 用户搜索查询参数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult{int} 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceMethodEnum.UserMessage">
            <summary>
            [1] 用户数据更新消息
            AutoCSer.TestCase.SearchDataSource.OperationData{int} data 
            返回值 bool 
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeLocalClientNode">
            <summary>
            搜索聚合查询服务服务本地节点的自定义基础服务接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeLocalClientNode.CreateHashIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建哈希索引节点 IHashIndexNode{KT,VT}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <param name="valueType">数据关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeLocalClientNode.CreateHashCodeKeyIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,AutoCSer.Reflection.RemoteType)">
            <summary>
            创建哈希索引节点 IHashCodeKeyIndexNode{T}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="keyType">索引关键字类型</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeLocalClientNode.CreateSearchUserNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建非索引条件查询数据节点 ISearchUserNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeLocalClientNode.CreateStaticTrieGraphNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Byte,System.Byte,AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags,System.String)">
            <summary>
            创建字符串 Trie 图节点 IStaticTrieGraphNode
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="maxTrieWordSize">Trie 词语最大文字长度</param>
            <param name="maxWordSize">未知词语最大文字长度</param>
            <param name="wordSegmentFlags">分词选项</param>
            <param name="replaceChars">替换文字集合</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeLocalClientNode.CreateUserNameWordIdentityBlockIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建用户名称分词结果磁盘块索引信息节点 IWordIdentityBlockIndex
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeLocalClientNode.CreateUserRemarkWordIdentityBlockIndexNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo)">
            <summary>
            创建用户备注分词结果磁盘块索引信息节点 IWordIdentityBlockIndex
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeLocalClientNode">
            <summary>
            Non-index condition query data node interface 
                       非索引条件查询数据节点接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeLocalClientNode.Create(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeLocalClientNode.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeLocalClientNode.LoadCreate(AutoCSer.BinarySerializeKeyValue{System.Int32,AutoCSer.TestCase.SearchDataSource.SearchUser})">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeLocalClientNode.Update(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeLocalClientNode.GetPage(AutoCSer.TestCase.SearchQueryService.SearchUserQueryParameter,System.Int32[],System.Int32[])">
            <summary>
            获取非索引条件数据用户分页数据
            </summary>
            <param name="queryParameter">用户搜索非索引条件数据查询参数</param>
            <param name="userNameWordIdentitys">用户名称查询分词编号集合</param>
            <param name="userRemarkWordIdentitys">用户备注查询分词编号集合</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum">
            <summary>
            搜索聚合查询服务服务本地节点的自定义基础服务接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateArrayNode">
            <summary>
            [0] Create a array node IArrayNode{T} 
                       创建数组节点 IArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int length Array length
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateBitmapNode">
            <summary>
            [1] Create a bitmap node IBitmapNode 
                       创建位图节点 IBitmapNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            uint capacity The number of binary bits 
                       二进制位数量
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateByteArrayDictionaryNode">
            <summary>
            [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
                       创建字典节点 IByteArrayDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateByteArrayFragmentDictionaryNode">
            <summary>
            [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
                       创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateByteArrayQueueNode">
            <summary>
            [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
                       创建队列节点（先进先出） IByteArrayQueueNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateByteArrayStackNode">
            <summary>
            [5] Create a stack node IByteArrayStackNode (Last in, first out) 
                       创建栈节点（后进先出） IByteArrayStackNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateDictionaryNode">
            <summary>
            [6] Create a dictionary node IDictionaryNode{KT,VT} 
                       创建字典节点 IDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateDistributedLockNode">
            <summary>
            [7] Create distributed lock nodes IDistributedLockNode{KT} 
                       创建分布式锁节点 IDistributedLockNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateFragmentDictionaryNode">
            <summary>
            [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
                       创建字典节点 IFragmentDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateFragmentHashSetNode">
            <summary>
            [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
                       创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateHashBytesDictionaryNode">
            <summary>
            [10] Create a dictionary node IHashBytesDictionaryNode 
                       创建字典节点 IHashBytesDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateHashBytesFragmentDictionaryNode">
            <summary>
            [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
                       创建字典节点 IHashBytesFragmentDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateHashSetNode">
            <summary>
            [12] Create a hash table node IHashSetNode{KT} 
                       创建哈希表节点 IHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateIdentityGeneratorNode">
            <summary>
            [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
                       创建 64 位自增ID 节点 IIdentityGeneratorNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            long identity Initial Allocation identity 
                       起始分配 ID
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateLeftArrayNode">
            <summary>
            [14] Create a array node ILeftArrayNode{T} 
                       创建数组节点 ILeftArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateMessageNode">
            <summary>
            [15] Create a message processing node IMessageNode{T} 
                       创建消息处理节点 IMessageNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType messageType Message data type 
                       消息数据类型
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateQueueNode">
            <summary>
            [16] Create a queue node IQueueNode{T} (First in, first Out) 
                       创建队列节点（先进先出） IQueueNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateSearchTreeDictionaryNode">
            <summary>
            [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
                       创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateSearchTreeSetNode">
            <summary>
            [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
                       创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateServerByteArrayMessageNode">
            <summary>
            [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
                       创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateSortedDictionaryNode">
            <summary>
            [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
                       创建排序字典节点 ISortedDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateSortedListNode">
            <summary>
            [21] Create a sorting list node ISortedListNode{KT,VT} 
                       创建排序列表节点 ISortedListNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateSortedSetNode">
            <summary>
            [22] Create sorted collection node ISortedSetNode{KT} 
                       创建排序集合节点 ISortedSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateStackNode">
            <summary>
            [23] Create a stack node IStackNode{T} (Last in, first out) 
                       创建栈节点（后进先出） IStackNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.RemoveNode">
            <summary>
            [24] Delete the node 
                       删除节点
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateServerRegistryNode">
            <summary>
            [25] Create a server registration node IServerRegistryNode 
                       创建服务注册节点 IServerRegistryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int loadTimeoutSeconds Cold start session timeout seconds 
                       冷启动会话超时秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateProcessGuardNode">
            <summary>
            [26] Create a service process daemon node IProcessGuardNode 
                       创建服务进程守护节点 IProcessGuardNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateManyHashBitMapClientFilterNode">
            <summary>
            [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
                       创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateManyHashBitMapFilterNode">
            <summary>
            [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
                       创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.RemoveNodeByKey">
            <summary>
            [29] Delete the node 
                       删除节点
            string key Node global keyword 
                       节点全局关键字
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateOnlyPersistenceNode">
            <summary>
            [30] Create an archive node only IOnlyPersistenceNode{T} 
                       创建仅存档节点 IOnlyPersistenceNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType valueType Archive data type 
                       存档数据类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateHashIndexNode">
            <summary>
            [256] 创建哈希索引节点 IHashIndexNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType 索引关键字类型
            AutoCSer.Reflection.RemoteType valueType 数据关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateHashCodeKeyIndexNode">
            <summary>
            [257] 创建哈希索引节点 IHashCodeKeyIndexNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType 索引关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateSearchUserNode">
            <summary>
            [258] 创建非索引条件查询数据节点 ISearchUserNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateStaticTrieGraphNode">
            <summary>
            [259] 创建字符串 Trie 图节点 IStaticTrieGraphNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            byte maxTrieWordSize Trie 词语最大文字长度
            byte maxWordSize 未知词语最大文字长度
            AutoCSer.CommandService.Search.StaticTrieGraph.WordSegmentFlags wordSegmentFlags 分词选项
            string replaceChars 替换文字集合
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateUserNameWordIdentityBlockIndexNode">
            <summary>
            [260] 创建用户名称分词结果磁盘块索引信息节点 IWordIdentityBlockIndex
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.IQueryServiceNodeMethodEnum.CreateUserRemarkWordIdentityBlockIndexNode">
            <summary>
            [261] 创建用户备注分词结果磁盘块索引信息节点 IWordIdentityBlockIndex
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum">
            <summary>
            Non-index condition query data node interface 
                       非索引条件查询数据节点接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.Completed">
            <summary>
            [0] 
            AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} value 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.CompletedBeforePersistence">
            <summary>
            [1] 
            AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} value 
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.ValueResult{AutoCSer.CommandService.Search.ConditionDataUpdateStateEnum} 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.CompletedLoadPersistence">
            <summary>
            [2] 
            AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} value 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.Create">
            <summary>
            [3] 
            int key 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.Delete">
            <summary>
            [4] 
            int key 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.DeleteLoadPersistence">
            <summary>
            [5] 
            int key 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.LoadCreate">
            <summary>
            [6] 
            AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} value 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.LoadCreateBeforePersistence">
            <summary>
            [7] 
            AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} value 
            返回值 bool 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.LoadCreateLoadPersistence">
            <summary>
            [8] 
            AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} value 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.Loaded">
            <summary>
            [9] 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.SnapshotSet">
            <summary>
            [10] 
            AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} value 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.SnapshotSetLoaded">
            <summary>
            [11] 
            bool value 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.Update">
            <summary>
            [12] 
            int key 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchQueryService.ISearchUserNodeMethodEnum.GetPage">
            <summary>
            [13] 获取非索引条件数据用户分页数据
            AutoCSer.TestCase.SearchQueryService.SearchUserQueryParameter queryParameter 用户搜索非索引条件数据查询参数
            int[] userNameWordIdentitys 用户名称查询分词编号集合
            int[] userRemarkWordIdentitys 用户备注查询分词编号集合
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult{int} 
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.GenderEnum">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.GenderEnum.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.GenderEnum.Male">
            <summary>
            男
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.GenderEnum.Female">
            <summary>
            女
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.IUserService">
            <summary>
            用户信息服务接口
            </summary>
            <summary>
            用户信息服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserService.GetAllUserName(AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{System.Int32,System.String}})">
            <summary>
            获取所有用户名称
            </summary>
            <param name="callback">用户名称回调</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserService.GetAllUserRemark(AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{System.Int32,System.String}})">
            <summary>
            获取所有用户备注
            </summary>
            <param name="callback">用户备注回调</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserService.GetAllSearchUser(AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{System.Int32,AutoCSer.TestCase.SearchDataSource.SearchUser}})">
            <summary>
            获取所有用户搜索非索引条件数据
            </summary>
            <param name="callback">用户搜索非索引条件数据回调</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserService.GetName(System.Int32)">
            <summary>
            获取用户名称
            </summary>
            <param name="id">用户标识</param>
            <returns>null 表示不存在</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserService.GetRemark(System.Int32)">
            <summary>
            获取用户备注
            </summary>
            <param name="id">用户标识</param>
            <returns>null 表示不存在</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserService.GetSearchUser(System.Int32)">
            <summary>
            获取用户搜索非索引条件数据
            </summary>
            <param name="id">用户标识</param>
            <returns>Id 为 0 表示不存在</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserService.GetPage(AutoCSer.TestCase.SearchQueryService.UserQueryParameter)">
            <summary>
            获取用户标识分页记录
            </summary>
            <param name="queryParameter">用户搜索查询参数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.SearchUser">
            <summary>
            用户搜索非索引条件数据
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.SearchUser.LoginTime">
            <summary>
            最后一次登录操作时间
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.SearchUser.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.SearchUser.#ctor(AutoCSer.TestCase.SearchDataSource.User)">
            <summary>
            用户搜索非索引条件数据
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.User">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.User.Id">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.User.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.User.LoginTime">
            <summary>
            最后一次登录操作时间
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.User.Name">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.User.Remark">
            <summary>
            用户备注
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNode">
            <summary>
            用户搜索数据更新消息节点的自定义基础服务接口
            </summary>
            <summary>
            用户搜索数据更新消息节点的自定义基础服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNode.CreateSearchUserMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            创建用户搜索数据更新消息节点 ITimeoutMessageNode{OperationData{int}}
            </summary>
            <param name="index">Node index information
            节点索引信息</param>
            <param name="key">Node global keyword
            节点全局关键字</param>
            <param name="nodeInfo">Server-side node information
            服务端节点信息</param>
            <param name="timeoutSeconds">触发任务执行超时秒数</param>
            <returns>Node identifier, there have been a node is returned directly
            节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.OperationData`1">
            <summary>
            操作数据
            </summary>
            <typeparam name="T">关键字数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationData`1.Key">
            <summary>
            关键字数据
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationData`1.DataType">
            <summary>
            操作数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationData`1.OperationType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.OperationDataTypeEnum">
            <summary>
            操作数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationDataTypeEnum.SearchUserNode">
            <summary>
            用户搜索非索引条件数据
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationDataTypeEnum.UserNameNode">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationDataTypeEnum.UserRemarkNode">
            <summary>
            用户备注
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationDataTypeEnum.All">
            <summary>
            所有用户数据
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.OperationTypeEnum">
            <summary>
            Data operation type
            数据操作类型
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationTypeEnum.Update">
            <summary>
            Update the data
            更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationTypeEnum.Insert">
            <summary>
            Add data
            添加数据
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.OperationTypeEnum.Delete">
            <summary>
            Delete data
            删除数据
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.IUserServiceClientController">
            <summary>
            用户信息服务接口 client interface
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserServiceClientController.GetAllSearchUser">
            <summary>
            获取所有用户搜索非索引条件数据
            </summary>
            <returns>用户搜索非索引条件数据回调</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserServiceClientController.GetAllUserName">
            <summary>
            获取所有用户名称
            </summary>
            <returns>用户名称回调</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserServiceClientController.GetAllUserRemark">
            <summary>
            获取所有用户备注
            </summary>
            <returns>用户备注回调</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserServiceClientController.GetName(System.Int32)">
            <summary>
            获取用户名称
            </summary>
            <param name="id">用户标识</param>
            <returns>null 表示不存在</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserServiceClientController.GetPage(AutoCSer.TestCase.SearchQueryService.UserQueryParameter)">
            <summary>
            获取用户标识分页记录
            </summary>
            <param name="queryParameter">用户搜索查询参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserServiceClientController.GetRemark(System.Int32)">
            <summary>
            获取用户备注
            </summary>
            <param name="id">用户标识</param>
            <returns>null 表示不存在</returns>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.IUserServiceClientController.GetSearchUser(System.Int32)">
            <summary>
            获取用户搜索非索引条件数据
            </summary>
            <param name="id">用户标识</param>
            <returns>Id 为 0 表示不存在</returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.IUserServiceMethodEnum">
            <summary>
            用户信息服务接口 (The method sequence number maps the enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.IUserServiceMethodEnum.GetAllSearchUser">
            <summary>
            [0] 获取所有用户搜索非索引条件数据
            AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser}} callback 用户搜索非索引条件数据回调
            返回值 AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.IUserServiceMethodEnum.GetAllUserName">
            <summary>
            [1] 获取所有用户名称
            AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{int,string}} callback 用户名称回调
            返回值 AutoCSer.BinarySerializeKeyValue{int,string} 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.IUserServiceMethodEnum.GetAllUserRemark">
            <summary>
            [2] 获取所有用户备注
            AutoCSer.Net.CommandServerKeepCallbackCount{AutoCSer.BinarySerializeKeyValue{int,string}} callback 用户备注回调
            返回值 AutoCSer.BinarySerializeKeyValue{int,string} 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.IUserServiceMethodEnum.GetName">
            <summary>
            [3] 获取用户名称
            int id 用户标识
            返回值 string null 表示不存在
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.IUserServiceMethodEnum.GetPage">
            <summary>
            [4] 获取用户标识分页记录
            AutoCSer.TestCase.SearchQueryService.UserQueryParameter queryParameter 用户搜索查询参数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.PageResult{AutoCSer.TestCase.SearchDataSource.User} 
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.IUserServiceMethodEnum.GetRemark">
            <summary>
            [5] 获取用户备注
            int id 用户标识
            返回值 string null 表示不存在
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.IUserServiceMethodEnum.GetSearchUser">
            <summary>
            [6] 获取用户搜索非索引条件数据
            int id 用户标识
            返回值 AutoCSer.BinarySerializeKeyValue{int,AutoCSer.TestCase.SearchDataSource.SearchUser} Id 为 0 表示不存在
            </summary>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeLocalClientNode">
            <summary>
            用户搜索数据更新消息节点的自定义基础服务接口 local client node interface
            </summary>
        </member>
        <member name="M:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeLocalClientNode.CreateSearchUserMessageNode(AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex,System.String,AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo,System.Int32)">
            <summary>
            创建用户搜索数据更新消息节点 ITimeoutMessageNode{OperationData{int}}
            </summary>
            <param name="index">Node index information 
                       节点索引信息</param>
            <param name="key">Node global keyword 
                       节点全局关键字</param>
            <param name="nodeInfo">Server-side node information 
                       服务端节点信息</param>
            <param name="timeoutSeconds">触发任务执行超时秒数</param>
            <returns>Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回</returns>
        </member>
        <member name="T:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum">
            <summary>
            用户搜索数据更新消息节点的自定义基础服务接口 (Node method sequence number mapping enumeration type)
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateArrayNode">
            <summary>
            [0] Create a array node IArrayNode{T} 
                       创建数组节点 IArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int length Array length
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateBitmapNode">
            <summary>
            [1] Create a bitmap node IBitmapNode 
                       创建位图节点 IBitmapNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            uint capacity The number of binary bits 
                       二进制位数量
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateByteArrayDictionaryNode">
            <summary>
            [2] Create a dictionary node IByteArrayDictionaryNode{KT} 
                       创建字典节点 IByteArrayDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateByteArrayFragmentDictionaryNode">
            <summary>
            [3] Create a dictionary node IByteArrayFragmentDictionaryNode{KT} 
                       创建字典节点 IByteArrayFragmentDictionaryNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateByteArrayQueueNode">
            <summary>
            [4] Create a queue node IByteArrayQueueNode (First in, first Out) 
                       创建队列节点（先进先出） IByteArrayQueueNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateByteArrayStackNode">
            <summary>
            [5] Create a stack node IByteArrayStackNode (Last in, first out) 
                       创建栈节点（后进先出） IByteArrayStackNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateDictionaryNode">
            <summary>
            [6] Create a dictionary node IDictionaryNode{KT,VT} 
                       创建字典节点 IDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateDistributedLockNode">
            <summary>
            [7] Create distributed lock nodes IDistributedLockNode{KT} 
                       创建分布式锁节点 IDistributedLockNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateFragmentDictionaryNode">
            <summary>
            [8] Create a dictionary node IFragmentDictionaryNode{KT,VT} 
                       创建字典节点 IFragmentDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateFragmentHashSetNode">
            <summary>
            [9] Create a 256 base fragment hash table node IFragmentHashSetNode{KT} 
                       创建 256 基分片哈希表节点 IFragmentHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateHashBytesDictionaryNode">
            <summary>
            [10] Create a dictionary node IHashBytesDictionaryNode 
                       创建字典节点 IHashBytesDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateHashBytesFragmentDictionaryNode">
            <summary>
            [11] Create a dictionary node IHashBytesFragmentDictionaryNode 
                       创建字典节点 IHashBytesFragmentDictionaryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateHashSetNode">
            <summary>
            [12] Create a hash table node IHashSetNode{KT} 
                       创建哈希表节点 IHashSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            AutoCSer.ReusableDictionaryGroupTypeEnum groupType Reusable dictionary recombination operation type 
                       可重用字典重组操作类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateIdentityGeneratorNode">
            <summary>
            [13] Create a 64-bit auto-increment identity node IIdentityGeneratorNode 
                       创建 64 位自增ID 节点 IIdentityGeneratorNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            long identity Initial Allocation identity 
                       起始分配 ID
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateLeftArrayNode">
            <summary>
            [14] Create a array node ILeftArrayNode{T} 
                       创建数组节点 ILeftArrayNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateMessageNode">
            <summary>
            [15] Create a message processing node IMessageNode{T} 
                       创建消息处理节点 IMessageNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType messageType Message data type 
                       消息数据类型
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateQueueNode">
            <summary>
            [16] Create a queue node IQueueNode{T} (First in, first Out) 
                       创建队列节点（先进先出） IQueueNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateSearchTreeDictionaryNode">
            <summary>
            [17] Create a binary search tree node ISearchTreeDictionaryNode{KT,VT} 
                       创建二叉搜索树节点 ISearchTreeDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateSearchTreeSetNode">
            <summary>
            [18] Create a binary search tree collection node ISearchTreeSetNode{KT} 
                       创建二叉搜索树集合节点 ISearchTreeSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateServerByteArrayMessageNode">
            <summary>
            [19] Create a message processing node IMessageNode{ServerByteArrayMessage} 
                       创建消息处理节点 IMessageNode{ServerByteArrayMessage}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int arraySize The size of the message array being processed 
                       正在处理的消息数组大小
            int timeoutSeconds The number of seconds of message processing timeout 
                       消息处理超时秒数
            int checkTimeoutSeconds Check the interval in seconds for message timeouts 
                       消息超时检查间隔秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateSortedDictionaryNode">
            <summary>
            [20] Create a sorting dictionary node ISortedDictionaryNode{KT,VT} 
                       创建排序字典节点 ISortedDictionaryNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateSortedListNode">
            <summary>
            [21] Create a sorting list node ISortedListNode{KT,VT} 
                       创建排序列表节点 ISortedListNode{KT,VT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            AutoCSer.Reflection.RemoteType valueType Data type
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateSortedSetNode">
            <summary>
            [22] Create sorted collection node ISortedSetNode{KT} 
                       创建排序集合节点 ISortedSetNode{KT}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateStackNode">
            <summary>
            [23] Create a stack node IStackNode{T} (Last in, first out) 
                       创建栈节点（后进先出） IStackNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType keyType Keyword type 
                       关键字类型
            int capacity Container initialization size 
                       容器初始化大小
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.RemoveNode">
            <summary>
            [24] Delete the node 
                       删除节点
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateServerRegistryNode">
            <summary>
            [25] Create a server registration node IServerRegistryNode 
                       创建服务注册节点 IServerRegistryNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int loadTimeoutSeconds Cold start session timeout seconds 
                       冷启动会话超时秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateProcessGuardNode">
            <summary>
            [26] Create a service process daemon node IProcessGuardNode 
                       创建服务进程守护节点 IProcessGuardNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateManyHashBitMapClientFilterNode">
            <summary>
            [27] Creat a multi-hash bitmap client synchronization filter node IManyHashBitMapClientFilterNode 
                       创建多哈希位图客户端同步过滤节点 IManyHashBitMapClientFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateManyHashBitMapFilterNode">
            <summary>
            [28] Creat a multi-hash bitmap filter node IManyHashBitMapFilterNode 
                       创建多哈希位图过滤节点 IManyHashBitMapFilterNode
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int size Bitmap size (number of bits) 
                       位图大小（位数量）
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.RemoveNodeByKey">
            <summary>
            [29] Delete the node 
                       删除节点
            string key Node global keyword 
                       节点全局关键字
            返回值 bool Returning false indicates that the node was not found 
                       返回 false 表示没有找到节点
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateOnlyPersistenceNode">
            <summary>
            [30] Create an archive node only IOnlyPersistenceNode{T} 
                       创建仅存档节点 IOnlyPersistenceNode{T}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            AutoCSer.Reflection.RemoteType valueType Archive data type 
                       存档数据类型
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
        <member name="F:AutoCSer.TestCase.SearchDataSource.ITimeoutMessageServiceNodeMethodEnum.CreateSearchUserMessageNode">
            <summary>
            [256] 创建用户搜索数据更新消息节点 ITimeoutMessageNode{OperationData{int}}
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex index Node index information 
                       节点索引信息
            string key Node global keyword 
                       节点全局关键字
            AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeInfo nodeInfo Server-side node information 
                       服务端节点信息
            int timeoutSeconds 触发任务执行超时秒数
            返回值 AutoCSer.CommandService.StreamPersistenceMemoryDatabase.NodeIndex Node identifier, there have been a node is returned directly 
                       节点标识，已经存在节点则直接返回
            </summary>
        </member>
    </members>
</doc>
